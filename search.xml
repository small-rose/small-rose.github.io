<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Centos-jdk安装配置环境变量</title>
    <url>/posts/9064540a.html</url>
    <content><![CDATA[<h2 id="Centos上jdk配置"><a href="#Centos上jdk配置" class="headerlink" title="Centos上jdk配置"></a>Centos上jdk配置</h2><h2 id="1-检查环境"><a href="#1-检查环境" class="headerlink" title="1.检查环境"></a>1.检查环境</h2><p>查看java版本</p>
<pre class=" language-bash"><code class="language-bash">java -version</code></pre>
<p> 检查是否已经安装jdk，通常默认自认openjdk</p>
<pre class=" language-bash"><code class="language-bash">java-1.7.0-openjdk-1.7.0.111-2.6.7.8.el7.x86_64
java-1.8.0-openjdk-1.8.0.102-4.b14.el7.x86_64
java-1.8.0-openjdk-headless-1.8.0.102-4.b14.el7.x86_64
java-1.7.0-openjdk-headless-1.7.0.111-2.6.7.8.el7.x86_64</code></pre>
<p> 如果要卸载,需要root用户权限才可以执行：</p>
<pre class=" language-bash"><code class="language-bash">rpm -e --nodeps java-1.7.0-openjdk-1.7.0.111-2.6.7.8.el7.x86_64
rpm -e --nodeps java-1.8.0-openjdk-1.8.0.102-4.b14.el7.x86_64
rpm -e --nodeps java-1.8.0-openjdk-headless-1.8.0.102-4.b14.el7.x86_64
rpm -e --nodeps java-1.7.0-openjdk-headless-1.7.0.111-2.6.7.8.el7.x86_64</code></pre>
<p>再次查看java版本，如提示未找到命令则删除成功。</p>
<h2 id="2-上传jdk安装文件"><a href="#2-上传jdk安装文件" class="headerlink" title="2.上传jdk安装文件"></a>2.上传jdk安装文件</h2><h4 id="上传方法"><a href="#上传方法" class="headerlink" title="上传方法"></a>上传方法</h4><p>（1）可以联网直接下载即可<br>（2）ssh可以安装用rz/sz上传下载<br>（3）ftp自行安装ftp服务，关于安装教程可到：</p>
<p>上传jdk-7u80-linux-x64.tar.gz到你的目录后，<br>解压后移动到 <code>/usr/jdk1.7.0_80</code></p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">tar</span> -zxvf jdk-7u80-linux-x64.tar.gz
<span class="token function">cp</span>  jdk-7u80 /usr/jdk1.7.0_80</code></pre>
<p>【关于解压命令大全可以移步：】</p>
<h2 id="2-配置关变量"><a href="#2-配置关变量" class="headerlink" title="2.配置关变量"></a>2.配置关变量</h2><p>/etc/profile全局变量配置</p>
<pre class=" language-bash"><code class="language-bash">vim /etc/profile</code></pre>
<p>.bash_profile为root用户的环境变量。</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /root/
<span class="token function">ls</span> -a
<span class="token function">vi</span> .bash_profile</code></pre>
<p>二者均可，建议修改用户环境变量。<br>在文件末尾增加java环境变量即可,听说CentOS6上面的是JAVAHOME，CentOS7是{JAVA_HOME}</p>
<pre><code># .bash_profile

# Get the aliases and functions
if [ -f ~/.bashrc ]; then
        . ~/.bashrc
fi

# User specific environment and startup programs

export JAVA_HOME=/usr/jdk1.7.0_80
export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar
PATH=$PATH:$HOME/bin:$JAVA_HOME/bin

export PATH</code></pre><h2 id="3-让刚刚设置的环境变量生效"><a href="#3-让刚刚设置的环境变量生效" class="headerlink" title="3.让刚刚设置的环境变量生效"></a>3.让刚刚设置的环境变量生效</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">source</span> /etc/profile</code></pre>
<p>或者</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">source</span> .bash_profile</code></pre>
<h2 id="4-再次验证是否配置成功"><a href="#4-再次验证是否配置成功" class="headerlink" title="4.再次验证是否配置成功"></a>4.再次验证是否配置成功</h2><pre class=" language-bash"><code class="language-bash">java -version</code></pre>
<p>出现java版本号代表安装成功。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>centos</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos相关配置</title>
    <url>/posts/42e4f857.html</url>
    <content><![CDATA[<h2 id="Centos各种配置"><a href="#Centos各种配置" class="headerlink" title="Centos各种配置"></a>Centos各种配置</h2><h2 id="1-Centos网络配置"><a href="#1-Centos网络配置" class="headerlink" title="1.Centos网络配置"></a>1.Centos网络配置</h2><h4 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h4><p>有图形界面可以直接界面操作，没有界面可以参考一下：<br>（1）修改配置</p>
<pre class=" language-bash"><code class="language-bash">$ <span class="token function">cd</span> /etc/sysconfig/network-scripts/</code></pre>
<p>修改对应网卡的配置，可以ifconfig看看用的网卡名。<br>修改相关配置：</p>
<pre><code>TYPE=Ethernet
PROXY_METHOD=none
BROWSER_ONLY=no
BOOTPROTO=none
DEFROUTE=yes
IPV4_FAILURE_FATAL=no
IPV6INIT=yes
IPV6_AUTOCONF=yes
IPV6_DEFROUTE=yes
IPV6_FAILURE_FATAL=no
IPV6_ADDR_GEN_MODE=stable-privacy
NAME=ens192
UUID=64e7784d-8183-4db5-af4c-120203391708
DEVICE=ens192
ONBOOT=yes
IPADDR=192.168.66.80
PREFIX=24
GATEWAY=192.168.66.254
IPV6_PRIVACY=no</code></pre><p>（2）重启网络服务</p>
<pre class=" language-bash"><code class="language-bash">$ <span class="token function">service</span> network restart</code></pre>
<h2 id="2-Centos时间配置"><a href="#2-Centos时间配置" class="headerlink" title="2.Centos时间配置"></a>2.Centos时间配置</h2><p>设置时区同样,在 CentOS 7 中, 引入了一个叫 timedatectl 的设置设置程序.<br>用法很简单:<code>timedatectl # 查看系统时间方面的各种状态</code></p>
<pre><code>      Local time: 四 2014-12-25 10:52:10 CST
  Universal time: 四 2014-12-25 02:52:10 UTC
        RTC time: 四 2014-12-25 02:52:10
        Timezone: Asia/Shanghai (CST, +0800)
     NTP enabled: yes
NTP synchronized: yes
 RTC in local TZ: no
      DST active: n/a</code></pre><h4 id="列出所有时区"><a href="#列出所有时区" class="headerlink" title="列出所有时区"></a>列出所有时区</h4><pre class=" language-bash"><code class="language-bash">$ timedatectl list-timezones </code></pre>
<h4 id="将硬件时钟调整为与本地时钟一致-0-为设置为-UTC-时间"><a href="#将硬件时钟调整为与本地时钟一致-0-为设置为-UTC-时间" class="headerlink" title="将硬件时钟调整为与本地时钟一致, 0 为设置为 UTC 时间"></a>将硬件时钟调整为与本地时钟一致, 0 为设置为 UTC 时间</h4><pre class=" language-bash"><code class="language-bash">$ timedatectl set-local-rtc 1 </code></pre>
<h4 id="设置系统时区为上海"><a href="#设置系统时区为上海" class="headerlink" title="设置系统时区为上海"></a>设置系统时区为上海</h4><pre class=" language-bash"><code class="language-bash">$ timedatectl set-timezone Asia/Shanghai </code></pre>
<h4 id="直接修改时间时区"><a href="#直接修改时间时区" class="headerlink" title="直接修改时间时区"></a>直接修改时间时区</h4><p>其实不考虑各个发行版的差异化, 从更底层出发的话, 直接修改时间时区:</p>
<pre class=" language-bash"><code class="language-bash">$ <span class="token function">cp</span> /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</code></pre>
<h2 id="3-DNS解析问题"><a href="#3-DNS解析问题" class="headerlink" title="3.DNS解析问题"></a>3.DNS解析问题</h2><p>ping IP可以 ping 域名不通的时候</p>
<pre class=" language-bash"><code class="language-bash">$ vim /etc/resolve.conf</code></pre>
<p>增加：</p>
<pre><code>nameserver 8.8.8.8
nameserver 8.8.4.4</code></pre><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Centos</category>
      </categories>
      <tags>
        <tag>centos</tag>
      </tags>
  </entry>
  <entry>
    <title>工具类常用的网站</title>
    <url>/posts/2ae4d0b0.html</url>
    <content><![CDATA[<h4 id="API在线"><a href="#API在线" class="headerlink" title="API在线"></a>API在线</h4><table>
<thead>
<tr>
<th>网站</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>常用API文档索引</td>
<td><a href="https://tool.oschina.net/apidocs" target="_blank" rel="noopener">https://tool.oschina.net/apidocs</a></td>
</tr>
<tr>
<td>java8 API</td>
<td><a href="https://www.matools.com/api/java8" target="_blank" rel="noopener">https://www.matools.com/api/java8</a></td>
</tr>
<tr>
<td>Mybatis java API</td>
<td>h<a href="https://mybatis.org/mybatis-3/zh/java-api.html" target="_blank" rel="noopener">https://mybatis.org/mybatis-3/zh/java-api.html</a></td>
</tr>
<tr>
<td>dubbo API</td>
<td><a href="http://dubbo.apache.org/zh-cn/docs/user/configuration/api.html" target="_blank" rel="noopener">http://dubbo.apache.org/zh-cn/docs/user/configuration/api.html</a></td>
</tr>
</tbody></table>
<h4 id="开源网站"><a href="#开源网站" class="headerlink" title="开源网站"></a>开源网站</h4><table>
<thead>
<tr>
<th>网站</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>github网站</td>
<td><a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a></td>
</tr>
<tr>
<td>码云</td>
<td><a href="https://gitee.com/" target="_blank" rel="noopener">https://gitee.com/</a></td>
</tr>
<tr>
<td>一起开源官网</td>
<td><a href="http://www.17ky.net/" target="_blank" rel="noopener">http://www.17ky.net/</a></td>
</tr>
<tr>
<td>Open JDK</td>
<td><a href="http://openjdk.java.net/" target="_blank" rel="noopener">http://openjdk.java.net/</a></td>
</tr>
<tr>
<td>Open JDK  HotSpot</td>
<td><a href="https://wiki.openjdk.java.net/display/HotSpot/Main" target="_blank" rel="noopener">https://wiki.openjdk.java.net/display/HotSpot/Main</a></td>
</tr>
</tbody></table>
<h4 id="开发相关"><a href="#开发相关" class="headerlink" title="开发相关"></a>开发相关</h4><table>
<thead>
<tr>
<th>网站</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>ORICLE官网</td>
<td><a href="https://www.oracle.com/downloads/" target="_blank" rel="noopener">https://www.oracle.com/downloads/</a></td>
</tr>
<tr>
<td>JAVA官网</td>
<td><a href="https://www.oracle.com/java/technologies/javase-downloads.html" target="_blank" rel="noopener">https://www.oracle.com/java/technologies/javase-downloads.html</a></td>
</tr>
<tr>
<td>ECLIPSE官网</td>
<td><a href="https://www.eclipse.org/downloads/" target="_blank" rel="noopener">https://www.eclipse.org/downloads/</a></td>
</tr>
<tr>
<td>IntelliJ IDEA</td>
<td><a href="http://www.jetbrains.com/" target="_blank" rel="noopener">http://www.jetbrains.com/</a></td>
</tr>
<tr>
<td>springtoolsuite</td>
<td><a href="https://spring.io/tools" target="_blank" rel="noopener">https://spring.io/tools</a></td>
</tr>
<tr>
<td>Python官网</td>
<td><a href="https://www.python.org/" target="_blank" rel="noopener">https://www.python.org/</a></td>
</tr>
<tr>
<td>Maven官网</td>
<td><a href="https://maven.apache.org/" target="_blank" rel="noopener">https://maven.apache.org/</a></td>
</tr>
<tr>
<td>Maven仓库</td>
<td><a href="https://mvnrepository.com/" target="_blank" rel="noopener">https://mvnrepository.com/</a></td>
</tr>
<tr>
<td>Nexus官网</td>
<td><a href="https://www.nexusmods.com/" target="_blank" rel="noopener">https://www.nexusmods.com/</a></td>
</tr>
<tr>
<td>Ant官网</td>
<td><a href="https://ant.apache.org/" target="_blank" rel="noopener">https://ant.apache.org/</a></td>
</tr>
<tr>
<td>SVN官网</td>
<td><a href="https://tortoisesvn.net/" target="_blank" rel="noopener">https://tortoisesvn.net/</a></td>
</tr>
<tr>
<td>Git官网</td>
<td><a href="https://git-scm.com/" target="_blank" rel="noopener">https://git-scm.com/</a></td>
</tr>
<tr>
<td>Spring官网</td>
<td><a href="https://spring.io/" target="_blank" rel="noopener">https://spring.io/</a></td>
</tr>
<tr>
<td>mybatis</td>
<td><a href="https://mybatis.org/mybatis-3/" target="_blank" rel="noopener">https://mybatis.org/mybatis-3/</a></td>
</tr>
<tr>
<td>#### 服务相关</td>
<td></td>
</tr>
<tr>
<td>网站</td>
<td>地址</td>
</tr>
<tr>
<td>—————</td>
<td>——————————————–</td>
</tr>
<tr>
<td>APACHE官网</td>
<td><a href="http://tomcat.apache.org/" target="_blank" rel="noopener">http://tomcat.apache.org/</a></td>
</tr>
<tr>
<td>Tomcat官网</td>
<td><a href="http://tomcat.apache.org/" target="_blank" rel="noopener">http://tomcat.apache.org/</a></td>
</tr>
<tr>
<td>Nginx官网</td>
<td><a href="http://nginx.org/" target="_blank" rel="noopener">http://nginx.org/</a></td>
</tr>
<tr>
<td>Dubbo官网</td>
<td><a href="http://dubbo.apache.org/zh-cn/" target="_blank" rel="noopener">http://dubbo.apache.org/zh-cn/</a></td>
</tr>
<tr>
<td>Zookeeper</td>
<td><a href="https://zookeeper.apache.org/" target="_blank" rel="noopener">https://zookeeper.apache.org/</a></td>
</tr>
<tr>
<td>netty</td>
<td><a href="https://netty.io/" target="_blank" rel="noopener">https://netty.io/</a></td>
</tr>
<tr>
<td>jetty</td>
<td><a href="http://www.eclipse.org/jetty/" target="_blank" rel="noopener">http://www.eclipse.org/jetty/</a></td>
</tr>
</tbody></table>
<h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><table>
<thead>
<tr>
<th>网站</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>Linux</td>
<td><a href="https://www.linux.org/" target="_blank" rel="noopener">https://www.linux.org/</a></td>
</tr>
<tr>
<td>Linux开源社区</td>
<td><a href="https://linux.cn/" target="_blank" rel="noopener">https://linux.cn/</a></td>
</tr>
<tr>
<td>Linux公社</td>
<td><a href="https://www.linuxidc.com/" target="_blank" rel="noopener">https://www.linuxidc.com/</a></td>
</tr>
</tbody></table>
<h4 id="数据库相关"><a href="#数据库相关" class="headerlink" title="数据库相关"></a>数据库相关</h4><table>
<thead>
<tr>
<th>网站</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>Mysql官网</td>
<td><a href="https://www.mysql.com/" target="_blank" rel="noopener">https://www.mysql.com/</a></td>
</tr>
<tr>
<td>SQL SERVER官网</td>
<td><a href="https://www.microsoft.com/zh-cn/sql-server/sql-server-downloads" target="_blank" rel="noopener">https://www.microsoft.com/zh-cn/sql-server/sql-server-downloads</a></td>
</tr>
<tr>
<td>ORICLE官网</td>
<td><a href="https://www.oracle.com/downloads/" target="_blank" rel="noopener">https://www.oracle.com/downloads/</a></td>
</tr>
<tr>
<td>DB2官网</td>
<td><a href="https://www.ibm.com/analytics/cn/zh/technology/db2/" target="_blank" rel="noopener">https://www.ibm.com/analytics/cn/zh/technology/db2/</a></td>
</tr>
<tr>
<td>TOAD官网</td>
<td><a href="https://www.toadworld.com/" target="_blank" rel="noopener">https://www.toadworld.com/</a></td>
</tr>
<tr>
<td>Navicat官网</td>
<td><a href="https://www.navicat.com.cn/" target="_blank" rel="noopener">https://www.navicat.com.cn/</a></td>
</tr>
<tr>
<td>DataGrip官网</td>
<td><a href="https://www.jetbrains.com/zh/datagrip/specials/datagrip/datagrip.html" target="_blank" rel="noopener">https://www.jetbrains.com/zh/datagrip/specials/datagrip/datagrip.html</a></td>
</tr>
<tr>
<td>Redis官网</td>
<td><a href="https://redis.io/" target="_blank" rel="noopener">https://redis.io/</a></td>
</tr>
<tr>
<td>Redis中文网</td>
<td><a href="http://www.redis.cn/" target="_blank" rel="noopener">http://www.redis.cn/</a></td>
</tr>
<tr>
<td>MongoDB官网</td>
<td><a href="https://www.mongodb.com/Nginx" target="_blank" rel="noopener">https://www.mongodb.com/Nginx</a>  <a href="http://nginx.org/" target="_blank" rel="noopener">http://nginx.org/</a></td>
</tr>
<tr>
<td>UML工具列表</td>
<td><a href="http://www.umlchina.com/Tools/Newindex1.htm" target="_blank" rel="noopener">http://www.umlchina.com/Tools/Newindex1.htm</a></td>
</tr>
</tbody></table>
<h4 id="前端相关"><a href="#前端相关" class="headerlink" title="前端相关"></a>前端相关</h4><table>
<thead>
<tr>
<th>网站</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>w3school官网</td>
<td><a href="http://www.w3school.com.cn/" target="_blank" rel="noopener">http://www.w3school.com.cn/</a></td>
</tr>
<tr>
<td>jQuery官网</td>
<td><a href="https://jquery.com/" target="_blank" rel="noopener">https://jquery.com/</a></td>
</tr>
<tr>
<td>jQuery api   非官网:</td>
<td><a href="http://jquery.cuishifeng.cn/" target="_blank" rel="noopener">http://jquery.cuishifeng.cn/</a></td>
</tr>
<tr>
<td>easyui官网</td>
<td><a href="http://www.jeasyui.net/" target="_blank" rel="noopener">http://www.jeasyui.net/</a></td>
</tr>
<tr>
<td>Bootstrap官网</td>
<td><a href="https://www.bootcss.com/" target="_blank" rel="noopener">https://www.bootcss.com/</a></td>
</tr>
<tr>
<td>Amaze ~ 妹子 UI官网:</td>
<td><a href="http://amazeui.org/" target="_blank" rel="noopener">http://amazeui.org/</a></td>
</tr>
<tr>
<td>React</td>
<td><a href="https://react.docschina.org/" target="_blank" rel="noopener">https://react.docschina.org/</a></td>
</tr>
<tr>
<td>NOWA</td>
<td><a href="https://nowa-webpack.github.io/" target="_blank" rel="noopener">https://nowa-webpack.github.io/</a></td>
</tr>
<tr>
<td>Vue官网:</td>
<td><a href="https://cn.vuejs.org/" target="_blank" rel="noopener">https://cn.vuejs.org/</a></td>
</tr>
<tr>
<td>AngularJS中文网</td>
<td><a href="https://www.angularjs.net.cn/" target="_blank" rel="noopener">https://www.angularjs.net.cn/</a></td>
</tr>
<tr>
<td>开源图标库</td>
<td><a href="https://remixicon.com/" target="_blank" rel="noopener">https://remixicon.com/</a></td>
</tr>
<tr>
<td>开源图标库预览</td>
<td><a href="https://lvyueyang.gitee.io/remixicon/" target="_blank" rel="noopener">https://lvyueyang.gitee.io/remixicon/</a></td>
</tr>
</tbody></table>
<h4 id="远程或传输"><a href="#远程或传输" class="headerlink" title="远程或传输"></a>远程或传输</h4><table>
<thead>
<tr>
<th>网站</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>SecureCRT官网</td>
<td><a href="https://www.vandyke.com/products/securecrt/" target="_blank" rel="noopener">https://www.vandyke.com/products/securecrt/</a></td>
</tr>
<tr>
<td>XSHELL官网</td>
<td><a href="https://xshell.en.softonic.com/" target="_blank" rel="noopener">https://xshell.en.softonic.com/</a></td>
</tr>
<tr>
<td>WinSCP官网</td>
<td><a href="https://winscp.net/eng/docs/lang:chs" target="_blank" rel="noopener">https://winscp.net/eng/docs/lang:chs</a></td>
</tr>
<tr>
<td>File-Zilla官网</td>
<td><a href="https://filezilla-project.org/" target="_blank" rel="noopener">https://filezilla-project.org/</a></td>
</tr>
<tr>
<td>File-Zilla中文网</td>
<td><a href="https://www.filezilla.cn/" target="_blank" rel="noopener">https://www.filezilla.cn/</a></td>
</tr>
<tr>
<td>flashfxp官网</td>
<td><a href="https://www.flashfxp.com/" target="_blank" rel="noopener">https://www.flashfxp.com/</a></td>
</tr>
</tbody></table>
<h4 id="小工具"><a href="#小工具" class="headerlink" title="小工具"></a>小工具</h4><table>
<thead>
<tr>
<th>网站</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>7z</td>
<td><a href="https://www.7-zip.org/" target="_blank" rel="noopener">https://www.7-zip.org/</a></td>
</tr>
<tr>
<td>WINRAR官网</td>
<td><a href="http://www.winrar.com.cn/" target="_blank" rel="noopener">http://www.winrar.com.cn/</a></td>
</tr>
<tr>
<td>在线工具箱</td>
<td><a href="https://tool.lu/" target="_blank" rel="noopener">https://tool.lu/</a></td>
</tr>
<tr>
<td>DeskTopShare</td>
<td><a href="http://www.yinrg.net/" target="_blank" rel="noopener">http://www.yinrg.net/</a></td>
</tr>
</tbody></table>
<h4 id="图片相关"><a href="#图片相关" class="headerlink" title="图片相关"></a>图片相关</h4><table>
<thead>
<tr>
<th>网站</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>图片压缩TinyPNG</td>
<td><a href="https://tinypng.com/" target="_blank" rel="noopener">https://tinypng.com/</a></td>
</tr>
<tr>
<td>图片去背景</td>
<td><a href="http://www.aigei.com/bgremover/" target="_blank" rel="noopener">http://www.aigei.com/bgremover/</a></td>
</tr>
<tr>
<td>出现一张随机图片</td>
<td><a href="https://api.uomg.com/api/image.lofter?format=images" target="_blank" rel="noopener">https://api.uomg.com/api/image.lofter?format=images</a></td>
</tr>
</tbody></table>
<h4 id="图床工具："><a href="#图床工具：" class="headerlink" title="图床工具："></a>图床工具：</h4><table>
<thead>
<tr>
<th>网站</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>PicGo</td>
<td><a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">https://github.com/Molunerfinn/PicGo</a></td>
</tr>
<tr>
<td>MPic-图床神器</td>
<td><a href="http://mpic.lzhaofu.cn" target="_blank" rel="noopener">http://mpic.lzhaofu.cn</a></td>
</tr>
<tr>
<td>PicPlus -手机图床</td>
<td><a href="https://www.coolapk.com/apk/name.gudong.pic" target="_blank" rel="noopener">https://www.coolapk.com/apk/name.gudong.pic</a></td>
</tr>
</tbody></table>
<h4 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h4><table>
<thead>
<tr>
<th>网站</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>open jdk相关</td>
<td><a href="https://www.iteye.com/blog/user/rednaxelafx" target="_blank" rel="noopener">https://www.iteye.com/blog/user/rednaxelafx</a></td>
</tr>
</tbody></table>
<h4 id="XML相关"><a href="#XML相关" class="headerlink" title="XML相关"></a>XML相关</h4><table>
<thead>
<tr>
<th>网站</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>Castor实现XML与Java的互转</td>
<td><a href="http://www.castor.org/" target="_blank" rel="noopener">http://www.castor.org/</a></td>
</tr>
</tbody></table>
<!--  JDK6JAXB2来实现对象与XML之间的映射  -->

<h4 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h4><table>
<thead>
<tr>
<th>网站</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>quartz</td>
<td><a href="https://www.w3cschool.cn/quartz_doc/" target="_blank" rel="noopener">https://www.w3cschool.cn/quartz_doc/</a></td>
</tr>
<tr>
<td>viewerjs，PDF/office在线预览</td>
<td><a href="https://fengyuanchen.github.io/viewerjs/" target="_blank" rel="noopener">https://fengyuanchen.github.io/viewerjs/</a></td>
</tr>
</tbody></table>
<h4 id="markdown"><a href="#markdown" class="headerlink" title="markdown"></a>markdown</h4><table>
<thead>
<tr>
<th>网站</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>mkdown在线编辑器</td>
<td><a href="http://www.mdeditor.com/" target="_blank" rel="noopener">http://www.mdeditor.com/</a></td>
</tr>
<tr>
<td>mkdown在线编辑器</td>
<td><a href="http://mahua.jser.me/" target="_blank" rel="noopener">http://mahua.jser.me/</a></td>
</tr>
<tr>
<td>mkdown在线编辑器</td>
<td><a href="https://tool.lu/markdown/" target="_blank" rel="noopener">https://tool.lu/markdown/</a></td>
</tr>
<tr>
<td>mkdown在线编辑器</td>
<td><a href="https://dillinger.io/" target="_blank" rel="noopener">https://dillinger.io/</a></td>
</tr>
</tbody></table>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>收藏资源</category>
        <category>工具网站</category>
      </categories>
      <tags>
        <tag>网站列表</tag>
      </tags>
  </entry>
  <entry>
    <title>DB2-常见ERRORCODE</title>
    <url>/posts/9f154069.html</url>
    <content><![CDATA[<h2 id="DB2-常见ERRORCODE"><a href="#DB2-常见ERRORCODE" class="headerlink" title="DB2-常见ERRORCODE"></a>DB2-常见ERRORCODE</h2><p>对于常见的错误码，熟悉之后就可以快速定位问题，代码检查。</p>
<h4 id="1、sqlcode-407"><a href="#1、sqlcode-407" class="headerlink" title="1、sqlcode -407"></a>1、sqlcode -407</h4><p>不能把NULL值插入到定义为NOT NULL的列</p>
<pre class=" language-txt"><code class="language-txt">DB2 SQL Error: SQLCODE=-407, SQLSTATE=23502, SQLERRMC=TBSPACEID=2,
 TABLEID=19, COLNO=5, DRIVER=4.15.134</code></pre>
<p> 可以执行SQL，就可以快速定位哪个列出了问题。</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> C<span class="token punctuation">.</span>TABSCHEMA<span class="token punctuation">,</span> C<span class="token punctuation">.</span>TABNAME<span class="token punctuation">,</span> C<span class="token punctuation">.</span>COLNAME <span class="token keyword">FROM</span> SYSCAT<span class="token punctuation">.</span><span class="token keyword">TABLES</span> <span class="token keyword">AS</span> T<span class="token punctuation">,</span> SYSCAT<span class="token punctuation">.</span><span class="token keyword">COLUMNS</span> <span class="token keyword">AS</span> C <span class="token keyword">WHERE</span> T<span class="token punctuation">.</span>TBSPACEID <span class="token operator">=</span> <span class="token number">2</span>  <span class="token operator">AND</span> T<span class="token punctuation">.</span>TABLEID <span class="token operator">=</span><span class="token number">19</span> <span class="token operator">AND</span> C<span class="token punctuation">.</span>COLNO <span class="token operator">=</span> <span class="token number">5</span>  <span class="token operator">AND</span> C<span class="token punctuation">.</span>TABSCHEMA <span class="token operator">=</span> T<span class="token punctuation">.</span>TABSCHEMA <span class="token operator">AND</span> C<span class="token punctuation">.</span>TABNAME <span class="token operator">=</span> T<span class="token punctuation">.</span>TABNAME</code></pre>
<p>2、其他常见错误码</p>
<table>
<thead>
<tr>
<th>sqlcode</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>-104</td>
<td>SQL中有非法字符，多半是标点符号问题</td>
</tr>
<tr>
<td>-205</td>
<td>指定表的列名无效</td>
</tr>
<tr>
<td>-206</td>
<td>查询的列不在FROM后的表里,即列和表里的列不对应</td>
</tr>
<tr>
<td>-208</td>
<td>不能order by 指定的列，列不在select列表中</td>
</tr>
<tr>
<td>-302 22003</td>
<td>输入变量值对列来说</td>
</tr>
<tr>
<td>-412</td>
<td>子查询的select列表遇到多个列</td>
</tr>
<tr>
<td>-415</td>
<td>使用UNION操作，指定的列类型不兼容</td>
</tr>
<tr>
<td>-918</td>
<td>连接丢失，SQL不能执行</td>
</tr>
</tbody></table>
<p>3、DB2错误码大全</p>
<p>可以下载<a href="https://github.com/small-rose/papers/blob/master/DB2%20SQLCODE%20%E5%A4%A7%E5%85%A8.pdf" target="_blank" rel="noopener">DB2 SQLCODE.pdf</a>查看更多错误码说明。</p>
<br/><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>DB2</category>
      </categories>
      <tags>
        <tag>DB2</tag>
      </tags>
  </entry>
  <entry>
    <title>Git的SSH免密使用</title>
    <url>/posts/6ac07d1a.html</url>
    <content><![CDATA[<pre><code>本文记录关于Git的免密使用，连接Github免密和 云服务器或私有服务器免密。</code></pre><h3 id="一-Github的Git免密使用"><a href="#一-Github的Git免密使用" class="headerlink" title="一  Github的Git免密使用"></a>一  <code>Github</code>的Git免密使用</h3><h4 id="1-客户端生成密钥"><a href="#1-客户端生成密钥" class="headerlink" title="1 客户端生成密钥"></a>1 客户端生成密钥</h4><pre><code>ssh-keygen -t rsa -C &quot;这里换上你的邮箱&quot;</code></pre><p>然后会出现询问，大概意思如下：</p>
<pre><code>1. 确认秘钥的保存路径（如果不需要改路径则直接回车）；
2. 如果上一步置顶的保存路径下已经有秘钥文件，则需要确认是否覆盖（如果之前的秘钥不再需要则直接回车覆盖，如需要则手动拷贝到其他目录后再覆盖）；
3. 创建密码（如果不需要密码则直接回车）；
4. 确认密码；</code></pre><p>要免密登录请输密码的时候回车即可。根据提示找到密钥所在文件：</p>
<pre><code>id_rsa  #私钥
id_rsa.pub  #公钥</code></pre><h4 id="2-Github配置SSH公钥"><a href="#2-Github配置SSH公钥" class="headerlink" title="2  Github配置SSH公钥"></a>2  <code>Github</code>配置SSH公钥</h4><p> 登录git账户，<code>Setting</code>，<code>SSH and GPG keys</code>, <code>New ssh key</code></p>
<p>把<code>id_rsa.pub</code>的内容粘贴到key的文本域，点击<code>Add SSH key</code>完成。</p>
<p>后续的客户端git操作就不要密码了。</p>
<h3 id="二-Git服务器配置SSH免密"><a href="#二-Git服务器配置SSH免密" class="headerlink" title="二 Git服务器配置SSH免密"></a>二 <code>Git</code>服务器配置SSH免密</h3><p>注意：这里的Git服务器可以是云服务器或者自己的私服务器。本次操作环境是<code>Centos 7</code>。</p>
<h4 id="1-客户端生成密钥-1"><a href="#1-客户端生成密钥-1" class="headerlink" title="1 客户端生成密钥"></a>1 客户端生成密钥</h4><p>注意：同上，如果已经配置过<code>Github</code>的ssh免密上面已经有了可以不用重复生成，可以直接跳到第二步。</p>
<pre><code>ssh-keygen -t rsa -C &quot;这里换上你的邮箱&quot;</code></pre><p>然后会出现询问，大概意思如下：</p>
<pre><code>1. 确认秘钥的保存路径（如果不需要改路径则直接回车）；
2. 如果上一步置顶的保存路径下已经有秘钥文件，则需要确认是否覆盖（如果之前的秘钥不再需要则直接回车覆盖，如需要则手动拷贝到其他目录后再覆盖）；
3. 创建密码（如果不需要密码则直接回车）；
4. 确认密码；</code></pre><p>要免密登录请输密码的时候回车即可。根据提示找到密钥所在文件：</p>
<pre><code>id_rsa  #私钥
id_rsa.pub  #公钥</code></pre><h4 id="2-服务端导入客户端公钥"><a href="#2-服务端导入客户端公钥" class="headerlink" title="2  服务端导入客户端公钥"></a>2  服务端导入客户端公钥</h4><p>在/home/git下已经创建.ssh目录，然后创建authorized_keys文件，并将客户端生成的公钥导入进去。</p>
<pre><code>cd /home/git/
mkdir .ssh
chmod 755 .ssh
touch .ssh/authorized_keys
chmod 644 .ssh/authorized_keys</code></pre><p>将 <code>id_rsa.pub</code> 文件的内容写入<code>authorized_keys</code></p>
<h4 id="3-服务端SSH开启RSA认证"><a href="#3-服务端SSH开启RSA认证" class="headerlink" title="3  服务端SSH开启RSA认证"></a>3  服务端<code>SSH</code>开启<code>RSA</code>认证</h4><p>如果没有安装SSH服务，请先安装SSH服务。</p>
<pre class=" language-bash"><code class="language-bash">vim /etc/ssh/sshd_config</code></pre>
<p>其中三个地方的设置要确认如下：</p>
<pre><code>RSAAuthentication yes
PubkeyAuthentication yes
AuthorizedKeysFile .ssh/authorized_keys</code></pre><p>git用户不允许登录shell</p>
<pre class=" language-bash"><code class="language-bash">vim /etc/passwd</code></pre>
<p>将</p>
<pre><code>git:x:502:502::/home/git:/bin/bash</code></pre><p> 改为</p>
<pre><code>git:x:502:502::/home/git:/usr/local/git/bin/git-shell</code></pre><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Github</tag>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>谷歌去广告插件-优酷腾讯爱奇艺</title>
    <url>/posts/b4cfdcea.html</url>
    <content><![CDATA[<h2 id="去广告插件-优酷-腾讯-爱奇艺"><a href="#去广告插件-优酷-腾讯-爱奇艺" class="headerlink" title="去广告插件-优酷/腾讯/爱奇艺"></a>去广告插件-优酷/腾讯/爱奇艺</h2><p>其实现在有不少拦截广告的插件。比如Adsafe、AdBlock、ABP 。</p>
<p>有时候虽然拦截了视频广告，但是等待时间无法跳过。</p>
<p>推荐一个去广告的谷歌插件插件，无需等待，直接跳过广告。</p>
<p>项目地址：<a href="https://github.com/small-rose/skip-video-ad" target="_blank" rel="noopener">https://github.com/small-rose/skip-video-ad</a></p>
<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="1、下载"><a href="#1、下载" class="headerlink" title="1、下载"></a>1、下载</h3><p>可以使用 git clone 或者直接下载 zip 包。</p>
<p>zip 记得解压。</p>
<h3 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h3><p>跟谷歌其他插件安装一毛一样。</p>
<p>chrome浏览器地址输入：chrome://extensions</p>
<p>或者进入 chrome浏览器 的扩展程序。</p>
<p>打开开发者模式。</p>
<p>加载已经打开的扩展程序。</p>
<p>选择已经解压好的 <code>chrome-extension-remove-ad</code> 文件夹。</p>
<h3 id="3、测试"><a href="#3、测试" class="headerlink" title="3、测试"></a>3、测试</h3><p>打开视频测:</p>
<p>爱奇艺 《大话天仙》播放测试：<a href="https://www.iqiyi.com/v_15o9smgehyg.html#curid=4358668404464900_b08d3b4e24299b1720d88f1cc6077d4e" target="_blank" rel="noopener">https://www.iqiyi.com/v_15o9smgehyg.html#curid=4358668404464900_b08d3b4e24299b1720d88f1cc6077d4e</a></p>
<p>腾讯 《斗罗大陆》 播放测试：<a href="https://v.qq.com/x/cover/m441e3rjq9kwpsc.html" target="_blank" rel="noopener">https://v.qq.com/x/cover/m441e3rjq9kwpsc.html</a></p>
<p>优酷 《狐妖小红娘》 播放测试：<a href="https://v.youku.com/v_show/id_XMTI3MDg2Njg2OA==.html?spm=a2hcb.12701310.app.5~5!2~5!3~5~5~5!23~5~5~5~A&amp;s=3669bae21b1b11e5b5ce" target="_blank" rel="noopener">https://v.youku.com/v_show/id_XMTI3MDg2Njg2OA==.html?spm=a2hcb.12701310.app.5~5!2~5!3~5~5~5!23~5~5~5~A&amp;s=3669bae21b1b11e5b5ce</a> </p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>去广告</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql-常用命令与授权</title>
    <url>/posts/523aed6c.html</url>
    <content><![CDATA[<h2 id="Mysql-常用命令"><a href="#Mysql-常用命令" class="headerlink" title="Mysql 常用命令"></a>Mysql 常用命令</h2><blockquote>
<p>虽然现在已经有很多界面化的连接工具可以直接鼠标操作。但是若环境不允许远程连接怎么呢？所以常用命令还是有用武之地的。整理一下。</p>
</blockquote>
<h3 id="一、连接命令"><a href="#一、连接命令" class="headerlink" title="一、连接命令"></a>一、连接命令</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">## mysql终端连接</span>
mysql  <span class="token punctuation">[</span> -h  <span class="token operator">&lt;</span>hostname <span class="token operator">|</span> ip<span class="token operator">></span> <span class="token punctuation">]</span> -u <span class="token operator">&lt;</span>username<span class="token operator">></span> <span class="token punctuation">[</span>-P <span class="token operator">&lt;</span>port<span class="token operator">></span><span class="token punctuation">]</span> -p <span class="token punctuation">[</span><span class="token operator">&lt;</span>userpass<span class="token operator">></span><span class="token punctuation">]</span></code></pre>
<p>参数含义：</p>
<p><strong>-h:</strong> 主机名，表示连接的目标数据库主机名或者IP地址。</p>
<p><strong>-u:</strong> 用户名，表示连接的目标数据库的用户名。</p>
<p><strong>-P:</strong> 端口，表示连接的目标数据库的端口，不写默认是3306，非默认须确定端口号。</p>
<p><strong>-p:</strong> 表示连接的目标数据库的密码，-p后面可以直接输入密码，也可以不写执行命令的时候输入密码，下文同理。</p>
<p>关于 <code>-u</code>和<code>username</code>是否一定要连在一起，并没有找到答案。</p>
<h3 id="二、基础查询命令"><a href="#二、基础查询命令" class="headerlink" title="二、基础查询命令"></a>二、基础查询命令</h3><p>执行登录之后使用。</p>
<pre class=" language-mysql"><code class="language-mysql">-- 列出全部已有数据库
show databases;

-- 创建新数据库
create database <database_name>; 

-- 创建指定数据库
drop database <database_name>;

-- 打开/使用指定数据库
use <database_name>;

-- 列出打开的数据库所有的表名
show tables;

-- 查看数据库指定的表结构
desc <table_name>;

-- 删除表
drop table <table_name>;</code></pre>
<h3 id="三、数据库备份"><a href="#三、数据库备份" class="headerlink" title="三、数据库备份"></a>三、数据库备份</h3><h4 id="1、直接备份库"><a href="#1、直接备份库" class="headerlink" title="1、直接备份库"></a>1、直接备份库</h4><p>（A）备份一个库</p>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">## 备份指定主机某个库</span>
mysqldump -h host_name -P port -u user_name -p user_pass –database database_name <span class="token operator">></span> bak_file_name.sql

<span class="token comment" spellcheck="true">## 备份本地数据库，执行时输密码</span>
mysqldump -u user_name –p –database database_name  <span class="token operator">></span>  bak_file_name.suffix</code></pre>
<p>实例如：</p>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">## 备份192.168.66.82上的数据库DBCM</span>
mysqldump -h 192.168.66.82 -u root –p123456  –database dbcm  <span class="token operator">></span>  dbcm_20200617.sql

<span class="token comment" spellcheck="true">## 备份数据库DBCM，执行时输密码</span>
mysqldump -u root –p  –database dbcm  <span class="token operator">></span>  dbcm_20200617.sql</code></pre>
<p>（B）备份多个库:</p>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">## 备份指定主机里的多个库</span>
mysqldump -h <span class="token function">hostname</span> -u username -p user_pass –databases db_name1 db_name2 db_name3 <span class="token operator">></span> more_dbname_file.suffix</code></pre>
<p>如备份系统自带库：</p>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">## 备份192.168.66.82上的数据库自带系统库</span>
mysqldump -h 192.168.66.82 -u root –p123456  –databases information_schema mysql <span class="token operator">></span> sys_bak.sql</code></pre>
<p>说明：后续列举就不再分别列远程与本地了，区别只是<code>-h host_name</code>及<code>-P host_port</code>，统一用本地列举。</p>
<h4 id="2、直接备份库的表"><a href="#2、直接备份库的表" class="headerlink" title="2、直接备份库的表"></a>2、直接备份库的表</h4><p>备份指定库的指定表 </p>
<pre class=" language-bash"><code class="language-bash">mysqldump -u user_name –p –database database_name  table_name1  table_name2 <span class="token operator">></span>  bak_fileName.suffix</code></pre>
<p>例如：</p>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">##备份数据库DBCM里的loginfo表</span>
mysqldump -u root –p –database dbcm loginfo  <span class="token operator">></span>  dbcm_loginfo_20200617.sql
<span class="token comment" spellcheck="true">## 多张表</span>
mysqldump -u root –p –database dbcm loginfo user <span class="token operator">></span>  dbcm_log_user_20200617.sql</code></pre>
<h4 id="3、压缩备份"><a href="#3、压缩备份" class="headerlink" title="3、压缩备份"></a>3、压缩备份</h4><pre class=" language-bash"><code class="language-bash">mysqldump -h host_name -u user_name -p user_pass -database db_name <span class="token operator">|</span> <span class="token function">gzip</span> <span class="token operator">></span> backup_file.sql.gz</code></pre>
<h4 id="4、只备份数据库表结构"><a href="#4、只备份数据库表结构" class="headerlink" title="4、只备份数据库表结构"></a>4、只备份数据库表结构</h4><pre class=" language-bash"><code class="language-bash">mysqldump  –no-data -u user_name -p user_pass –databases db_name1 db_name2 db_name3 <span class="token operator">></span> db_table_bak.sql</code></pre>
<h4 id="5、备份所有数据库"><a href="#5、备份所有数据库" class="headerlink" title="5、备份所有数据库"></a>5、备份所有数据库</h4><pre class=" language-bash"><code class="language-bash">mysqldump –all-databases -u user_name -p user_pass <span class="token operator">></span> all_db.sql</code></pre>
<h4 id="6、带删除的备份"><a href="#6、带删除的备份" class="headerlink" title="6、带删除的备份"></a>6、带删除的备份</h4><p>备份<code>MySQL</code>数据库为带删除表的格式，能够让该备份覆盖已有数据库而不需要手动删除原有数据库</p>
<p>通俗的说就是<code>CREATE TABLE table_name</code>之前有<code>DROP TABLE IF EXISTS table_name</code>的动作。mysql默认备份就支持。</p>
<pre class=" language-bash"><code class="language-bash">mysqldump --add-drop-table -u username -p password -database databasename <span class="token operator">></span> backup_file.sql</code></pre>
<h4 id="7、binlog增量备份"><a href="#7、binlog增量备份" class="headerlink" title="7、binlog增量备份"></a>7、binlog增量备份</h4><p>增量备份是使用<code>mysql</code>的<code>binlog</code>日志作为记录新增的变化。</p>
<p><code>--master-data</code>：</p>
<p>在<code>mysqldump</code>命令中使用<code>--master-data=2</code>，会记录<code>binlog</code>文件和<code>position</code>的信息。</p>
<p><code>--single-transaction</code>：</p>
<p><code>--single-transaction</code>会将隔离级别设置成<code>repeatable-commited</code></p>
<p>首先进行全备</p>
<pre><code>mysqldump -u username -p password --single-transaction --master-data=2 db_name &gt; backup_all_file.sql</code></pre><p>备份文件中会有</p>
<p><code>-- CHANGE MASTER TO MASTER_LOG_FILE=&#39;bin-log.000002&#39;, MASTER_LOG_POS=xxx;</code></p>
<p>是指备份后所有的更改将会保存到新文件bin-log.000002二进制文件中。</p>
<h3 id="四、数据库还原"><a href="#四、数据库还原" class="headerlink" title="四、数据库还原"></a>四、数据库还原</h3><h4 id="1、直接还原"><a href="#1、直接还原" class="headerlink" title="1、直接还原"></a>1、直接还原</h4><pre class=" language-bash"><code class="language-bash">mysql -h <span class="token function">hostname</span> -u user_name -p user_pass database_name <span class="token operator">&lt;</span> backup_file.sql</code></pre>
<h4 id="2、压缩还原"><a href="#2、压缩还原" class="headerlink" title="2、压缩还原"></a>2、压缩还原</h4><pre class=" language-bash"><code class="language-bash">gunzip <span class="token operator">&lt;</span> backup_file.sql.gz <span class="token operator">|</span> mysql -u user_pass -p password database_name</code></pre>
<h4 id="3、source导入"><a href="#3、source导入" class="headerlink" title="3、source导入"></a>3、source导入</h4><p>使用source命令，需要使用命令登录mysql，用use进入到某个数据库后执行</p>
<pre class=" language-mysql"><code class="language-mysql">source d:\backup_file.sql</code></pre>
<h4 id="4、数据库转移"><a href="#4、数据库转移" class="headerlink" title="4、数据库转移"></a>4、数据库转移</h4><pre class=" language-bash"><code class="language-bash">mysqldump -u user_name -p user_pass db_name <span class="token operator">|</span> mysql –host<span class="token operator">=</span>*.*.*.* -C db_name</code></pre>
<h4 id="5、增量还原-恢复"><a href="#5、增量还原-恢复" class="headerlink" title="5、增量还原/恢复"></a>5、增量还原/恢复</h4><p>首先导入全备数据，source亦可。</p>
<pre class=" language-bash"><code class="language-bash">mysql -h host_name -u user_name -p user_pass  <span class="token operator">&lt;</span> backup_all_file.sql</code></pre>
<p>然后，恢复bin-log.000002</p>
<pre class=" language-bash"><code class="language-bash">mysqlbinlog bin-log.000002 <span class="token operator">|</span> mysql -h host_name -u user_name -p user_pass</code></pre>
<p>如果还有后续新增同理恢复。</p>
<p>恢复部分，恢复到某个操作的前面一个position点。</p>
<p>控制<code>binlog</code>的区间的参数有：</p>
<pre class=" language-mysql"><code class="language-mysql">--start-position  # 开始点 
--stop-position # 结束点
--start-date  # 开始时间 
--stop-date  # 结束时间</code></pre>
<p>找到需要操的恢复点，后进行恢复</p>
<pre class=" language-bash"><code class="language-bash">mysqlbinlog mysql-bin.000003 --stop-position<span class="token operator">=</span>308 <span class="token operator">|</span>mysql -h host_name -u user_name -p user_pass </code></pre>
<p>找到需要的恢复时间区间，进行恢复指定时间区间数据</p>
<pre class=" language-bash"><code class="language-bash">mysqlbinlog mysql-bin.000003 --start-datetime<span class="token operator">=</span><span class="token string">'2019-12-01 00:00:00'</span> --stop-datetime<span class="token operator">=</span><span class="token string">'2019-12-31 23:59:59'</span> <span class="token operator">|</span>mysql -h host_name -u user_name -p user_pass</code></pre>
<p>查看<code>binlog</code>内容，可以将<code>binlog</code>内容写入到临时文件查看：</p>
<pre><code>mysqlbinlog --no-defaults --database=db   --base64-output=decode-rows -v --start-datetime=&#39;2019-12-01 00:00:00&#39; --stop-datetime=&#39;2019-12-31 23:59:59&#39;  mysql-bin.000003 &gt;  binlog003.sql</code></pre><h3 id="五、授权管理"><a href="#五、授权管理" class="headerlink" title="五、授权管理"></a>五、授权管理</h3><p>经常见到或自己设置使用的授权长这样：</p>
<pre class=" language-mysql"><code class="language-mysql">##给指定root用户在本机登录连接及操作所有Schema的所有表的权限
grant all privileges on *.* to 'root'@'localhost' identified by 'user_pass';
## 刷新权限设置
flush privileges;</code></pre>
<p>实际使用的时候可能会进行一些更细节的授权限制，那么怎么办呢？</p>
<h4 id="1、查看用户权限"><a href="#1、查看用户权限" class="headerlink" title="1、查看用户权限"></a>1、查看用户权限</h4><pre class=" language-mysql"><code class="language-mysql">##查看当前登录用户权限
show grants;
## 查看其他 MySQL 用户权限,注意user_name和localhost要加引号
show grants for user_name@localhost;</code></pre>
<h4 id="2、基本授权命令"><a href="#2、基本授权命令" class="headerlink" title="2、基本授权命令"></a>2、基本授权命令</h4><pre class=" language-mysql"><code class="language-mysql">grant <privileges>  on schema.table to user_name@host_name identified by user_pass</code></pre>
<p><strong>privileges</strong> ：包括常见的查询、插入、更新、删除操作外，还包括创建表、索引、视图、存储过程、函数等权限。使用时关键字 “privileges” 可以省略。</p>
<p><strong>schema.table</strong> ：可以细节到指定库指定表，<code>*.*</code> 表示所有的库下所有的表。</p>
<p><strong>user_name@host_name identified by user_pass</strong>：表示允许哪个用户使用指定密码从哪个主机登录；常见的写法如下：（<code>identified by user_pass</code>实际使用时记得加上）</p>
<table>
<thead>
<tr>
<th>写法</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>‘root’@’localhost’</td>
<td>允许root用户从本机连接登录</td>
</tr>
<tr>
<td>‘root’@’%’</td>
<td>允许root用户从任意机器连接登录</td>
</tr>
<tr>
<td>‘root’@’192.168.0.221’</td>
<td>允许root用户从<code>IP</code>为<code>192.168.0.221</code>的机器连接登录</td>
</tr>
<tr>
<td>‘root’@’192.168.0.%’</td>
<td>允许root用户从<code>IP</code>网段为<code>192.168.0.*</code>的机器连接登录</td>
</tr>
</tbody></table>
<blockquote>
<p>不写@选项时，效果与加@’%’是一样。</p>
<p>‘%’从名义上包括任何主机，据说有些版本’%’不包括<code>localhost</code>，则需要单独对<code>@&#39;localhost&#39;</code>进行赋值。</p>
</blockquote>
<p>（1）给普通用户授权</p>
<p>普通用户一般可以授权基本数据的查询、写入、修改、删除操作，修改、删除视实际要求情况授权。</p>
<p><code>bus_dbname</code> ：表示业务数据库。<code>common_user</code>：普通用户连接账户。</p>
<pre class=" language-mysql"><code class="language-mysql">## 分别授权
grant select on bus_dbname.* to common_user@'%'
grant insert on bus_dbname.* to common_user@'%'
grant update on bus_dbname.* to common_user@'%'
grant delete on bus_dbname.* to common_user@'%'

## 合并操作，使用英文逗号分隔
grant select, insert, update, delete on bus_dbname.* to common_user@'%'</code></pre>
<p>（2）给高权用户授权</p>
<p>如开发人员，<code>DBA</code>等，允许建表结构，删表，改表结构，改外键，建视图，临时表，索引，存储过程等。</p>
<p><code>bus_dbname</code> ：表示业务数据库。<code>dev_userr</code>：开发或管理用户连接账户。</p>
<pre class=" language-mysql"><code class="language-mysql">## 授权dev_user用户 在MySQL的数据库bus_dbname中建表操作 
grant create on bus_dbname.* to dev_user@'192.168.0.%';
## 授权 改表
grant alter on bus_dbname.* to dev_user@'192.168.0.%';
## 授权 删表
grant drop on bus_dbname.* to dev_user@'192.168.0.%';

## 授权 外键权限。
grant references on bus_dbname.* to dev_user@'192.168.0.%';

## 授权 临时表权限。
grant create temporary tables on bus_dbname.* to dev_user@'192.168.0.%';
## 授权 索引权限。
grant index on bus_dbname.* to dev_user@'192.168.0.%';

## 授权 视图创建。
grant create view on bus_dbname.* to dev_user@'192.168.0.%';
## 授权 视图查看代码。
grant show view on bus_dbname.* to dev_user@'192.168.0.%';

##给普通 DBA/dev_user授权
grant all privileges on bus_dbname.* to dev_user@'localhost'
##可以省略privileges
grant all on bus_dbname.* to dev_user@'localhost' 

##其实是给dev_user授权所有库和所以表，一般可以给DBA
grant all on *.* to dev_user@'localhost'</code></pre>
<p>关于存储过程和函数的使用关键字：<code>create routine</code>。</p>
<p>授权<code>create  routine</code>表示可以创建<code>procedure</code> 和<code>function</code> 。</p>
<p>如果用户创建了<code>procedure</code>或<code>function</code>那么<code>mysql</code>会自动赋予该用户对<code>procedure</code> 或 <code>function</code> 的<code>alter routine</code>和<code>execute</code> 权限。</p>
<pre class=" language-mysql"><code class="language-mysql">grant create routine on bus_dbname.* to dev_user@'192.168.0.%'; </code></pre>
<p>创建存储过程：</p>
<pre class=" language-mysql"><code class="language-mysql">delimiter $
create procedure sp_hello_mysql()
begin
    select 'hello mysql';
end 
$</code></pre>
<p>再去查询授权</p>
<pre class=" language-mysql"><code class="language-mysql">show grants;</code></pre>
<p>就可以看到用户<code>alter routine</code>和<code>execute</code> 权限。</p>
<p>（3）授权分层</p>
<p><code>grant</code>的授权可以授权给整个<code>mysql</code>库，也可以指定某个库，指定某个库的某个表，指定表的列，指定视图、指定函数、指定存储过程等</p>
<pre class=" language-mysql"><code class="language-mysql">## 授权 MySQL中的所有数据库下的所有表，也就是完整的全部权限
grant all on *.* to 'root'@'localhost'; 

## 授权user_name 给某个指定的数据库的查询权限
grant select  on bus_dbname.* to user_name@localhost; 

## 授权 给某个指定的数据库的指定表select, insert, update, delete权限
grant select, insert, update, delete on bus_dbname.table_name to user_name@localhost; 

## 授权 给某个指定的数据库的指定表查询指定列的权限
grant select(id, name, rank) on bus_dbname.table_name to user_name@localhost;

## 授权 指定的存储过程执行权限
grant execute on procedure bus_dbname.pr_procname to user_name@localhost;
## 授权 指定的函数执行权限
grant execute on function bus_dbname.fn_funcname to user_name@localhost;</code></pre>
<h4 id="3、撤销授权命令"><a href="#3、撤销授权命令" class="headerlink" title="3、撤销授权命令"></a>3、撤销授权命令</h4><p>撤销授权使用<code>revoke</code>命令。</p>
<p><code>revoke</code> 和<code>grant</code> 的语法相似，需要把关键字 <code>to</code> 换成 <code>from</code>,命令格式：</p>
<pre class=" language-mysql"><code class="language-mysql">## 授权dev_user用户在本地登录后的 操作所有库所有表的所有权限
grant all on *.* to dev_user@localhost ;
## 撤销dev_user用户在本地登录后的 操作所有库所有表的所有权限
revoke all on *.* from dev_user@localhost;</code></pre>
<h4 id="4、注意事项"><a href="#4、注意事项" class="headerlink" title="4、注意事项"></a>4、注意事项</h4><p>（1）执行<code>grant</code>,<code>revoke</code> 操作权限后，相关用户，重新连接<code>MySQL</code> 数据库后，权限才能生效。</p>
<p>（2）用户被授予了某个权限，那么默认情况下，该用户是不能把这个权限授予给其他人的.。</p>
<p>可以使用<code>WITH GRANT OPTION</code>这个子句来让该用户可以将权限再授予给其他人。</p>
<p><code>WITH GRANT OPTION</code>：表示允许权限传递。用于对象授权。区别于 用于系统权限授权的<code>with admin option</code>。</p>
<p>还可以通过直接授予GRANT OPTION权限来达到这个效果。</p>
<pre class=" language-mysql"><code class="language-mysql">##使用 WITH GRANT OPTION允许权限传递
grant select, insert, update, delete on bus_dbname.table_name to user_name@localhost WITH  GRANT OPTION; 

## 直接授权GRANT OPTION
grant select,grant option on bus_dbname.table_name to user_name@localhost ; </code></pre>
<p>（3）权限传递<code>WITH  GRANT OPTION</code>用户的权限被收回时，其他被传递的相同权限自动收回。</p>
<p>（4）权限信息用user、db、host、<code>tables_priv</code>和<code>columns_priv</code>表被存储在<code>mysql</code>数据库中</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>DB2常用函数</title>
    <url>/posts/d22e90ef.html</url>
    <content><![CDATA[<h2 id="DB2常用函数"><a href="#DB2常用函数" class="headerlink" title="DB2常用函数"></a>DB2常用函数</h2><h3 id="一、寄存器使用"><a href="#一、寄存器使用" class="headerlink" title="一、寄存器使用"></a>一、寄存器使用</h3><p>使用方式：<code>SYSIBM.SYSDUMMY1</code>、<code>SYSIBM.DUAL</code>、<code>values</code></p>
<p>使用示例：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token string">'hello db2'</span> <span class="token keyword">FROM</span> SYSIBM<span class="token punctuation">.</span>SYSDUMMY1<span class="token punctuation">;</span> 
<span class="token keyword">SELECT</span> <span class="token string">'hello db2'</span> <span class="token keyword">FROM</span> SYSIBM<span class="token punctuation">.</span>DUAL<span class="token punctuation">;</span> 
<span class="token keyword">VALUES</span> <span class="token string">'hello db2'</span><span class="token punctuation">;</span> </code></pre>
<h3 id="二、时间处理相关"><a href="#二、时间处理相关" class="headerlink" title="二、时间处理相关"></a>二、时间处理相关</h3><h4 id="1、日期与时间"><a href="#1、日期与时间" class="headerlink" title="1、日期与时间"></a>1、日期与时间</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">CURRENT</span> <span class="token keyword">DATE</span> <span class="token keyword">FROM</span> SYSIBM<span class="token punctuation">.</span>DUAL<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--使用寄存器方式</span>
<span class="token keyword">VALUES</span> <span class="token keyword">CURRENT</span> <span class="token keyword">DATE</span> <span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">--查日期</span>
<span class="token keyword">VALUES</span> <span class="token keyword">CURRENT</span> TIME <span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">--查时间</span>
<span class="token keyword">VALUES</span> <span class="token keyword">CURRENT</span> <span class="token keyword">TIMESTAMP</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--查时间戳</span></code></pre>
<h4 id="2、年月日时分秒"><a href="#2、年月日时分秒" class="headerlink" title="2、年月日时分秒"></a>2、年月日时分秒</h4><p>年月日时分秒相关函数</p>
<pre class=" language-sql"><code class="language-sql">YEAR<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">--获取年；</span>
MONTH<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">--获取月；</span>
DAY<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">--获取日；</span>
HOUR<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">--获取小时；</span>
MINUTE<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">--获取分钟；</span>
SECOND<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">--获取秒；</span>
<span class="token keyword">DATE</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">--获取日期；</span>
TIME<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">--获取时间；</span>
<span class="token keyword">TIMESTAMP</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">--获取时间戳。</span></code></pre>
<p>示例：</p>
<pre class=" language-sql"><code class="language-sql"> <span class="token comment" spellcheck="true">--使用寄存器方式获取当前年份</span>
<span class="token keyword">SELECT</span> YEAR<span class="token punctuation">(</span><span class="token keyword">CURRENT</span> <span class="token keyword">DATE</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> SYSIBM<span class="token punctuation">.</span>DUAL<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">--values方式获取当前月份</span>
<span class="token keyword">VALUES</span> MONTH（<span class="token keyword">CURRENT</span> <span class="token keyword">DATE</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> </code></pre>
<pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--表示查当前月份的日志记录</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> DBCM<span class="token punctuation">.</span>LOGINFO L <span class="token keyword">WHERE</span> MONTH<span class="token punctuation">(</span>L<span class="token punctuation">.</span>OP_TIME<span class="token punctuation">)</span><span class="token operator">=</span> MONTH<span class="token punctuation">(</span><span class="token keyword">CURRENT</span> <span class="token keyword">DATE</span><span class="token punctuation">)</span> <span class="token operator">and</span> MONTH<span class="token punctuation">(</span>L<span class="token punctuation">.</span>OP_TIME<span class="token punctuation">)</span> <span class="token operator">=</span> MONTH<span class="token punctuation">(</span><span class="token keyword">CURRENT</span> <span class="token keyword">DATE</span><span class="token punctuation">)</span></code></pre>
<p>参数也可以是指定字符串</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> YEAR<span class="token punctuation">(</span><span class="token string">'2020-06-01'</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> SYSIBM<span class="token punctuation">.</span>DUAL<span class="token punctuation">;</span>
<span class="token keyword">VALUES</span> HOUR（<span class="token string">'2020-06-01 20:20:06'</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> </code></pre>
<h4 id="3、年月日时分秒加减运行"><a href="#3、年月日时分秒加减运行" class="headerlink" title="3、年月日时分秒加减运行"></a>3、年月日时分秒加减运行</h4><p>还可以直接运行操作：要求加减带单位的时间长度。</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">VALUES</span> <span class="token keyword">TIMESTAMP</span><span class="token punctuation">(</span><span class="token string">'2020-06-01 22:18:12'</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span> YEAR <span class="token operator">+</span><span class="token number">1</span> MONTH <span class="token operator">+</span><span class="token number">1</span> DAY <span class="token operator">+</span><span class="token number">1</span> HOUR <span class="token operator">+</span><span class="token number">1</span> MINUTE <span class="token operator">+</span><span class="token number">1</span> SECOND <span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">--结果：2021-07-02 23:19:13</span>

<span class="token keyword">VALUES</span> <span class="token keyword">TIMESTAMP</span><span class="token punctuation">(</span><span class="token string">'2020-05-30 21:18:12'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span> YEAR <span class="token operator">-</span><span class="token number">1</span> MONTH <span class="token operator">-</span><span class="token number">1</span> DAY <span class="token operator">-</span><span class="token number">1</span> HOUR <span class="token operator">-</span><span class="token number">1</span> MINUTE <span class="token operator">-</span><span class="token number">1</span> SECOND <span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">--结果：2019-04-29 20:17:11</span>

<span class="token comment" spellcheck="true">--表示查询当前月份的英文名称</span>
<span class="token keyword">SELECT</span> MONTHNAME<span class="token punctuation">(</span><span class="token keyword">CURRENT</span> <span class="token keyword">date</span><span class="token punctuation">)</span>  <span class="token keyword">FROM</span> SYSIBM<span class="token punctuation">.</span>DUAL<span class="token punctuation">;</span></code></pre>
<p>以<code>LOGINFO</code>表为例：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--查询今年上个月的日志</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> DBCM<span class="token punctuation">.</span>LOGINFO L <span class="token keyword">WHERE</span> YEAR<span class="token punctuation">(</span>L<span class="token punctuation">.</span>OP_TIME<span class="token punctuation">)</span><span class="token operator">=</span> YEAR<span class="token punctuation">(</span><span class="token keyword">CURRENT</span> <span class="token keyword">DATE</span><span class="token punctuation">)</span> <span class="token operator">and</span> MONTH<span class="token punctuation">(</span>L<span class="token punctuation">.</span>OP_TIME<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token punctuation">(</span>MONTH<span class="token punctuation">(</span><span class="token keyword">CURRENT</span> <span class="token keyword">DATE</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span></code></pre>
<p>4、日期相关相关函数</p>
<pre class=" language-sql"><code class="language-sql">WEEK<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">--判断时间年份及当前该年第几周</span>
MONTHNAME<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">--获取月份英文名称</span>
DAY<span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">--判断时间是该月的第几天</span>
DAYNAME<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">--判断传入时间是周几的英文名称</span>
DAYOFYEAR<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">--判断传入时间是该年的第几天</span>
DAYOFMONTH<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">--判断传入时间是该月的第几天</span>
DAYOFWEEK<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">--判断传入时间是该周的第几天</span>
days<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">--可以获取两个时间相差天数</span></code></pre>
<p>使用示例：</p>
<p><code>WEEK()</code>:</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">VALUES</span> week<span class="token punctuation">(</span><span class="token string">'2020-06-10'</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--结果：24,表示传入时间是2020年第24周</span></code></pre>
<p><code>MONTHNAME()</code>：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">VALUES</span> MONTHNAME<span class="token punctuation">(</span><span class="token string">'2020-06-10'</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--结果：June</span></code></pre>
<p><code>DAY()</code>:</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">VALUES</span> day<span class="token punctuation">(</span><span class="token string">'2020-06-10'</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--结果：10，6月的第10天</span></code></pre>
<p><code>DAYNAME()</code>:</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">VALUES</span> DAYNAME<span class="token punctuation">(</span><span class="token string">'2020-06-10'</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--结果：Wednesday</span></code></pre>
<p><code>DAYOFYEAR()</code>:</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">VALUES</span> DAYOFYEAR<span class="token punctuation">(</span><span class="token string">'2020-06-10'</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">--结果：162</span></code></pre>
<p><code>DAYOFMONTH()</code>:</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">VALUES</span> DAYOFMONTH<span class="token punctuation">(</span><span class="token string">'2020-06-10'</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">--结果：10，6月的第10天</span></code></pre>
<p><code>DAYOFWEEK()</code>:</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">VALUES</span> DAYOFWEEK<span class="token punctuation">(</span><span class="token string">'2020-06-10'</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">--结果：4, 默认一周日为第一天，周三是第4天</span>
<span class="token keyword">VALUES</span> DAYOFWEEK<span class="token punctuation">(</span><span class="token string">'2020-06-14'</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">--结果：1</span></code></pre>
<p><code>DAYOFWEEK_ISO()</code>:可以和<code>DAYOFWEEK()</code>比较一下：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">VALUES</span> DAYOFWEEK_ISO<span class="token punctuation">(</span><span class="token string">'2020-06-10'</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">--结果：3</span>
<span class="token keyword">VALUES</span> DAYOFWEEK_ISO<span class="token punctuation">(</span><span class="token string">'2020-06-14'</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">--结果：7</span></code></pre>
<p><code>DAYS()</code>:</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">VALUES</span> DAYS<span class="token punctuation">(</span><span class="token keyword">CURRENT</span> <span class="token keyword">DATE</span><span class="token punctuation">)</span><span class="token operator">-</span>DAYS<span class="token punctuation">(</span><span class="token keyword">CURRENT</span> <span class="token keyword">DATE</span><span class="token operator">-</span><span class="token number">10</span> DAY<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">--结果：10 ，可以计算日期差多少天</span></code></pre>
<pre><code>values DAYNAME(current timestamp)
</code></pre><p><code>TIMESTAMPDIFF</code>:</p>
<pre class=" language-sql"><code class="language-sql">TIMESTAMPDIFF<span class="token punctuation">(</span>n<span class="token punctuation">,</span>CHAR<span class="token punctuation">(</span><span class="token keyword">TIMESTAMP</span><span class="token punctuation">(</span><span class="token string">'2012-05-25 10:23:24'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token keyword">TIMESTAMP</span><span class="token punctuation">(</span><span class="token string">'2012-05-25 10:20:24'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<p>根据两个时间戳记之间的时差，返回由第一个参数定义的类型表示的估计时差。（整除部分，不会四舍五入）其中n的含义如下：</p>
<p>n=2：秒 ；    n=4 ：分；     n=8：时；</p>
<p>n=16 ：天；    n=32 ：周；</p>
<p>n=64：月；    n=128 ：季度；     n=256:年；</p>
<p>使用示例：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">VALUES</span> TIMESTAMPDIFF<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> char<span class="token punctuation">(</span><span class="token keyword">TIMESTAMP</span><span class="token punctuation">(</span><span class="token string">'2020-06-14 12:12:12'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token keyword">TIMESTAMP</span><span class="token punctuation">(</span><span class="token string">'2020-06-10 12:12:12'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">--结果：4 ，表示相差4天</span></code></pre>
<h4 id="4、时间的格式"><a href="#4、时间的格式" class="headerlink" title="4、时间的格式"></a>4、时间的格式</h4><p>ISO，使用国际标准组织（ISO）制订的日期和时间格式；USA，使用美国日期和时间的 IBM 标准格式。</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">values</span> char<span class="token punctuation">(</span><span class="token keyword">current</span> <span class="token keyword">date</span><span class="token punctuation">,</span>iso<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--2020-06-10</span>
<span class="token keyword">values</span> char<span class="token punctuation">(</span><span class="token keyword">current</span> <span class="token keyword">date</span><span class="token punctuation">,</span>usa<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--06/10/2020</span>
<span class="token keyword">values</span> char<span class="token punctuation">(</span><span class="token keyword">current</span> time<span class="token punctuation">,</span>iso<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--18.08.53</span></code></pre>
<h3 id="三、字符串函数"><a href="#三、字符串函数" class="headerlink" title="三、字符串函数"></a>三、字符串函数</h3><h4 id="1、日期时间转换"><a href="#1、日期时间转换" class="headerlink" title="1、日期时间转换"></a>1、日期时间转换</h4><p>（1）<code>TO_CHAR()</code>把时间转换成指定格式的字符串类型。低版本<code>DB2</code>不支持。</p>
<p><code>“YYYY-MM-DD HH:MI:SS”</code> 十二小时制；</p>
<p><code>“YYYY-MM-DD HH24:MI:SS”</code>二十四小时制。</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> TO_CHAR<span class="token punctuation">(</span><span class="token keyword">TIMESTAMP</span><span class="token punctuation">(</span><span class="token string">'2020-06-10 12:18:12'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'YYYY-MM-DD HH24:MI:SS'</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> SYSIBM<span class="token punctuation">.</span>DUAL<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">--结果：2020-06-10 12:18:12</span></code></pre>
<p>（2）<code>char(arg)</code>把参数转化成字符串</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">values</span> char<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">--把100转化为100字符串内容</span></code></pre>
<h4 id="2、LENGTH函数"><a href="#2、LENGTH函数" class="headerlink" title="2、LENGTH函数"></a>2、LENGTH函数</h4><p>语法</p>
<pre><code>LENGTH(ARG)</code></pre><p>LENGTH函数返回参数<code>ARG</code>的长度。</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> LENGTH<span class="token punctuation">(</span>LOG_MSG<span class="token punctuation">)</span> <span class="token keyword">FROM</span> DBCM<span class="token punctuation">.</span>LOGINFO</code></pre>
<h4 id="3、CONCAT函数"><a href="#3、CONCAT函数" class="headerlink" title="3、CONCAT函数"></a>3、<code>CONCAT</code>函数</h4><p>字符串连接函数。</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> CONCAT<span class="token punctuation">(</span>CONCAT<span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span><span class="token string">' world'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">' !'</span><span class="token punctuation">)</span>  <span class="token keyword">as</span> test
<span class="token keyword">FROM</span> SYSIBM<span class="token punctuation">.</span>DUAL<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">--结果：hello world !</span></code></pre>
<h4 id="4、去空格函数"><a href="#4、去空格函数" class="headerlink" title="4、去空格函数"></a>4、去空格函数</h4><p><code>LTRIM</code>、<code>RTRIM</code>函数去空格</p>
<p><code>DB2</code>中无<code>trim()</code>函数，所以要去空格要执行左右去空格。</p>
<p><code>LTRIM()</code>：<code>LTRIM</code>函数从<code>CHAR</code>、<code>VARCHAR</code>、<code>GRAPHIC</code>或者<code>VARGRAPHIC</code>中去掉左侧空格。<br><code>RTRIM()</code>：<code>RTRIM</code>函数则去去掉右侧的空格。</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> LTRIM<span class="token punctuation">(</span><span class="token string">'   hello 1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>RTRIM<span class="token punctuation">(</span><span class="token string">' 2world !  '</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> SYSIBM<span class="token punctuation">.</span>DUAL<span class="token punctuation">;</span></code></pre>
<h4 id="5、截取-截断函数"><a href="#5、截取-截断函数" class="headerlink" title="5、截取/截断函数"></a>5、截取/截断函数</h4><p>（1）<code>SUBSTR</code>函数</p>
<p>语法：</p>
<pre class=" language-sql"><code class="language-sql">SUBSTR<span class="token punctuation">(</span>ARG1<span class="token punctuation">,</span>POS<span class="token punctuation">,</span><span class="token operator">&lt;</span>LENGTH<span class="token operator">></span><span class="token punctuation">)</span></code></pre>
<p><code>SUBSTR</code>函数返回<code>ARG1</code>中<code>POS</code>位置开始的<code>LENGTH</code>个字符，如果没有指定<code>LENGTH</code>，则返回剩余的字符。</p>
<p><code>substr()</code>是指从position开始算（包括position这个字符），截取的长度，也包括位置+长度所在的字符(前提是字符串的长度大于或等于两者之和)。</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> SUBSTR<span class="token punctuation">(</span><span class="token string">'helloworld'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> SYSIBM<span class="token punctuation">.</span>DUAL<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--结果：ow</span></code></pre>
<p>（2）<code>LEFT</code>、<code>RIGHT</code>函数</p>
<p><code>LEFT(ARG,LENGTH)</code>：LEFT函数返回<code>ARG</code>最左边<code>LENGTH</code>个字符串，<code>ARG</code>可以是<code>CHAR</code>或<code>BINARY STRING</code>。</p>
<p><code>RIGHT(ARG,LENGTH)</code>：RIGHT函数返回<code>ARG</code>最右边的<code>LENGTH</code>个字符串</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">LEFT</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">RIGHT</span><span class="token punctuation">(</span><span class="token string">'world'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> SYSIBM<span class="token punctuation">.</span>DUAL<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">--结果： he  ld</span></code></pre>
<h4 id="6、大小写转换"><a href="#6、大小写转换" class="headerlink" title="6、大小写转换"></a>6、大小写转换</h4><p><code>LCASE</code>、<code>LOWER</code>、<code>UCASE</code>、<code>UPPER</code>函数</p>
<p>LCASE()、LOWER()：<br>LCASE、LOWER函数返回定长、变长字符串的小写形式。</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">LCASE</span><span class="token punctuation">(</span><span class="token string">'heLLo'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>LOWER<span class="token punctuation">(</span><span class="token string">'WORLD'</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> SYSIBM<span class="token punctuation">.</span>DUAL<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--结果：hello  world</span></code></pre>
<p>UCASE()、UPPER()：<br>UCASE、UPPER函数返回定长、变长字符串的大写形式。</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">UCASE</span><span class="token punctuation">(</span><span class="token string">'heLLo'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>UPPER<span class="token punctuation">(</span><span class="token string">'world'</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> SYSIBM<span class="token punctuation">.</span>DUAL<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--结果：HELLO  WORLD</span></code></pre>
<h4 id="7、替换函数"><a href="#7、替换函数" class="headerlink" title="7、替换函数"></a>7、替换函数</h4><p>（a）INSERT函数</p>
<p>语法：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">INSERT</span><span class="token punctuation">(</span>ARG1<span class="token punctuation">,</span>POS<span class="token punctuation">,</span>SIZE<span class="token punctuation">,</span>ARG2<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">--找到位置替换</span></code></pre>
<p>INSERT函数返回一个字符串，将<code>ARG1</code>从<code>POS</code>处删除<code>SIZE</code>个字符，将<code>ARG2</code>插入该位置。</p>
<p>（b）REPLACE函数</p>
<p>语法：</p>
<pre><code>REPLACE(EXP1,EXP2,EXP3)</code></pre><p>REPLACE函数用<code>EXP3</code>代替<code>EXP1</code>中所有的<code>EXP2</code>。</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> REPLACE<span class="token punctuation">(</span><span class="token string">'ROMANND'</span>，<span class="token string">'NND'</span><span class="token punctuation">,</span><span class="token string">'CCB'</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> SYSIBM<span class="token punctuation">.</span>DUAL<span class="token punctuation">;</span></code></pre>
<h4 id="8、条件查找字符串"><a href="#8、条件查找字符串" class="headerlink" title="8、条件查找字符串"></a>8、条件查找字符串</h4><p>根据条件查找字符串，返回字符串。</p>
<p>（a）REPEAT函数</p>
<p>语法：</p>
<pre class=" language-sql"><code class="language-sql">REPEAT<span class="token punctuation">(</span>ARG1<span class="token punctuation">,</span>NUM_TIMES<span class="token punctuation">)</span></code></pre>
<p>REPEAT函数返回<code>ARG1</code>被重复<code>NUM_TIMES</code>次的字符串。</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> REPEAT<span class="token punctuation">(</span><span class="token string">'hello'</span>，<span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> SYSIBM<span class="token punctuation">.</span>DUAL<span class="token punctuation">;</span></code></pre>
<p>（b）SPACE函数</p>
<p>语法：</p>
<pre class=" language-sql"><code class="language-sql">SPACE<span class="token punctuation">(</span>SIZE<span class="token punctuation">)</span></code></pre>
<p>SPACE函数返回一个包含<code>SIZE</code>个空格的字符串。</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> SPACE<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> SYSIBM<span class="token punctuation">.</span>DUAL<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--结果没发打，就是10个空格字符串</span></code></pre>
<h3 id="四、判断函数"><a href="#四、判断函数" class="headerlink" title="四、判断函数"></a>四、判断函数</h3><h4 id="1、VALUE函数"><a href="#1、VALUE函数" class="headerlink" title="1、VALUE函数"></a>1、VALUE函数</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">VALUE</span><span class="token punctuation">(</span>EXPRESSION1<span class="token punctuation">,</span>EXPRESSION2<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">--VALUE函数是用返回一个非空的值，当其第一个参数非空，直接返回该参数的值，如果第一个参数为空，则返回第二个参数的值。</span>

<span class="token comment" spellcheck="true">--表示如果LOGINFO.ID为空，则返回空串，如果LOGINFO.ID不为空，则返回LOGINFO.ID。</span>
<span class="token keyword">SELECT</span> <span class="token keyword">VALUE</span><span class="token punctuation">(</span>ID<span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> LOGINFO</code></pre>
<h4 id="2、COALESCE函数"><a href="#2、COALESCE函数" class="headerlink" title="2、COALESCE函数"></a>2、COALESCE函数</h4><p>处理null的函数。</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">COALESCE</span><span class="token punctuation">(</span>ARG1<span class="token punctuation">,</span>ARG2<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">--COALESCE返回参数集中第一个非null参数。</span>
<span class="token comment" spellcheck="true">--用法类似于VALUE函数。当其第一个参数非空，直接返回该参数的值，如果第一个参数为空，则返回第二个参数的值</span></code></pre>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">COALESCE</span><span class="token punctuation">(</span>COUNT_AMT<span class="token punctuation">,</span> <span class="token string">'0.00'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> LOGINFO <span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">--金额为null的时候，显示0.00</span></code></pre>
<h4 id="3、NVL函数"><a href="#3、NVL函数" class="headerlink" title="3、NVL函数"></a>3、NVL函数</h4><p>处理null的函数。</p>
<pre class=" language-sql"><code class="language-sql">NVL<span class="token punctuation">(</span>exp1<span class="token punctuation">,</span> exp2<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">--如果exp1为NULL，则函数返回exp2，否则返回exp1本身。但此函数有一定局限，所以就有了NVL2函数。</span></code></pre>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> nvl<span class="token punctuation">(</span>COUNT_AMT<span class="token punctuation">,</span> <span class="token string">'0.00'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> LOGINFO <span class="token punctuation">;</span></code></pre>
<blockquote>
<p><code>NVL2</code>函数：<code>Oracle/PLsql</code>中的一个函数,Oracle在<code>NVL</code>函数的功能上扩展，提供了<code>NVL2</code>函数。<code>NVL2(exp1, exp2, exp3)</code>的功能为：如果<code>exp1</code>为NULL，则函数返回<code>exp3</code>，若<code>exp1</code>不为null，则返回<code>exp2</code>。</p>
</blockquote>
<h4 id="4、CAST函数"><a href="#4、CAST函数" class="headerlink" title="4、CAST函数"></a>4、CAST函数</h4><p>与char有类似功能。可以用来转换类型。</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> CAST<span class="token punctuation">(</span><span class="token keyword">CURRENT</span> TIME <span class="token keyword">AS</span> CHAR<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token keyword">FROM</span> SYSIBM<span class="token punctuation">.</span>SYSDUMMY1</code></pre>
<h4 id="5、VARCHAR函数"><a href="#5、VARCHAR函数" class="headerlink" title="5、VARCHAR函数"></a>5、<code>VARCHAR</code>函数</h4><p>语法：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">VARCHAR</span><span class="token punctuation">(</span>ARG<span class="token punctuation">,</span>LENGTH<span class="token punctuation">)</span></code></pre>
<p><code>VARCHAR</code>函数返回<code>ARG</code>字符串、日期型、图形串的可变长度<code>LENGTH</code>的字符串表示。</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token string">'helloworld'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> SYSIBM<span class="token punctuation">.</span>DUAL<span class="token punctuation">;</span></code></pre>
<h4 id="6、CASE-WHEN函数"><a href="#6、CASE-WHEN函数" class="headerlink" title="6、CASE-WHEN函数"></a>6、CASE-WHEN函数</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>  id<span class="token punctuation">,</span>USER_ID<span class="token punctuation">,</span> 
<span class="token punctuation">(</span><span class="token keyword">case</span> 
<span class="token keyword">when</span><span class="token punctuation">(</span>COUNT_AMT<span class="token operator">&lt;=</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token keyword">then</span> <span class="token string">'一般'</span>
<span class="token keyword">when</span><span class="token punctuation">(</span>COUNT_AMT<span class="token operator">></span><span class="token number">10000</span>  <span class="token operator">and</span>  COUNT_AMT<span class="token operator">&lt;=</span><span class="token number">50000</span> <span class="token punctuation">)</span>   <span class="token keyword">then</span> <span class="token string">'普通'</span>   
<span class="token keyword">when</span><span class="token punctuation">(</span>COUNT_AMT<span class="token operator">></span><span class="token number">50000</span>  <span class="token operator">and</span> COUNT_AMT<span class="token operator">&lt;=</span><span class="token number">100000</span> <span class="token punctuation">)</span>   <span class="token keyword">then</span> <span class="token string">'富裕'</span> 
<span class="token keyword">else</span>   <span class="token string">'土豪'</span>  <span class="token keyword">end</span> <span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token keyword">status</span>
<span class="token keyword">FROM</span>  DBCM<span class="token punctuation">.</span>LOGINFO </code></pre>
<h4 id="7、exists-A-函数"><a href="#7、exists-A-函数" class="headerlink" title="7、exists(A)函数"></a>7、exists(A)函数</h4><p>判断是否存在，存在数据返回true，不存在返回false。</p>
<p>在<code>sql</code>中再具体使用示例说明。</p>
<h4 id="8、判断字符位置"><a href="#8、判断字符位置" class="headerlink" title="8、判断字符位置"></a>8、判断字符位置</h4><p>（a）<code>instr</code>函数</p>
<p>语法：</p>
<pre class=" language-sql"><code class="language-sql">instr<span class="token punctuation">(</span>源字符串<span class="token punctuation">,</span> 要查找的字符串<span class="token punctuation">,</span> 从第几个字符开始<span class="token punctuation">,</span> 要找到第几个匹配的序号<span class="token punctuation">)</span></code></pre>
<p>数据库中字符串索引都是从1开始，从0开始的话是搜索不到的。</p>
<p>默认查找顺序为从左到右。当起始位置为负数的时候，从右边开始查找。</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">values</span> instr<span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">,</span><span class="token string">'o'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">--DB2执行报错</span>
<span class="token keyword">values</span> instr<span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">,</span><span class="token string">'o'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">--结果：5</span>
<span class="token keyword">values</span> instr<span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">,</span><span class="token string">'o'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">--结果：8</span>

<span class="token keyword">select</span> instr<span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">,</span><span class="token string">'o'</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">from</span> SYSIBM<span class="token punctuation">.</span>DUAL<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">--结果：8</span></code></pre>
<p>（b）<code>LOCATE</code>函数<br>语法：</p>
<pre class=" language-sql"><code class="language-sql">LOCATE<span class="token punctuation">(</span>ARG1<span class="token punctuation">,</span>ARG2<span class="token punctuation">,</span><span class="token operator">&lt;</span>POS<span class="token operator">></span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">--只有起始位置</span></code></pre>
<p>LOCATE函数在<code>ARG2</code>中查找<code>ARG1</code>第一次出现的位置，如果指定<code>POS</code>，则从<code>ARG2</code>的<code>POS</code>处开始查找<code>ARG1</code>第一次出现的位置。</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>  LOCATE<span class="token punctuation">(</span><span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'hello world'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> SYSIBM<span class="token punctuation">.</span>DUAL<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--结果：3</span></code></pre>
<p>（c）<code>POSSTR</code>函数</p>
<p>语法：</p>
<pre class=" language-sql"><code class="language-sql">POSSTR<span class="token punctuation">(</span>EXP1<span class="token punctuation">,</span>EXP2<span class="token punctuation">)</span></code></pre>
<p><code>POSSTR</code>函数返回<code>EXP2</code>在<code>EXP1</code>中的位置。 –没有起始位置和结束位置 SELECT LOCATE(NAME，’a’) FROM T1</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>  POSSTR<span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">,</span><span class="token string">'wo'</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> SYSIBM<span class="token punctuation">.</span>DUAL<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--结果：7</span></code></pre>
<h3 id="五、其他"><a href="#五、其他" class="headerlink" title="五、其他"></a>五、其他</h3><p>（1）row_number() over()函数</p>
<p>排序、分页常用。</p>
<p>排序：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span><span class="token punctuation">,</span>rownumber<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> row_id <span class="token keyword">from</span>  LOGINFO  </code></pre>
<p>分页：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span>
<span class="token keyword">select</span> <span class="token operator">*</span><span class="token punctuation">,</span>rownumber<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> row_id <span class="token keyword">from</span>  LOGINFO  
<span class="token punctuation">)</span> <span class="token keyword">where</span> row_id <span class="token operator">between</span> <span class="token number">1</span> <span class="token operator">and</span> <span class="token number">10</span></code></pre>
<p>（2）DIGITS函数：</p>
<p>DIGITS函数返回<code>SMALLINT</code>、<code>INTEGER</code>、<code>BIGIT</code>或者<code>DECIMAL</code>参数的字符串值。</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> DIGITS<span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> SYSIBM<span class="token punctuation">.</span>DUAL<span class="token punctuation">;</span></code></pre>
<p>（3）DOUBLE、FLOAT函数:</p>
<p>DOUBLE、FLOAT函数如果参数是一个数字表达式，返回与其对应的浮点数，否则返回错误代码。</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">DOUBLE</span><span class="token punctuation">(</span><span class="token string">'4569'</span><span class="token punctuation">)</span>  <span class="token keyword">FROM</span> SYSIBM<span class="token punctuation">.</span>DUAL<span class="token punctuation">;</span></code></pre>
<p>（4）INT函数</p>
<p>INT函数返回整型常量中的数字、字符串或者日期、时间的整数表示。</p>
<pre><code>SELECT INT(&#39;123&#39;) FROM SYSIBM.DUAL;</code></pre><p>（5）<code>BIGINT</code>函数</p>
<p><code>BIGINT</code>函数返回整型常量中的数字、字符串或者时间戳的64位长整数表示。</p>
<pre><code>SELECT BIGINT(&#39;789987&#39;) FROM SYSIBM.DUAL;</code></pre><p>（6）<code>SMALLINT</code>函数</p>
<p><code>SMALLINT</code>函数返回整型常量中的数字、字符串短整数表示。</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">SMALLINT</span><span class="token punctuation">(</span><span class="token string">'124'</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> SYSIBM<span class="token punctuation">.</span>DUAL<span class="token punctuation">;</span></code></pre>
<p>（7）REAL函数</p>
<p>REAL函数返回一个数值的单精度浮点数表示。</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">REAL</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> SYSIBM<span class="token punctuation">.</span>DUAL<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--结果：10.0</span></code></pre>
<p>（8）<code>DEC[IMAL]</code>函数</p>
<p><code>DEC[IMAL]</code>函数返回一个数值、<code>DECIMAL</code>的字符串、<code>INTEGER</code>的字符串、<code>FLOAT-POINT</code>的字符串、日期、时间或时间戳的<code>DECIMAL</code>数值。</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">DEC</span><span class="token punctuation">(</span><span class="token number">10.1314</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> SYSIBM<span class="token punctuation">.</span>DUAL<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--结果：10</span></code></pre>
<p>（9）HEX函数</p>
<p>HEX函数返回一个字符串的值的16进制表示。</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> HEX<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> SYSIBM<span class="token punctuation">.</span>DUAL<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--结果：0A000000</span></code></pre>
<p>（10）FLOOR函数</p>
<p>FLOOR函数取小于或等于参数的最大整数。</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> FLOOR<span class="token punctuation">(</span><span class="token number">10.50</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> SYSIBM<span class="token punctuation">.</span>DUAL<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--结果：10</span></code></pre>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>DB2</category>
      </categories>
      <tags>
        <tag>DB2</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL之SQL分页的N种玩法</title>
    <url>/posts/2cbe04e7.html</url>
    <content><![CDATA[<h2 id="SQL分页的N种玩法"><a href="#SQL分页的N种玩法" class="headerlink" title="SQL分页的N种玩法"></a>SQL分页的N种玩法</h2><p>整理说明：</p>
<blockquote>
<p>大概以取前3页为例。</p>
<p>page_size — &gt;每页显示条数 10，后面不再重复说明。</p>
<p>page_num  —&gt; 页码  1,2,3 取前面的2页或3页</p>
<p>从<a href="3c74f69f.html">《SQL之查询前N条记录》</a>一文整理的<code>“数据库和分页关键字/函数对应关系表”</code>可以看到分页大致分4类数据库，就以代表性的数据库来列举，相同关键字或函数的数据库用法相似，不再单列。</p>
<p>想了解Mybtatis模糊查询？请参考<a href="4c7816b.html">《Mybatis-模糊查询的N种玩法》</a>。</p>
</blockquote>
<h3 id="一、SQL-Server-分页"><a href="#一、SQL-Server-分页" class="headerlink" title="一、SQL Server 分页"></a>一、SQL Server 分页</h3><h4 id="（1）TOP方式"><a href="#（1）TOP方式" class="headerlink" title="（1）TOP方式"></a>（1）TOP方式</h4><p>查询第一页的时候，用top方法，效率最高。</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>  <span class="token keyword">top</span> <span class="token number">10</span>  pagesize   <span class="token keyword">from</span> table_name 
<span class="token keyword">where</span> id <span class="token operator">not</span> <span class="token operator">in</span><span class="token punctuation">(</span> <span class="token keyword">select</span> <span class="token keyword">top</span>  page_size <span class="token operator">*</span><span class="token punctuation">(</span>page_num  <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>   id <span class="token keyword">from</span> table_name<span class="token punctuation">)</span></code></pre>
<p>如：</p>
<p>第1页：page_num  =1 时</p>
<pre><code>select top 10  *  from loginfo where id not in(select top 0  id from loginfo)</code></pre><p>第2页：page_num  =2 时</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">top</span> <span class="token number">10</span>  <span class="token operator">*</span>  <span class="token keyword">from</span> loginfo <span class="token keyword">where</span> id <span class="token operator">not</span> <span class="token operator">in</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">top</span> <span class="token number">10</span> id <span class="token keyword">from</span> loginfo<span class="token punctuation">)</span></code></pre>
<p>第2页：page_num  =3 时</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">top</span> <span class="token number">10</span>  <span class="token operator">*</span>  <span class="token keyword">from</span> loginfo <span class="token keyword">where</span> id <span class="token operator">not</span> <span class="token operator">in</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">top</span> <span class="token number">20</span> id <span class="token keyword">from</span> loginfo<span class="token punctuation">)</span></code></pre>
<h4 id="（2）row-number-分页"><a href="#（2）row-number-分页" class="headerlink" title="（2）row_number()分页"></a>（2）row_number()分页</h4><p> SQLServer2005以后出现。其实就是把数据编号，再根据编号分页显示。</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> 
<span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span><span class="token punctuation">,</span>Rn<span class="token operator">=</span>row_number<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">order</span> <span class="token keyword">by</span> id <span class="token keyword">asc</span><span class="token punctuation">)</span> <span class="token keyword">from</span> loginfo<span class="token punctuation">)</span> <span class="token keyword">as</span> t
<span class="token keyword">where</span> t<span class="token punctuation">.</span>Rn <span class="token operator">between</span> <span class="token punctuation">(</span>page_num <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span> page_size <span class="token operator">+</span><span class="token number">1</span> <span class="token operator">and</span> page_num <span class="token operator">*</span> page_size <span class="token punctuation">;</span></code></pre>
<p>如：</p>
<p>第1页：page_num=1 时</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> 
<span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span><span class="token punctuation">,</span> row_number<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">order</span> <span class="token keyword">by</span> id <span class="token keyword">asc</span><span class="token punctuation">)</span> <span class="token keyword">as</span> rownum <span class="token keyword">from</span> loginfo<span class="token punctuation">)</span> <span class="token keyword">as</span> t
<span class="token keyword">where</span> t<span class="token punctuation">.</span>rownum <span class="token operator">between</span> <span class="token number">1</span> <span class="token operator">and</span>  <span class="token number">10</span></code></pre>
<p>第2页：page_num=2 时</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> 
<span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span><span class="token punctuation">,</span>row_number<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">order</span> <span class="token keyword">by</span> id <span class="token keyword">asc</span><span class="token punctuation">)</span> <span class="token keyword">as</span> rownum <span class="token keyword">from</span> loginfo<span class="token punctuation">)</span> <span class="token keyword">as</span> t
<span class="token keyword">where</span> t<span class="token punctuation">.</span>rownum <span class="token operator">between</span> <span class="token number">11</span> <span class="token operator">and</span>  <span class="token number">20</span></code></pre>
<p>第2页：page_num=3 时</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> 
<span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span><span class="token punctuation">,</span>Rn<span class="token operator">=</span>row_number<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">order</span> <span class="token keyword">by</span> id <span class="token keyword">asc</span><span class="token punctuation">)</span> <span class="token keyword">from</span> loginfo<span class="token punctuation">)</span> <span class="token keyword">as</span> t
<span class="token keyword">where</span> t<span class="token punctuation">.</span>Rn <span class="token operator">between</span> <span class="token number">21</span> <span class="token operator">and</span>  <span class="token number">30</span></code></pre>
<h4 id="（3）offset-fetch-next-方式"><a href="#（3）offset-fetch-next-方式" class="headerlink" title="（3）offset  fetch next 方式"></a>（3）offset  fetch next 方式</h4><p>Sqlserve2012开始支持。</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> table_name <span class="token keyword">order</span> <span class="token keyword">by</span> id
<span class="token keyword">offset</span> <span class="token punctuation">(</span>page_num<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token operator">*</span> page_size <span class="token keyword">rows</span> <span class="token keyword">fetch</span> <span class="token keyword">next</span> page_size <span class="token keyword">rows</span> only</code></pre>
<p>如：</p>
<p>第1页：page_num=1 时</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> loginfo <span class="token keyword">order</span> <span class="token keyword">by</span> id <span class="token keyword">offset</span> <span class="token number">0</span> <span class="token keyword">rows</span> <span class="token keyword">fetch</span> <span class="token keyword">next</span> <span class="token number">10</span> <span class="token keyword">rows</span> only</code></pre>
<p>第2页：page_num=2 时</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> loginfo <span class="token keyword">order</span> <span class="token keyword">by</span> id <span class="token keyword">offset</span> <span class="token number">10</span> <span class="token keyword">rows</span> <span class="token keyword">fetch</span> <span class="token keyword">next</span> <span class="token number">10</span> <span class="token keyword">rows</span> only</code></pre>
<p>第2页：page_num=3 时</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> loginfo <span class="token keyword">order</span> <span class="token keyword">by</span> id <span class="token keyword">offset</span> <span class="token number">20</span> <span class="token keyword">rows</span> <span class="token keyword">fetch</span> <span class="token keyword">next</span> <span class="token number">10</span> <span class="token keyword">rows</span> only</code></pre>
<p>表示从第10行开始取接下来的10行数据。</p>
<h3 id="二、Mysql分页"><a href="#二、Mysql分页" class="headerlink" title="二、Mysql分页"></a>二、Mysql分页</h3><h4 id="（1）Limit"><a href="#（1）Limit" class="headerlink" title="（1）Limit"></a>（1）Limit</h4><p>Limit适用于数据量较少的情况，数据量在万以下，会进行全表扫描。</p>
<p>mysql数据库使用limit分页查询时，索引是从0开始的，表中第1条数据的索引是0，第2条数据的索引是1，第3条数据的索引是2，以此类推…</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> table_name <span class="token keyword">limit</span> <span class="token keyword">index</span><span class="token punctuation">,</span> pagesize<span class="token punctuation">;</span></code></pre>
<p>index表示结果集索引开始行提前数据；</p>
<p>pagesize表示结果集索引开始行,取出pagesize条记录数据。</p>
<p>实际使用时：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> table_name <span class="token keyword">limit</span>  <span class="token punctuation">(</span>page_num<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span> page_size<span class="token punctuation">,</span> page_size<span class="token punctuation">;</span> </code></pre>
<p>如：</p>
<p>第1页：page_num  =1 时</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> loginfo <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--从第1行开始，取10条数据，索引是[0-9]</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> loginfo <span class="token keyword">limit</span> <span class="token number">10</span> <span class="token punctuation">;</span></code></pre>
<p>第2页：page_num  =2 时</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> loginfo <span class="token keyword">limit</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--从第11行开始，取10条数据，索引是[10-19]</span></code></pre>
<p>第3页、第4页以此类推…</p>
<h4 id="（2）主键或唯一索引分页"><a href="#（2）主键或唯一索引分页" class="headerlink" title="（2）主键或唯一索引分页"></a>（2）主键或唯一索引分页</h4><p>利用索引扫描，可以提升查询速度，可用于万级数据量。</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> table_name <span class="token keyword">where</span> id_primarykey <span class="token operator">></span> <span class="token punctuation">(</span>page_num<span class="token operator">*</span>page_size<span class="token punctuation">)</span> <span class="token keyword">order</span> <span class="token keyword">by</span> id_primarykey <span class="token keyword">asc</span> <span class="token keyword">limit</span> page_size</code></pre>
<p>如：</p>
<p>第1页：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_s_log <span class="token keyword">where</span> id <span class="token operator">></span> <span class="token number">10</span> <span class="token keyword">order</span> <span class="token keyword">by</span> id <span class="token keyword">asc</span> <span class="token keyword">limit</span> <span class="token number">10</span></code></pre>
<p>第2页：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_s_log <span class="token keyword">where</span> id <span class="token operator">></span> <span class="token number">20</span> <span class="token keyword">order</span> <span class="token keyword">by</span> id <span class="token keyword">asc</span> <span class="token keyword">limit</span> <span class="token number">10</span></code></pre>
<h4 id="（3）索引预执行PREPARE"><a href="#（3）索引预执行PREPARE" class="headerlink" title="（3）索引预执行PREPARE"></a>（3）索引预执行PREPARE</h4><p>语法</p>
<pre class=" language-sql"><code class="language-sql">PREPARE stmt_name <span class="token keyword">FROM</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> table_name <span class="token keyword">WHERE</span> id_primarykey <span class="token operator">></span> <span class="token punctuation">(</span>page_num <span class="token operator">*</span> page_size<span class="token punctuation">)</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> id_primarykey <span class="token keyword">asc</span> <span class="token keyword">limit</span> page_size。</code></pre>
<p>《Mysql预执行PREPARE》</p>
<h4 id="（4）利用子查询-嵌套查询"><a href="#（4）利用子查询-嵌套查询" class="headerlink" title="（4）利用子查询/嵌套查询"></a>（4）利用子查询/嵌套查询</h4><p>利用子查询，如果有索引或主键尽量使用索引或主键排序，子查询是在索引上完成。</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span><span class="token operator">*</span> <span class="token keyword">FROM</span> table_name <span class="token keyword">WHERE</span>  id <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> id <span class="token keyword">FROM</span> table_name <span class="token keyword">ORDER</span>
<span class="token keyword">BY</span> id <span class="token keyword">desc</span> <span class="token keyword">LIMIT</span> <span class="token punctuation">(</span>page_num<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span>page_size<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> id <span class="token keyword">desc</span> <span class="token keyword">LIMIT</span>  page_size</code></pre>
<p>我测试实际运行数据库一张日志表中4万条数据的情况下查询速度对比，我的主键id是32位字符串。</p>
<pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--执行时间约：0.030 sec</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_s_log <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> id <span class="token keyword">DESC</span> <span class="token keyword">LIMIT</span> <span class="token number">30000</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">;</span> 

<span class="token comment" spellcheck="true">--执行时间约：0.012 sec</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_s_log <span class="token keyword">WHERE</span> ID <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> ID <span class="token keyword">FROM</span> T_S_LOG <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> ID   <span class="token keyword">DESC</span> <span class="token keyword">LIMIT</span> <span class="token number">30000</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> id <span class="token keyword">DESC</span> <span class="token keyword">LIMIT</span>  <span class="token number">10</span><span class="token punctuation">;</span></code></pre>
<p>子查询明显比单纯的<code>limit index, page_size</code>快。</p>
<h4 id="（5）利用连接查询"><a href="#（5）利用连接查询" class="headerlink" title="（5）利用连接查询"></a>（5）利用连接查询</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> table_name <span class="token keyword">AS</span> t1
<span class="token keyword">JOIN</span> <span class="token punctuation">(</span> <span class="token keyword">SELECT</span> id <span class="token keyword">FROM</span> table_name <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> id <span class="token keyword">desc</span> <span class="token keyword">LIMIT</span> <span class="token punctuation">(</span>page_num<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span>page_size <span class="token punctuation">)</span><span class="token keyword">AS</span> t2
<span class="token keyword">WHERE</span> t1<span class="token punctuation">.</span>id <span class="token operator">&lt;=</span> t2<span class="token punctuation">.</span>id <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> t1<span class="token punctuation">.</span>id <span class="token keyword">desc</span> <span class="token keyword">LIMIT</span> page_size<span class="token punctuation">;</span></code></pre>
<p>从查询的临时表t2可以看得出当页码越大速度会越慢，此方法慎用。</p>
<pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--执行时间约：11.193 sec</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_s_log <span class="token keyword">AS</span> t1 <span class="token keyword">JOIN</span> <span class="token punctuation">(</span> 
    <span class="token keyword">SELECT</span> id <span class="token keyword">FROM</span> t_s_log <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> id <span class="token keyword">DESC</span> <span class="token keyword">LIMIT</span> <span class="token number">100</span> <span class="token punctuation">)</span><span class="token keyword">AS</span> t2
<span class="token keyword">WHERE</span> t1<span class="token punctuation">.</span>id <span class="token operator">&lt;=</span> t2<span class="token punctuation">.</span>id <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> t1<span class="token punctuation">.</span>id <span class="token keyword">DESC</span> <span class="token keyword">LIMIT</span> <span class="token number">10</span><span class="token punctuation">;</span></code></pre>
<h4 id="（6）BETWEEN-AND分页"><a href="#（6）BETWEEN-AND分页" class="headerlink" title="（6）BETWEEN AND分页"></a>（6）BETWEEN AND分页</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> table_name <span class="token keyword">where</span> id <span class="token operator">BETWEEN</span> start_id <span class="token operator">AND</span> end_id<span class="token punctuation">;</span></code></pre>
<p>可以看出这是直接定位ID的范围的方式，它十分依赖id的，如id的连续性问题，但是作为无删除的应用环境下是十分实用的且高效的。<code>BETWEEN  ADN</code>的方式支持字符串ID。但是作为一种分页查询的方式，采用直接定位ID范围的方式，依旧是比较有效率的。</p>
<h3 id="三、Oracle-分页"><a href="#三、Oracle-分页" class="headerlink" title="三、Oracle 分页"></a>三、Oracle 分页</h3><p>oracle主要还是使用<code>ROWNUM</code>进行分页。</p>
<h4 id="（1）直接简单粗暴的方式"><a href="#（1）直接简单粗暴的方式" class="headerlink" title="（1）直接简单粗暴的方式"></a>（1）直接简单粗暴的方式</h4><p>先排序再取需要的数据，数据越多越慢。</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span>
    <span class="token keyword">select</span> t<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>rownum num <span class="token keyword">from</span> table_name t
<span class="token punctuation">)</span> 
<span class="token keyword">where</span> t<span class="token punctuation">.</span>num <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>page_num <span class="token operator">*</span> page_size<span class="token punctuation">)</span> <span class="token operator">and</span>  t<span class="token punctuation">.</span>num<span class="token operator">>=</span> <span class="token punctuation">(</span>page_num<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span>page_size <span class="token operator">+</span><span class="token number">1</span>
<span class="token comment" spellcheck="true">--where BETWEEN (page_num-1)*page_size +1 AND  (page_num * page_size) </span></code></pre>
<p>排序好了直接拿，</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>  <span class="token operator">*</span>，ROWNUM  rn  <span class="token keyword">FROM</span> table_name <span class="token keyword">where</span> rm <span class="token operator">BETWEEN</span> <span class="token punctuation">(</span>page_num<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span>page_size <span class="token operator">+</span><span class="token number">1</span> <span class="token operator">AND</span>  <span class="token punctuation">(</span>page_num <span class="token operator">*</span> page_size<span class="token punctuation">)</span> <span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">--注意：oracle 没有 as</span></code></pre>
<h4 id="（2）子查询-嵌套查询"><a href="#（2）子查询-嵌套查询" class="headerlink" title="（2）子查询/嵌套查询"></a>（2）子查询/嵌套查询</h4><p>子查询都是通过限定查询范围的方式缩小查询范围。</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">(</span>
    <span class="token keyword">SELECT</span> t<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>ROWNUM r <span class="token keyword">FROM</span> table_name t <span class="token keyword">WHERE</span> r <span class="token operator">&lt;=</span> page_num<span class="token operator">*</span>page_size
<span class="token punctuation">)</span> <span class="token keyword">WHERE</span> r <span class="token operator">></span><span class="token punctuation">(</span>page_num<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span>page_size
<span class="token comment" spellcheck="true">--没有+1是因为用的大于号</span></code></pre>
<p>​    （a）不排序的子查询</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> tmp<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span>
    <span class="token keyword">select</span> t<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>ROWNUM rn <span class="token keyword">from</span> table_name t <span class="token keyword">where</span> t<span class="token punctuation">.</span>rn <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>page_num <span class="token operator">*</span> page_size<span class="token punctuation">)</span>
<span class="token punctuation">)</span> tmp 
<span class="token keyword">where</span> tmp<span class="token punctuation">.</span>rn <span class="token operator">>=</span> <span class="token punctuation">(</span>page_num<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span>page_size <span class="token operator">+</span><span class="token number">1</span> <span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">-- +1是因为用的大于或等于号</span></code></pre>
<p>​    （b）带 <code>order by</code>的排序</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> tmp<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span>
    <span class="token keyword">select</span> t<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span> rownum rn <span class="token keyword">from</span> <span class="token punctuation">(</span>
        <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> T_BASE_PROVINCE <span class="token keyword">order</span> <span class="token keyword">by</span> id <span class="token keyword">asc</span>
    <span class="token punctuation">)</span> t
     <span class="token keyword">where</span> t<span class="token punctuation">.</span>rn <span class="token operator">&lt;=</span>  <span class="token punctuation">(</span>page_num <span class="token operator">*</span> page_size<span class="token punctuation">)</span>
<span class="token punctuation">)</span> tmp
<span class="token keyword">where</span> tmp<span class="token punctuation">.</span>rn <span class="token operator">>=</span> <span class="token punctuation">(</span>page_num<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span>page_size <span class="token operator">+</span><span class="token number">1</span> <span class="token punctuation">;</span></code></pre>
<h4 id="（3）使用minus作差"><a href="#（3）使用minus作差" class="headerlink" title="（3）使用minus作差"></a>（3）使用minus作差</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> table_name <span class="token keyword">where</span> rownum<span class="token operator">&lt;=</span><span class="token punctuation">(</span>page_num <span class="token operator">*</span> page_size<span class="token punctuation">)</span>
minus 
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> table_name <span class="token keyword">where</span> rownum<span class="token operator">&lt;=</span><span class="token punctuation">(</span>page_num<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span>page_size</code></pre>
<h4 id="（4）WITH-AS方式"><a href="#（4）WITH-AS方式" class="headerlink" title="（4）WITH  AS方式"></a>（4）WITH  AS方式</h4><p><code>WITH  AS</code>将SQL语句中单独的子查询语句提取出来，作为一个单独的临时表来组织命名。在原来的语句中，就可以使用新的别名来替代子查询。</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">WITH</span> tmp1 <span class="token keyword">AS</span><span class="token punctuation">(</span>
<span class="token punctuation">(</span>
      <span class="token keyword">SELECT</span> ROWNUM <span class="token keyword">AS</span> rowno<span class="token punctuation">,</span> tt<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">(</span>  
         <span class="token keyword">SELECT</span> <span class="token operator">*</span>  <span class="token keyword">FROM</span> table_name t
              <span class="token keyword">WHERE</span> <span class="token keyword">some</span> conditions
              <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> fact_up_time<span class="token punctuation">,</span> flight_no
     <span class="token punctuation">)</span> tt
    <span class="token keyword">WHERE</span> ROWNUM <span class="token operator">&lt;=</span> page_num<span class="token operator">*</span>page_size
<span class="token punctuation">)</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> tmp1<span class="token punctuation">.</span>rowno <span class="token operator">></span> <span class="token punctuation">(</span>page_num<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span>page_size</code></pre>
<p>这里是有排序的，无排序的写法同理。</p>
<p>总结：<strong>能不查全表尽量不去查全表，尽快缩小查询范围，再提取分页数据。</strong></p>
<h3 id="四、DB2分页"><a href="#四、DB2分页" class="headerlink" title="四、DB2分页"></a>四、DB2分页</h3><h4 id="（1）BETWEEN-AND分页"><a href="#（1）BETWEEN-AND分页" class="headerlink" title="（1）BETWEEN AND分页"></a>（1）BETWEEN AND分页</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span>
    <span class="token keyword">select</span> <span class="token operator">*</span><span class="token punctuation">,</span>rownumber<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">order</span> <span class="token keyword">by</span> id <span class="token keyword">asc</span> <span class="token punctuation">)</span> <span class="token keyword">as</span> rowid <span class="token keyword">from</span> table_name
<span class="token punctuation">)</span><span class="token keyword">as</span> <span class="token number">a</span>

<span class="token keyword">where</span> <span class="token number">a</span><span class="token punctuation">.</span>rowid <span class="token operator">>=</span> <span class="token punctuation">(</span>page_num<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span>page_size<span class="token operator">+</span><span class="token number">1</span>  <span class="token operator">AND</span> <span class="token number">a</span><span class="token punctuation">.</span>rowid <span class="token operator">&lt;=</span> page_num<span class="token operator">*</span>page_size
<span class="token comment" spellcheck="true">--where a.rowid  between (page_num-1)*page_size+1  and  page_num*page_size</span></code></pre>
<p>在实际使用中，table_name可能会是一个真正业务数据子查询：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span>
    <span class="token keyword">select</span> tmp_page<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>rownumber<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> row_id <span class="token keyword">from</span> <span class="token punctuation">(</span> 
        <span class="token keyword">select</span>  ID<span class="token punctuation">,</span> LOG_MSG<span class="token punctuation">,</span> OPACCOUNT<span class="token punctuation">,</span> OP_TIME<span class="token punctuation">,</span> OPTYPE<span class="token punctuation">,</span> VERIFY_ACCOUNT<span class="token punctuation">,</span> ADDRIP<span class="token punctuation">,</span> DBAPP <span class="token keyword">from</span> LOGINFO <span class="token keyword">WHERE</span> <span class="token punctuation">(</span> OP_TIME <span class="token operator">>=</span> <span class="token string">'2020-06-15 17:05:52'</span> <span class="token operator">and</span> OPTYPE <span class="token operator">=</span> <span class="token string">'登录'</span> <span class="token punctuation">)</span> <span class="token keyword">order</span> <span class="token keyword">by</span> id <span class="token keyword">desc</span>
    <span class="token punctuation">)</span> <span class="token keyword">as</span> tmp_page
<span class="token punctuation">)</span> <span class="token keyword">where</span> row_id <span class="token operator">between</span> <span class="token number">1</span> <span class="token operator">and</span> <span class="token number">30</span> </code></pre>
<h4 id="（2）WITH-AS-方式"><a href="#（2）WITH-AS-方式" class="headerlink" title="（2）WITH  AS 方式"></a>（2）WITH  AS 方式</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">WITH</span> TMP <span class="token keyword">AS</span><span class="token punctuation">(</span>
    <span class="token comment" spellcheck="true">--先找出需要的数据</span>
   <span class="token keyword">select</span> <span class="token operator">*</span><span class="token punctuation">,</span>rownumber<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">order</span> <span class="token keyword">by</span> id <span class="token keyword">asc</span> <span class="token punctuation">)</span> <span class="token keyword">as</span> row_id <span class="token keyword">from</span> table_name

<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">--最后根据序号取数据</span>
<span class="token keyword">SELECT</span> TMP<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">FROM</span> TMP <span class="token keyword">WHERE</span>  row_id <span class="token operator">between</span> <span class="token punctuation">(</span>page_num<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span>page_size <span class="token operator">and</span> page_num<span class="token operator">*</span>page_size</code></pre>
<p>本质还是借助<code>rownumber() over()</code>排好序，明显可以看到缺点是临时表较大。</p>
<p>实际使用示例：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">with</span> tmp <span class="token keyword">as</span><span class="token punctuation">(</span>
    <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span>

        <span class="token keyword">select</span> tmp_page<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>rownumber<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> row_id <span class="token keyword">from</span> <span class="token punctuation">(</span> 

                <span class="token keyword">select</span>  ID<span class="token punctuation">,</span> LOG_MSG<span class="token punctuation">,</span> OPACCOUNT<span class="token punctuation">,</span>OP_TIME<span class="token punctuation">,</span> OPTYPE 
                <span class="token keyword">from</span> LOGINFO <span class="token keyword">WHERE</span> <span class="token punctuation">(</span> OPTYPE <span class="token operator">>=</span><span class="token string">'2020-06-15 17:05:52'</span> <span class="token operator">and</span> OPTYPE <span class="token operator">=</span> <span class="token string">'登陆'</span>                     <span class="token punctuation">)</span>  <span class="token keyword">order</span> <span class="token keyword">by</span> id <span class="token keyword">desc</span>
         <span class="token punctuation">)</span> <span class="token keyword">as</span> tmp_page  
    <span class="token punctuation">)</span> 
<span class="token punctuation">)</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tmp <span class="token keyword">where</span> row_id <span class="token operator">between</span> <span class="token number">30</span> <span class="token operator">and</span> <span class="token number">40</span></code></pre>
<h4 id="（3）Fetch-first-rows-only"><a href="#（3）Fetch-first-rows-only" class="headerlink" title="（3）Fetch first rows only"></a>（3）Fetch first rows only</h4><p>使用Fetch first rows only分页依旧借助<code>WITH  AS</code>但是可以不断缩小临时表的范围。</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">WITH</span> TMP <span class="token keyword">AS</span><span class="token punctuation">(</span>
    <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span>
            <span class="token keyword">select</span> <span class="token operator">*</span><span class="token punctuation">,</span>rownumber<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">order</span> <span class="token keyword">by</span> id <span class="token keyword">asc</span> <span class="token punctuation">)</span> <span class="token keyword">as</span> row_id <span class="token keyword">from</span> table_name
    <span class="token punctuation">)</span> 
    <span class="token keyword">where</span>  row_id <span class="token operator">></span> <span class="token punctuation">(</span>page_num<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span>page_size
<span class="token punctuation">)</span>
<span class="token keyword">SELECT</span> TMP<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">FROM</span> TMP <span class="token keyword">WHERE</span>   <span class="token keyword">fetch</span> <span class="token keyword">first</span>  pagesize  <span class="token keyword">rows</span> only</code></pre>
<p>实际使用示例：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">with</span> tmp <span class="token keyword">as</span><span class="token punctuation">(</span>
    <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span>

        <span class="token keyword">select</span> tmp_page<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>rownumber<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> row_id <span class="token keyword">from</span> <span class="token punctuation">(</span> 

            <span class="token keyword">select</span>  ID<span class="token punctuation">,</span>  LOG_MSG<span class="token punctuation">,</span> OPACCOUNT<span class="token punctuation">,</span> OP_APPNAME<span class="token punctuation">,</span> OP_DATABASE<span class="token punctuation">,</span> OP_TIME<span class="token punctuation">,</span> OPTYPE 
            <span class="token keyword">from</span> LOGINFO <span class="token keyword">WHERE</span> <span class="token punctuation">(</span> OPTYPE <span class="token operator">>=</span><span class="token string">'2020-06-15 17:05:52'</span> <span class="token operator">and</span> OPTYPE <span class="token operator">=</span> <span class="token string">'登录'</span> <span class="token punctuation">)</span>               <span class="token keyword">order</span> <span class="token keyword">by</span> id <span class="token keyword">desc</span>

         <span class="token punctuation">)</span> <span class="token keyword">as</span> tmp_page 

    <span class="token punctuation">)</span> <span class="token keyword">where</span> row_id <span class="token operator">></span><span class="token number">20</span>

<span class="token punctuation">)</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tmp <span class="token keyword">fetch</span> <span class="token keyword">first</span>  <span class="token number">10</span> <span class="token keyword">rows</span> only</code></pre>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>SQL分页</tag>
      </tags>
  </entry>
  <entry>
    <title>github 的访问慢加速</title>
    <url>/posts/5817ecc2.html</url>
    <content><![CDATA[<h2 id="github-访问慢加速"><a href="#github-访问慢加速" class="headerlink" title="github 访问慢加速"></a>github 访问慢加速</h2><p>内容整理来自网络。</p>
<h2 id="一、获取相关域名"><a href="#一、获取相关域名" class="headerlink" title="一、获取相关域名"></a>一、获取相关域名</h2><p>获取Github相关网站的域名。</p>
<p>方式一：</p>
<p>访问 <a href="https://github.com" target="_blank" rel="noopener">https://github.com</a></p>
<p>F12 查看网络，查看域名。</p>
<p>方式二：</p>
<p>直接访问：<a href="https://github.com.ipaddress.com" target="_blank" rel="noopener">https://github.com.ipaddress.com</a></p>
<h2 id="一、获取相关域名对应IP"><a href="#一、获取相关域名对应IP" class="headerlink" title="一、获取相关域名对应IP"></a>一、获取相关域名对应IP</h2><p>访问 <a href="https://www.ipaddress.com，" target="_blank" rel="noopener">https://www.ipaddress.com，</a></p>
<p>分别输入</p>
<p>github.global.ssl.fastly.net<br>github.com</p>
<p>查询ip地址</p>
<h2 id="三、配置hosts"><a href="#三、配置hosts" class="headerlink" title="三、配置hosts"></a>三、配置hosts</h2><p><code>windows</code> 系统的 hosts 文件的位置如下：<code>C:\Windows\System32\drivers\etc\hosts</code> ;</p>
<p><code>mac/linux</code> 系统的 hosts 文件的位置如下：<code>/etc/hosts</code> 。</p>
<p>下面是我的配置，更新日期 2020-10-03</p>
<pre class=" language-txt"><code class="language-txt">140.82.112.3 github.com
199.232.69.194 github.global.ssl.fastly.net

199.232.68.133  githubusercontent.com
185.199.108.153 assets-cdn.github.com
185.199.109.153 assets-cdn.github.com
185.199.110.153 assets-cdn.github.com
185.199.111.153 assets-cdn.github.com</code></pre>
<h2 id="四、刷新DNS"><a href="#四、刷新DNS" class="headerlink" title="四、刷新DNS"></a>四、刷新DNS</h2><pre class=" language-bash"><code class="language-bash">ipconfig /flushdns</code></pre>
<p>应该快点了吧？</p>
<p>隔一段时间查一次，IP 不会一直不变，不定期更新。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Github</category>
      </categories>
      <tags>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>开发常用的网站</title>
    <url>/posts/2d1a17c5.html</url>
    <content><![CDATA[<h4 id="API在线"><a href="#API在线" class="headerlink" title="API在线"></a>API在线</h4><table>
<thead>
<tr>
<th>网站</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>常用API文档索引</td>
<td><a href="https://tool.oschina.net/apidocs" target="_blank" rel="noopener">https://tool.oschina.net/apidocs</a></td>
</tr>
<tr>
<td>java8 API</td>
<td><a href="https://www.matools.com/api/java8" target="_blank" rel="noopener">https://www.matools.com/api/java8</a></td>
</tr>
<tr>
<td>Mybatis java API</td>
<td>h<a href="https://mybatis.org/mybatis-3/zh/java-api.html" target="_blank" rel="noopener">https://mybatis.org/mybatis-3/zh/java-api.html</a></td>
</tr>
<tr>
<td>dubbo API</td>
<td><a href="http://dubbo.apache.org/zh-cn/docs/user/configuration/api.html" target="_blank" rel="noopener">http://dubbo.apache.org/zh-cn/docs/user/configuration/api.html</a></td>
</tr>
</tbody></table>
<h4 id="开源网站"><a href="#开源网站" class="headerlink" title="开源网站"></a>开源网站</h4><table>
<thead>
<tr>
<th>网站</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>github网站</td>
<td><a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a></td>
</tr>
<tr>
<td>码云</td>
<td><a href="https://gitee.com/" target="_blank" rel="noopener">https://gitee.com/</a></td>
</tr>
<tr>
<td>一起开源官网</td>
<td><a href="http://www.17ky.net/" target="_blank" rel="noopener">http://www.17ky.net/</a></td>
</tr>
<tr>
<td>Open JDK</td>
<td><a href="http://openjdk.java.net/" target="_blank" rel="noopener">http://openjdk.java.net/</a></td>
</tr>
<tr>
<td>Open JDK  HotSpot</td>
<td><a href="https://wiki.openjdk.java.net/display/HotSpot/Main" target="_blank" rel="noopener">https://wiki.openjdk.java.net/display/HotSpot/Main</a></td>
</tr>
</tbody></table>
<h4 id="开发相关"><a href="#开发相关" class="headerlink" title="开发相关"></a>开发相关</h4><table>
<thead>
<tr>
<th>网站</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>ORICLE官网</td>
<td><a href="https://www.oracle.com/downloads/" target="_blank" rel="noopener">https://www.oracle.com/downloads/</a></td>
</tr>
<tr>
<td>JAVA官网</td>
<td><a href="https://www.oracle.com/java/technologies/javase-downloads.html" target="_blank" rel="noopener">https://www.oracle.com/java/technologies/javase-downloads.html</a></td>
</tr>
<tr>
<td>ECLIPSE官网</td>
<td><a href="https://www.eclipse.org/downloads/" target="_blank" rel="noopener">https://www.eclipse.org/downloads/</a></td>
</tr>
<tr>
<td>IntelliJ IDEA</td>
<td><a href="http://www.jetbrains.com/" target="_blank" rel="noopener">http://www.jetbrains.com/</a></td>
</tr>
<tr>
<td>springtoolsuite</td>
<td><a href="https://spring.io/tools" target="_blank" rel="noopener">https://spring.io/tools</a></td>
</tr>
<tr>
<td>Python官网</td>
<td><a href="https://www.python.org/" target="_blank" rel="noopener">https://www.python.org/</a></td>
</tr>
<tr>
<td>Maven官网</td>
<td><a href="https://maven.apache.org/" target="_blank" rel="noopener">https://maven.apache.org/</a></td>
</tr>
<tr>
<td>Maven仓库</td>
<td><a href="https://mvnrepository.com/" target="_blank" rel="noopener">https://mvnrepository.com/</a></td>
</tr>
<tr>
<td>Nexus官网</td>
<td><a href="https://www.nexusmods.com/" target="_blank" rel="noopener">https://www.nexusmods.com/</a></td>
</tr>
<tr>
<td>Ant官网</td>
<td><a href="https://ant.apache.org/" target="_blank" rel="noopener">https://ant.apache.org/</a></td>
</tr>
<tr>
<td>SVN官网</td>
<td><a href="https://tortoisesvn.net/" target="_blank" rel="noopener">https://tortoisesvn.net/</a></td>
</tr>
<tr>
<td>Git官网</td>
<td><a href="https://git-scm.com/" target="_blank" rel="noopener">https://git-scm.com/</a></td>
</tr>
<tr>
<td>Spring官网</td>
<td><a href="https://spring.io/" target="_blank" rel="noopener">https://spring.io/</a></td>
</tr>
<tr>
<td>mybatis</td>
<td><a href="https://mybatis.org/mybatis-3/" target="_blank" rel="noopener">https://mybatis.org/mybatis-3/</a></td>
</tr>
<tr>
<td>slf4j</td>
<td><a href="http://www.slf4j.org" target="_blank" rel="noopener">http://www.slf4j.org</a></td>
</tr>
<tr>
<td>webjars</td>
<td><a href="https://www.webjars.org/" target="_blank" rel="noopener">https://www.webjars.org/</a></td>
</tr>
</tbody></table>
<h4 id="服务相关"><a href="#服务相关" class="headerlink" title="服务相关"></a>服务相关</h4><table>
<thead>
<tr>
<th>网站</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>APACHE官网</td>
<td><a href="http://tomcat.apache.org/" target="_blank" rel="noopener">http://tomcat.apache.org/</a></td>
</tr>
<tr>
<td>Tomcat官网</td>
<td><a href="http://tomcat.apache.org/" target="_blank" rel="noopener">http://tomcat.apache.org/</a></td>
</tr>
<tr>
<td>Nginx官网</td>
<td><a href="http://nginx.org/" target="_blank" rel="noopener">http://nginx.org/</a></td>
</tr>
<tr>
<td>Dubbo官网</td>
<td><a href="http://dubbo.apache.org/zh-cn/" target="_blank" rel="noopener">http://dubbo.apache.org/zh-cn/</a></td>
</tr>
<tr>
<td>Zookeeper</td>
<td><a href="https://zookeeper.apache.org/" target="_blank" rel="noopener">https://zookeeper.apache.org/</a></td>
</tr>
<tr>
<td>netty</td>
<td><a href="https://netty.io/" target="_blank" rel="noopener">https://netty.io/</a></td>
</tr>
<tr>
<td>jetty</td>
<td><a href="http://www.eclipse.org/jetty/" target="_blank" rel="noopener">http://www.eclipse.org/jetty/</a></td>
</tr>
</tbody></table>
<h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><table>
<thead>
<tr>
<th>网站</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>Linux</td>
<td><a href="https://www.linux.org/" target="_blank" rel="noopener">https://www.linux.org/</a></td>
</tr>
<tr>
<td>Linux开源社区</td>
<td><a href="https://linux.cn/" target="_blank" rel="noopener">https://linux.cn/</a></td>
</tr>
<tr>
<td>Linux公社</td>
<td><a href="https://www.linuxidc.com/" target="_blank" rel="noopener">https://www.linuxidc.com/</a></td>
</tr>
</tbody></table>
<h4 id="数据库相关"><a href="#数据库相关" class="headerlink" title="数据库相关"></a>数据库相关</h4><table>
<thead>
<tr>
<th>网站</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>Mysql官网</td>
<td><a href="https://www.mysql.com/" target="_blank" rel="noopener">https://www.mysql.com/</a></td>
</tr>
<tr>
<td>SQL SERVER官网</td>
<td><a href="https://www.microsoft.com/zh-cn/sql-server/sql-server-downloads" target="_blank" rel="noopener">https://www.microsoft.com/zh-cn/sql-server/sql-server-downloads</a></td>
</tr>
<tr>
<td>ORICLE官网</td>
<td><a href="https://www.oracle.com/downloads/" target="_blank" rel="noopener">https://www.oracle.com/downloads/</a></td>
</tr>
<tr>
<td>DB2官网</td>
<td><a href="https://www.ibm.com/analytics/cn/zh/technology/db2/" target="_blank" rel="noopener">https://www.ibm.com/analytics/cn/zh/technology/db2/</a></td>
</tr>
<tr>
<td>TOAD官网</td>
<td><a href="https://www.toadworld.com/" target="_blank" rel="noopener">https://www.toadworld.com/</a></td>
</tr>
<tr>
<td>Navicat官网</td>
<td><a href="https://www.navicat.com.cn/" target="_blank" rel="noopener">https://www.navicat.com.cn/</a></td>
</tr>
<tr>
<td>DataGrip官网</td>
<td><a href="https://www.jetbrains.com/zh/datagrip/specials/datagrip/datagrip.html" target="_blank" rel="noopener">https://www.jetbrains.com/zh/datagrip/specials/datagrip/datagrip.html</a></td>
</tr>
<tr>
<td>Redis官网</td>
<td><a href="https://redis.io/" target="_blank" rel="noopener">https://redis.io/</a></td>
</tr>
<tr>
<td>Redis中文网</td>
<td><a href="http://www.redis.cn/" target="_blank" rel="noopener">http://www.redis.cn/</a></td>
</tr>
<tr>
<td>MongoDB官网</td>
<td><a href="https://www.mongodb.com/Nginx" target="_blank" rel="noopener">https://www.mongodb.com/Nginx</a>  <a href="http://nginx.org/" target="_blank" rel="noopener">http://nginx.org/</a></td>
</tr>
<tr>
<td>UML工具列表</td>
<td><a href="http://www.umlchina.com/Tools/Newindex1.htm" target="_blank" rel="noopener">http://www.umlchina.com/Tools/Newindex1.htm</a></td>
</tr>
</tbody></table>
<h4 id="前端相关"><a href="#前端相关" class="headerlink" title="前端相关"></a>前端相关</h4><table>
<thead>
<tr>
<th>网站</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>w3school官网</td>
<td><a href="http://www.w3school.com.cn/" target="_blank" rel="noopener">http://www.w3school.com.cn/</a></td>
</tr>
<tr>
<td>jQuery官网</td>
<td><a href="https://jquery.com/" target="_blank" rel="noopener">https://jquery.com/</a></td>
</tr>
<tr>
<td>jQuery api   非官网:</td>
<td><a href="http://jquery.cuishifeng.cn/" target="_blank" rel="noopener">http://jquery.cuishifeng.cn/</a></td>
</tr>
<tr>
<td>easyui官网</td>
<td><a href="http://www.jeasyui.net/" target="_blank" rel="noopener">http://www.jeasyui.net/</a></td>
</tr>
<tr>
<td>Bootstrap官网</td>
<td><a href="https://www.bootcss.com/" target="_blank" rel="noopener">https://www.bootcss.com/</a></td>
</tr>
<tr>
<td>Amaze ~ 妹子 UI官网:</td>
<td><a href="http://amazeui.org/" target="_blank" rel="noopener">http://amazeui.org/</a></td>
</tr>
<tr>
<td>React</td>
<td><a href="https://react.docschina.org/" target="_blank" rel="noopener">https://react.docschina.org/</a></td>
</tr>
<tr>
<td>NOWA</td>
<td><a href="https://nowa-webpack.github.io/" target="_blank" rel="noopener">https://nowa-webpack.github.io/</a></td>
</tr>
<tr>
<td>Vue官网:</td>
<td><a href="https://cn.vuejs.org/" target="_blank" rel="noopener">https://cn.vuejs.org/</a></td>
</tr>
<tr>
<td>AngularJS中文网</td>
<td><a href="https://www.angularjs.net.cn/" target="_blank" rel="noopener">https://www.angularjs.net.cn/</a></td>
</tr>
<tr>
<td>开源图标库</td>
<td><a href="https://remixicon.com/" target="_blank" rel="noopener">https://remixicon.com/</a></td>
</tr>
<tr>
<td>开源图标库预览</td>
<td><a href="https://lvyueyang.gitee.io/remixicon/" target="_blank" rel="noopener">https://lvyueyang.gitee.io/remixicon/</a></td>
</tr>
</tbody></table>
<h4 id="远程或传输"><a href="#远程或传输" class="headerlink" title="远程或传输"></a>远程或传输</h4><table>
<thead>
<tr>
<th>网站</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>SecureCRT官网</td>
<td><a href="https://www.vandyke.com/products/securecrt/" target="_blank" rel="noopener">https://www.vandyke.com/products/securecrt/</a></td>
</tr>
<tr>
<td>XSHELL官网</td>
<td><a href="https://xshell.en.softonic.com/" target="_blank" rel="noopener">https://xshell.en.softonic.com/</a></td>
</tr>
<tr>
<td>WinSCP官网</td>
<td><a href="https://winscp.net/eng/docs/lang:chs" target="_blank" rel="noopener">https://winscp.net/eng/docs/lang:chs</a></td>
</tr>
<tr>
<td>File-Zilla官网</td>
<td><a href="https://filezilla-project.org/" target="_blank" rel="noopener">https://filezilla-project.org/</a></td>
</tr>
<tr>
<td>File-Zilla中文网</td>
<td><a href="https://www.filezilla.cn/" target="_blank" rel="noopener">https://www.filezilla.cn/</a></td>
</tr>
<tr>
<td>flashfxp官网</td>
<td><a href="https://www.flashfxp.com/" target="_blank" rel="noopener">https://www.flashfxp.com/</a></td>
</tr>
</tbody></table>
<h4 id="小工具"><a href="#小工具" class="headerlink" title="小工具"></a>小工具</h4><table>
<thead>
<tr>
<th>网站</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>7z</td>
<td><a href="https://www.7-zip.org/" target="_blank" rel="noopener">https://www.7-zip.org/</a></td>
</tr>
<tr>
<td>WINRAR官网</td>
<td><a href="http://www.winrar.com.cn/" target="_blank" rel="noopener">http://www.winrar.com.cn/</a></td>
</tr>
<tr>
<td>在线工具箱</td>
<td><a href="https://tool.lu/" target="_blank" rel="noopener">https://tool.lu/</a></td>
</tr>
<tr>
<td>DeskTopShare</td>
<td><a href="http://www.yinrg.net/" target="_blank" rel="noopener">http://www.yinrg.net/</a></td>
</tr>
</tbody></table>
<h4 id="图片相关"><a href="#图片相关" class="headerlink" title="图片相关"></a>图片相关</h4><table>
<thead>
<tr>
<th>网站</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>图片压缩TinyPNG</td>
<td><a href="https://tinypng.com/" target="_blank" rel="noopener">https://tinypng.com/</a></td>
</tr>
<tr>
<td>图片去背景</td>
<td><a href="http://www.aigei.com/bgremover/" target="_blank" rel="noopener">http://www.aigei.com/bgremover/</a></td>
</tr>
<tr>
<td>出现一张随机图片</td>
<td><a href="https://api.uomg.com/api/image.lofter?format=images" target="_blank" rel="noopener">https://api.uomg.com/api/image.lofter?format=images</a></td>
</tr>
</tbody></table>
<h4 id="图床工具："><a href="#图床工具：" class="headerlink" title="图床工具："></a>图床工具：</h4><table>
<thead>
<tr>
<th>网站</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>PicGo</td>
<td><a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">https://github.com/Molunerfinn/PicGo</a></td>
</tr>
<tr>
<td>MPic-图床神器</td>
<td><a href="http://mpic.lzhaofu.cn" target="_blank" rel="noopener">http://mpic.lzhaofu.cn</a></td>
</tr>
<tr>
<td>PicPlus -手机图床</td>
<td><a href="https://www.coolapk.com/apk/name.gudong.pic" target="_blank" rel="noopener">https://www.coolapk.com/apk/name.gudong.pic</a></td>
</tr>
</tbody></table>
<h4 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h4><table>
<thead>
<tr>
<th>网站</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>open jdk相关</td>
<td><a href="https://www.iteye.com/blog/user/rednaxelafx" target="_blank" rel="noopener">https://www.iteye.com/blog/user/rednaxelafx</a></td>
</tr>
</tbody></table>
<h4 id="XML相关"><a href="#XML相关" class="headerlink" title="XML相关"></a>XML相关</h4><table>
<thead>
<tr>
<th>网站</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>Castor实现XML与Java的互转</td>
<td><a href="http://www.castor.org/" target="_blank" rel="noopener">http://www.castor.org/</a></td>
</tr>
</tbody></table>
<!--  JDK6JAXB2来实现对象与XML之间的映射  -->

<h4 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h4><table>
<thead>
<tr>
<th>网站</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>quartz</td>
<td><a href="https://www.w3cschool.cn/quartz_doc/" target="_blank" rel="noopener">https://www.w3cschool.cn/quartz_doc/</a></td>
</tr>
<tr>
<td>viewerjs，PDF/office在线预览</td>
<td><a href="https://fengyuanchen.github.io/viewerjs/" target="_blank" rel="noopener">https://fengyuanchen.github.io/viewerjs/</a></td>
</tr>
</tbody></table>
<h4 id="markdown"><a href="#markdown" class="headerlink" title="markdown"></a>markdown</h4><table>
<thead>
<tr>
<th>网站</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>mkdown在线编辑器</td>
<td><a href="http://www.mdeditor.com/" target="_blank" rel="noopener">http://www.mdeditor.com/</a></td>
</tr>
<tr>
<td>mkdown在线编辑器</td>
<td><a href="http://mahua.jser.me/" target="_blank" rel="noopener">http://mahua.jser.me/</a></td>
</tr>
<tr>
<td>mkdown在线编辑器</td>
<td><a href="https://tool.lu/markdown/" target="_blank" rel="noopener">https://tool.lu/markdown/</a></td>
</tr>
<tr>
<td>mkdown在线编辑器</td>
<td><a href="https://dillinger.io/" target="_blank" rel="noopener">https://dillinger.io/</a></td>
</tr>
</tbody></table>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>收藏资源</category>
        <category>开发网站</category>
      </categories>
      <tags>
        <tag>网站列表</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis-模糊查询的N种玩法</title>
    <url>/posts/4c7816b.html</url>
    <content><![CDATA[<h2 id="Mybatis模糊查询的N种玩法"><a href="#Mybatis模糊查询的N种玩法" class="headerlink" title="Mybatis模糊查询的N种玩法"></a>Mybatis模糊查询的N种玩法</h2><blockquote>
<p>很多时候模糊查询在各个厂商数据库上基本可以通用。</p>
<p>原来通配符不止<code>like</code></p>
</blockquote>
<h3 id="一、模糊查询通配符"><a href="#一、模糊查询通配符" class="headerlink" title="一、模糊查询通配符"></a>一、模糊查询通配符</h3><p>模糊查询一般就是通过字面量和通配符对条件进行部分过滤。</p>
<p><strong>常见通配符：</strong></p>
<table>
<thead>
<tr>
<th align="center">通配符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">%</td>
<td>百分号通配符，支持绝大部分数据库。<br/> % 的给定位置可以匹配0个字符、1个字符或多个字符。不能匹配null</td>
</tr>
<tr>
<td align="center">*</td>
<td>Access使用的通配符。</td>
</tr>
<tr>
<td align="center">_</td>
<td>下划线通配符，只能匹配单个字符。<br/>DB2不支持此用法。Access中则使用？代替_</td>
</tr>
<tr>
<td align="center">[ ]</td>
<td>方括号通配符，指定一个字符集，必须匹配指定位置的一个字符。<br/>只有Access和SQL Server支持。如：<code>like &#39;[zx]%&#39;</code> 表示以z或者x开头的匹配条件。<br/>^可以作为通配符前缀脱字号进行否定。<br/><code>SQL Server</code>写法：<code>like &#39;[^zx]%&#39;</code>表示不以z或者x开头的匹配条件。<br/>Access的写法则是<code>like &#39;[!zx]%&#39;</code></td>
</tr>
</tbody></table>
<h3 id="二、Mybatis模糊查询N中玩法"><a href="#二、Mybatis模糊查询N中玩法" class="headerlink" title="二、Mybatis模糊查询N中玩法"></a>二、Mybatis模糊查询N中玩法</h3><blockquote>
<p>虽然是<code>SQL</code>模糊查询，使用<code>Mybatis</code>测试就暂归类到<code>Mybatis</code>下，但其实有不少查询基本上可以通用。</p>
<p>说明：下列写法是使用<code>DB2</code>数据库测试，其他数据库未一一验证，有条件可以自己尝试。</p>
</blockquote>
<p>比如，要查询日志表里<code>LOG_MSG</code>字段有<code>录入</code>字样的数据：</p>
<h4 id="1、手工拼接好“-”再传入参数"><a href="#1、手工拼接好“-”再传入参数" class="headerlink" title="1、手工拼接好“%”再传入参数"></a>1、手工拼接好“%”再传入参数</h4><pre class=" language-java"><code class="language-java">LogInfo log <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LogInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
log<span class="token punctuation">.</span><span class="token function">setLogMsg</span><span class="token punctuation">(</span><span class="token string">"%录入%"</span><span class="token punctuation">)</span>；</code></pre>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectLogInfo<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logInfo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  SELECT * FROM DBCM.LOGINFO WHERE LOG_MSG LIKE #{logMsg}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre>
<p>另外这里#{}和${}的是有区别的，我看有的博客里将模糊查询#{}和${}写法列为两种，此文并不分别列出：</p>
<p>（a）都支持基本类型和对象类型。</p>
<p>（b）#{}可以防止<code>sql</code>注入，可以自动给String类型加上<code>&#39; &#39;</code></p>
<p>（c）${} 原样输出，适合于 动态排序（动态字段）</p>
<h4 id="2、使用CONCAT连接函数"><a href="#2、使用CONCAT连接函数" class="headerlink" title="2、使用CONCAT连接函数"></a>2、使用<code>CONCAT</code>连接函数</h4><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectLogInfo<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logInfo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  SELECT * FROM DBCM.LOGINFO WHERE LOG_MSG LIKE CONCAT('%', CONCAT(#{logMsg}),'%')
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre>
<h4 id="3、使用Mybatis的bind标签"><a href="#3、使用Mybatis的bind标签" class="headerlink" title="3、使用Mybatis的bind标签"></a>3、使用Mybatis的<code>bind</code>标签</h4><p>在系统学习<code>Mybatis</code>的的动态<code>SQL</code>中，有个bind标签，支持参数绑定。</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectLogInfo<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logInfo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bind</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pattern<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>%<span class="token punctuation">'</span> + _parameter.getLogMsg() + <span class="token punctuation">'</span>%<span class="token punctuation">'</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  SELECT * FROM DBCM.LOGINFO WHERE LOG_MSG LIKE #{pattern}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre>
<h4 id="4、使用LOCATE函数"><a href="#4、使用LOCATE函数" class="headerlink" title="4、使用LOCATE函数"></a>4、使用<code>LOCATE</code>函数</h4><blockquote>
<p>LOCATE是字符串查询函数。这个其实和<code>Mybatis</code>没什么关系了，只要数据库支持该函数，则可以使用，下同。</p>
</blockquote>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> DBCM<span class="token punctuation">.</span>LOGINFO <span class="token keyword">WHERE</span>  LOCATE<span class="token punctuation">(</span><span class="token string">'录入'</span><span class="token punctuation">,</span> LOG_MSG<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span></code></pre>
<h4 id="5、使用POSITION函数"><a href="#5、使用POSITION函数" class="headerlink" title="5、使用POSITION函数"></a>5、使用<code>POSITION</code>函数</h4><p>position功能跟locate功能相似。</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> DBCM<span class="token punctuation">.</span>LOGINFO <span class="token keyword">WHERE</span>  POSITION<span class="token punctuation">(</span><span class="token string">'录入'</span> <span class="token operator">IN</span> LOG_MSG<span class="token punctuation">)</span></code></pre>
<h4 id="6、使用INSTR函数"><a href="#6、使用INSTR函数" class="headerlink" title="6、使用INSTR函数"></a>6、使用<code>INSTR</code>函数</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> DBCM<span class="token punctuation">.</span>LOGINFO <span class="token keyword">WHERE</span>  INSTR<span class="token punctuation">(</span>LOG_MSG<span class="token punctuation">,</span><span class="token string">'录入'</span><span class="token punctuation">)</span></code></pre>
<h4 id="7、使用FIND-IN-SET函数"><a href="#7、使用FIND-IN-SET函数" class="headerlink" title="7、使用FIND_IN_SET函数"></a>7、使用<code>FIND_IN_SET</code>函数</h4><p><code>FIND_IN_SET</code>是<code>Mysql</code>里的函数。语法：</p>
<pre class=" language-sql"><code class="language-sql">FIND_IN_SET<span class="token punctuation">(</span>str<span class="token punctuation">,</span>strlist<span class="token punctuation">)</span></code></pre>
<p>假如字符串<code>str</code> 在由N个子链组成的字符串列表<code>strlist</code> 中，则返回值的范围在 1 到 N 之间。</p>
<p>字符串列表<code>strlist</code> 就是一个由一些被<code>&quot;,&quot;</code>符号分开的自链组成的字符串。</p>
<p>如果第一个参数是一个常量字符串，而第二个是搜索列，则FIND_IN_SET() 函数被优化，使用比特计算。</p>
<p>如果<code>str</code>不在<code>strlist</code> 或<code>strlist</code>为空字符串，则返回值为 0 。</p>
<p>如任意一个参数为NULL，则返回值为 NULL。这个函数在第一个参数包含一个逗号<code>&quot;,&quot;</code>时将无法正常运行。</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> FIND_IN_SET<span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'a,b,c,d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--结果：2</span></code></pre>
<p>使用该种查询时，条件比较严苛：<code>Mysql</code>数据库；匹配列内容以<code>“,”</code>分割。</p>
<pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--使用Mysql测试</span>
<span class="token keyword">select</span>  <span class="token operator">*</span> <span class="token keyword">from</span>  DBCM<span class="token punctuation">.</span>LOGINFO <span class="token keyword">where</span> FIND_IN_SET<span class="token punctuation">(</span><span class="token string">'录入'</span><span class="token punctuation">,</span>LOG_MSG<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<br/>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>Mybatis</tag>
        <tag>模糊查询</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL之查询前N条记录</title>
    <url>/posts/3c74f69f.html</url>
    <content><![CDATA[<h2 id="SQL查询前N条记录的不同玩法"><a href="#SQL查询前N条记录的不同玩法" class="headerlink" title="SQL查询前N条记录的不同玩法"></a>SQL查询前N条记录的不同玩法</h2><h3 id="查询前N条记录"><a href="#查询前N条记录" class="headerlink" title="查询前N条记录"></a>查询前N条记录</h3><p>说明：</p>
<blockquote>
<p>N —就是我们要查询的N条记录。</p>
<p>示例默认查询前10条记录。</p>
<p>语法演示的都是简单查询，如果有条件和排序请自行添加，示例默认为无条件和默认排序。</p>
<p>想了解各个数据库SQL分页？请参考<a href="2cbe04e7.html">《SQL之SQL分页的N种玩法》</a>。</p>
<p>想了解Mybtatis模糊查询？请参考<a href="4c7816b.html">《Mybatis-模糊查询的N种玩法》</a>。</p>
</blockquote>
<h4 id="1、TOP-关键字"><a href="#1、TOP-关键字" class="headerlink" title="1、TOP 关键字"></a>1、TOP 关键字</h4><p>TOP 关键字支持的数据库： <code>SQL Server</code> 、 <code>Access</code> 。</p>
<p>语法：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>  <span class="token keyword">top</span>  N  <span class="token operator">*</span>  <span class="token keyword">from</span> table_name <span class="token punctuation">;</span></code></pre>
<p>使用示例：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>  <span class="token keyword">top</span> <span class="token number">10</span>  <span class="token operator">*</span>  <span class="token keyword">from</span> loginfo <span class="token punctuation">;</span></code></pre>
<h4 id="2、Limit-关键字"><a href="#2、Limit-关键字" class="headerlink" title="2、Limit 关键字"></a>2、Limit 关键字</h4><p>Limit关键字支持的数据库： <code>MySQLr</code> 、<code>MariaDB</code>、<code>PostgreSQL</code>、 <code>SQLite</code>。</p>
<p>语法：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>  <span class="token operator">*</span>  <span class="token keyword">from</span> table_name  <span class="token keyword">limit</span> N <span class="token punctuation">;</span></code></pre>
<p>使用示例：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>  <span class="token operator">*</span>  <span class="token keyword">from</span> loginfo <span class="token keyword">limit</span> <span class="token number">10</span> <span class="token punctuation">;</span></code></pre>
<h4 id="3、ROWNUM-行计数器"><a href="#3、ROWNUM-行计数器" class="headerlink" title="3、ROWNUM 行计数器"></a>3、ROWNUM 行计数器</h4><p>ROWNUM 支持的数据库：<code>Oracle</code></p>
<p>语法：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>  <span class="token operator">*</span>  <span class="token keyword">from</span> table_name <span class="token keyword">where</span> ROWNUM <span class="token operator">&lt;=</span> N <span class="token punctuation">;</span></code></pre>
<p>使用示例：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>  <span class="token operator">*</span>  <span class="token keyword">from</span> loginfo <span class="token keyword">where</span> ROWNUM <span class="token operator">&lt;=</span> <span class="token number">10</span> <span class="token punctuation">;</span></code></pre>
<h4 id="4、Fetch-frist-N-rows-only"><a href="#4、Fetch-frist-N-rows-only" class="headerlink" title="4、Fetch frist  N   rows  only"></a>4、Fetch frist  N   rows  only</h4><p>Fetch first  N   rows  only 支持的数据库：<code>DB2</code></p>
<p>语法：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>  <span class="token operator">*</span>  <span class="token keyword">from</span> table_name  <span class="token keyword">Fetch</span> <span class="token keyword">first</span>  N  <span class="token keyword">rows</span>  only <span class="token punctuation">;</span></code></pre>
<p>使用示例：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>  <span class="token operator">*</span>  <span class="token keyword">from</span> loginfo <span class="token keyword">Fetch</span> <span class="token keyword">first</span>  <span class="token number">10</span>  <span class="token keyword">rows</span>  only <span class="token punctuation">;</span></code></pre>
<h3 id="数据库和分页关键字-函数对应关系表"><a href="#数据库和分页关键字-函数对应关系表" class="headerlink" title="数据库和分页关键字/函数对应关系表"></a>数据库和分页关键字/函数对应关系表</h3><p>数据库查询和分页关键字/函数对应关系：</p>
<table>
<thead>
<tr>
<th>数据库</th>
<th>分页关键字/函数</th>
</tr>
</thead>
<tbody><tr>
<td>SQL Server 、 Access</td>
<td>TOP</td>
</tr>
<tr>
<td>MySQLr 、MariaDB、PostgreSQL、 SQLite</td>
<td>Limit</td>
</tr>
<tr>
<td>Oracle</td>
<td>ROWNUM</td>
</tr>
<tr>
<td>DB2</td>
<td>Fetch frist  N   rows  only</td>
</tr>
</tbody></table>
<br/><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo搭建静态博客（四）——插件安装</title>
    <url>/posts/cda13ebe.html</url>
    <content><![CDATA[<p>Hexo静态博客插件安装相关内容，本文以安装search和abbrlink插件为例。</p>
<a id="more"></a>

<p>注意：安装插件不是非必须，除了部分插件跟着主题必须安装之外，其他插件属于可选。</p>
<h2 id="安装插件命令"><a href="#安装插件命令" class="headerlink" title="安装插件命令"></a>安装插件命令</h2><pre><code>npm install   hexo-generator-feed  --save   #订阅
npm install   hexo-generator-search --save  #搜索</code></pre><h2 id="本地搜索插件"><a href="#本地搜索插件" class="headerlink" title="本地搜索插件"></a>本地搜索插件</h2><p>这里说一下添加本地搜索，有的主题已经自己带了搜索功能，只要配置开启即可。如果没有带主题可以自己加上。<br><font color=red>特别说明：如果主题自带搜索，看自带搜索操作说明即可，如果主题无搜索看自定义模式说明即可。</font></p>
<h3 id="步骤一-安装插件"><a href="#步骤一-安装插件" class="headerlink" title="步骤一 安装插件"></a>步骤一 安装插件</h3><p>第一步：安装搜索插件 <code>npm install hexo-generator-searchdb --save</code></p>
<h3 id="步骤二-修改配置"><a href="#步骤二-修改配置" class="headerlink" title="步骤二 修改配置"></a>步骤二 修改配置</h3><p>第二步：根目录_config.yml文件配置添加</p>
<pre><code>search:
  path: search.xml
  field: post
  format: html
  limit: 10000</code></pre><p>主题配置_config.yml添加</p>
<pre><code>local_search: 
  enable: true</code></pre><h3 id="步骤三-添加搜索"><a href="#步骤三-添加搜索" class="headerlink" title="步骤三 添加搜索"></a>步骤三 添加搜索</h3><p>第三步:添加搜索框</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>search-content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pure-form<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>local-search-input<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>q<span class="token punctuation">"</span></span> <span class="token attr-name">results</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">autocomplete</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>off<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>搜索<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pure-input pure-input-1<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">204</span>, <span class="token number">232</span>, <span class="token number">207</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>local-search-result<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<p>第1种，主题自带搜索模式，有独立的search页面,生成页面前面已经讲到了，把代码放到source/search/index.md文件中即可。</p>
<p>第2种，自定义模式，直接加在首页，想加哪个位置看自己喜好，位置找主题下的布局文件夹_layout或layout/partials之类的文件夹下,里面有head.ejs或head.swig文件（如果不是请自己查找节点，文件反正就那些）,添加html代码</p>
<h3 id="步骤四-引入js文件"><a href="#步骤四-引入js文件" class="headerlink" title="步骤四 引入js文件"></a>步骤四 引入js文件</h3><p>第四步：引入js</p>
<p>第1种，主题自带搜索模式，主题下的配置文件一般有scripts设置，直接配置路径，一般都有示例如</p>
<pre><code>scripts:
#- //cdn.bootcss.com/zepto/1.2.0/zepto.min.js
#- /js/xoxo.js
  - /js/search.js</code></pre><p>第2种，自定义模式，没有scripts配置,就在找主题下的布局文件夹_layout或layout/中，有js.ejs或srcipt.ejs，<br>文件可以从这里拿：<a href="https://github.com/zhzy2017/hexo-search-plugin-snippets" target="_blank" rel="noopener">https://github.com/zhzy2017/hexo-search-plugin-snippets</a><br>把search.js 放到source\js目录下,引入使用也有不同的方法</p>
<h3 id="步骤五-引入css文件"><a href="#步骤五-引入css文件" class="headerlink" title="步骤五 引入css文件"></a>步骤五 引入css文件</h3><p>第五步：css设置<br>有的带搜索的无须操作，没有的从下载hexo-search-plugin-snippets里面拿拷贝到source/css里面，引入即可，</p>
<p>第1种，主题自带搜索模式，一般不需要配置写在公共文件中，如果没有样式可以在主题下的配置文件一般有stylesheets设置，直接配置路径，一般都有示例：</p>
<pre><code>stylesheets:
# - /css/normalize.css
 - //cdn.bootcss.com/pure/1.0.0/pure-min.css
 - /css/xoxo.css
</code></pre><p>第2种，自定义模式，跟配引入js类似，找一下主题目录ejs或swig文件引入，或者直接用css或less文件放到source/css目录下的某个文件中，这样不需要引文件</p>
<p>其他插件，具体使用自行搜索，一般是修改配置或添加代码</p>
<pre><code>npm install hexo-generator-index-pin-top –save  #文章置顶插件 
npm uninstall hexo-generator-index –save     #文章置顶插件 
npm i –save hexo-wordcount        #文章字数+阅读时长统计     
npm install hexo-baidu-url-submit –save     #百度链接主动推送     
npm install hexo-deployer-ftpsync –save     #hexo上传至FTP服务器     
npm install hexo-deployer-cos –save     #hexo上传至腾讯云COS     
npm install hexo-deployer-aliyun –save     #hexo上传至阿里云     
npm install –save hexo-admin     #hexo管理插件     
hexo-blog-encrypt(请看文档)     #hexo文章加密码 
npm install leancloud-storage –save     #Valine评论     
Valine评论邮件通知     Valine评论提醒 
npm install hexo-deployer-git –save hexo安装git（允许使用git命令）</code></pre><p>更多插件请访问插件中心：<a href="https://hexo.io/plugins/" target="_blank" rel="noopener">https://hexo.io/plugins/</a><br>使用参考链接参考<a href="https://blog.csdn.net/q2158798/article/details/82354154" target="_blank" rel="noopener">幻凡ss</a></p>
<h3 id="修改修改永久链接"><a href="#修改修改永久链接" class="headerlink" title="修改修改永久链接"></a>修改修改永久链接</h3><p>Hexo修改修改永久链接的默认格式,方便SEO.<br><code>npm install hexo-abbrlink --save</code>  #文章永久链接 <a href="https://github.com/Rozbo/hexo-abbrlink" target="_blank" rel="noopener">项目地址在这里</a></p>
<h4 id="1-安装插件"><a href="#1-安装插件" class="headerlink" title="1.安装插件"></a>1.安装插件</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-abbrlink --save</code></pre>
<h4 id="2-修改配置"><a href="#2-修改配置" class="headerlink" title="2.修改配置"></a>2.修改配置</h4><pre><code># permalink: :year/:month/:day/:title/
# permalink_defaults:
permalink: posts/:abbrlink.html
abbrlink:
  alg: crc32  # 算法：crc16(default) and crc32
  rep: hex    # 进制：dec(default) and hex</code></pre><h4 id="3-重启"><a href="#3-重启" class="headerlink" title="3.重启"></a>3.重启</h4><pre class=" language-bash"><code class="language-bash">hexo clean <span class="token operator">&amp;</span> heox g <span class="token operator">&amp;</span> hexo s</code></pre>
<p>点击一篇文章，检查浏览器地址看看是不是发生变化了？</p>
<br/>

<p><strong>相关文章</strong></p>
<p><a href="9f117b.html">Hexo搭建静态博客（一）——基础搭建</a><br><a href="c1358fc8.html">Hexo搭建静态博客（二）——创建页面</a><br><a href="a5bf7e18.html">Hexo搭建静态博客（三）——主题更换</a><br><a href="cda13ebe.html">Hexo搭建静态博客（四）——插件安装</a><br><a href="ce4a93ff.html">Hexo搭建静态博客（五）——踩坑问题</a><br><a href="c68d7a69.html">Hexo搭建静态博客（六）——项目部署</a><br><a href="1c633c7e.html">Hexo搭建静态博客（七）——客服与推送</a><br><a href="caf66d5e.html">Hexo添加Live2D二次元老婆</a><br><a href="358175a6.html">Hexo博客Valine-Admin踩坑记录</a><br><a href="40099453.html">Hexo博客Matery主题valine升级与优化</a><br><a href="a53a9069.html">Hexo博客Matery主题新手常见问题</a></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo搭建静态博客（二）——创建页面</title>
    <url>/posts/c1358fc8.html</url>
    <content><![CDATA[<p>本文记录将hexo博客创建页面相关操作操作。</p>
<a id="more"></a>

<p>作者：阿兰那</p>
<h2 id="1-创建链接页面的基本命令"><a href="#1-创建链接页面的基本命令" class="headerlink" title="1.创建链接页面的基本命令"></a>1.创建链接页面的基本命令</h2><font color=red>
```
hexo new page  yourpagename
```
</font>

<h4 id="2-创建about页面"><a href="#2-创建about页面" class="headerlink" title="2.创建about页面"></a>2.创建about页面</h4><pre><code>hexo new page about</code></pre><p>修改source/about/index.md文件即可。文件内可以使用markdown或html语法。</p>
<h4 id="3-创建分类"><a href="#3-创建分类" class="headerlink" title="3.创建分类"></a>3.创建分类</h4><pre><code>hexo new page categories   //创建分类</code></pre><p>修改source/categories/index.md文件即可.<br>补充红色字体内容： <font color=red><code>type: &quot;categories&quot;</code></font></p>
<pre><code>---
title: categories
date: 2020-05-14 21:51:42
type: categories
---</code></pre><p>那么在写文章的时候就可以在头部使用分类了，如：</p>
<pre><code>---
title: Hexo搭建静态博客及踩坑问题
date: 2020-05-13
categories: Hexo
---
 this is my article ...
</code></pre><h4 id="4-创建标签"><a href="#4-创建标签" class="headerlink" title="4.创建标签"></a>4.创建标签</h4><pre><code>hexo new page tags         //创建标签</code></pre><p>修改source/tags/index.md文件即可:<br>补充红色字体内容： <font color=red><code>type: &quot;tags&quot;</code></font></p>
<pre><code>---
title: tags
date: 2020-05-14 21:51:42
type: tags
---</code></pre><p>那么在写文章的时候就可以在头部使用标签了，如：</p>
<pre><code>---
title: Hexo搭建静态博客及踩坑问题
date: 2020-05-13
categories: Hexo
tags: Hexo
---
 this is my article ...
</code></pre><p>是不是很简单呢？</p>
<br/>

<p><strong>相关文章</strong></p>
<p><a href="9f117b.html">Hexo搭建静态博客（一）——基础搭建</a><br><a href="c1358fc8.html">Hexo搭建静态博客（二）——创建页面</a><br><a href="a5bf7e18.html">Hexo搭建静态博客（三）——主题更换</a><br><a href="cda13ebe.html">Hexo搭建静态博客（四）——插件安装</a><br><a href="ce4a93ff.html">Hexo搭建静态博客（五）——踩坑问题</a><br><a href="c68d7a69.html">Hexo搭建静态博客（六）——项目部署</a><br><a href="1c633c7e.html">Hexo搭建静态博客（七）——客服与推送</a><br><a href="caf66d5e.html">Hexo添加Live2D二次元老婆</a><br><a href="358175a6.html">Hexo博客Valine-Admin踩坑记录</a><br><a href="40099453.html">Hexo博客Matery主题valine升级与优化</a><br><a href="a53a9069.html">Hexo博客Matery主题新手常见问题</a></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql-Access denied for</title>
    <url>/posts/7c170969.html</url>
    <content><![CDATA[<h2 id="Linux下MySQL的Access-denied-for-user"><a href="#Linux下MySQL的Access-denied-for-user" class="headerlink" title="Linux下MySQL的Access denied for user"></a>Linux下MySQL的Access denied for user</h2><blockquote>
<p>使用环境：Centos7.4 ，Mysql5.7</p>
</blockquote>
<h3 id="1、root不能在版本地登录"><a href="#1、root不能在版本地登录" class="headerlink" title="1、root不能在版本地登录"></a>1、root不能在版本地登录</h3><p><strong>问题描述：</strong></p>
<p>在linux命令行用mysql -uroot -ppasswaord 登录却报了这么个错：</p>
<p>ERROR 1045 (28000): Access denied for user ‘root’@’localhost’ (using password: YES)</p>
<p><strong>解决方法：</strong></p>
<p>（1）首先要确定登录密码正确，如果密码不对也会出现这个错误。（可以看应用里连接配置确认）</p>
<p>（2）如果密码正确之后还是不能连接：</p>
<p>​    （a）编辑<code>/etc/my.cnf</code>的mysqld下 添加<code>skip-grant-tables</code></p>
<p>​    （b）重启MySQL服务，根据版本选择。</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">service</span> mysqld restart
systemctl restart mysqld.service</code></pre>
<p>​    （c）直接mysql -uroot 登录</p>
<p>​    （d）修改MySQL密码</p>
<pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 5.7之前</span>
<span class="token keyword">update</span> <span class="token keyword">user</span> <span class="token keyword">set</span> password<span class="token operator">=</span>password<span class="token punctuation">(</span><span class="token string">'your_password'</span><span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token keyword">user</span><span class="token operator">=</span><span class="token string">'root'</span> <span class="token operator">and</span> host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true"># 5.7之后</span>
<span class="token keyword">update</span> <span class="token keyword">user</span> <span class="token keyword">set</span> authentication_string<span class="token operator">=</span>password<span class="token punctuation">(</span><span class="token string">'your_password'</span><span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token keyword">user</span><span class="token operator">=</span><span class="token string">'root'</span> <span class="token operator">and</span> host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">;</span>

flush <span class="token keyword">privileges</span><span class="token punctuation">;</span></code></pre>
<p>​    （e）注释掉<code>skip-grant-table</code>、重启MySQL服务。再次登录验证即可。</p>
<h3 id="2、用户不能在非本地登录"><a href="#2、用户不能在非本地登录" class="headerlink" title="2、用户不能在非本地登录"></a>2、用户不能在非本地登录</h3><p><strong>问题描述：</strong></p>
<p>一般出现在客户端连接mysql服务的时候：</p>
<p>mysql access denied for user root@ip useing password</p>
<p><strong>解决方法：</strong></p>
<p>（1）首先确保密码正确</p>
<p>（2）如果密码正确还是不能连接，说明缺少授权。</p>
<p>​    （a）mysql -uroot 在服务端登录</p>
<p>​    （b）查询用户登录的授权状态</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">use</span> mysql<span class="token punctuation">;</span>
<span class="token keyword">select</span> host<span class="token punctuation">,</span><span class="token keyword">user</span> <span class="token keyword">from</span> <span class="token keyword">user</span><span class="token punctuation">;</span></code></pre>
<p>​    （c）确认用户在指定IP没有授权，就授权</p>
<pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 适用于开发账户，授权root在任意主机登录，拥有全部schema的全部表的全部权限</span>
<span class="token keyword">GRANT</span> <span class="token keyword">ALL</span> <span class="token keyword">PRIVILEGES</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">'root'</span>@'<span class="token operator">%</span><span class="token string">' IDENTIFIED BY '</span>your_password' <span class="token keyword">WITH</span> <span class="token keyword">GRANT</span> <span class="token keyword">OPTION</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">-- 刷新权限，刷新之后客户端需要重新连接方可生效</span>
FLUSH   <span class="token keyword">PRIVILEGES</span><span class="token punctuation">;</span></code></pre>
<p>​    （d）客户端重新连接即可。</p>
<p><font color="red" >特别说明：</font>如果对权限管理比较严格，可以按IP授权，也可以按网段授权，可以授权不同的权限级别，可以授权不同操作权限等相关操作，可以参考关于Mysql授权的的内容在《Mysql常用命令》中的授权部分。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo搭建静态博客（一）——基础搭建</title>
    <url>/posts/9f117b.html</url>
    <content><![CDATA[<p> 原来使用springboot自己捣鼓的博客，总是不够满意，就想着实在不行搞个静态博客，比较再三选择hexo,就用Hexo再捣鼓一个静态博客，折腾了几天也算有成果了。</p>
<a id="more"></a>
<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>本文环境如下</p>
<pre><code>$ hexo -v
hexo：4.2.1
hexo-cli：3.1.0
os：Windows_NT 10.0.18362 win32 x64
http_parser：2.8.0
node：8.12.0
v8：6.2.414.66
uv：1.19.2
zlib：1.2.11
ares：1.10.1-DEV
modules：57
nghttp2：1.32.0
napi： 3
openssl：1.0.2p
icu：60.1
unicode：10.0
cldr：32.0
tz：2017c</code></pre><h4 id="1-安装git环境"><a href="#1-安装git环境" class="headerlink" title="1.安装git环境"></a>1.安装git环境</h4><p>安装git for windows（或者其它git客户端）[git下载]（<a href="https://git-scm.com/downloads）" target="_blank" rel="noopener">https://git-scm.com/downloads）</a><br>验证git安装命令(可以用Windows的cmd窗口或鼠标右键菜单的git bash 窗口)</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> --version</code></pre>
<h4 id="2-安装Node"><a href="#2-安装Node" class="headerlink" title="2.安装Node"></a>2.安装Node</h4><p>安装Node<a href="http://nodejs.cn/" target="_blank" rel="noopener">Node下载</a><br>验证node安装命令 (可以用Windows的cmd窗口或鼠标右键菜单的git bash 窗口)</p>
<pre class=" language-bash"><code class="language-bash">node --version</code></pre>
<h4 id="3-github账号"><a href="#3-github账号" class="headerlink" title="3.github账号"></a>3.github账号</h4><p>如果没有注册一个：<a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a><br>主要是方便从git上下载各种东东。</p>
<h3 id="安装hexo及初始化"><a href="#安装hexo及初始化" class="headerlink" title="安装hexo及初始化"></a>安装hexo及初始化</h3><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cd</span> D:hexo/    //换成你的目录
$ <span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli   //安装hexo脚手架
$ hexo init     //Hexo 初始化 会自动在当前文件夹下下载搭建网站所需的所有文件
$ <span class="token function">npm</span> <span class="token function">install</span>   //安装依赖包命令</code></pre>
<h3 id="编译生成静态页面"><a href="#编译生成静态页面" class="headerlink" title="编译生成静态页面"></a>编译生成静态页面</h3><pre class=" language-bash"><code class="language-bash">hexo g</code></pre>
<h3 id="启动服务预览"><a href="#启动服务预览" class="headerlink" title="启动服务预览"></a>启动服务预览</h3><pre class=" language-bash"><code class="language-bash">hexo s</code></pre>
<p>打开浏览器访问：<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a><br>如果正常出现页面说明搭建成功。</p>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><pre class=" language-bash"><code class="language-bash">hexo clean      //清空public文件夹内容
hexo g 或  hexo generate   //在hexo站点根目录下生成public文件夹，相关静态网页文件
hexo s 或  hexo server     //启动服务预览 http://localhost:4000
hexo d 或  hexo deploy     //部署站点，在本地生成.deploy_git文件夹，并将编译后的文件上传至 Git远程仓库，如github或自己搭建的远程服务器。</code></pre>
<p>也可以连起来使用：<font face="console" color="red" bgcolor='#fff'><code>hexo clean &amp; hexo g &amp; hexo s &amp;  hexo d</code></font></p>
<p>如有问题请参考本系列：Hexo搭建静态博客（五）——踩坑问题</p>
<br/>

<p><strong>相关文章</strong></p>
<p><a href="9f117b.html">Hexo搭建静态博客（一）——基础搭建</a><br><a href="c1358fc8.html">Hexo搭建静态博客（二）——创建页面</a><br><a href="a5bf7e18.html">Hexo搭建静态博客（三）——主题更换</a><br><a href="cda13ebe.html">Hexo搭建静态博客（四）——插件安装</a><br><a href="ce4a93ff.html">Hexo搭建静态博客（五）——踩坑问题</a><br><a href="c68d7a69.html">Hexo搭建静态博客（六）——项目部署</a><br><a href="1c633c7e.html">Hexo搭建静态博客（七）——客服与推送</a><br><a href="caf66d5e.html">Hexo添加Live2D二次元老婆</a><br><a href="358175a6.html">Hexo博客Valine-Admin踩坑记录</a><br><a href="40099453.html">Hexo博客Matery主题valine升级与优化</a><br><a href="a53a9069.html">Hexo博客Matery主题新手常见问题</a></p>
<br/><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo搭建静态博客（六）——项目部署</title>
    <url>/posts/c68d7a69.html</url>
    <content><![CDATA[<p>本文记录将hexo博客部署到github、云服务器上的相关操作操作。</p>
<a id="more"></a>

<h4 id="关于部署"><a href="#关于部署" class="headerlink" title="关于部署"></a>关于部署</h4><p>常见部署在github上，如果有自己独立的服务器也可以部署在服务上，此处用的腾讯云服务器。</p>
<h3 id="一-Github上部署"><a href="#一-Github上部署" class="headerlink" title="一  Github上部署"></a>一  Github上部署</h3><h4 id="1-准备环境："><a href="#1-准备环境：" class="headerlink" title="1 准备环境："></a>1 准备环境：</h4><p>​    有github账户</p>
<p>​    在账户里创建仓库, New repository，仓库名固定格式： <code>你的github账户名.github.io</code></p>
<p>​    git免密登陆（可选，非必须）</p>
<h4 id="2-安装部署插件"><a href="#2-安装部署插件" class="headerlink" title="2  安装部署插件"></a>2  安装部署插件</h4><p>​    安装部署插件deploy-git </p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save</code></pre>
<h4 id="3-Hexo修改根目录配置文件"><a href="#3-Hexo修改根目录配置文件" class="headerlink" title="3  Hexo修改根目录配置文件"></a>3  Hexo修改根目录配置文件</h4><pre class=" language-yml"><code class="language-yml">deploy:
  type: git
  repo: https://github.com/your_github_name/your_github_name.github.io.git
  branch: master</code></pre>
<p>如果配置了免密登录: </p>
<pre><code>git@github.com:yourgithubName/your_github_name.github.io.git</code></pre><p>没有配置请使用：</p>
<pre><code>https://github.com/your_github_name/your_github_name.github.io.git</code></pre><p><code>https</code>开头每次要输入密码，<code>git</code>开头表示是用ssh方式连接。</p>
<h4 id="4-生成并部署"><a href="#4-生成并部署" class="headerlink" title="4  生成并部署"></a>4  生成并部署</h4><pre class=" language-bash"><code class="language-bash">hexo g <span class="token operator">&amp;</span> hexo d</code></pre>
<p>如果没有配置免密登陆，部署的时候可能会用到git的用户名和密码。</p>
<h4 id="5-访问验证"><a href="#5-访问验证" class="headerlink" title="5  访问验证"></a>5  访问验证</h4><p>打开浏览器访问：<a href="https://YourgithubName.github.io" target="_blank" rel="noopener">https://YourgithubName.github.io</a></p>
<p>如我<code>github</code>博客地址：<a href="https://small-rose.github.io" target="_blank" rel="noopener">https://small-rose.github.io</a></p>
<h3 id="二-云服务器部署"><a href="#二-云服务器部署" class="headerlink" title="二  云服务器部署"></a>二  云服务器部署</h3><p>部署到云服务有两种方式，一种是利用git仓库配合hooks自动部署更新，另一种是插件的方式，插件的话可以参考如下：</p>
<table>
<thead>
<tr>
<th>插件安装命令</th>
<th>功能</th>
<th>文档</th>
</tr>
</thead>
<tbody><tr>
<td>npm install hexo-deployer-cos –save</td>
<td>hexo上传至腾讯云COS</td>
<td><a href="https://github.com/sdlzhd/hexo-deployer-cos#user-content-options" target="_blank" rel="noopener">https://github.com/sdlzhd/hexo-deployer-cos#user-content-options</a></td>
</tr>
<tr>
<td>npm install hexo-deployer-aliyun –save</td>
<td>hexo上传至阿里云</td>
<td><a href="https://github.com/yedaodao/hexo-deployer-aliyun" target="_blank" rel="noopener">https://github.com/yedaodao/hexo-deployer-aliyun</a></td>
</tr>
</tbody></table>
<h4 id="1-准备环境：-1"><a href="#1-准备环境：-1" class="headerlink" title="1  准备环境："></a>1  准备环境：</h4><p>​    有一台云服务器，本文是腾讯云服务器</p>
<p>​    准备工作大概如下</p>
<pre class=" language-html"><code class="language-html">（1）服务器安装git服务并创建仓库

（2）配置hooks

（3）安装及配置Nginx</code></pre>
<h4 id="2-安装git"><a href="#2-安装git" class="headerlink" title="2  安装git"></a>2  安装git</h4><p>安装命令：</p>
<pre class=" language-bash"><code class="language-bash">yum -y <span class="token function">install</span> <span class="token function">git</span> </code></pre>
<p>如果你的服务器不能直接yum安装，可以参考    git安装教程：</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span>  /usr/local/src   <span class="token comment" spellcheck="true">#进入你的下载目录           </span>
<span class="token function">wget</span> https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.24.0.tar.gz    <span class="token comment" spellcheck="true">#下载，不能下载就自己上传一下</span>
<span class="token function">tar</span> -zvxf git-2.24.0.tar.gz    <span class="token comment" spellcheck="true">#解压</span>
<span class="token function">cd</span> git-2.24.0                
<span class="token function">make</span> all prefix<span class="token operator">=</span>/usr/local/git    <span class="token comment" spellcheck="true">#编译</span>
<span class="token function">make</span> <span class="token function">install</span> prefix<span class="token operator">=</span>/usr/local/git    <span class="token comment" spellcheck="true">#安装git到指定目录</span>
<span class="token keyword">echo</span> <span class="token string">'export PATH=<span class="token variable">$PATH</span>:/usr/local/git/bin'</span> <span class="token operator">>></span> /etc/bashrc  <span class="token comment" spellcheck="true">#配置环境变量</span>
<span class="token function">source</span> /etc/bashrc       <span class="token comment" spellcheck="true">#刷新环境变量</span></code></pre>
<p>验证Git是否安装成功：</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> --version</code></pre>
<p>添加git用户并授权：</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">useradd</span> -r -s /bin/bash -c <span class="token string">'git version control'</span> -d /home/git <span class="token function">git</span> 
<span class="token function">passwd</span> <span class="token function">git</span> 
<span class="token function">mkdir</span> -p /home/git  
<span class="token function">chown</span> git:git /home/git </code></pre>
<p>创建仓库：</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /home/git/
<span class="token function">git</span> init --bare myHexoBlog.git</code></pre>
<p>如果要配置SSH免登录：（可选操作，配置之后不用每次提交都输入密码）</p>
<p>a.客户端生成密钥</p>
<pre class=" language-bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"这里换上你的邮箱"</span></code></pre>
<p>然后会出现询问，大概意思如下：</p>
<pre><code>1. 确认秘钥的保存路径（如果不需要改路径则直接回车）；
2. 如果上一步置顶的保存路径下已经有秘钥文件，则需要确认是否覆盖（如果之前的秘钥不再需要则直接回车覆盖，如需要则手动拷贝到其他目录后再覆盖）；
3. 创建密码（如果不需要密码则直接回车）；
4. 确认密码；</code></pre><p>要免密登录请输密码的时候回车即可。根据提示找到密钥所在文件：</p>
<pre><code>id_rsa  #私钥
id_rsa.pub  #公钥</code></pre><p>b.服务端导入客户端公钥</p>
<p>在/home/git下已经创建.ssh目录，然后创建authorized_keys文件，并将客户端生成的公钥导入进去。</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /home/git/
<span class="token function">mkdir</span> .ssh
<span class="token function">chmod</span> 755 .ssh
<span class="token function">touch</span> .ssh/authorized_keys
<span class="token function">chmod</span> 644 .ssh/authorized_keys</code></pre>
<p>将 <code>id_rsa.pub</code> 文件的内容写入<code>authorized_keys</code></p>
<p>c. 服务端SSH将RSA认证打开</p>
<pre class=" language-bash"><code class="language-bash">vim /etc/ssh/sshd_config</code></pre>
<p>其中三个地方的设置要确认如下：</p>
<pre><code>RSAAuthentication yes
PubkeyAuthentication yes
AuthorizedKeysFile .ssh/authorized_keys</code></pre><p>git用户不允许登录shell</p>
<pre class=" language-bash"><code class="language-bash">vim /etc/passwd</code></pre>
<p>将</p>
<pre><code>git:x:502:502::/home/git:/bin/bash</code></pre><p> 改为</p>
<pre><code>git:x:502:502::/home/git:/usr/local/git/bin/git-shell</code></pre><p><code>ESC</code>退出，输入<code>:wq</code>保存退出，执行<code>Enter</code>即可。</p>
<h4 id="3-配置hooks自动部署"><a href="#3-配置hooks自动部署" class="headerlink" title="3 配置hooks自动部署"></a>3 配置hooks自动部署</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> -p /home/hexoBlog
<span class="token function">chown</span> git:git /home/hexoBlog 

<span class="token function">cd</span> /home/hexoBlog
<span class="token function">cd</span> /home/git/myHexoBlog.git/hooks
vim  post-receive  <span class="token comment" spellcheck="true">#创建hooks执行文件</span></code></pre>
<p>配置hooks，指定 Git 的工作树（源代码）和 Git 目录（配置文件等）</p>
<pre class=" language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>
<span class="token function">git</span> --work-tree<span class="token operator">=</span>/home/hexoBlog --git-dir<span class="token operator">=</span>/home/git/myHexoBlog.git checkout -f</code></pre>
<p>如果是使用Apache服务,可以直接把work-tree目录指向/var/www/html</p>
<h4 id="4-安装Nginx服务"><a href="#4-安装Nginx服务" class="headerlink" title="4 安装Nginx服务"></a>4 安装Nginx服务</h4><pre class=" language-bash"><code class="language-bash">yum <span class="token function">install</span> -y nginx</code></pre>
<p>如果你不能直接安装，请先配置安装源</p>
<pre class=" language-bahs"><code class="language-bahs">sudo rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</code></pre>
<p>启动Nginx</p>
<pre class=" language-bash"><code class="language-bash">systemctl start nginx.service</code></pre>
<p>浏览器输入你的域名或者IP，出现欢迎页面代表安装启动成功。</p>
<p>修改配置：</p>
<pre class=" language-bash"><code class="language-bash">nginx -t  <span class="token comment" spellcheck="true">#查看nginx安装路径 配置文件路径</span>
vim /etc/nginx/nginx.conf</code></pre>
<p>找到server部分</p>
<pre><code>server {
    listen 80 default_server;
    listen [::]:80 default_server;
    root /home/hexoBlog;    #需要修改

    server_name www.zhangxiaocai.cn; #需要修改

    include /etc/nginx/default.d/*.conf;
    location / {
    }
    error_page 404 /404.html;
        location = /40x.html {
    }
}</code></pre><p>修改好之后<code>ESC</code> 输入<code>:wq</code>保存退出。接下来验证配置</p>
<pre class=" language-bash"><code class="language-bash">nginx -t</code></pre>
<p>如果出现以下内容代表配置成功：</p>
<pre class=" language-bash"><code class="language-bash">nginx: the configuration <span class="token function">file</span> /etc/nginx/nginx.conf syntax is ok
nginx: configuration <span class="token function">file</span> /etc/nginx/nginx.conf <span class="token function">test</span> is successful</code></pre>
<p>重新加载配置或重启nginx服务</p>
<pre class=" language-bash"><code class="language-bash">nginx -s reload</code></pre>
<p>更多<code>Nginx</code>相关内容，访问<code>Nginx</code></p>
<h4 id="5-本地配置修改"><a href="#5-本地配置修改" class="headerlink" title="5 本地配置修改"></a>5 本地配置修改</h4><p>修改项目根目录的配置文件</p>
<pre><code>deploy:
    type: git
    repo: git@你的云服务器的IP地址:/home/git/myHexoBlog
    branch: master</code></pre><p>清理-生成-部署</p>
<pre class=" language-bash"><code class="language-bash">hexo clean <span class="token operator">&amp;</span> hexo g <span class="token operator">&amp;</span> hexo d</code></pre>
<br/>

<p><strong>相关文章</strong></p>
<p><a href="9f117b.html">Hexo搭建静态博客（一）——基础搭建</a><br><a href="c1358fc8.html">Hexo搭建静态博客（二）——创建页面</a><br><a href="a5bf7e18.html">Hexo搭建静态博客（三）——主题更换</a><br><a href="cda13ebe.html">Hexo搭建静态博客（四）——插件安装</a><br><a href="ce4a93ff.html">Hexo搭建静态博客（五）——踩坑问题</a><br><a href="c68d7a69.html">Hexo搭建静态博客（六）——项目部署</a><br><a href="1c633c7e.html">Hexo搭建静态博客（七）——客服与推送</a><br><a href="caf66d5e.html">Hexo添加Live2D二次元老婆</a><br><a href="358175a6.html">Hexo博客Valine-Admin踩坑记录</a><br><a href="40099453.html">Hexo博客Matery主题valine升级与优化</a><br><a href="a53a9069.html">Hexo博客Matery主题新手常见问题</a></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo搭建静态博客（五）——踩坑问题</title>
    <url>/posts/ce4a93ff.html</url>
    <content><![CDATA[<p> 本文记录捣鼓hexo博客时遇到的一些踩坑的记录及相关解决思路。</p>
<a id="more"></a>

<p>常见报错多在 <code>hexo g</code> 的时候报错</p>
<h5 id="1-YAMLException"><a href="#1-YAMLException" class="headerlink" title="1. YAMLException"></a>1. YAMLException</h5><pre><code>ERROR Process failed: _posts/hexo-problem.md
YAMLException: end of the stream or a document separator is expected at line x, column y:
at ...</code></pre><p>解决思路：<br>A. 一般是因为缺少分隔符，缺少空格，<code>key: value</code> ，英文冒号后面留空格，一般错会提示哪个文件的第几行第几列。<br>B.其次是头部yaml配置</p>
<pre><code>---
key: value
---</code></pre><p>缺少也会导致文章内容报错，具体报错的行列位置如果没有问题，就检查头部或者附近标点，或分段测试，该方案适合文章报错<br>C.还有一些特殊字符，如<code>[ ]</code>也会导致报错，我在title中使用英文<code>[ ]</code>也会报错，但提示的位置没有问题，注意特殊字符使用。</p>
<h5 id="2-某个ejs或swig文件报错"><a href="#2-某个ejs或swig文件报错" class="headerlink" title="2.  某个ejs或swig文件报错"></a>2.  某个ejs或swig文件报错</h5><p>（1）此类问题一般是使用某个主题之后会出现，注意主题下的配置文件_config.yml检查是否配置，参考（一）A的思路<br>（2）缺少相关插件如xoxo主题生成时就有readingTime的报错，安装了hexo-reading-time的插件后解决，如是其他同理网上搜一下</p>
<pre><code>npm install   hexo-reading-time --save</code></pre><p>(3)使用主题的时候注意先阅读相关使用文档，有些主题需要一些插件</p>
<h5 id="3-其他"><a href="#3-其他" class="headerlink" title="3. 其他"></a>3. 其他</h5><p>后续补充</p>
<br/>

<p><strong>相关文章</strong></p>
<p><a href="9f117b.html">Hexo搭建静态博客（一）——基础搭建</a><br><a href="c1358fc8.html">Hexo搭建静态博客（二）——创建页面</a><br><a href="a5bf7e18.html">Hexo搭建静态博客（三）——主题更换</a><br><a href="cda13ebe.html">Hexo搭建静态博客（四）——插件安装</a><br><a href="ce4a93ff.html">Hexo搭建静态博客（五）——踩坑问题</a><br><a href="c68d7a69.html">Hexo搭建静态博客（六）——项目部署</a><br><a href="1c633c7e.html">Hexo搭建静态博客（七）——客服与推送</a><br><a href="caf66d5e.html">Hexo添加Live2D二次元老婆</a><br><a href="358175a6.html">Hexo博客Valine-Admin踩坑记录</a><br><a href="40099453.html">Hexo博客Matery主题valine升级与优化</a><br><a href="a53a9069.html">Hexo博客Matery主题新手常见问题</a></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo搭建静态博客（三）——主题更换</title>
    <url>/posts/a5bf7e18.html</url>
    <content><![CDATA[<p>Hexo静态博客已经搭建好了，链接页面有了，主题不好看怎么换呢？本文记录主题更换相关内容。</p>
 <a id="more"></a>

<p>选择一个自己喜欢的 Hexo 主题站：<a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a><br>极简主题推荐：<br><a href="https://github.com/small-rose/hexo-theme-polarbear.git" target="_blank" rel="noopener">hexo-theme-polarbear</a></p>
<p><a href="https://github.com/small-rose/gd4Ark.github.io.git" target="_blank" rel="noopener">hexo-theme-polarbear  （gd4Ark的扩展版）</a> （下载后执行安装npm install）</p>
<p><a href="https://github.com/Shen-Yu/hexo-theme-ayer" target="_blank" rel="noopener">hexo-theme-ayer</a></p>
<p><a href="https://github.com/small-rose/hexo-theme-sky.git" target="_blank" rel="noopener">hexo-theme-sky</a></p>
<p><a href="https://github.com/small-rose/hexo-theme-xoxo.git" target="_blank" rel="noopener">hexo-theme-xoxo</a></p>
<p><a href="https://github.com/small-rose/hexo-theme-xoxo-plus.git" target="_blank" rel="noopener">hexo-theme-xoxo-plus</a></p>
<p>漂亮主题推荐：</p>
<p><a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">hexo-theme-matery</a> </p>
<p><a href="https://github.com/fluid-dev/hexo-theme-fluid" target="_blank" rel="noopener">hexo-theme-fluid </a>  | <a href="https://github.com/small-rose/hexo-theme-fluid" target="_blank" rel="noopener">butterfly主题文档</a></p>
<p><a href="https://github.com/small-rose/hexo-theme-butterfly" target="_blank" rel="noopener">hexo-theme-butterfly</a> | <a href="https://demo.jerryc.me/posts/21cfbf15/" target="_blank" rel="noopener">butterfly主题文档</a></p>
<p><a href="https://github.com/small-rose/hexo-theme-sakura" target="_blank" rel="noopener">hexo-theme-sakura</a> | <a href="https://docs.hojun.cn/sakura/docs/#/" target="_blank" rel="noopener">sakura主题文档</a></p>
<p>其中极简主题有些没有search功能，如需要自己安装search插件，参考Hexo搭建静态博客（四）——插件安装<br>极简主题中最开始比较喜欢 hexo-theme-polarbear，对扩展版进行补充搜索功能，顺便学习一些<code>hexo</code>自定义插件安装的东西。</p>
<p>漂亮主题，现在使用的是 hexo-theme-matery 如果你喜欢，本文底部还有一些相关文章，如果能帮你解决问题就好了，更多问题可以到群里<code>（971887688）</code>提问，或者联系我。</p>
<p>如安装主题hexo-theme-xoxo-matery,</p>
<h4 id="1-下载主题"><a href="#1-下载主题" class="headerlink" title="1.下载主题"></a>1.下载主题</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> themes
<span class="token function">git</span> clone https://github.com/small-rose/hexo-theme-matery.git</code></pre>
<h4 id="2-修改配置"><a href="#2-修改配置" class="headerlink" title="2.修改配置"></a>2.修改配置</h4><p>修改全局配置根目录_config.yml, 注意theme的值要和theme目录的主题的文件夹名字一致</p>
<pre><code># Extensions
## Plugins: https://hexo.io/plugins/
## Themes: https://hexo.io/themes/
# landscape
theme: hexo-theme-matery</code></pre><h4 id="3-启动预览"><a href="#3-启动预览" class="headerlink" title="3.启动预览"></a>3.启动预览</h4><pre class=" language-bash"><code class="language-bash">hexo g <span class="token operator">&amp;</span> hexo s</code></pre>
<p>浏览器访问：<br>大功告成。</p>
<p>如果对该主题的其他设置请参考主题用法，到主题目录下修改主题的配置文件_config.yml</p>
<p>如有问题请参考本系列：<a href="/post/ce4a93ff.html">Hexo搭建静态博客（五）——踩坑问题</a></p>
<br/>

<p><strong>相关文章</strong></p>
<p><a href="9f117b.html">Hexo搭建静态博客（一）——基础搭建</a><br><a href="c1358fc8.html">Hexo搭建静态博客（二）——创建页面</a><br><a href="a5bf7e18.html">Hexo搭建静态博客（三）——主题更换</a><br><a href="cda13ebe.html">Hexo搭建静态博客（四）——插件安装</a><br><a href="ce4a93ff.html">Hexo搭建静态博客（五）——踩坑问题</a><br><a href="c68d7a69.html">Hexo搭建静态博客（六）——项目部署</a><br><a href="1c633c7e.html">Hexo搭建静态博客（七）——客服与推送</a><br><a href="caf66d5e.html">Hexo添加Live2D二次元老婆</a><br><a href="358175a6.html">Hexo博客Valine-Admin踩坑记录</a><br><a href="40099453.html">Hexo博客Matery主题valine升级与优化</a><br><a href="a53a9069.html">Hexo博客Matery主题新手常见问题</a></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>图片随机API</title>
    <url>/posts/1fd50daf.html</url>
    <content><![CDATA[<h2 id="随机图片获取api"><a href="#随机图片获取api" class="headerlink" title="随机图片获取api"></a>随机图片获取api</h2><p>就是一个收集记录图片随机API。非原创。</p>
<h2 id="一、直接获取图片"><a href="#一、直接获取图片" class="headerlink" title="一、直接获取图片"></a>一、直接获取图片</h2><p><a href="http://lorempixel.com/1600/900" target="_blank" rel="noopener">http://lorempixel.com/1600/900</a><br><a href="https://unsplash.it/1600/900?random（国内加载略慢）" target="_blank" rel="noopener">https://unsplash.it/1600/900?random（国内加载略慢）</a><br><a href="https://uploadbeta.com/api/pictures/random/?key=BingEverydayWallpaperPicture【返回必应图片】" target="_blank" rel="noopener">https://uploadbeta.com/api/pictures/random/?key=BingEverydayWallpaperPicture【返回必应图片】</a><br><a href="https://uploadbeta.com/api/pictures/random/?key=%E6%8E%A8%E5%A5%B3%E9%83%8E" target="_blank" rel="noopener">https://uploadbeta.com/api/pictures/random/?key=%E6%8E%A8%E5%A5%B3%E9%83%8E</a><br><a href="https://unsplash.it/1600/900?random" target="_blank" rel="noopener">https://unsplash.it/1600/900?random</a></p>
<p>二次元随机图:<a href="http://www.dmoe.cc/random.php" target="_blank" rel="noopener">http://www.dmoe.cc/random.php</a></p>
<p>1366<em>768分辨率图片地址：<a href="https://api.dujin.org/bing/1366.php" target="_blank" rel="noopener">https://api.dujin.org/bing/1366.php</a><br>1920</em>1080分辨率图片地址：<a href="https://api.dujin.org/bing/1920.php" target="_blank" rel="noopener">https://api.dujin.org/bing/1920.php</a></p>
<p><a href="http://api.mtyqx.cn/api/random.php（二次元动漫）" target="_blank" rel="noopener">http://api.mtyqx.cn/api/random.php（二次元动漫）</a></p>
<p><a href="http://api.mtyqx.cn/tapi/random.php（二次元动漫）" target="_blank" rel="noopener">http://api.mtyqx.cn/tapi/random.php（二次元动漫）</a></p>
<p><a href="http://api.pingping6.com/girl/?type=302" target="_blank" rel="noopener">http://api.pingping6.com/girl/?type=302</a></p>
<p><a href="http://api.pingping6.com/girl2/?type=302" target="_blank" rel="noopener">http://api.pingping6.com/girl2/?type=302</a></p>
<p><a href="http://pic.1anime.video/random.php" target="_blank" rel="noopener">http://pic.1anime.video/random.php</a></p>
<p>补充：</p>
<p>返回动漫图：</p>
<p><a href="https://api.cyfan.top/doc/bing" target="_blank" rel="noopener">https://api.cyfan.top/doc/bing</a></p>
<h2 id="二、获取json数据】"><a href="#二、获取json数据】" class="headerlink" title="二、获取json数据】"></a>二、获取json数据】</h2><p><a href="https://bing.ioliu.cn/v1/rand?type=json" target="_blank" rel="noopener">https://bing.ioliu.cn/v1/rand?type=json</a><br><a href="https://cn.bing.com/HPImageArchive.aspx?format=js&amp;idx=0&amp;n=1" target="_blank" rel="noopener">https://cn.bing.com/HPImageArchive.aspx?format=js&amp;idx=0&amp;n=1</a><br><a href="http://lorempixel.com/1600/900" target="_blank" rel="noopener">http://lorempixel.com/1600/900</a></p>
<p>参考文章地址：<a href="https://www.cnblogs.com/lgqrlchinese/p/11386857.html" target="_blank" rel="noopener">https://www.cnblogs.com/lgqrlchinese/p/11386857.html</a></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Img-Api</category>
      </categories>
      <tags>
        <tag>Img-Api</tag>
      </tags>
  </entry>
  <entry>
    <title>Matery主题valine使用与升级</title>
    <url>/posts/40099453.html</url>
    <content><![CDATA[<h2 id="Matery-主题评论功能valine使用与升级"><a href="#Matery-主题评论功能valine使用与升级" class="headerlink" title="Matery 主题评论功能valine使用与升级"></a>Matery 主题评论功能valine使用与升级</h2><blockquote>
<p>Matery 默认自带了<a href="https://gitalk.github.io/" target="_blank" rel="noopener">Gitalk</a>、<a href="https://imsun.github.io/gitment/" target="_blank" rel="noopener">Gitment</a>、<a href="https://valine.js.org/" target="_blank" rel="noopener">Valine</a> 和 <a href="https://disqus.com/" target="_blank" rel="noopener">Disqus</a> 评论模块（推荐使用 <code>Gitalk</code>）但是gittalk有时候加载不出来。就优先使用了Valine。<br>valine使用教程不少，简单说一下，本文主要是把matery自带的<code>valine1.3</code> 升级到<code>valine 1.4</code>的过程。</p>
</blockquote>
<p>点击本站的<a href="https://zhangxiaocai.cn/contact/" target="_blank" rel="noopener">留言薄</a>可以看到效果。</p>
<p>多了浏览器和系统图标，还有博主小伙伴标识。</p>
<h3 id="一、valine启用"><a href="#一、valine启用" class="headerlink" title="一、valine启用"></a>一、valine启用</h3><h4 id="1、主要流程"><a href="#1、主要流程" class="headerlink" title="1、主要流程"></a>1、主要流程</h4><p>valine和miniValine使用基本类似。</p>
<p>（1）去 <a href="https://leancloud.cn/dashboard/login.html#/signup" target="_blank" rel="noopener">Leancloud</a>注册。</p>
<p>注意事项：</p>
<p>节点选择：华东节点、华北节点、国际版。</p>
<p>如果你的域名没有备案，建议选择国际版。 因为华东或华北节点在安装评论系统之后访问要求域名备案。</p>
<p>（2）在“设置“，”应用 Keys”，找到你的<code>appid</code>和<code>appkey</code>，配置到主题中<code>valine</code>配置的地方，启用<code>valine</code>。</p>
<p>（3）在“设置“，”安全中心”，”Web 安全域名”，添加自己的域名。</p>
<p>（4）在“设置“，”安全中心”，”服务开关”，数据存储要打开。</p>
<p>（5）在“存储“，”用量统计”，”HTTP状态码”，启用，方便后续报错查错误码。</p>
<p>（6）重新编译部署<code>hexo clean &amp; hexo g &amp; hexo d</code>  </p>
<h4 id="2、遇到问题"><a href="#2、遇到问题" class="headerlink" title="2、遇到问题"></a>2、遇到问题</h4><p>搞这个东西采坑不少，有些坑都是自己不小心造成的。我在网上查了，交流群里也咨询请教了，没有人能解决这个问题，毕竟这个坑是自己造成的。</p>
<p>常见Code 403问题：</p>
<pre class=" language-txt"><code class="language-txt">Code 403: 访问被api域名白名单拒绝，请检查你的安全域名设置.</code></pre>
<p>网上多数的说法是在web安全域名中添加自己的域名。可是如果添加之后还是这个问题呢？</p>
<p>其实一般不会有这个问题，我有这个问题是我改了权限造成了。</p>
<p>官方给的解释：</p>
<pre class=" language-txt"><code class="language-txt">应用在控制台中的相关服务选项未打开，如 Class 关闭了权限，或是 User 缺失了 session 信息等情况下，云端会统一地返回 403 错误码及不同的错误信息，代表当前请求因权限不够而被拒。例如：

    信息 - Forbidden to read/write by class permissions
    含义 - 操作被禁止，因为 Class 表没有打开「读」或者「写」的权限。进入 控制台 > 存储，点击相应的 Class，从右侧选择 其他 下拉菜单，进入 权限管理 来调整。

    信息 - The user cannot be altered by a client without the session.
    含义 - 用户没有登录，无法修改用户信息。</code></pre>
<p>解决：</p>
<p>（1）首次使用，添加一条评论，一般添加之后就会好了。</p>
<p>（2）后续使用，403，请检查<code>comment</code>表的add_fields/create/find权限开放。</p>
<p>（3）如果还是不行将<code>_use</code>表的add_fields/create/find权限开放。</p>
<p>（4）如果还是不行，到“存储“，”用量统计”，”HTTP状态码”处，检查你的错误码，然后去<a href="https://leancloud.cn/docs/error_code.html#hash1392104" target="_blank" rel="noopener">LeanCloud的错误</a>找应用的错误码，排查原因吧。</p>
<h3 id="二、valine升级"><a href="#二、valine升级" class="headerlink" title="二、valine升级"></a>二、valine升级</h3><h4 id="1、引入1-4版的js文件"><a href="#1、引入1-4版的js文件" class="headerlink" title="1、引入1.4版的js文件"></a>1、引入1.4版的js文件</h4><p>（1）直接使用我 CDN 链接</p>
<p>如果你没有,可以直接在你的 <code>valine.ejs</code> 文件中使用我的链接：</p>
<pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/gh/small-rose/small-rose.github.io/libs/valine/Valine.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>
<p>位置在：</p>
<pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"&lt;%- theme.jsDelivr.url %>&lt;%- url_for('/libs/valine/av-min.js') %>"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/gh/small-rose/small-rose.github.io/libs/valine/Valine.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>
<p>记得把主题自带的</p>
<pre><code>&lt;script src=&quot;&lt;%- theme.jsDelivr.url %&gt;&lt;%- url_for(theme.libs.js.valine) %&gt;&quot;&gt;&lt;/script&gt;</code></pre><p>删掉，或直接剪切到别的地方备份着。</p>
<p>（2）将文件放你自己的仓库</p>
<p>下载我的 <code>Valine.min.js</code> 文件，直接替换你主题目录 <code>/source/libs/valine/</code> 下的 <code>Valine.min.js</code> 文件。</p>
<p>注意，如果你担心替换有问题，可以先备份一下你自己的 <code>Valine.min.js</code> 文件。</p>
<h4 id="2、增加valine的配置："><a href="#2、增加valine的配置：" class="headerlink" title="2、增加valine的配置："></a>2、增加valine的配置：</h4><p>1.4的版本有些属性调整了，主题下的<code>_config.yml</code>valine属性如下：</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">valine</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">appId</span><span class="token punctuation">:</span> iTxfqh5e9IaRfiiVOTbIWoKa<span class="token punctuation">-</span>XXXXXX
  <span class="token key atrule">appKey</span><span class="token punctuation">:</span> C5s5xGFErD1EtXXXXXXXX
  <span class="token key atrule">verify</span><span class="token punctuation">:</span> <span class="token boolean important">true  </span><span class="token comment" spellcheck="true"># 是否启用防垃圾验证</span>
  <span class="token key atrule">notify</span><span class="token punctuation">:</span> <span class="token boolean important">true  </span><span class="token comment" spellcheck="true"># 是否开启邮件提醒(https://valine.js.org/notify.html)</span>
  <span class="token key atrule">visitor</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">avatar</span><span class="token punctuation">:</span> monsterid  <span class="token comment" spellcheck="true"># 头像样式(https://valine.js.org/avatar.html) </span>
  <span class="token key atrule">pageSize</span><span class="token punctuation">:</span> <span class="token number">10</span>
  <span class="token key atrule">placeholder</span><span class="token punctuation">:</span> <span class="token string">'ヾﾉ≧∀≦)o来啊，快活啊!'</span> <span class="token comment" spellcheck="true"># Comment Box placeholder</span>
  <span class="token key atrule">background</span><span class="token punctuation">:</span> /medias/comment_bg.png <span class="token comment" spellcheck="true">#背景图</span>
  <span class="token key atrule">count</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">enableQQ</span><span class="token punctuation">:</span> <span class="token number">970175021</span>
  <span class="token key atrule">recordIP</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">requiredFields</span><span class="token punctuation">:</span> 
    <span class="token punctuation">-</span> nick
    <span class="token punctuation">-</span> mail
  <span class="token key atrule">guest_info</span><span class="token punctuation">:</span> 
    <span class="token punctuation">-</span> nick
    <span class="token punctuation">-</span> mail
    <span class="token punctuation">-</span> link
  <span class="token key atrule">master</span><span class="token punctuation">:</span> 
    <span class="token punctuation">-</span> 123abc508165c8eba9a77f872xxxx046  <span class="token comment" spellcheck="true"># md5加密后的博主邮箱</span>
  <span class="token key atrule">metaPlaceholder</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 输入框的背景文字</span>
    <span class="token key atrule">nick</span><span class="token punctuation">:</span> 昵称/QQ号(必填)
    <span class="token key atrule">mail</span><span class="token punctuation">:</span> 邮箱(必填)
    <span class="token key atrule">link</span><span class="token punctuation">:</span> 网址(https<span class="token punctuation">:</span>//)
  <span class="token key atrule">lang</span><span class="token punctuation">:</span> zh<span class="token punctuation">-</span>CN
  <span class="token key atrule">tagMeta</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># The String Array of Words to show Flag.[Just Only xCss Style mode]</span>
    <span class="token punctuation">-</span> 博主
    <span class="token punctuation">-</span> 小伙伴
    <span class="token punctuation">-</span> 访客
  <span class="token key atrule">friends</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># The MD5 String Array of friends Email to show friends Flag.[Just Only xCss Style mode]</span>
    <span class="token punctuation">-</span> c08508165c8eba9a77f8c2853xxxx09e
    <span class="token punctuation">-</span> 901345d4c91ddfd8db0f175bbcfff0c8
    <span class="token punctuation">-</span> 1512958e18378c98b498d5effe3e76ff</code></pre>
<p>复制代码注意缩进对齐，不对齐可能会报错，请自行检查对齐。</p>
<h4 id="3、修改valine-ejs："><a href="#3、修改valine-ejs：" class="headerlink" title="3、修改valine.ejs："></a>3、修改<code>valine.ejs</code>：</h4><p>Matery 主题使用的<code>ejs</code>模板预编译，如果你使用了<code>pug</code>或者<code>swig</code>等其他的模板语言，请修改成对应语言语法即可。</p>
<p>原始的<code>valine.ejs</code></p>
<pre class=" language-ejs"><code class="language-ejs">new Valine({
        el: '#vcomments',
        appId: '<%- theme.valine.appId %>',
        appKey: '<%- theme.valine.appKey %>',
        notify: '<%- theme.valine.notify %>' === 'true',
        verify: '<%- theme.valine.verify %>' === 'true',
        visitor: '<%- theme.valine.visitor %>' === 'true',
        avatar: '<%- theme.valine.avatar %>',
        pageSize: '<%- theme.valine.pageSize %>',
        lang: '<% if (config.language == "zh-CN") {  %>zh-cn<% } else { %>en<% } %>',
        placeholder: '<%= theme.valine.placeholder %>'
    });</code></pre>
<p>升级后的<code>valine.ejs</code></p>
<pre class=" language-ejs"><code class="language-ejs">
let metaPlaceholder = <%-  JSON.stringify(theme.valine.metaPlaceholder) %> ;
//这里要换行
new Valine({
        el: '#vcomments',
        appId: '<%- theme.valine.appId %>',
        appKey: '<%- theme.valine.appKey %>',
        notify: '<%- theme.valine.notify %>' === 'true',
        verify: '<%- theme.valine.verify %>' === 'true',
        visitor: '<%- theme.valine.visitor %>' === 'true',
        avatar: '<%- theme.valine.avatar %>',
        pageSize: '<%- theme.valine.pageSize %>',
        lang: '<%- theme.valine.lang %>',
        placeholder: '<%= theme.valine.placeholder %>',
        meta: <%- '["' + theme.valine.guest_info.join('", "') + '"]' %>,
        recordIP: '<%- theme.valine.recordIP %>' === 'true',
        enableQQ: '<%- theme.valine.avatar %>',
        requiredFields: <%- '["' + theme.valine.master.join('", "') + '"]' %>,
        master: <%- '["' + theme.valine.master.join('", "') + '"]' %>,
        friends: <%- '["' + theme.valine.friends.join('", "') + '"]' %>,
        tagMeta: <%- '["' + theme.valine.tagMeta.join('", "') + '"]' %>,
        metaPlaceholder: metaPlaceholder,

    });</code></pre>
<p>是不是很简单，博主亲自采坑亲自爬坑记录。</p>
<p>如果需要验证昵称和邮箱可以加上以下代码：</p>
<pre class=" language-html"><code class="language-html">document.body.addEventListener('click', function(e) {
    if (e.target.classList.contains('vsubmit')) {
        const email = document.querySelector('input[type=email]');
        const nick = document.querySelector('input[name=nick]');
        const reg = /^[A-Za-z0-9_-\u4e00-\u9fa5]+@[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)+$/;
        if (!email.value || !nick.value || !reg.test(email.value)) {
            const str = `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>valert txt-center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vtext<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>请填写正确的昵称和邮箱！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>`;
            const vmark = document.querySelector('.vmark');
            vmark.innerHTML = str;
            vmark.style.display = 'block';

            e.stopPropagation();

            setTimeout(function() {
                vmark.style.display = 'none';
                vmark.innerHTML = '';
            }, 2500);
        }
    }
    }, true);</code></pre>
<p>说明：代码非原创，JS正则验证本身也不难。</p>
<p>好了可以部署之后自己测试一下。</p>
<p>顺便说一下，填写昵称邮箱和网址的地方如果折行了就按我的样式改一下就好：</p>
<p>在 <code>valine.ejs</code> 是上面对着改一下就好了：</p>
<pre class=" language-html"><code class="language-html">.v[data-class="v"] .vwrap .vheader .vinput {
  width: 32%;
  border-bottom: 1px dashed #dedede;
}</code></pre>
<br/>

<p><strong>相关文章</strong></p>
<p><a href="9f117b.html">Hexo搭建静态博客（一）——基础搭建</a><br><a href="c1358fc8.html">Hexo搭建静态博客（二）——创建页面</a><br><a href="a5bf7e18.html">Hexo搭建静态博客（三）——主题更换</a><br><a href="cda13ebe.html">Hexo搭建静态博客（四）——插件安装</a><br><a href="ce4a93ff.html">Hexo搭建静态博客（五）——踩坑问题</a><br><a href="c68d7a69.html">Hexo搭建静态博客（六）——项目部署</a><br><a href="1c633c7e.html">Hexo搭建静态博客（七）——客服与推送</a><br><a href="caf66d5e.html">Hexo添加Live2D二次元老婆</a><br><a href="358175a6.html">Hexo博客Valine-Admin踩坑记录</a><br><a href="40099453.html">Hexo博客Matery主题valine升级与优化</a><br><a href="5a99eb4d.html">Hexo博客Matery主题新手常见问题</a><br><a href="5a99eb4d.html">Hexo博客Matery主题新手常见问题</a></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo添加Live2D二次元老婆</title>
    <url>/posts/caf66d5e.html</url>
    <content><![CDATA[<h2 id="Hexo添加Live2D二次元老婆"><a href="#Hexo添加Live2D二次元老婆" class="headerlink" title="Hexo添加Live2D二次元老婆"></a>Hexo添加Live2D二次元老婆</h2><p>本文主要内容：</p>
<p>Hexo博客在网页添加live2d。</p>
<blockquote>
<p>添加主要有2种方式：<br>（1）使用hexo插件；使用该种方式添加，需要选择某一样模型，仅显示live2d，无提示语、无一言、今日诗词等附加功能。<br>（2）手动添加; 使用该种方式添加，显示live2d，可以切换模型、皮肤，有提示语、一言、今日诗词等附加功能。<br>（3）将手动添加并入matery主题插件化。</p>
</blockquote>
<p><font coloer="red"><strong>特别说明：</strong></font><br>如果你既想安装Hexo的Live2d插件，又想手动引入的方式添加，为了防止造成不可预知冲突，我不建议这么做。如果一定要尝试，也可以摸索一下，我没有试过2个live2d同时显示，有兴趣可以试试，毕竟这样你就可以有两个老婆了~</p>
<p>本文主要围绕以上三点介绍。感谢<code>Tokisaki Galaxy</code>提示补充优缺点介绍。</p>
<p>如果你要进行操作，三选一就行，不要从头到尾一顿操作。非要这样也行，有两个老婆加载超级慢咯~</p>
<h3 id="一、使用Hexo插件"><a href="#一、使用Hexo插件" class="headerlink" title="一、使用Hexo插件"></a>一、使用Hexo插件</h3><h4 id="1、安装插件"><a href="#1、安装插件" class="headerlink" title="1、安装插件"></a>1、安装插件</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save hexo-helper-live2d</code></pre>
<h4 id="2、添加配置"><a href="#2、添加配置" class="headerlink" title="2、添加配置"></a>2、添加配置</h4><p>hexo的配置文件<code>_config.yml</code>中添加如下配置:</p>
<pre class=" language-yml"><code class="language-yml">live2d:
  enable: true
  scriptFrom: local
  pluginRootPath: live2dw/
  pluginJsPath: lib/
  pluginModelPath: assets/
  tagMode: false
  debug: false
  model:
    use: live2d-widget-model-shizuku
  display:
    position: right
    width: 150
    height: 300
  mobile:
    show: true</code></pre>
<p>如果要看更细节的配置，原插件在这里<a href="https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md" target="_blank" rel="noopener">hexo-helper-live2d</a></p>
<h4 id="3、安装模型"><a href="#3、安装模型" class="headerlink" title="3、安装模型"></a>3、安装模型</h4><p>安装之后选择喜欢的模型：</p>
<pre class=" language-bash"><code class="language-bash">use <span class="token function">npm</span> <span class="token function">install</span> --save live2d-widget-model-hibiki</code></pre>
<p>可选模型：</p>
<p>需要注意的是<code>live2d-widget-model-haru</code>下面有两个，要小心。</p>
<pre><code>live2d-widget-model-chitose
live2d-widget-model-epsilon2_1
live2d-widget-model-gf
live2d-widget-model-haru
live2d-widget-model-haruto
live2d-widget-model-hibiki
live2d-widget-model-hijiki
live2d-widget-model-izumi
live2d-widget-model-koharu
live2d-widget-model-miku
live2d-widget-model-ni-j
live2d-widget-model-nico
live2d-widget-model-nietzsche
live2d-widget-model-nipsilon
live2d-widget-model-nito
live2d-widget-model-shizuku
live2d-widget-model-tororo
live2d-widget-model-tsumiki
live2d-widget-model-unitychan
live2d-widget-model-wanko
live2d-widget-model-z16</code></pre><p>如果你不想挨个试，可以查看模型预览：</p>
<p><a href="https://huaji8.top/post/live2d-plugin-2.0/" target="_blank" rel="noopener">模型预览点这里</a></p>
<h3 id="二、手动安装"><a href="#二、手动安装" class="headerlink" title="二、手动安装"></a>二、手动安装</h3><p>手动安装是比较通用办法，无所谓是hexo或者其他的架构。</p>
<h4 id="1、下载模型等文件"><a href="#1、下载模型等文件" class="headerlink" title="1、下载模型等文件"></a>1、下载模型等文件</h4><p><a href="https://github.com/fghrsh/live2d_demo" target="_blank" rel="noopener">GitHub官方源码下载</a></p>
<p>如果你下载不了，这里提供<a href="https://pan.baidu.com/s/1Ep4DhB6H6Aeb1Nio7maxYw" target="_blank" rel="noopener">百度云链接下载</a></p>
<p>提取码：ot85</p>
<h4 id="2、添加到网站目录"><a href="#2、添加到网站目录" class="headerlink" title="2、添加到网站目录"></a>2、添加到网站目录</h4><p>将assets文件夹解压你网站目录。<br>如路径为：<code>D:\hexo\public\live2d\assets\</code></p>
<h4 id="3、页面引入"><a href="#3、页面引入" class="headerlink" title="3、页面引入"></a>3、页面引入</h4><p>页面引入方式有三种，任选其一即可。</p>
<p>（1）普通方式引入</p>
<pre><code>在 &quot;&lt;/head&gt;&quot; 前引入 waifu.css 样式表   
在 &quot;&lt;/body&gt;&quot; 前引入 waifu-tips.js 和 live2d.js
在 &quot;&lt;/body&gt;&quot; 前插入 初始化 JS，可在 初始化前 设置参数</code></pre><p>如：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>

        · · ·   · · ·

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://www.domain.com/live2d/assets/waifu.css<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>

        · · ·   · · ·

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>waifu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>waifu-tips<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>live2d<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>live2d<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>waifu-tool<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fui-home<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fui-chat<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fui-eye<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fui-user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fui-photo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fui-info-circle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fui-cross<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://www.domain.com/live2d/assets/waifu-tips.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://www.domain.com/live2d/assets/live2d.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">
        live2d_settings<span class="token punctuation">[</span><span class="token string">'modelId'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        live2d_settings<span class="token punctuation">[</span><span class="token string">'modelTexturesId'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">87</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> waifuTips <span class="token operator">=</span> <span class="token string">"https://www.domain.com/live2d/assets/waifu-tips.json"</span><span class="token punctuation">;</span>
        <span class="token function">initModel</span><span class="token punctuation">(</span>waifuTips<span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>
<p>（2）autoload.js 引入<br> 可以在页面最下底或foot元素里引入<code>autoload.js</code>即可。</p>
<p>（3）直接嵌入到页面</p>
<p> 代码较多，下载后有三个引入示例，可以参考引入示例。</p>
<h4 id="3、定制个性化"><a href="#3、定制个性化" class="headerlink" title="3、定制个性化"></a>3、定制个性化</h4><p>修改 waifu-tips.js 顶部的设置参数(或初始化前设置)，均有注释，看注释即可理解意思，不行就改过然后运行看效果。</p>
<p>修改 waifu-tips.json，定制live2d的提示语，可以自己修改成个性化提示语。</p>
<p>在页面切换模型之后如果有喜欢的就F12，看看分组id和模型id<br>live2d_settings[‘modelId’] = 1;<br>live2d_settings[‘modelTexturesId’] = 87;</p>
<p>还有一个参数使用需要注意：</p>
<p>live2d_settings[‘waifuDraggable’] =’disable’；</p>
<p>拖拽样式，可选 ‘disable’ (禁用)，’axis-x’ (只能水平拖拽)，’unlimited’ (自由拖拽)，如果想要自由拖拽，需要引入jquery-ui脚步，<code>jquery-ui.js</code>或压缩版<code>jquery-ui.min.js</code></p>
<h3 id="三、Matery下手动插件化"><a href="#三、Matery下手动插件化" class="headerlink" title="三、Matery下手动插件化"></a>三、Matery下手动插件化</h3><p>前提：手动安装方式中下载了源码，将代码放到主题目录下。如放置到：<code>/source/js/live2d_assets/</code>,下面的引入，以此路径为例。</p>
<p>说是Matery主题，其实其他主题原理一样。为了将手动方式插件化，也设置一个启动开关。</p>
<h4 id="1、增加live2d配置"><a href="#1、增加live2d配置" class="headerlink" title="1、增加live2d配置"></a>1、增加live2d配置</h4><p>在主题目录的<code>_config.yml</code> 中增加：</p>
<pre class=" language-yml"><code class="language-yml">live2d:
  enable: true</code></pre>
<p><code>true</code>表示启用二次元老婆，<code>false</code>表示不启用二次元老婆。</p>
<h4 id="2、头部引入CSS文件"><a href="#2、头部引入CSS文件" class="headerlink" title="2、头部引入CSS文件"></a>2、头部引入CSS文件</h4><p>因为CSS文件一般在头部引入，在<code>layout/_partial</code>目录找到<code>head.ejs</code>,添加live2d的样式文章<code>waifu.css</code>,因为有了开关，可以根据开关是否引入<code>waifu.css</code>文件，代码如下：</p>
<p>(ejs代码块不能显示，所以改用html代码块，不影响复制)</p>
<pre class=" language-html"><code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(theme.live2d</span> <span class="token attr-name">&amp;&amp;</span> <span class="token attr-name">theme.live2d.enable)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%- theme.jsDelivr.url %<span class="token punctuation">></span>&lt;%- url_for(<span class="token punctuation">'</span>/js/live2d_assets/waifu.css<span class="token punctuation">'</span>) %<span class="token punctuation">></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span></code></pre>
<h4 id="3、增加模块文件"><a href="#3、增加模块文件" class="headerlink" title="3、增加模块文件"></a>3、增加模块文件</h4><p>在<code>layout/_partial</code>目录新建<code>live2d.ejs</code>,内容如下：</p>
<p>(ejs代码块不能显示，所以改用html代码块，不影响复制)</p>
<pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- waifu-tips.js 依赖 JQuery 库  头部已经引用了JQuery，此处不引入--></span>

<span class="token comment" spellcheck="true">&lt;!-- 实现拖动效果，需引入 JQuery UI --></span>

&lt;script src="<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%-</span> <span class="token attr-name">theme.jsDelivr.url</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">url_for</span><span class="token punctuation">(</span><span class="token string">'/js/jquery-ui.min.js'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span>"<span class="token operator">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>waifu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>waifu-tips<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>live2d<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>live2d<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>waifu-tool<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fui-home<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fui-chat<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fui-eye<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fui-user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fui-photo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fui-info-circle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fui-cross<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

&lt;script src="<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%-</span> <span class="token attr-name">theme.jsDelivr.url</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">url_for</span><span class="token punctuation">(</span><span class="token string">'/js/live2d_assets/waifu-tips.js'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span>"<span class="token operator">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
&lt;script src="<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%-</span> <span class="token attr-name">theme.jsDelivr.url</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">url_for</span><span class="token punctuation">(</span><span class="token string">'/js/live2d_assets/live2d.js'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span>"<span class="token operator">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">
    live2d_settings<span class="token punctuation">[</span><span class="token string">'modelId'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    live2d_settings<span class="token punctuation">[</span><span class="token string">'modelTexturesId'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">87</span><span class="token punctuation">;</span>

     <span class="token keyword">var</span> waifuTips <span class="token operator">=</span> <span class="token string">"&lt;%- theme.jsDelivr.url %>&lt;%- url_for('/js/live2d_assets/waifu-tips.json') %>"</span><span class="token punctuation">;</span>
    <span class="token function">initModel</span><span class="token punctuation">(</span>waifuTips<span class="token punctuation">)</span>
 </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>
<h4 id="4、引入模块使用"><a href="#4、引入模块使用" class="headerlink" title="4、引入模块使用"></a>4、引入模块使用</h4><p>在你想展示二次元老婆的页面的末尾增加以下代码：</p>
<pre class=" language-ejs"><code class="language-ejs"><% if (theme.live2d.enable) { %>
    <%- partial('_partial/live2d') %>
<% } %></code></pre>
<p>如：<br>在首页展示二次元老婆就找的主题下的<code>layout/index.ejs</code>文件，在index.ejs末尾加上上述代码片段即可。<br>如果要在其他页面也展示，比如标签也，就找到<code>layout/tag.ejs</code>文件，在tag.ejs末尾加上上述代码片段，其他你想展示的页面同样的操作。</p>
<h4 id="4、重新编译启动"><a href="#4、重新编译启动" class="headerlink" title="4、重新编译启动"></a>4、重新编译启动</h4><pre class=" language-bash"><code class="language-bash">hexo clean <span class="token operator">&amp;</span> hexo g <span class="token operator">&amp;</span> hexo s</code></pre>
<p>看看有没有效果吧！</p>
<h4 id="5、live2d加载调整"><a href="#5、live2d加载调整" class="headerlink" title="5、live2d加载调整"></a>5、live2d加载调整</h4><p>因为引入手动添加的版本附加功能比较多，博客部署之后可能会存在卡顿问题。</p>
<p>解决办法：</p>
<p>（1）第一步，调整附加功能，把不必要的或者不喜欢的暂时关闭。</p>
<p>我最开的时候，有人反映的博客特别卡，滑动时还存在卡顿，因为鼠标的滑动触发了live2d的事件，调用了后台API，所以我就调整了一下，情况有所好转，如果你也想这样，可以参考我的配置，或者自己看<code>waifu.js</code>文件的参数说明自己调试优化.</p>
<p>我修改之后<code>waifu.js</code>文件的参数配置如下：</p>
<pre class=" language-js"><code class="language-js">
<span class="token comment" spellcheck="true">// 工具栏设置</span>
live2d_settings<span class="token punctuation">[</span><span class="token string">'showToolMenu'</span><span class="token punctuation">]</span>         <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 显示 工具栏          ，可选 true(真), false(假)</span>
live2d_settings<span class="token punctuation">[</span><span class="token string">'canCloseLive2d'</span><span class="token punctuation">]</span>       <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 显示 关闭看板娘  按钮，可选 true(真), false(假)</span>
live2d_settings<span class="token punctuation">[</span><span class="token string">'canSwitchModel'</span><span class="token punctuation">]</span>       <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 显示 模型切换    按钮，可选 true(真), false(假)</span>
live2d_settings<span class="token punctuation">[</span><span class="token string">'canSwitchTextures'</span><span class="token punctuation">]</span>    <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 显示 材质切换    按钮，可选 true(真), false(假)</span>
live2d_settings<span class="token punctuation">[</span><span class="token string">'canSwitchHitokoto'</span><span class="token punctuation">]</span>    <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 显示 一言切换    按钮，可选 true(真), false(假)</span>
live2d_settings<span class="token punctuation">[</span><span class="token string">'canTakeScreenshot'</span><span class="token punctuation">]</span>    <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 显示 看板娘截图  按钮，可选 true(真), false(假)</span>
live2d_settings<span class="token punctuation">[</span><span class="token string">'canTurnToHomePage'</span><span class="token punctuation">]</span>    <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 显示 返回首页    按钮，可选 true(真), false(假)</span>
live2d_settings<span class="token punctuation">[</span><span class="token string">'canTurnToAboutPage'</span><span class="token punctuation">]</span>   <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 显示 跳转关于页  按钮，可选 true(真), false(假)</span>

<span class="token comment" spellcheck="true">// 模型切换模式</span>
live2d_settings<span class="token punctuation">[</span><span class="token string">'modelStorage'</span><span class="token punctuation">]</span>         <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 记录 ID (刷新后恢复)，可选 true(真), false(假)</span>
live2d_settings<span class="token punctuation">[</span><span class="token string">'modelRandMode'</span><span class="token punctuation">]</span>        <span class="token operator">=</span> <span class="token string">'switch'</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 模型切换，可选 'rand'(随机), 'switch'(顺序)</span>
live2d_settings<span class="token punctuation">[</span><span class="token string">'modelTexturesRandMode'</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'switch'</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 材质切换，可选 'rand'(随机), 'switch'(顺序)</span>

<span class="token comment" spellcheck="true">// 提示消息选项</span>
live2d_settings<span class="token punctuation">[</span><span class="token string">'showHitokoto'</span><span class="token punctuation">]</span>         <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 显示一言</span>
live2d_settings<span class="token punctuation">[</span><span class="token string">'showF12Status'</span><span class="token punctuation">]</span>        <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 显示加载状态</span>
live2d_settings<span class="token punctuation">[</span><span class="token string">'showF12Message'</span><span class="token punctuation">]</span>       <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 显示看板娘消息</span>
live2d_settings<span class="token punctuation">[</span><span class="token string">'showF12OpenMsg'</span><span class="token punctuation">]</span>       <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 显示控制台打开提示</span>
live2d_settings<span class="token punctuation">[</span><span class="token string">'showCopyMessage'</span><span class="token punctuation">]</span>      <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 显示 复制内容 提示</span>
live2d_settings<span class="token punctuation">[</span><span class="token string">'showWelcomeMessage'</span><span class="token punctuation">]</span>   <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 显示进入面页欢迎词</span>

<span class="token comment" spellcheck="true">//看板娘样式设置</span>
live2d_settings<span class="token punctuation">[</span><span class="token string">'waifuSize'</span><span class="token punctuation">]</span>            <span class="token operator">=</span> <span class="token string">'280x250'</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 看板娘大小，例如 '280x250', '600x535'</span>
live2d_settings<span class="token punctuation">[</span><span class="token string">'waifuTipsSize'</span><span class="token punctuation">]</span>        <span class="token operator">=</span> <span class="token string">'250x70'</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 提示框大小，例如 '250x70', '570x150'</span>
live2d_settings<span class="token punctuation">[</span><span class="token string">'waifuFontSize'</span><span class="token punctuation">]</span>        <span class="token operator">=</span> <span class="token string">'12px'</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 提示框字体，例如 '12px', '30px'</span>
live2d_settings<span class="token punctuation">[</span><span class="token string">'waifuToolFont'</span><span class="token punctuation">]</span>        <span class="token operator">=</span> <span class="token string">'14px'</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 工具栏字体，例如 '14px', '36px'</span>
live2d_settings<span class="token punctuation">[</span><span class="token string">'waifuToolLine'</span><span class="token punctuation">]</span>        <span class="token operator">=</span> <span class="token string">'20px'</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 工具栏行高，例如 '20px', '36px'</span>
live2d_settings<span class="token punctuation">[</span><span class="token string">'waifuToolTop'</span><span class="token punctuation">]</span>         <span class="token operator">=</span> <span class="token string">'0px'</span>         <span class="token comment" spellcheck="true">// 工具栏顶部边距，例如 '0px', '-60px'</span>
live2d_settings<span class="token punctuation">[</span><span class="token string">'waifuMinWidth'</span><span class="token punctuation">]</span>        <span class="token operator">=</span> <span class="token string">'768px'</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 面页小于 指定宽度 隐藏看板娘，例如 'disable'(禁用), '768px'</span>
live2d_settings<span class="token punctuation">[</span><span class="token string">'waifuEdgeSide'</span><span class="token punctuation">]</span>        <span class="token operator">=</span> <span class="token string">'left:0'</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 看板娘贴边方向，例如 'left:0'(靠左 0px), 'right:30'(靠右 30px)</span>
live2d_settings<span class="token punctuation">[</span><span class="token string">'waifuDraggable'</span><span class="token punctuation">]</span>       <span class="token operator">=</span> <span class="token string">'unlimited'</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 拖拽样式，例如 'disable'(禁用), 'axis-x'(只能水平拖拽), 'unlimited'(自由拖拽)</span>
live2d_settings<span class="token punctuation">[</span><span class="token string">'waifuDraggableRevert'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 松开鼠标还原拖拽位置，可选 true(真), false(假)</span>
</code></pre>
<p>如果只是是加载也卡顿，就来继续第二步。</p>
<p>（2）第二步，添加博客加载动画 。</p>
<p>需要说明，加载动画只是为了延迟进入页面 ，如果是鼠标滑动带来的卡顿，还是老老实实改第一步的参数吧，不不必要功能能关就关点吧。</p>
<p>在你的工作空间，也有称之为站点根目录的位置，新建一个<code>scripts</code>文件夹，下面放入l<code>oading-pages.js</code>,文件内容如下：</p>
<pre class=" language-js"><code class="language-js">
<span class="token comment" spellcheck="true">/* global hexo */</span>
<span class="token string">"use strict"</span><span class="token punctuation">;</span>
hexo<span class="token punctuation">.</span>extend<span class="token punctuation">.</span>filter<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">'after_render:html'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>htmlContent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">const</span> injectHead <span class="token operator">=</span>
 <span class="token template-string"><span class="token string">`&lt;style type="text/css" lang="css">
    #loading-container{
        position: fixed;
        top: 0;
        left: 0;
        min-height: 100vh;
        width: 100vw;
        z-index: 9999;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        background: #FFF;
        text-align: center;
        /* loader页面消失采用渐隐的方式*/
        -webkit-transition: opacity 1s ease;
        -moz-transition: opacity 1s ease;
        -o-transition: opacity 1s ease;
        transition: opacity 1s ease;
    }
    .loading-image{
        width: 120px;
        height: 50px;
        transform: translate(-50%);
    }

    .loading-image div:nth-child(2) {
        -webkit-animation: pacman-balls 1s linear 0s infinite;
        animation: pacman-balls 1s linear 0s infinite
    }

    .loading-image div:nth-child(3) {
        -webkit-animation: pacman-balls 1s linear .33s infinite;
        animation: pacman-balls 1s linear .33s infinite
    }

    .loading-image div:nth-child(4) {
        -webkit-animation: pacman-balls 1s linear .66s infinite;
        animation: pacman-balls 1s linear .66s infinite
    }

    .loading-image div:nth-child(5) {
        -webkit-animation: pacman-balls 1s linear .99s infinite;
        animation: pacman-balls 1s linear .99s infinite
    }

   .loading-image div:first-of-type {
        width: 0;
        height: 0;
        border: 25px solid #49b1f5;
        border-right-color: transparent;
        border-radius: 25px;
        -webkit-animation: rotate_pacman_half_up .5s 0s infinite;
        animation: rotate_pacman_half_up .5s 0s infinite;
    }
    .loading-image div:nth-child(2) {
        width: 0;
        height: 0;
        border: 25px solid #49b1f5;
        border-right-color: transparent;
        border-radius: 25px;
        -webkit-animation: rotate_pacman_half_down .5s 0s infinite;
        animation: rotate_pacman_half_down .5s 0s infinite;
        margin-top: -50px;
    }
    @-webkit-keyframes rotate_pacman_half_up {0% {transform: rotate(270deg)}50% {transform: rotate(1turn)}to {transform: rotate(270deg)}}

    @keyframes rotate_pacman_half_up {0% {transform: rotate(270deg)}50% {transform: rotate(1turn)}to {transform: rotate(270deg)}}

    @-webkit-keyframes rotate_pacman_half_down {0% {transform: rotate(90deg)}50% {transform: rotate(0deg)}to {transform: rotate(90deg)}}

    @keyframes rotate_pacman_half_down {0% {transform: rotate(90deg)}50% {transform: rotate(0deg)}to {transform: rotate(90deg)}}

    @-webkit-keyframes pacman-balls {75% {opacity: .7}to {transform: translate(-100px, -6.25px)}}

    @keyframes pacman-balls {75% {opacity: .7}to {transform: translate(-100px, -6.25px)}}


    .loading-image div:nth-child(3),
    .loading-image div:nth-child(4),
    .loading-image div:nth-child(5),
    .loading-image div:nth-child(6){
        background-color: #49b1f5;
        width: 15px;
        height: 15px;
        border-radius: 100%;
        margin: 2px;
        width: 10px;
        height: 10px;
        position: absolute;
        transform: translateY(-6.25px);
        top: 25px;
        left: 100px;
    }
    .loading-text{
        margin-bottom: 20vh;
        text-align: center;
        color: #2c3e50;
        font-size: 2rem;
        box-sizing: border-box;
        padding: 0 10px;
        text-shadow: 0 2px 10px rgba(0,0,0,0.2);
    }
    @media only screen and (max-width: 500px) {
         .loading-text{
            font-size: 1.5rem;
         }
    }
    .fadeout {
        opacity: 0;
        filter: alpha(opacity=0);
    }
    /* logo出现动画 */
    @-webkit-keyframes fadeInDown{0%{opacity:0;-webkit-transform:translate3d(0,-100%,0);transform:translate3d(0,-100%,0)}100%{opacity:1;-webkit-transform:none;transform:none}}
    @keyframes fadeInDown{0%{opacity:0;-webkit-transform:translate3d(0,-100%,0);}}
 &lt;/style>
 &lt;script>
(function () {
    const loaded = function(){
       setTimeout(function(){
            const loader = document.getElementById("loading-container");
            loader.className="fadeout" ;//使用渐隐的方法淡出loading page
            document.getElementById("body-wrap").style.display="flex";
            setTimeout(function(){
                loader.style.display="none";
            },2000); 
        },2000);//强制显示loading page 1s  
    };
    loaded();
})()
 &lt;/script>`</span></span><span class="token punctuation">;</span>
     <span class="token keyword">const</span> injectBody <span class="token operator">=</span> <span class="token template-string"><span class="token string">`
 &lt;div id="loading-container">
     &lt;p class="loading-text">玩命加载中 . . . &lt;/p> 
     &lt;div class="loading-image">
         &lt;div>&lt;/div>
         &lt;div>&lt;/div>
         &lt;div>&lt;/div>
         &lt;div>&lt;/div> 
         &lt;div>&lt;/div>
     &lt;/div>
 &lt;/div>`</span></span><span class="token punctuation">;</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex">/&lt;\/head>/gi</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>htmlContent<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token keyword">let</span> lastIndex <span class="token operator">=</span> htmlContent<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'&lt;/head>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         htmlContent <span class="token operator">=</span> htmlContent<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> lastIndex<span class="token punctuation">)</span> <span class="token operator">+</span> injectHead <span class="token operator">+</span> htmlContent<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>lastIndex<span class="token punctuation">,</span> htmlContent<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex">/&lt;body>/gi</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>htmlContent<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token keyword">let</span> index <span class="token operator">=</span> htmlContent<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'&lt;body>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         htmlContent <span class="token operator">=</span> htmlContent<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">+</span> injectBody <span class="token operator">+</span> htmlContent<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> htmlContent<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
     <span class="token keyword">return</span> htmlContent<span class="token punctuation">;</span>
 <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre>
<p>关于页面加载动画，我是参考过客～励む<a href="https://yafine-blog.cn/posts/7400.html" target="_blank" rel="noopener">《Matery 主题添加 loading-pages》</a>一文。</p>
<p>(3)重新编译启动测试一下</p>
<pre class=" language-bash"><code class="language-bash">hexo clean <span class="token operator">&amp;</span> hexo g <span class="token operator">&amp;</span> hexo s</code></pre>
<p>参考文章：</p>
<p><a href="https://www.jianshu.com/p/4b61d8702cfa" target="_blank" rel="noopener">《在Hexo博客上添加可爱的Live 2D模型》</a><br><a href="https://blog.hclonely.com/posts/e1f9f17c/" target="_blank" rel="noopener">《给网页添加一个Live2D看板娘（前端）》</a><br><a href="https://yafine-blog.cn/posts/7400.html" target="_blank" rel="noopener">《Matery 主题添加 loading-pages》</a></p>
<br/>

<p><strong>相关文章</strong></p>
<p><a href="9f117b.html">Hexo搭建静态博客（一）——基础搭建</a><br><a href="c1358fc8.html">Hexo搭建静态博客（二）——创建页面</a><br><a href="a5bf7e18.html">Hexo搭建静态博客（三）——主题更换</a><br><a href="cda13ebe.html">Hexo搭建静态博客（四）——插件安装</a><br><a href="ce4a93ff.html">Hexo搭建静态博客（五）——踩坑问题</a><br><a href="c68d7a69.html">Hexo搭建静态博客（六）——项目部署</a><br><a href="1c633c7e.html">Hexo搭建静态博客（七）——客服与推送</a><br><a href="caf66d5e.html">Hexo添加Live2D二次元老婆</a><br><a href="358175a6.html">Hexo博客Valine-Admin踩坑记录</a><br><a href="40099453.html">Hexo博客Matery主题valine升级与优化</a><br><a href="a53a9069.html">Hexo博客Matery主题新手常见问题</a></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo搭建静态博客（七）——客服与推送</title>
    <url>/posts/1c633c7e.html</url>
    <content><![CDATA[<h2 id="一、客服聊天窗口"><a href="#一、客服聊天窗口" class="headerlink" title="一、客服聊天窗口"></a>一、客服聊天窗口</h2><blockquote>
<p>这个是我在Sky03的博客发现的，最初感觉问问题方面，我实际使用之后，主要感觉还是可以监控是否有人访问网站。还有就是如果有问题也可以提问，只是消息略有延迟。</p>
</blockquote>
<p>1、在官网注册账号</p>
<p>官网地址：<a href="https://app.crisp.chat/initiate/signup/" target="_blank" rel="noopener">点我去crisp官网注册</a></p>
<p>2、注册完成后设置</p>
<p>登录刚才注册的账户——设置——网站设置——添加网站。</p>
<p>添加完成之后就多了一行网站信息。点网站整合，就有不同的站的整合方式。</p>
<p>比如：html方式</p>
<p>就是复制JS代码片段到你的到<code>head</code>标签里。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>window<span class="token punctuation">.</span>$crisp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span>CRISP_WEBSITE_ID<span class="token operator">=</span><span class="token string">"xxxxxxx-097e-402f-bb6b-xxxxxxx"</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>d<span class="token operator">=</span>document<span class="token punctuation">;</span>s<span class="token operator">=</span>d<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span>src<span class="token operator">=</span><span class="token string">"https://client.crisp.chat/l.js"</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token keyword">async</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>d<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"head"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>
<p>3、其他的设置也<br>登录刚才注册的账户——设置——网站设置。<br>网站信息行——设置，自己根据需要设置即可，比如显示位置，颜色，自己的头像等。</p>
<p>整个使用非常简单的。</p>
<h2 id="二、网页推送插件"><a href="#二、网页推送插件" class="headerlink" title="二、网页推送插件"></a>二、网页推送插件</h2><blockquote>
<p>这个是我在过客励む的博客发现的，感觉还是很不错的。 Web Push Notification ,浏览器通知推送</p>
</blockquote>
<p>1、安装插件</p>
<p>插件的GitHub仓库: <a href="https://github.com/glazec/hexo-web-push-notification" target="_blank" rel="noopener">hexo-web-push-notification</a></p>
<p>执行命令安装：</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i hexo-web-push-notification --save</code></pre>
<p>2、修改根目录的<code>_config.yml</code>配置文件</p>
<pre class=" language-yml"><code class="language-yml">webPushNotification:
  webpushrKey: "your webpushr rest api key"
  webpushrAuthToken: "your webpushr authorize token"
  trackingCode: "AEGlpbdgvBCWXqXI6PtsUzobY7TLV9gwJU8bzMktrwfrSERg_xnLVbjpCw8x2GmFmi1ZcLTz0ni6OnX5MAwoM88"
</code></pre>
<p>其中<code>webpushrKey</code>,<code>webpushrAuthToken</code>和<code>trackingCode</code>的值在官网注册得到。</p>
<p>3、注册webpushr</p>
<p>注册官网：<a href="https://app.webpushr.com/signup" target="_blank" rel="noopener">点我去webpushr注册也</a></p>
<p><strong>特别说明：</strong><br>注册账号和登录需要进行人机身份验证，这个需要使用过客励む的插件，永久破解版的。</p>
<p>插件地址： [大佬的插件]（<a href="https://72k.us/file/19365016-441665146）" target="_blank" rel="noopener">https://72k.us/file/19365016-441665146）</a></p>
<p>如果上面链接失效就来<a href="https://pan.baidu.com/s/1D7n6xvPZUxRuZsGP9doarw" target="_blank" rel="noopener">百度云链接</a></p>
<p>提取码：bp7s</p>
<p>然后放在浏览器的扩展中，在强制刷新网站(Ctrl + F5),应该就可以看到了。如果看不懂就先点注册或登录，就可以自己出来了。</p>
<p>4、安装</p>
<p>就是按顺序，填写信息，上传图片，三步走。</p>
<p>安装成功后，进入主界面。</p>
<p>点击<code>Integration</code>下的 <code>REST API密钥</code>就可以看到<code>webpushrKey</code>和<code>webpushrAuthToken</code>的值了。</p>
<p>点击<code>Setting</code>下的 <code>Tracking code</code></p>
<p>有个 <code>Step 2: Add Tracking Code</code>地下也是JS代码片段</p>
<pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- start webpushr tracking code --></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span>d<span class="token punctuation">,</span> s<span class="token punctuation">,</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>w<span class="token punctuation">.</span>webpushr<span class="token punctuation">)</span><span class="token operator">!==</span><span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>w<span class="token punctuation">.</span>webpushr<span class="token operator">=</span>w<span class="token punctuation">.</span>webpushr<span class="token operator">||</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">(</span>w<span class="token punctuation">.</span>webpushr<span class="token punctuation">.</span>q<span class="token operator">=</span>w<span class="token punctuation">.</span>webpushr<span class="token punctuation">.</span>q<span class="token operator">||</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> js<span class="token punctuation">,</span> fjs <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>js <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> js<span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>js<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">"https://cdn.webpushr.com/app.min.js"</span><span class="token punctuation">;</span>
fjs<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>js<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span>document<span class="token punctuation">,</span> <span class="token string">'script'</span><span class="token punctuation">,</span> <span class="token string">'webpushr-jssdk'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">webpushr</span><span class="token punctuation">(</span><span class="token string">'setup'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">'key'</span><span class="token punctuation">:</span><span class="token string">'xxxx_BJKMKcoDBNWov5xxxhl3p0eFxxxxgogE5bQRheUA7eytp5rcZXYHdodyiVfbOxxxxPfv4'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>
<p>最后key的值就是 <code>trackingCode</code>。</p>
<p>5、设置推送相关</p>
<p>主要设置在<code>Setting</code>下的前面三个，分别是：<br>（A）Opt-In Prompts —-选择加入提示<br>（B）Subscription Bell   —-订阅铃<br>（C）Welcome Push   ——欢迎推送</p>
<p>因为我已经操作完成就不截图了，只做了一个记录。使用谷歌有谷歌翻译，应该没有看不懂的。<br>如果不想自己摸索，可以参考过客励む写的细节操作的截图文<a href="https://yafine-blog.cn/posts/ebb2.html" target="_blank" rel="noopener">《Hexo博客订阅文章通知功能》</a>。</p>
<p>最后感谢大佬让我见识了新技术。</p>
<p>6、遇到的问题</p>
<p>使用matery主题：</p>
<p>如果以上配置都好了，那么可以重新部署了，一定要部署两次，是否推送新文章，是比较<code>public/newPost.json</code>文件的变化。如果走到这一步，你推送OK了，那么恭喜你没有问题。</p>
<p>如果你部署之后发现不推送？</p>
<p>首先检查浏览器通知是否禁用，如果禁用了，是无法通知的。</p>
<p>其次检查你的<code>public/newPost.json</code>文件，看看键值是否齐全。如果你的summary是空字符串，那么你遇到了跟我一样的问题。</p>
<p>解决： 修改 <code>node_modules/hexo-web-push-notification/index.js</code>文件中第22行<code>&#39;summary&#39;: util.stripHTML(newPost.excerpt),</code>这里取值取的是excerpt，改成summary即可。</p>
<pre class=" language-java"><code class="language-java">var JSONFeed <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">'title'</span><span class="token operator">:</span> newPost<span class="token punctuation">.</span>title<span class="token punctuation">,</span>
        <span class="token string">'id'</span><span class="token operator">:</span> newPost<span class="token punctuation">.</span>path<span class="token punctuation">,</span>
        <span class="token string">'date_published'</span><span class="token operator">:</span> newPost<span class="token punctuation">.</span>date<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'L'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string">'summary'</span><span class="token operator">:</span> util<span class="token punctuation">.</span><span class="token function">stripHTML</span><span class="token punctuation">(</span>newPost<span class="token punctuation">.</span>excerpt<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string">'url'</span><span class="token operator">:</span> newPost<span class="token punctuation">.</span>permalink<span class="token punctuation">,</span>
        <span class="token string">'tags'</span><span class="token operator">:</span> newPost<span class="token punctuation">.</span>tags<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token function">function</span> <span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> v<span class="token punctuation">.</span>name <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string">'categories'</span><span class="token operator">:</span> newPost<span class="token punctuation">.</span>categories<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token function">function</span> <span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> v<span class="token punctuation">.</span>name <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span></code></pre>
<p>如果你担心改错了，也可以在你的文章头部添加属性excerpt，值和summary一样即可：</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> Hexo搭建静态博客（七）——客服与推送
<span class="token key atrule">tags</span><span class="token punctuation">:</span> Hexo
<span class="token key atrule">categories</span><span class="token punctuation">:</span> Hexo
<span class="token key atrule">summary</span><span class="token punctuation">:</span> hexo博客的客服插件和推送插件相关。
<span class="token key atrule">excerpt</span><span class="token punctuation">:</span> hexo博客的客服插件和推送插件相关。
<span class="token key atrule">keywords</span><span class="token punctuation">:</span> <span class="token string">'hexo,hexo主题'</span>
<span class="token key atrule">author</span><span class="token punctuation">:</span> Small<span class="token punctuation">-</span>Rose / 张小菜苔
<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2020-06-27 00:00:00</span>
</code></pre>
<p>使用其他主题：</p>
<p>使用其他主题，<code>newPost.json</code>文件里的<code>summary</code>获取的则是—和<code>&lt;!-- more --&gt;</code>之间的文本内容。基本上适用于大部分主题。</p>
<br/>

<p><strong>相关文章</strong></p>
<p><a href="9f117b.html">Hexo搭建静态博客（一）——基础搭建</a><br><a href="c1358fc8.html">Hexo搭建静态博客（二）——创建页面</a><br><a href="a5bf7e18.html">Hexo搭建静态博客（三）——主题更换</a><br><a href="cda13ebe.html">Hexo搭建静态博客（四）——插件安装</a><br><a href="ce4a93ff.html">Hexo搭建静态博客（五）——踩坑问题</a><br><a href="c68d7a69.html">Hexo搭建静态博客（六）——项目部署</a><br><a href="1c633c7e.html">Hexo搭建静态博客（七）——客服与推送</a><br><a href="caf66d5e.html">Hexo添加Live2D二次元老婆</a><br><a href="358175a6.html">Hexo博客Valine-Admin踩坑记录</a><br><a href="40099453.html">Hexo博客Matery主题valine升级与优化</a><br><a href="a53a9069.html">Hexo博客Matery主题新手常见问题</a></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Valine 评论系统紧急防御</title>
    <url>/posts/1e514b2c.html</url>
    <content><![CDATA[<h2 id="Valine-评论系统紧急防御"><a href="#Valine-评论系统紧急防御" class="headerlink" title="Valine 评论系统紧急防御"></a>Valine 评论系统紧急防御</h2><p>上个月我的博客的评论valine，被恶意攻击，无限写入。</p>
<p>之前大家都说不安全，我没怎么放心上。毕竟在网络上还有什么是安全的。</p>
<p>幸好，我的安装了valine-admin ,所以即使是恶意评论，也会立即有邮件提醒。</p>
<p>好吧，我忘记了我当时在研究什么。只是手机邮件提醒不停的弹出，我想谁那么不要命的给我评论呢？</p>
<p>一看邮箱，再打开评论一看，果然是垃圾评论，而且看留的邮件还是用程序进行的恶意评论，本以为一会就好。</p>
<p>我就登录leancloud 删除评论，不过我删了两次之后发现，表数据越来越大。</p>
<p>我更加确认了，这是在用程序调用我的评论API。</p>
<p>好吧，我想要不要关闭valine, 这样不就是退让和妥协吗? 而且后续还是要打开的，因为我懒得去折腾其他的评论系统了。</p>
<p>于是我快速找到leancloud 后台的相关设置，关闭数据存储功能，然后关闭comment 表的写入权限。 世界终于安静了。</p>
<p>接着批量删除数据，慢慢等吧。</p>
<p>是啊，尽量这个valine 不安全，但是不想再折腾了。</p>
<p>还好这次的攻击只是恶意写入垃圾数据，我想这人实在无聊。我并没有得罪谁啊~ 不过 matery 主题的另一个群里的村姑也遭遇了相同的攻击。那天我看到她的评论系统不能用了，</p>
<p>不过无所谓了，损人不利己的事浪费时间。</p>
<p>为什么现在才有这篇文章呢？</p>
<p>因为之前去学习别的了。一时没有想起来。</p>
<p>那么如果要防止valine被恶意写入，请采取以下操作。</p>
<h3 id="1、确保valine评论有邮件提醒功能。"><a href="#1、确保valine评论有邮件提醒功能。" class="headerlink" title="1、确保valine评论有邮件提醒功能。"></a>1、确保valine评论有邮件提醒功能。</h3><p>当遭遇恶意刷评时，第一时间知晓。至于如何安装，请参考：<a href="358175a6.html">Valine-Admin踩坑记录</a></p>
<h3 id="2、在邮件知晓恶意刷评后及时关闭写入权限"><a href="#2、在邮件知晓恶意刷评后及时关闭写入权限" class="headerlink" title="2、在邮件知晓恶意刷评后及时关闭写入权限"></a>2、在邮件知晓恶意刷评后及时关闭写入权限</h3><p>登录leancloud后台，</p>
<p>（1）在 “存储”  —— “结构化数据” ——— “Comment”  ———  “权限” —— Class 访问权限 点修改 ———  将 “ add_fields “和 “ create “ 修改成登录用户。</p>
<p>（2）在设置 —— 安全中心 ——— 关闭数据存储。</p>
<h3 id="3、过一段时间再打开。"><a href="#3、过一段时间再打开。" class="headerlink" title="3、过一段时间再打开。"></a>3、过一段时间再打开。</h3><p>你可以隔几天几周都行。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Matery 添加WebStackPage导航网站</title>
    <url>/posts/38b34c3c.html</url>
    <content><![CDATA[<h2 id="Matery-添加WebStackPage导航网站"><a href="#Matery-添加WebStackPage导航网站" class="headerlink" title="Matery 添加WebStackPage导航网站"></a>Matery 添加WebStackPage导航网站</h2><p>这个姑娘已经添加很久了，我也是在别的小伙伴的博客发现的，就拿过来用了。</p>
<p><strong>先看效果</strong></p>
<p>我的效果在这里：<a href="https://zhangxiaocai.cn/box/cn/index.html" target="_blank" rel="noopener">小菜导航</a></p>
<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>WebStackPage 是一位名叫 Viggo 的UI设计师的公益项目，开源的静态网站，源码本身就是成品，下载代码之后就可以直接使用。</p>
<p>官方项目地址：<a href="https://github.com/WebStackPage/WebStackPage.github.io" target="_blank" rel="noopener">WebStackPage</a></p>
<h2 id="二、Matery-添加-WebStackPage"><a href="#二、Matery-添加-WebStackPage" class="headerlink" title="二、Matery 添加 WebStackPage"></a>二、Matery 添加 WebStackPage</h2><p>如果你没有博客，只想搞个导航，也是可以的，直接把相关代码放到你的github 或者 码云等仓库之后，就可以直接访问了。</p>
<p>如果是Hexo博客，我是这么操作的：</p>
<h3 id="1、下载代码"><a href="#1、下载代码" class="headerlink" title="1、下载代码"></a>1、下载代码</h3><p>从官方项目地址克隆下到本地即可：</p>
<p>使用命令</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/WebStackPage/WebStackPage.github.io </code></pre>
<p>或者使用浏览器下载均可。</p>
<h3 id="2、放入Hexo"><a href="#2、放入Hexo" class="headerlink" title="2、放入Hexo"></a>2、放入Hexo</h3><p>在 <code>hexo</code> 根目录的 <code>source</code>  目录下 新建一个文件夹 box （名字可以自己取，没有要求）,这个 <code>box</code> 目录会和 <code>_post</code>、<code>about</code> 都处在同一层目录。</p>
<h3 id="3、修改配置文件"><a href="#3、修改配置文件" class="headerlink" title="3、修改配置文件"></a>3、修改配置文件</h3><p>（1）修改 Hexo 根目录的配置文件 <code>_config.yml</code></p>
<p>因为hexo 编译会对主题模板进行渲染之后生成静态页面，但是这个导航的网站本身就是 <code>html</code>文件，因此不需要渲染，那么跳过渲染就需要配置 <code>skip_render</code> 项，如果你没有改其他的东西，应该在 39 行左右。没有找到就搜索一下。 配置如下：</p>
<pre class=" language-yml"><code class="language-yml">
skip_render: 
  - 'box/**'
</code></pre>
<p>（2）修改 Hexo Matery主题目录的配置文件 <code>_config.yml</code> </p>
<p>如果你不是 Matery 主题也没有关系，原理都是一样的，这一步是用来配置访问菜单的，把访问导航的菜单配置上：</p>
<p>我的是二级菜单，所以是下面这样：</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">Friends</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> /friends
    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>address<span class="token punctuation">-</span>book
<span class="token key atrule">Secret</span><span class="token punctuation">:</span>
    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>list
    <span class="token key atrule">children</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 导航
        <span class="token key atrule">url</span><span class="token punctuation">:</span> /navigate
        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>location<span class="token punctuation">-</span>arrow
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 收藏
        <span class="token key atrule">url</span><span class="token punctuation">:</span> /box
        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>map<span class="token punctuation">-</span>marker
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 写作
        <span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//hut.zhangxiaocai.cn
        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>pen<span class="token punctuation">-</span>alt
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 云盘
        <span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//yun.zhangxiaocai.cn
        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>cloud
</code></pre>
<p>其中</p>
<pre><code>      - name: 收藏
        url: /box
        icon: fas fa-map-marker</code></pre><p>就是访问 小菜导航 的名称、 地址、 图标。因为之前创建的文件夹叫box，所以这里配置访问<code>url</code>的值都是<code>/box</code></p>
<p>如果你是一级菜单那么你的配置应该长这样：</p>
<pre><code>Friends:
    url: /friends
    icon: fas fa-address-book
Daohang:
    url: /box
    icon: fas fa-map-marker    </code></pre><p>访问之后可能是拼音，不是中文，所以你还要改另一个文件：</p>
<p>找到 <code>layout/_partial/navigation.ejs</code> 文件</p>
<p>大概在第 10 行左右添加导航菜单</p>
<pre class=" language-txt"><code class="language-txt">menuMap.set("Daohang", "导航");</code></pre>
<p>加完之后最后会多了一个</p>
<pre class=" language-txt"><code class="language-txt">    menuMap.set("Index", "首页");
    menuMap.set("Tags", "标签");
    menuMap.set("Categories", "分类");
    menuMap.set("Archives", "归档");
    menuMap.set("About", "关于");
    menuMap.set("Contact", "留言薄");
    menuMap.set("Friends", "友情链接");
    menuMap.set("Daohang", "导航");</code></pre>
<p>重新编译一下，应该就好了。</p>
<p>改到这里，基本上刻有访问了。</p>
<h2 id="三、优化"><a href="#三、优化" class="headerlink" title="三、优化"></a>三、优化</h2><p>如果你使用了github 的CDN 加速，可以把地址改成你的github 的cdn 地址。如果你不知道你的cdn 加速地址，请参考主题目录配置文件的最后关于cdn的说明。</p>
<p>剩下的谈不上优化了，就是根据自己的想法直接改html页面就好了，没啥技巧的。</p>
<p>如果你不要中英文切换，直接修改删除相关html即可。</p>
<p>如果你不想访问路径多个<code>cn</code> 可以直接把 <code>source/box/cn/</code> 文件夹里面的文件直接放到 <code>/box</code> 目录，然后<code>cn</code>、<code>en</code> 两个文件夹可以删除，如果出现静态图片不能加载，就自己调整一下路径即可。 我没有这么干。</p>
<p>如果你想改成和我一样的，直接到<a href="https://zhangxiaocai.cn/box/cn/about.html" target="_blank" rel="noopener">小菜导航</a> 页面，然后 按F12 或者 鼠标右键查看页面源代码，把要改的地方复制使用即可。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>WebStackPage</tag>
      </tags>
  </entry>
  <entry>
    <title>Valine-Admin踩坑记录</title>
    <url>/posts/358175a6.html</url>
    <content><![CDATA[<h2 id="valine-admin踩坑记录"><a href="#valine-admin踩坑记录" class="headerlink" title="valine-admin踩坑记录"></a>valine-admin踩坑记录</h2><blockquote>
<p>本文主要记录valine-admin踩坑记录。</p>
</blockquote>
<h3 id="1、安装步骤"><a href="#1、安装步骤" class="headerlink" title="1、安装步骤"></a>1、安装步骤</h3><p>作者 DesertsP 已经写了就不再重复了。</p>
<p>请参考：<a href="https://github.com/DesertsP/Valine-Admin" target="_blank" rel="noopener">https://github.com/DesertsP/Valine-Admin</a></p>
<p>主要分享一下我自己修改的模板：</p>
<p>@邮件通知效果：</p>
<hr/>

<div style="border-radius: 10px 10px 10px 10px;font-size:13px;    color: #555555;width: 666px;font-family:'Century Gothic','Trebuchet MS','Hiragino Sans GB',微软雅黑,'Microsoft Yahei',Tahoma,Helvetica,Arial,'SimSun',sans-serif;margin:50px auto;border:1px solid #eee;max-width:100%;background: #ffffff repeating-linear-gradient(-45deg,#fff,#fff 1.125rem,transparent 1.125rem,transparent 2.25rem);box-shadow: 0 1px 5px rgba(0, 0, 0, 0.15);"><div style="width:100%;background:#49BDAD;color:#ffffff;border-radius: 10px 10px 0 0;background-image: -moz-linear-gradient(0deg, rgb(67, 198, 184), rgb(255, 209, 244));background-image: -webkit-linear-gradient(0deg, rgb(67, 198, 184), rgb(255, 209, 244));height: 66px;"><p style="font-size:15px;word-break:break-all;padding: 23px 32px;margin:0;background-color: hsla(0,0%,100%,.4);border-radius: 10px 10px 0 0;">您在<a style="text-decoration:none;color: #ffffff;" href="${SITE_URL}"> ${SITE_NAME}</a>上的留言有新回复啦！</p></div><div style="margin:40px auto;width:90%"><p>${PARENT_NICK} 同学，您曾在文章上发表评论：</p><div style="background: #fafafa repeating-linear-gradient(-45deg,#fff,#fff 1.125rem,transparent 1.125rem,transparent 2.25rem);box-shadow: 0 2px 5px rgba(0, 0, 0, 0.15);margin:20px 0px;padding:15px;border-radius:5px;font-size:14px;color:#555555;">${PARENT_COMMENT}</div><p>${NICK} 给您的回复如下：</p><div style="background: #fafafa repeating-linear-gradient(-45deg,#fff,#fff 1.125rem,transparent 1.125rem,transparent 2.25rem);box-shadow: 0 2px 5px rgba(0, 0, 0, 0.15);margin:20px 0px;padding:15px;border-radius:5px;font-size:14px;color:#555555;">${COMMENT}</div><p>您可以点击<a style="text-decoration:none; color:#12addb" href="${POST_URL}#comments">查看回复的完整內容</a>，欢迎再次光临<a style="text-decoration:none; color:#12addb"                href="${SITE_URL}"> ${SITE_NAME}</a>。</p><style type="text/css">a:link{text-decoration:none}a:visited{text-decoration:none}a:hover{text-decoration:none}a:active{text-decoration:none}</style></div><div style="width:100%;background:#49BDAD;color:#ffffff;border-radius:  0 0 10px 10px;background-image: -moz-linear-gradient(0deg, rgb(67, 198, 184), rgb(255, 209, 244));background-image: -webkit-linear-gradient(0deg,rgb(67, 198, 184), rgb(255, 209, 244));height: 66px;"></div></div>

<p>@邮件通知模板代码：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">10</span>px <span class="token number">10</span>px <span class="token number">10</span>px <span class="token number">10</span>px<span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">13</span>px<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#555555</span><span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">666</span>px<span class="token punctuation">;</span><span class="token property">font-family</span><span class="token punctuation">:</span><span class="token string">'Century Gothic'</span>,<span class="token string">'Trebuchet MS'</span>,<span class="token string">'Hiragino Sans GB'</span>,微软雅黑,<span class="token string">'Microsoft Yahei'</span>,Tahoma,Helvetica,Arial,<span class="token string">'SimSun'</span>,sans-serif<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">50</span>px auto<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span><span class="token number">1</span>px solid <span class="token hexcode">#eee</span><span class="token punctuation">;</span><span class="token property">max-width</span><span class="token punctuation">:</span><span class="token number">100%</span><span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#ffffff</span> <span class="token function">repeating-linear-gradient</span><span class="token punctuation">(</span>-<span class="token number">45</span>deg,<span class="token hexcode">#fff</span>,<span class="token hexcode">#fff</span> <span class="token number">1.125</span>rem,transparent <span class="token number">1.125</span>rem,transparent <span class="token number">2.25</span>rem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">1</span>px <span class="token number">5</span>px <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0.15</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100%</span><span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span><span class="token hexcode">#49BDAD</span><span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#ffffff</span><span class="token punctuation">;</span><span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">10</span>px <span class="token number">10</span>px <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">-moz-linear-gradient</span><span class="token punctuation">(</span><span class="token number">0</span>deg, <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">67</span>, <span class="token number">198</span>, <span class="token number">184</span><span class="token punctuation">)</span>, <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">255</span>, <span class="token number">209</span>, <span class="token number">244</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">-webkit-linear-gradient</span><span class="token punctuation">(</span><span class="token number">0</span>deg, <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">67</span>, <span class="token number">198</span>, <span class="token number">184</span><span class="token punctuation">)</span>, <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">255</span>, <span class="token number">209</span>, <span class="token number">244</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">66</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">15</span>px<span class="token punctuation">;</span><span class="token property">word-break</span><span class="token punctuation">:</span>break-all<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">23</span>px <span class="token number">32</span>px<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">hsla</span><span class="token punctuation">(</span><span class="token number">0</span>,<span class="token number">0%</span>,<span class="token number">100%</span>,<span class="token number">.4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">10</span>px <span class="token number">10</span>px <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>您在<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">text-decoration</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#ffffff</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${SITE_URL}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> ${SITE_NAME}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>上的留言有新回复啦！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">40</span>px auto<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">90%</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>${PARENT_NICK} 同学，您曾在文章上发表评论：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#fafafa</span> <span class="token function">repeating-linear-gradient</span><span class="token punctuation">(</span>-<span class="token number">45</span>deg,<span class="token hexcode">#fff</span>,<span class="token hexcode">#fff</span> <span class="token number">1.125</span>rem,transparent <span class="token number">1.125</span>rem,transparent <span class="token number">2.25</span>rem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">2</span>px <span class="token number">5</span>px <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0.15</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">20</span>px <span class="token number">0</span>px<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">15</span>px<span class="token punctuation">;</span><span class="token property">border-radius</span><span class="token punctuation">:</span><span class="token number">5</span>px<span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">14</span>px<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#555555</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>${PARENT_COMMENT}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>${NICK} 给您的回复如下：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#fafafa</span> <span class="token function">repeating-linear-gradient</span><span class="token punctuation">(</span>-<span class="token number">45</span>deg,<span class="token hexcode">#fff</span>,<span class="token hexcode">#fff</span> <span class="token number">1.125</span>rem,transparent <span class="token number">1.125</span>rem,transparent <span class="token number">2.25</span>rem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">2</span>px <span class="token number">5</span>px <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0.15</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">20</span>px <span class="token number">0</span>px<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">15</span>px<span class="token punctuation">;</span><span class="token property">border-radius</span><span class="token punctuation">:</span><span class="token number">5</span>px<span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">14</span>px<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#555555</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>${COMMENT}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>您可以点击<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">text-decoration</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span> <span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#12addb</span></span><span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${POST_URL}#comments<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>查看回复的完整內容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>，欢迎再次光临<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">text-decoration</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span> <span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#12addb</span></span><span class="token punctuation">"</span></span>                <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${SITE_URL}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> ${SITE_NAME}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector">a<span class="token pseudo-class">:link</span></span><span class="token punctuation">{</span><span class="token property">text-decoration</span><span class="token punctuation">:</span>none<span class="token punctuation">}</span><span class="token selector">a<span class="token pseudo-class">:visited</span></span><span class="token punctuation">{</span><span class="token property">text-decoration</span><span class="token punctuation">:</span>none<span class="token punctuation">}</span><span class="token selector">a<span class="token pseudo-class">:hover</span></span><span class="token punctuation">{</span><span class="token property">text-decoration</span><span class="token punctuation">:</span>none<span class="token punctuation">}</span><span class="token selector">a<span class="token pseudo-class">:active</span></span><span class="token punctuation">{</span><span class="token property">text-decoration</span><span class="token punctuation">:</span>none<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100%</span><span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span><span class="token hexcode">#49BDAD</span><span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#ffffff</span><span class="token punctuation">;</span><span class="token property">border-radius</span><span class="token punctuation">:</span>  <span class="token number">0</span> <span class="token number">0</span> <span class="token number">10</span>px <span class="token number">10</span>px<span class="token punctuation">;</span><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">-moz-linear-gradient</span><span class="token punctuation">(</span><span class="token number">0</span>deg, <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">67</span>, <span class="token number">198</span>, <span class="token number">184</span><span class="token punctuation">)</span>, <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">255</span>, <span class="token number">209</span>, <span class="token number">244</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">-webkit-linear-gradient</span><span class="token punctuation">(</span><span class="token number">0</span>deg,<span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">67</span>, <span class="token number">198</span>, <span class="token number">184</span><span class="token punctuation">)</span>, <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">255</span>, <span class="token number">209</span>, <span class="token number">244</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">66</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<p>博主通知效果：</p>
<hr/>

<div style="border-radius: 10px 10px 10px 10px;font-size:13px;    color: #555555;width: 666px;font-family:'Century Gothic','Trebuchet MS','Hiragino Sans GB',微软雅黑,'Microsoft Yahei',Tahoma,Helvetica,Arial,'SimSun',sans-serif;margin:50px auto;border:1px solid #eee;max-width:100%;background: #ffffff repeating-linear-gradient(-45deg,#fff,#fff 1.125rem,transparent 1.125rem,transparent 2.25rem);box-shadow: 0 1px 5px rgba(0, 0, 0, 0.15);"><div style="width:100%;background:#49BDAD;color:#ffffff;border-radius: 10px 10px 0 0;background-image: -moz-linear-gradient(0deg, rgb(67, 198, 184), rgb(255, 209, 244));background-image: -webkit-linear-gradient(0deg, rgb(67, 198, 184), rgb(255, 209, 244));height: 66px;"><p style="font-size:15px;word-break:break-all;padding: 23px 32px;margin:0;background-color: hsla(0,0%,100%,.4);border-radius: 10px 10px 0 0;">您在<a style="text-decoration:none;color: #ffffff;" href="${SITE_URL}"> ${SITE_NAME}</a>上的文章有了新的评论！</p></div><div style="margin:40px auto;width:90%"><p><strong>${NICK}</strong> 同学，发表评论说：</p><div style="background: #fafafa repeating-linear-gradient(-45deg,#fff,#fff 1.125rem,transparent 1.125rem,transparent 2.25rem);box-shadow: 0 2px 5px rgba(0, 0, 0, 0.15);margin:20px 0px;padding:15px;border-radius:5px;font-size:14px;color:#555555;">${COMMENT}</div><p>您可以点击<a style="text-decoration:none; color:#12addb" href="${POST_URL}#comments">查看回复的完整內容</a>。</p><style type="text/css">a:link{text-decoration:none}a:visited{text-decoration:none}a:hover{text-decoration:none}a:active{text-decoration:none}</style></div><div style="width:100%;background:#49BDAD;color:#ffffff;border-radius: 0 0 10px 10px ;background-image: -moz-linear-gradient(0deg, rgb(67, 198, 184), rgb(255, 209, 244));background-image: -webkit-linear-gradient(0deg,rgb(67, 198, 184), rgb(255, 209, 244));height: 66px;"></div></div>

<p>博主通知模板代码：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">10</span>px <span class="token number">10</span>px <span class="token number">10</span>px <span class="token number">10</span>px<span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">13</span>px<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#555555</span><span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">666</span>px<span class="token punctuation">;</span><span class="token property">font-family</span><span class="token punctuation">:</span><span class="token string">'Century Gothic'</span>,<span class="token string">'Trebuchet MS'</span>,<span class="token string">'Hiragino Sans GB'</span>,微软雅黑,<span class="token string">'Microsoft Yahei'</span>,Tahoma,Helvetica,Arial,<span class="token string">'SimSun'</span>,sans-serif<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">50</span>px auto<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span><span class="token number">1</span>px solid <span class="token hexcode">#eee</span><span class="token punctuation">;</span><span class="token property">max-width</span><span class="token punctuation">:</span><span class="token number">100%</span><span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#ffffff</span> <span class="token function">repeating-linear-gradient</span><span class="token punctuation">(</span>-<span class="token number">45</span>deg,<span class="token hexcode">#fff</span>,<span class="token hexcode">#fff</span> <span class="token number">1.125</span>rem,transparent <span class="token number">1.125</span>rem,transparent <span class="token number">2.25</span>rem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">1</span>px <span class="token number">5</span>px <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0.15</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100%</span><span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span><span class="token hexcode">#49BDAD</span><span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#ffffff</span><span class="token punctuation">;</span><span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">10</span>px <span class="token number">10</span>px <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">-moz-linear-gradient</span><span class="token punctuation">(</span><span class="token number">0</span>deg, <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">67</span>, <span class="token number">198</span>, <span class="token number">184</span><span class="token punctuation">)</span>, <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">255</span>, <span class="token number">209</span>, <span class="token number">244</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">-webkit-linear-gradient</span><span class="token punctuation">(</span><span class="token number">0</span>deg, <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">67</span>, <span class="token number">198</span>, <span class="token number">184</span><span class="token punctuation">)</span>, <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">255</span>, <span class="token number">209</span>, <span class="token number">244</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">66</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">15</span>px<span class="token punctuation">;</span><span class="token property">word-break</span><span class="token punctuation">:</span>break-all<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">23</span>px <span class="token number">32</span>px<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">hsla</span><span class="token punctuation">(</span><span class="token number">0</span>,<span class="token number">0%</span>,<span class="token number">100%</span>,<span class="token number">.4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">10</span>px <span class="token number">10</span>px <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>您在<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">text-decoration</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#ffffff</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${SITE_URL}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> ${SITE_NAME}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>上的文章有了新的评论！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">40</span>px auto<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">90%</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>${NICK}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span> 同学，发表评论说：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#fafafa</span> <span class="token function">repeating-linear-gradient</span><span class="token punctuation">(</span>-<span class="token number">45</span>deg,<span class="token hexcode">#fff</span>,<span class="token hexcode">#fff</span> <span class="token number">1.125</span>rem,transparent <span class="token number">1.125</span>rem,transparent <span class="token number">2.25</span>rem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">2</span>px <span class="token number">5</span>px <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0.15</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">20</span>px <span class="token number">0</span>px<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">15</span>px<span class="token punctuation">;</span><span class="token property">border-radius</span><span class="token punctuation">:</span><span class="token number">5</span>px<span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">14</span>px<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#555555</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>${COMMENT}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>您可以点击<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">text-decoration</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span> <span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#12addb</span></span><span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${POST_URL}#comments<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>查看回复的完整內容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector">a<span class="token pseudo-class">:link</span></span><span class="token punctuation">{</span><span class="token property">text-decoration</span><span class="token punctuation">:</span>none<span class="token punctuation">}</span><span class="token selector">a<span class="token pseudo-class">:visited</span></span><span class="token punctuation">{</span><span class="token property">text-decoration</span><span class="token punctuation">:</span>none<span class="token punctuation">}</span><span class="token selector">a<span class="token pseudo-class">:hover</span></span><span class="token punctuation">{</span><span class="token property">text-decoration</span><span class="token punctuation">:</span>none<span class="token punctuation">}</span><span class="token selector">a<span class="token pseudo-class">:active</span></span><span class="token punctuation">{</span><span class="token property">text-decoration</span><span class="token punctuation">:</span>none<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100%</span><span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span><span class="token hexcode">#49BDAD</span><span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#ffffff</span><span class="token punctuation">;</span><span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">10</span>px <span class="token number">10</span>px <span class="token punctuation">;</span><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">-moz-linear-gradient</span><span class="token punctuation">(</span><span class="token number">0</span>deg, <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">67</span>, <span class="token number">198</span>, <span class="token number">184</span><span class="token punctuation">)</span>, <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">255</span>, <span class="token number">209</span>, <span class="token number">244</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">-webkit-linear-gradient</span><span class="token punctuation">(</span><span class="token number">0</span>deg,<span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">67</span>, <span class="token number">198</span>, <span class="token number">184</span><span class="token punctuation">)</span>, <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">255</span>, <span class="token number">209</span>, <span class="token number">244</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">66</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<h3 id="2、遇到的问题"><a href="#2、遇到的问题" class="headerlink" title="2、遇到的问题"></a>2、遇到的问题</h3><p>正常操作一般不会遇到问题吧？</p>
<p>如果遇到了，那么你可以往下看。</p>
<p>（1）按步骤操作完了，但是访问<code>https://small-rose.leanapp.cn</code>报错：</p>
<pre class=" language-txt"><code class="language-txt">
Application not Found
没有找到对应的云引擎应用，请确认应用已经正确部署。
</code></pre>
<p>如果出现这个问题，那么你应该使用的不是国际版，而是华东节点或华北节点，现在没有绑定备案的域名是不能访问的。如果你的域名已经备案过，登录Leancloud之后到“设置”，“域名绑定中”,“云引擎域名”处绑定你域名，自己设置一下你的DNS解析即可。绑定完成之后，在用域名访问。</p>
<p>如果你是用国际版，就不要求域名备案绑定。</p>
<p>（2）评论系统可以访问之后，无法进注册页面</p>
<p>删除<code>_User</code>表数据即可，这样就可以注册管理员信息了。 </p>
<p>（3）管理员信息注册成功，还是无法登录。</p>
<p>请到“存储”，“用户”，“设置”处检查设置 “未验证邮箱的用户，禁止登录”把前面的勾选去掉。如果不想去掉勾选，也可以到 “存储”，“结构化数据”，<code>_User</code>表，找到<code>emailVerified</code>字段，双击你的数据值，改成<code>true</code>即可。</p>
<h3 id="3、完结"><a href="#3、完结" class="headerlink" title="3、完结"></a>3、完结</h3><p>自己跑了记得测试一下，看看邮件能否正常发送。评论还能不能正常玩耍了。</p>
<br/>

<p><strong>相关文章</strong></p>
<p><a href="9f117b.html">Hexo搭建静态博客（一）——基础搭建</a><br><a href="c1358fc8.html">Hexo搭建静态博客（二）——创建页面</a><br><a href="a5bf7e18.html">Hexo搭建静态博客（三）——主题更换</a><br><a href="cda13ebe.html">Hexo搭建静态博客（四）——插件安装</a><br><a href="ce4a93ff.html">Hexo搭建静态博客（五）——踩坑问题</a><br><a href="c68d7a69.html">Hexo搭建静态博客（六）——项目部署</a><br><a href="1c633c7e.html">Hexo搭建静态博客（七）——客服与推送</a><br><a href="caf66d5e.html">Hexo添加Live2D二次元老婆</a><br><a href="358175a6.html">Hexo博客Valine-Admin踩坑记录</a><br><a href="40099453.html">Hexo博客Matery主题valine升级与优化</a><br><a href="a53a9069.html">Hexo博客Matery主题新手常见问题</a></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Matery 添加ArtiTalk说说模块</title>
    <url>/posts/7404e01a.html</url>
    <content><![CDATA[<h2 id="Hexo-博客-Matery-主题添加-ArtiTalk-说说模块"><a href="#Hexo-博客-Matery-主题添加-ArtiTalk-说说模块" class="headerlink" title="Hexo 博客 Matery 主题添加 ArtiTalk 说说模块"></a>Hexo 博客 Matery 主题添加 ArtiTalk 说说模块</h2><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>ArtiTalk是基于 LeanCloud 实现的可实时发布说说/微语的小组件。</p>
<p>ArtiTalk 可以对已发布的说说直接进行增删查改。</p>
<p>ArtiTalk 可以对说说发表评论</p>
<p>ArtiTalk 支持 Markdown/html 语法</p>
<p>花了点时间已经捣鼓完成，顺便写个教程，其实官网也有，不过如果你是Matery 主题，按步骤来即可。</p>
<p><strong>其实这个小组件使用就是js和css，跟什么主题没有半毛钱关系。</strong></p>
<p>ArtiTalk官网：<a href="https://artitalk.js.org" target="_blank" rel="noopener">https://artitalk.js.org</a></p>
<p>代码仓库：<a href="https://github.com/ArtitalkJS/Artitalk" target="_blank" rel="noopener">https://github.com/ArtitalkJS/Artitalk</a></p>
<h2 id="二、准备工作"><a href="#二、准备工作" class="headerlink" title="二、准备工作"></a>二、准备工作</h2><p>这部分按官网说的来。</p>
<p>LeanCloud 的相关准备</p>
<p>🌍 建议使用国际版的LeanCloud</p>
<p>因为国际版的leancloud不需要配置serverurl，所以推荐使用国际版，速度没有区别，如果使用国内版的leancloud别忘了填写serverurl即可</p>
<p>前往 LeanCloud 国际版，注册账号。</p>
<p>注册完成之后根据 LeanCloud 的提示绑定手机号和邮箱。</p>
<p>绑定完成之后点击创建应用，应用名称随意，接着在结构化数据中创建 class，命名为 shuoshuo。</p>
<p>在你新建的应用中找到结构化数据下的用户。点击添加用户，输入想用的用户名及密码，这个账户就是用来发布说说用的。</p>
<p>回到结构化数据中，点击 class 下的 shuoshuo。找到权限，在 Class 访问权限中将 <code>add_fields</code> 以及 <code>create</code> 权限设置为指定用户，输入你刚才输入的用户名会自动匹配。为了安全起见，将 delete 和 update 也设置为跟它们一样的权限。<br>然后新建一个名为atComment的class，权限什么的使用默认的即可。</p>
<p>点击 class 下的 <code>_User</code> 添加列，列名称为 img，默认值填上你这个账号想要用的发布说说的头像url，这一项不进行配置，说说头像会显示为默认头像 Artitalk 的 logo。</p>
<p>在最菜单栏中找到设置 -&gt; 应用 keys，记下来 <code>AppID</code> 和 <code>AppKey</code> ，后面主题配置文件里会用。</p>
<p>最后将 <code>_User</code> 中的权限全部调为指定用户，或者数据创建者，为了保证不被篡改用户数据已达到强制发布说说。</p>
<p>🌍 如果使用国内版的LeanCloud</p>
<p>需要绑定API域名。</p>
<p>serverurl</p>
<h2 id="三、开工"><a href="#三、开工" class="headerlink" title="三、开工"></a>三、开工</h2><h3 id="1、下载"><a href="#1、下载" class="headerlink" title="1、下载"></a>1、下载</h3><p>git命令下载</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone --depth 2 git@github.com:ArtitalkJS/Artitalk.git</code></pre>
<p>下载完成后有个 Artitalk 目录，dist 里面就是组件代码。</p>
<h3 id="2、放入组件"><a href="#2、放入组件" class="headerlink" title="2、放入组件"></a>2、放入组件</h3><p>理论上只要放到相关可以访问的位置，引入正确的路径即可。</p>
<p>在主题目录 <code>/source/libs</code> 目录新建一个文件夹 <code>artitalk</code>。</p>
<p>找到刚才下载 Artitalk 目录，进入dist 目录，里面有2个文件夹：css 和 js</p>
<p>将 <code>/Artitalk/dist/css/</code> 下的 <code>artitalk.min.css</code> 复制到主题目录 <code>/source/libs/artitalk</code>下；</p>
<p>将 <code>/Artitalk/dist/js/</code> 下的 <code>artitalk.min.js</code> 复制到主题目录 <code>/source/libs/artitalk</code>下；</p>
<p>完成后，主题目录 <code>/source/libs/artitalk</code>下就有  <code>artitalk.min.css</code> 和  <code>artitalk.min.js</code> 两个文件了。</p>
<h3 id="3、引入准备"><a href="#3、引入准备" class="headerlink" title="3、引入准备"></a>3、引入准备</h3><p>因为尽量和 matery 引入风格一致。</p>
<p>修改主题配置 <code>_config.yml</code> 文件，搜索关键词 <code>libs</code> </p>
<p>找到 css 在最后一行添加：</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">artitalk</span><span class="token punctuation">:</span> /libs/artitalk/artitalk.min.css</code></pre>
<p>找到  js 在最后一行</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">artitalk</span><span class="token punctuation">:</span> /libs/artitalk/artitalk.min.js</code></pre>
<p>我用的是目前3.1.2固定版本，如果你一直想用最新版，可以换成CDN最新版：<code>https://cdn.jsdelivr.net/npm/artitalk</code></p>
<p>我列一下最终效果，因为原来有很多，我就不全部列出了，只要知道最后一行加就可以了，<strong>注意对齐</strong>，如下：</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">libs</span><span class="token punctuation">:</span>
  <span class="token key atrule">css</span><span class="token punctuation">:</span>
    <span class="token key atrule">fontAwesome</span><span class="token punctuation">:</span> /libs/awesome/css/all.css <span class="token comment" spellcheck="true"># V5.11.1</span>
    <span class="token key atrule">materialize</span><span class="token punctuation">:</span> /libs/materialize/materialize.min.css <span class="token comment" spellcheck="true"># 1.0.0</span>
    <span class="token key atrule">artitalk</span><span class="token punctuation">:</span> /libs/artitalk/artitalk.min.css <span class="token comment" spellcheck="true"># 最后一行添加</span>

  <span class="token key atrule">js</span><span class="token punctuation">:</span>
    <span class="token key atrule">jquery</span><span class="token punctuation">:</span> /libs/jquery/jquery.min.js
    <span class="token key atrule">materialize</span><span class="token punctuation">:</span> /libs/materialize/materialize.min.js <span class="token comment" spellcheck="true"># 1.0.0</span>
    <span class="token key atrule">artitalk</span><span class="token punctuation">:</span> /libs/artitalk/artitalk.min.js  <span class="token comment" spellcheck="true"># 最后一行添加</span>
</code></pre>
<h3 id="4、引入css"><a href="#4、引入css" class="headerlink" title="4、引入css"></a>4、引入css</h3><p>找到主题目录下 <code>/layout/_partial/head.ejs</code>，在头部引入css</p>
<p>引入</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%- theme.jsDelivr.url %<span class="token punctuation">></span>&lt;%- url_for(theme.libs.css.artitalk) %<span class="token punctuation">></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre>
<p>参考我的:</p>
<pre class=" language-html"><code class="language-html">

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%- theme.jsDelivr.url %<span class="token punctuation">></span>&lt;%- url_for(theme.libs.css.artitalk) %<span class="token punctuation">></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>


    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%- theme.jsDelivr.url %<span class="token punctuation">></span>&lt;%- url_for(<span class="token punctuation">'</span>/css/matery.css<span class="token punctuation">'</span>) %<span class="token punctuation">></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%- theme.jsDelivr.url %<span class="token punctuation">></span>&lt;%- url_for(<span class="token punctuation">'</span>/css/my.css<span class="token punctuation">'</span>) %<span class="token punctuation">></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre>
<h3 id="5、模块准备"><a href="#5、模块准备" class="headerlink" title="5、模块准备"></a>5、模块准备</h3><p>在主题目录下 <code>/layout/</code> 目录新建一个 <code>artitalk.ejs 文件</code>。</p>
<p>文件内容如下:</p>
<pre class=" language-html"><code class="language-html">
&lt;%- partial('_partial/bg-cover') %>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">ype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">

<span class="token selector"><span class="token id">#pubShuo</span> </span><span class="token punctuation">{</span>

  <span class="token property">margin-right</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector"><span class="token id">#operare_artitalk</span> <span class="token class">.shuoshuo_input_log</span> </span><span class="token punctuation">{</span>
    <span class="token property">outline-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
    <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>
    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#ccc</span><span class="token punctuation">;</span>
    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">6</span>px<span class="token punctuation">;</span>
    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">8</span>px <span class="token number">16</span>px<span class="token punctuation">;</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">12</span>px<span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>

    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#0bb7fb</span>d<span class="token number">6</span><span class="token punctuation">;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">70%</span><span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">28</span>px<span class="token punctuation">;</span>
    <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector"><span class="token id">#artitalk_main</span> </span><span class="token punctuation">{</span>

  <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">5</span>px <span class="token punctuation">;</span>
  <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">5%</span><span class="token punctuation">;</span>
  <span class="token property">margin-right</span><span class="token punctuation">:</span> <span class="token number">5%</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>

<span class="token selector"><span class="token id">#lazy</span></span><span class="token punctuation">{</span>
  <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>


&lt;script src="<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%-</span> <span class="token attr-name">theme.jsDelivr.url</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">url_for</span><span class="token punctuation">(</span>theme<span class="token punctuation">.</span>libs<span class="token punctuation">.</span>js<span class="token punctuation">.</span>artitalk<span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span>"<span class="token operator">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>articles11<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container  chip-container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span> card<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>card-content<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tag-title center-align<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fas fa-pen-alt<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span> 说说
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>artitalk_main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
  <span class="token keyword">new</span> <span class="token class-name">Artitalk</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        appId<span class="token punctuation">:</span> <span class="token string">"&lt;%=  theme.artitalk.appId  %>"</span><span class="token punctuation">,</span>
        appKey<span class="token punctuation">:</span> <span class="token string">"&lt;%=  theme.artitalk.appKey  %>"</span><span class="token punctuation">,</span>
      <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>artitalk<span class="token punctuation">.</span>serverURL<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>
          serverURL<span class="token punctuation">:</span> <span class="token string">"&lt;%=  theme.artitalk.serverURL  %>"</span><span class="token punctuation">,</span>
      <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>artitalk<span class="token punctuation">.</span>lang<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>
          lang<span class="token punctuation">:</span> <span class="token string">"&lt;%=  theme.artitalk.lang  %>"</span><span class="token punctuation">,</span>
      <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>artitalk<span class="token punctuation">.</span>pageSize<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>
          pageSize<span class="token punctuation">:</span> <span class="token string">"&lt;%=  theme.artitalk.pageSize  %>"</span><span class="token punctuation">,</span>
      <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>artitalk<span class="token punctuation">.</span>shuoPla<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>
          shuoPla<span class="token punctuation">:</span> <span class="token string">"&lt;%=  theme.artitalk.shuoPla  %>"</span><span class="token punctuation">,</span>
      <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>artitalk<span class="token punctuation">.</span>avatarPla<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>
          avatarPla<span class="token punctuation">:</span> <span class="token string">"&lt;%=  theme.artitalk.avatarPla  %>"</span><span class="token punctuation">,</span>
      <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>artitalk<span class="token punctuation">.</span>motion <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>
          motion<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>
          motion<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
      <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span>  <span class="token operator">%</span><span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>artitalk<span class="token punctuation">.</span>bgImg<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>
          bgImg<span class="token punctuation">:</span> <span class="token string">"&lt;%=  theme.artitalk.bgImg  %>"</span><span class="token punctuation">,</span>
      <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>artitalk<span class="token punctuation">.</span>color1<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>
          color1<span class="token punctuation">:</span> <span class="token string">"&lt;%=  theme.artitalk.color1  %>"</span><span class="token punctuation">,</span>
      <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>artitalk<span class="token punctuation">.</span>color2<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>
          color2<span class="token punctuation">:</span> <span class="token string">"&lt;%=  theme.artitalk.color2  %>"</span><span class="token punctuation">,</span>
      <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>artitalk<span class="token punctuation">.</span>color3<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>
          color3<span class="token punctuation">:</span> <span class="token string">"&lt;%=  theme.artitalk.color3  %>"</span><span class="token punctuation">,</span>
      <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>artitalk<span class="token punctuation">.</span>cssUrl<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>
          cssUrl<span class="token punctuation">:</span> <span class="token string">"&lt;%=  theme.artitalk.cssUrl  %>"</span><span class="token punctuation">,</span>
      <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>
          atEmoji<span class="token punctuation">:</span> <span class="token punctuation">{</span>
              baiyan<span class="token punctuation">:</span> <span class="token string">"https://cdn.jsdelivr.net/gh/Artitalk/Artitalk-emoji/baiyan.png"</span><span class="token punctuation">,</span>
              bishi<span class="token punctuation">:</span> <span class="token string">"https://cdn.jsdelivr.net/gh/Artitalk/Artitalk-emoji/bishi.png"</span><span class="token punctuation">,</span>
              bizui<span class="token punctuation">:</span> <span class="token string">"https://cdn.jsdelivr.net/gh/Artitalk/Artitalk-emoji/bizui.png"</span><span class="token punctuation">,</span>
              chan<span class="token punctuation">:</span> <span class="token string">"https://cdn.jsdelivr.net/gh/Artitalk/Artitalk-emoji/chan.png"</span><span class="token punctuation">,</span>
              daku<span class="token punctuation">:</span> <span class="token string">"https://cdn.jsdelivr.net/gh/Artitalk/Artitalk-emoji/daku.png"</span><span class="token punctuation">,</span>
              dalao<span class="token punctuation">:</span> <span class="token string">"https://cdn.jsdelivr.net/gh/Artitalk/Artitalk-emoji/dalao.png"</span><span class="token punctuation">,</span>
              dalian<span class="token punctuation">:</span> <span class="token string">"https://cdn.jsdelivr.net/gh/Artitalk/Artitalk-emoji/dalian.png"</span><span class="token punctuation">,</span>
              dianzan<span class="token punctuation">:</span> <span class="token string">"https://cdn.jsdelivr.net/gh/Artitalk/Artitalk-emoji/dianzan.png"</span><span class="token punctuation">,</span>
              doge<span class="token punctuation">:</span> <span class="token string">"https://cdn.jsdelivr.net/gh/Artitalk/Artitalk-emoji/doge.png"</span><span class="token punctuation">,</span>
              facai<span class="token punctuation">:</span> <span class="token string">"https://cdn.jsdelivr.net/gh/Artitalk/Artitalk-emoji/facai.png"</span><span class="token punctuation">,</span>
              fadai<span class="token punctuation">:</span> <span class="token string">"https://cdn.jsdelivr.net/gh/Artitalk/Artitalk-emoji/fadai.png"</span><span class="token punctuation">,</span>
              fanu<span class="token punctuation">:</span> <span class="token string">"https://cdn.jsdelivr.net/gh/Artitalk/Artitalk-emoji/fanu.png"</span><span class="token punctuation">,</span>
           <span class="token punctuation">}</span><span class="token punctuation">,</span>
     <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>
<p>我这里因为测试因为登录窗口变形了，所以自己加了 内联样式，如果使用有问题，可以尝试删除文件里的css模块： </p>
<pre class=" language-css"><code class="language-css"><span class="token selector">&lt;style ype="text/css">

<span class="token id">#pubShuo</span> </span><span class="token punctuation">{</span>

  <span class="token property">margin-right</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector"><span class="token id">#operare_artitalk</span> <span class="token class">.shuoshuo_input_log</span> </span><span class="token punctuation">{</span>
    <span class="token property">outline-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
    <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>
    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#ccc</span><span class="token punctuation">;</span>
    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">6</span>px<span class="token punctuation">;</span>
    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">8</span>px <span class="token number">16</span>px<span class="token punctuation">;</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">12</span>px<span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>

    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#0bb7fb</span>d<span class="token number">6</span><span class="token punctuation">;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">70%</span><span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">28</span>px<span class="token punctuation">;</span>
    <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector"><span class="token id">#artitalk_main</span> </span><span class="token punctuation">{</span>

  <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">5</span>px <span class="token punctuation">;</span>
  <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">5%</span><span class="token punctuation">;</span>
  <span class="token property">margin-right</span><span class="token punctuation">:</span> <span class="token number">5%</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>

<span class="token selector"><span class="token id">#lazy</span></span><span class="token punctuation">{</span>
  <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

&lt;/style></code></pre>
<h3 id="6、添加配置"><a href="#6、添加配置" class="headerlink" title="6、添加配置"></a>6、添加配置</h3><p>在主题配置文件中添加以下配置：</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">artitalk</span><span class="token punctuation">:</span> 
  <span class="token key atrule">appId</span><span class="token punctuation">:</span> 你的AppId
  <span class="token key atrule">appKey</span><span class="token punctuation">:</span> 你的AppKwy
  <span class="token key atrule">serverURL</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//xxx.zhangxiaocai.cn  <span class="token comment" spellcheck="true">#leancloud绑定的安全域名，使用国际版的话不需要填写</span>
  <span class="token key atrule">lang</span><span class="token punctuation">:</span> zh <span class="token comment" spellcheck="true"># 语言设置，zh为汉语，en为英语，es为西班牙语。默认为汉语</span>
  <span class="token key atrule">pageSize</span><span class="token punctuation">:</span> <span class="token number">10  </span><span class="token comment" spellcheck="true">#每页说说的显示数量</span>
  <span class="token comment" spellcheck="true"># shuoPla: #在编辑说说的输入框中的占位符</span>
  <span class="token key atrule">avatarPla</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/gh/small<span class="token punctuation">-</span>rose/small<span class="token punctuation">-</span>rose.github.io/medias/avatar.jpg <span class="token comment" spellcheck="true">#自定义头像url的输入框的占位符</span>
  <span class="token comment" spellcheck="true"># motion: #加载动画的开关，1为开，0为关，默认为开</span>
  <span class="token comment" spellcheck="true"># bgImg: #说说输入框背景图片url</span>
  <span class="token comment" spellcheck="true"># color1: #说说背景颜色1&amp;按钮颜色1</span>
  <span class="token comment" spellcheck="true"># color2: #说说背景颜色2&amp;按钮颜色2</span>
  <span class="token comment" spellcheck="true"># color3: #说说字体颜色</span></code></pre>
<p>更多配置项参考官网：<a href="https://artitalk.js.org/settings.html#%F0%9F%98%9C-artitalk%E6%94%AF%E6%8C%81%E4%B8%A4%E7%A7%8D%E5%88%9D%E5%A7%8B%E5%8C%96%E6%96%B9%E5%BC%8F" target="_blank" rel="noopener">配置项说明</a></p>
<h3 id="7、创建页面"><a href="#7、创建页面" class="headerlink" title="7、创建页面"></a>7、创建页面</h3><p>手工建页面或者执行命令</p>
<p>执行创建页面</p>
<pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"artitalk"</span></code></pre>
<p>在 hexo 的 <code>source</code> 目录多个 <code>artitalk</code> 文件夹，修改里面的 <code>index.md</code> :</p>
<p>生成的文件：</p>
<pre class=" language-txt"><code class="language-txt">---
title: 说说
date: 2020-10-02 16:19:14
---
</code></pre>
<p>修改为：</p>
<pre><code>---
title: 说说
date: 2020-10-02 16:19:14
type: &quot;artitalk&quot;
layout: &quot;artitalk&quot;
---
</code></pre><h3 id="8、添加链接"><a href="#8、添加链接" class="headerlink" title="8、添加链接"></a>8、添加链接</h3><p>主题配置文件里添加：</p>
<pre><code>  ArtiTalk:
    url: /artitalk
    icon: fas fa-comments  
</code></pre><p>比如我的，换位置自己调一下：</p>
<pre class=" language-yaml"><code class="language-yaml">
<span class="token key atrule">menu</span><span class="token punctuation">:</span>
  <span class="token key atrule">Index</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> /
    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>home
  <span class="token key atrule">Tags</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> /tags
    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>tags
  <span class="token key atrule">Categories</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> /categories
    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>bookmark
  <span class="token key atrule">Archives</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> /archives
    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>archive
  <span class="token key atrule">About</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> /about
    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>user<span class="token punctuation">-</span>circle
  <span class="token key atrule">Contact</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> /contact
    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>comments
  <span class="token key atrule">ArtiTalk</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> /artitalk
    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>heartbeat</code></pre>
<h3 id="9、中文显示"><a href="#9、中文显示" class="headerlink" title="9、中文显示"></a>9、中文显示</h3><p>找到主题目录下 <code>layout/_partial/navigation.ejs</code> 文件</p>
<p>大概在第 11 行左右添加导航菜单</p>
<pre class=" language-txt"><code class="language-txt">    menuMap.set("ArtiTalk", "说说");</code></pre>
<p>加完之后：</p>
<pre><code>    menuMap.set(&quot;Index&quot;, &quot;首页&quot;);
    menuMap.set(&quot;Tags&quot;, &quot;标签&quot;);
    menuMap.set(&quot;Categories&quot;, &quot;分类&quot;);
    menuMap.set(&quot;Archives&quot;, &quot;归档&quot;);
    menuMap.set(&quot;About&quot;, &quot;关于&quot;);
    menuMap.set(&quot;Contact&quot;, &quot;留言薄&quot;);
    menuMap.set(&quot;Friends&quot;, &quot;友情链接&quot;);
    menuMap.set(&quot;Daohang&quot;, &quot;导航&quot;);
    menuMap.set(&quot;ArtiTalk&quot;, &quot;说说&quot;);</code></pre><h3 id="10、色彩美化"><a href="#10、色彩美化" class="headerlink" title="10、色彩美化"></a>10、色彩美化</h3><p>最简单的使用是修改配置里的 <code>color1</code>、 <code>color2</code>、 <code>color3</code> 即可。</p>
<p>比如我的配置：</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">artitalk</span><span class="token punctuation">:</span> 
  <span class="token key atrule">appId</span><span class="token punctuation">:</span> 你的AppId
  <span class="token key atrule">appKey</span><span class="token punctuation">:</span> 你的AppKwy
  <span class="token key atrule">serverURL</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//xxx.zhangxiaocai.cn  <span class="token comment" spellcheck="true">#leancloud绑定的安全域名，使用国际版的话不需要填写</span>
  <span class="token key atrule">lang</span><span class="token punctuation">:</span> zh <span class="token comment" spellcheck="true"># 语言设置，zh为汉语，en为英语，es为西班牙语。默认为汉语</span>
  <span class="token key atrule">pageSize</span><span class="token punctuation">:</span> <span class="token number">10  </span><span class="token comment" spellcheck="true">#每页说说的显示数量</span>
  <span class="token comment" spellcheck="true"># shuoPla: #在编辑说说的输入框中的占位符</span>
  <span class="token key atrule">avatarPla</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/gh/small<span class="token punctuation">-</span>rose/small<span class="token punctuation">-</span>rose.github.io/medias/avatar.jpg <span class="token comment" spellcheck="true">#自定义头像url的输入框的占位符</span>
  <span class="token comment" spellcheck="true"># motion: #加载动画的开关，1为开，0为关，默认为开</span>
  <span class="token comment" spellcheck="true"># bgImg: #说说输入框背景图片url</span>
  <span class="token key atrule">color1</span><span class="token punctuation">:</span> linear<span class="token punctuation">-</span>gradient(45deg<span class="token punctuation">,</span> rgb(109<span class="token punctuation">,</span> <span class="token number">208</span><span class="token punctuation">,</span> 242) 15%<span class="token punctuation">,</span> rgb(245<span class="token punctuation">,</span> <span class="token number">154</span><span class="token punctuation">,</span> 190) 85%)  <span class="token comment" spellcheck="true">#说说背景颜色1&amp;按钮颜色1</span>
  <span class="token key atrule">color2</span><span class="token punctuation">:</span>  linear<span class="token punctuation">-</span>gradient(45deg<span class="token punctuation">,</span> rgb(109<span class="token punctuation">,</span> <span class="token number">208</span><span class="token punctuation">,</span> 242) 15%<span class="token punctuation">,</span> rgb(245<span class="token punctuation">,</span> <span class="token number">154</span><span class="token punctuation">,</span> 190) 85%)  <span class="token comment" spellcheck="true">#说说背景颜色2&amp;按钮颜色2</span>
  <span class="token key atrule">color3</span><span class="token punctuation">:</span> black <span class="token comment" spellcheck="true">#说说字体颜色</span></code></pre>
<p>注意，如果使用渐变色，每条说说前面的有个小箭头会消失，因为那个样式不支持渐变色。</p>
<p>如果想把那个小箭头显示出来，在<code>artitalk.ejs</code> 样式里添加内联样式覆盖默认样式，设置颜色的就是 <code>border-right-color</code> 属性值。</p>
<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token id">#artitalk_main</span> <span class="token class">.cbp_tmtimeline</span> > li <span class="token class">.cbp_tmlabel</span><span class="token pseudo-element">::after</span> </span><span class="token punctuation">{</span>
  <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>
  <span class="token property">border</span><span class="token punctuation">:</span> solid transparent<span class="token punctuation">;</span>
  <span class="token property">z-index</span><span class="token punctuation">:</span> -<span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">" "</span><span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
  <span class="token property">pointer-events</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
  <span class="token property">border-right-color</span><span class="token punctuation">:</span>  <span class="token hexcode">#0bb7fb</span>d<span class="token number">6</span> <span class="token punctuation">;</span>
  <span class="token property">border-width</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>
  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">4</span>px<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>更多颜色参考：</p>
<p>配色相关链接：</p>
<p>本站收藏色彩：<a href="https://zhangxiaocai.cn/color/" target="_blank" rel="noopener">https://zhangxiaocai.cn/color/</a></p>
<p>配色： <a href="https://colordrop.io/" target="_blank" rel="noopener">https://colordrop.io/</a></p>
<p>或者自己搜索在线配色工具。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>WebStackPage</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 博客添加思维导图渲染</title>
    <url>/posts/5a2c12e2.html</url>
    <content><![CDATA[<h2 id="Hexo-博客添加思维导图渲染"><a href="#Hexo-博客添加思维导图渲染" class="headerlink" title="Hexo 博客添加思维导图渲染"></a>Hexo 博客添加思维导图渲染</h2><p>理论上是不分主题的。</p>
<p>使用这个是因为群里的一位小伙伴希望有个思维导图的分类。 我尝试了一下，这个插件是 markdown 页面渲染支持，无法直接放入 ejs 页面来循环分类数据。 这个后续再研究研究。</p>
<p>这个插件是大神 <code>HunterXuan</code> 完成的 <a href="https://github.com/HunterXuan/hexo-simple-mindmap" target="_blank" rel="noopener">hexo-simple-mindmap</a></p>
<h3 id="一、安装插件与使用"><a href="#一、安装插件与使用" class="headerlink" title="一、安装插件与使用"></a>一、安装插件与使用</h3><h4 id="1、安装插件"><a href="#1、安装插件" class="headerlink" title="1、安装插件"></a>1、安装插件</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-simple-mindmap</code></pre>
<h4 id="2、直接在文章中使用"><a href="#2、直接在文章中使用" class="headerlink" title="2、直接在文章中使用"></a>2、直接在文章中使用</h4><p>在你的文章页面直接使用即可，官方 Demo :</p>
<pre><code>{% pullquote mindmap mindmap-md %}
- [在 Hexo 中使用思维导图](https://hunterx.xyz/use-mindmap-in-hexo.html)
  - 前言
  - 操作指南
    - 准备需要的文件
    - 为主题添加 CSS/JS 文件
  - 使用方法
{% endpullquote %}</code></pre><p> 效果如下，有画布，可以自由拖拽。</p>
<blockquote class="pullquote mindmap mindmap-md"><!-- build time:Wed Oct 07 2020 14:01:19 GMT+0800 (中国标准时间) --><ul><li><a href="https://hunterx.xyz/use-mindmap-in-hexo.html" target="_blank" rel="noopener">在 Hexo 中使用思维导图</a><ul><li>前言</li><li>操作指南<ul><li>准备需要的文件</li><li>为主题添加 CSS/JS 文件</li></ul></li><li>使用方法</li></ul></li></ul><!-- rebuild by neat --></blockquote>

<p>搞个自己例子：</p>
<blockquote class="pullquote mindmap mindmap-md"><!-- build time:Wed Oct 07 2020 14:01:19 GMT+0800 (中国标准时间) --><ul><li><a href="https://hut.zhangxiaocai.cn" target="_blank" rel="noopener">我的写作博客</a><ul><li>公子钺桉<ul><li>古诗词<ul><li>烟火人间</li><li>梦</li></ul></li><li>第七年的梦<ul><li>第七年之梦</li><li>梦里的故事</li></ul></li><li>白话江湖<ul><li>功名厄</li><li>双生梅</li><li>晓风残月</li><li>拈花盗</li></ul></li></ul></li><li>门清<ul><li>人间悲剧<ul><li>十八堤</li><li>西坡寺<ul><li>望桥</li><li>呜咽河</li></ul></li></ul></li></ul></li></ul></li></ul><!-- rebuild by neat --></blockquote>



<h3 id="二、分类思维导图"><a href="#二、分类思维导图" class="headerlink" title="二、分类思维导图"></a>二、分类思维导图</h3><h4 id="1、目前需要自己手工维护"><a href="#1、目前需要自己手工维护" class="headerlink" title="1、目前需要自己手工维护"></a>1、目前需要自己手工维护</h4><p>自动方式还在摸索中。如果嫌麻烦可以跳过第二部分。</p>
<p>如果你想用思维导图展示，可以在 <code>/soure/categoties/index.md</code> 中按上面的格式添加自己的分类。</p>
<pre><code>{% pullquote mindmap mindmap-md %}
- [小菜苔博客](https://hut.zhangxiaocai.cn)
  - Hexo
  - Hexo系统
  - Matery主题系统
  - Matery常见问题
  - Hexo插件
    - valine
    - Valine-Admin
    - 客服与推送
    - 思维导图插件  
  - Java
  - Jdk
    - Jdk8 日期时间API
    - Jdk8 Optional API
    - Jdk 变化补充学习
    - 定时任务
      - Java Timer
      - Spring Task
      - Quartz
    - Jvm
      - 内存结构
      - GC回收算法
      - GC收集器
      - 调试工具
  - Mybatis
    - 主要组件
    - Mybatis配置
    - 动态SQL
    - 工作原理
    - Mapper映射器
    - Mapper级联
    - Mybatis模糊查询 
  - 数据库
  - SQL
    - SQL查询前N条级联
    - SQL模糊查询 
    - SQL分页N种玩法
  - DB2
      - DB2常用命令
      - DB2常见错误码
    - DB2常用函数 
  - Mysql
    - Mysql常用命令
    - Mysql登录异常
{% endpullquote %}
</code></pre><h4 id="2、新建-category-mindmap-ejs"><a href="#2、新建-category-mindmap-ejs" class="headerlink" title="2、新建 category-mindmap.ejs"></a>2、新建 category-mindmap.ejs</h4><p>在主题目录 <code>/layout/_widget/</code>目录下新建 <code>category-mindmap.ejs</code> 文件。 内容如下：</p>
<pre><code>&lt;div class=&quot;container&quot; data-aos=&quot;fade-up&quot;&gt;
    &lt;div class=&quot;card&quot;&gt;
        &lt;div id=&quot;category-map&quot; class=&quot;card-content&quot;&gt;
    &lt;%- page.content %&gt;

    &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt; </code></pre><h4 id="2、引入支持"><a href="#2、引入支持" class="headerlink" title="2、引入支持"></a>2、引入支持</h4><p>找到主题目录下 <code>/layout/mindmap.ejs</code> , 添加以下代码：</p>
<pre><code> &lt;%- partial(&#39;_widget/category-mindmap&#39;) %&gt;</code></pre><p>加了之后，大概是这样子：</p>
<pre><code>&lt;%- partial(&#39;_partial/bg-cover&#39;) %&gt;

&lt;main class=&quot;content&quot;&gt;

    &lt;%- partial(&#39;_widget/category-cloud&#39;) %&gt;

    &lt;% if (site.categories &amp;&amp; site.categories.length &gt; 0) { %&gt;
    &lt;%- partial(&#39;_widget/category-radar&#39;) %&gt;
    &lt;% } %&gt;


    &lt;%- partial(&#39;_widget/category-mindmap&#39;) %&gt;
&lt;/main&gt;</code></pre><p>如果你使用了多级分类，加了之后，大概是这样子：</p>
<pre><code>&lt;%- partial(&#39;_partial/bg-cover&#39;) %&gt;

&lt;main class=&quot;content&quot;&gt;

    &lt;%- partial(&#39;_widget/category-cloud&#39;) %&gt;

    &lt;% if (site.categories &amp;&amp; site.categories.length &gt; 0) { %&gt;
    &lt;%- partial(&#39;_widget/category-radar&#39;) %&gt;
    &lt;% } %&gt;

    &lt;%- partial(&#39;_widget/category-list&#39;) %&gt;

    &lt;%- partial(&#39;_widget/category-mindmap&#39;) %&gt;
&lt;/main&gt;</code></pre><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Matery 添加加载动画</title>
    <url>/posts/7496029d.html</url>
    <content><![CDATA[<h2 id="Matery-添加加载动画"><a href="#Matery-添加加载动画" class="headerlink" title="Matery 添加加载动画"></a>Matery 添加加载动画</h2><p>Matery 添加过渡的加载动画，对于加载速度较慢是一种友好的解决方式。</p>
<p>起初我使用大佬的方案：<a href="https://yafine-blog.cn/posts/7400.html" target="_blank" rel="noopener">Matery 主题添加 loading-pages</a></p>
<p>开始也正常使用了一段时间，今天发现加载动画不见了？</p>
<p>然后安装大佬的方案再来一遍，显示不出来，其实我并没有改什么，就是改下停留时间，好不容易显示出来了，但是我发现原本在 <code>&lt;head&gt;</code> 区的代码跑到了 <code>&lt;body&gt;</code> 区，其实大佬的方案对于使用完全没有任何问题。</p>
<p>可以继续使用。</p>
<p>那么我为什么要折腾这篇文章呢？</p>
<p>因为我是个追求完美的人，好吧，就这么说说，信不信不重要了~</p>
<p>反正就是想代码显示的正常一点，其实是担心会不会影响搜索什么的…</p>
<p>所以就按照大佬代码，变换了一下结构。</p>
<h3 id="1、在-layout-partial-目录新建一个-loading-pages-ejs-内容如下："><a href="#1、在-layout-partial-目录新建一个-loading-pages-ejs-内容如下：" class="headerlink" title="1、在 /layout/_partial/ 目录新建一个 loading-pages.ejs 内容如下："></a>1、在 <code>/layout/_partial/</code> 目录新建一个 <code>loading-pages.ejs</code> 内容如下：</h3><p>如果你发现了爆红什么的，不要担心。</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">
    <span class="token selector"><span class="token id">#loading-container</span></span><span class="token punctuation">{</span>
        <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>
        <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token property">min-height</span><span class="token punctuation">:</span> <span class="token number">100</span>vh<span class="token punctuation">;</span>
        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>vw<span class="token punctuation">;</span>
        <span class="token property">z-index</span><span class="token punctuation">:</span> <span class="token number">9999</span><span class="token punctuation">;</span>
        <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
        <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>
        <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
        <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#FFF</span><span class="token punctuation">;</span>
        <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/* loader页面消失采用渐隐的方式*/</span>
        <span class="token property">-webkit-transition</span><span class="token punctuation">:</span> opacity <span class="token number">1</span>s ease<span class="token punctuation">;</span>
        <span class="token property">-moz-transition</span><span class="token punctuation">:</span> opacity <span class="token number">1</span>s ease<span class="token punctuation">;</span>
        <span class="token property">-o-transition</span><span class="token punctuation">:</span> opacity <span class="token number">1</span>s ease<span class="token punctuation">;</span>
        <span class="token property">transition</span><span class="token punctuation">:</span> opacity <span class="token number">1</span>s ease<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token selector"><span class="token class">.loading-image</span></span><span class="token punctuation">{</span>
        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">120</span>px<span class="token punctuation">;</span>
        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>
        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-<span class="token number">50%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token selector"><span class="token class">.loading-image</span> div<span class="token pseudo-class">:nth-child(2)</span> </span><span class="token punctuation">{</span>
        <span class="token property">-webkit-animation</span><span class="token punctuation">:</span> pacman-balls <span class="token number">1</span>s linear <span class="token number">0</span>s infinite<span class="token punctuation">;</span>
        <span class="token property">animation</span><span class="token punctuation">:</span> pacman-balls <span class="token number">1</span>s linear <span class="token number">0</span>s infinite
    <span class="token punctuation">}</span>

    <span class="token selector"><span class="token class">.loading-image</span> div<span class="token pseudo-class">:nth-child(3)</span> </span><span class="token punctuation">{</span>
        <span class="token property">-webkit-animation</span><span class="token punctuation">:</span> pacman-balls <span class="token number">1</span>s linear <span class="token number">.33</span>s infinite<span class="token punctuation">;</span>
        <span class="token property">animation</span><span class="token punctuation">:</span> pacman-balls <span class="token number">1</span>s linear <span class="token number">.33</span>s infinite
    <span class="token punctuation">}</span>

    <span class="token selector"><span class="token class">.loading-image</span> div<span class="token pseudo-class">:nth-child(4)</span> </span><span class="token punctuation">{</span>
        <span class="token property">-webkit-animation</span><span class="token punctuation">:</span> pacman-balls <span class="token number">1</span>s linear <span class="token number">.66</span>s infinite<span class="token punctuation">;</span>
        <span class="token property">animation</span><span class="token punctuation">:</span> pacman-balls <span class="token number">1</span>s linear <span class="token number">.66</span>s infinite
    <span class="token punctuation">}</span>

    <span class="token selector"><span class="token class">.loading-image</span> div<span class="token pseudo-class">:nth-child(5)</span> </span><span class="token punctuation">{</span>
        <span class="token property">-webkit-animation</span><span class="token punctuation">:</span> pacman-balls <span class="token number">1</span>s linear <span class="token number">.99</span>s infinite<span class="token punctuation">;</span>
        <span class="token property">animation</span><span class="token punctuation">:</span> pacman-balls <span class="token number">1</span>s linear <span class="token number">.99</span>s infinite
    <span class="token punctuation">}</span>

   <span class="token selector"><span class="token class">.loading-image</span> div<span class="token pseudo-class">:first-of-type</span> </span><span class="token punctuation">{</span>
        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">25</span>px solid <span class="token hexcode">#49b1f5</span><span class="token punctuation">;</span>
        <span class="token property">border-right-color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>
        <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">25</span>px<span class="token punctuation">;</span>
        <span class="token property">-webkit-animation</span><span class="token punctuation">:</span> rotate_pacman_half_up <span class="token number">.5</span>s <span class="token number">0</span>s infinite<span class="token punctuation">;</span>
        <span class="token property">animation</span><span class="token punctuation">:</span> rotate_pacman_half_up <span class="token number">.5</span>s <span class="token number">0</span>s infinite<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token selector"><span class="token class">.loading-image</span> div<span class="token pseudo-class">:nth-child(2)</span> </span><span class="token punctuation">{</span>
        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">25</span>px solid <span class="token hexcode">#49b1f5</span><span class="token punctuation">;</span>
        <span class="token property">border-right-color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>
        <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">25</span>px<span class="token punctuation">;</span>
        <span class="token property">-webkit-animation</span><span class="token punctuation">:</span> rotate_pacman_half_down <span class="token number">.5</span>s <span class="token number">0</span>s infinite<span class="token punctuation">;</span>
        <span class="token property">animation</span><span class="token punctuation">:</span> rotate_pacman_half_down <span class="token number">.5</span>s <span class="token number">0</span>s infinite<span class="token punctuation">;</span>
        <span class="token property">margin-top</span><span class="token punctuation">:</span> -<span class="token number">50</span>px<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token atrule"><span class="token rule">@-webkit-keyframes</span> rotate_pacman_half_up</span> <span class="token punctuation">{</span><span class="token selector">0% </span><span class="token punctuation">{</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">270</span>deg<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token selector">50% </span><span class="token punctuation">{</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">1</span>turn<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token selector">to </span><span class="token punctuation">{</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">270</span>deg<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span>

    <span class="token atrule"><span class="token rule">@keyframes</span> rotate_pacman_half_up</span> <span class="token punctuation">{</span><span class="token selector">0% </span><span class="token punctuation">{</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">270</span>deg<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token selector">50% </span><span class="token punctuation">{</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">1</span>turn<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token selector">to </span><span class="token punctuation">{</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">270</span>deg<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span>

    <span class="token atrule"><span class="token rule">@-webkit-keyframes</span> rotate_pacman_half_down</span> <span class="token punctuation">{</span><span class="token selector">0% </span><span class="token punctuation">{</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">90</span>deg<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token selector">50% </span><span class="token punctuation">{</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">0</span>deg<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token selector">to </span><span class="token punctuation">{</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">90</span>deg<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span>

    <span class="token atrule"><span class="token rule">@keyframes</span> rotate_pacman_half_down</span> <span class="token punctuation">{</span><span class="token selector">0% </span><span class="token punctuation">{</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">90</span>deg<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token selector">50% </span><span class="token punctuation">{</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">0</span>deg<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token selector">to </span><span class="token punctuation">{</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">90</span>deg<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span>

    <span class="token atrule"><span class="token rule">@-webkit-keyframes</span> pacman-balls</span> <span class="token punctuation">{</span><span class="token selector">75% </span><span class="token punctuation">{</span><span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">.7</span><span class="token punctuation">}</span><span class="token selector">to </span><span class="token punctuation">{</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-<span class="token number">100</span>px, -<span class="token number">6.25</span>px<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span>

    <span class="token atrule"><span class="token rule">@keyframes</span> pacman-balls</span> <span class="token punctuation">{</span><span class="token selector">75% </span><span class="token punctuation">{</span><span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">.7</span><span class="token punctuation">}</span><span class="token selector">to </span><span class="token punctuation">{</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-<span class="token number">100</span>px, -<span class="token number">6.25</span>px<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span>


    <span class="token selector"><span class="token class">.loading-image</span> div<span class="token pseudo-class">:nth-child(3)</span>,
    <span class="token class">.loading-image</span> div<span class="token pseudo-class">:nth-child(4)</span>,
    <span class="token class">.loading-image</span> div<span class="token pseudo-class">:nth-child(5)</span>,
    <span class="token class">.loading-image</span> div<span class="token pseudo-class">:nth-child(6)</span></span><span class="token punctuation">{</span>
        <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#49b1f5</span><span class="token punctuation">;</span>
        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span>
        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span>
        <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>
        <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">2</span>px<span class="token punctuation">;</span>
        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>
        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>
        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-<span class="token number">6.25</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">25</span>px<span class="token punctuation">;</span>
        <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token selector"><span class="token class">.loading-text</span></span><span class="token punctuation">{</span>
        <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token number">20</span>vh<span class="token punctuation">;</span>
        <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#2c3e50</span><span class="token punctuation">;</span>
        <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">2</span>rem<span class="token punctuation">;</span>
        <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>
        <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">10</span>px<span class="token punctuation">;</span>
        <span class="token property">text-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">2</span>px <span class="token number">10</span>px <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token atrule"><span class="token rule">@media</span> only screen and <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
         <span class="token selector"><span class="token class">.loading-text</span></span><span class="token punctuation">{</span>
            <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">1.5</span>rem<span class="token punctuation">;</span>
         <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token selector"><span class="token class">.fadeout</span> </span><span class="token punctuation">{</span>
        <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">alpha</span><span class="token punctuation">(</span>opacity=<span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">/* logo出现动画 */</span>
    <span class="token atrule"><span class="token rule">@-webkit-keyframes</span> fadeInDown</span><span class="token punctuation">{</span><span class="token selector">0%</span><span class="token punctuation">{</span><span class="token property">opacity</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token property">-webkit-transform</span><span class="token punctuation">:</span>translate<span class="token number">3</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token number">0</span>,-<span class="token number">100%</span>,<span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">transform</span><span class="token punctuation">:</span>translate<span class="token number">3</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token number">0</span>,-<span class="token number">100%</span>,<span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token selector">100%</span><span class="token punctuation">{</span><span class="token property">opacity</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token property">-webkit-transform</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span><span class="token property">transform</span><span class="token punctuation">:</span>none<span class="token punctuation">}</span><span class="token punctuation">}</span>
    <span class="token atrule"><span class="token rule">@keyframes</span> fadeInDown</span><span class="token punctuation">{</span><span class="token selector">0%</span><span class="token punctuation">{</span><span class="token property">opacity</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token property">-webkit-transform</span><span class="token punctuation">:</span>translate<span class="token number">3</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token number">0</span>,-<span class="token number">100%</span>,<span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
 </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> loaded <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
       <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">const</span> loader <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"loading-container"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            loader<span class="token punctuation">.</span>className<span class="token operator">=</span><span class="token string">"fadeout"</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用渐隐的方法淡出loading page</span>
            <span class="token comment" spellcheck="true">// document.getElementById("body-wrap").style.display="flex";</span>
            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                loader<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display<span class="token operator">=</span><span class="token string">"none"</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">2500</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//强制显示loading page 1s  </span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">loaded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>
<h3 id="2、在主题的-layout-目录找到-layout-ejs-文件"><a href="#2、在主题的-layout-目录找到-layout-ejs-文件" class="headerlink" title="2、在主题的 layout 目录找到 layout.ejs 文件"></a>2、在主题的 <code>layout</code> 目录找到 <code>layout.ejs</code> 文件</h3><p>在 <code>&lt;body&gt;</code> 附近添加内容后如下：</p>
<pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE HTML></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%<span class="token punctuation">=</span> config.language %<span class="token punctuation">></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
&lt;%- partial('_partial/head') %>

 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(theme.loadingPages.enable)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>
    &lt;%- partial('_partial/loading-pages') %>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(theme.loadingPages.enable)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>loading-container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>loading-text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>嘘~  正在从服务器偷取页面 . . . <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span> 
             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>loading-image<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> 
                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>

    &lt;%- partial('_partial/header') %>
    ...</code></pre>
<h3 id="3、添加开关配置"><a href="#3、添加开关配置" class="headerlink" title="3、添加开关配置"></a>3、添加开关配置</h3><pre class=" language-yml"><code class="language-yml">loadingPages:
  enable: true  
</code></pre>
<p><code>enable</code> 设置为 <code>true</code> 表示开启加载动画， <code>false</code> 表示关闭加载动画。</p>
<h3 id="4、大功告成"><a href="#4、大功告成" class="headerlink" title="4、大功告成"></a>4、大功告成</h3><pre class=" language-bash"><code class="language-bash">hexo clean <span class="token operator">&amp;&amp;</span> hexo g <span class="token operator">&amp;&amp;</span> hexo s</code></pre>
<p>看看效果吧~</p>
<br/><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>js让页面自动刷新</title>
    <url>/posts/7413f2ca.html</url>
    <content><![CDATA[<p>js让页面自动刷新</p>
<a id="more"></a>

<h6 id="想让页面自动刷新"><a href="#想让页面自动刷新" class="headerlink" title="想让页面自动刷新?"></a>想让页面自动刷新?</h6><p>F12 —– 控制台 —– 使用下面代码，OK。</p>
<pre class=" language-javascript"><code class="language-javascript">timeout<span class="token operator">=</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"Set timeout (Second):"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
count<span class="token operator">=</span><span class="token number">0</span>
current<span class="token operator">=</span>location<span class="token punctuation">.</span>href<span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>timeout<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token string">'reload()'</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token operator">*</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">else</span>
location<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token string">'reload()'</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token operator">*</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
count<span class="token operator">++</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'每（'</span><span class="token operator">+</span>timeout<span class="token operator">+</span><span class="token string">'）秒自动刷新,刷新次数：'</span><span class="token operator">+</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
fr4me<span class="token operator">=</span><span class="token string">'&lt;frameset cols=\'*\'>\n&lt;frame src=\''</span><span class="token operator">+</span>current<span class="token operator">+</span><span class="token string">'\'/>'</span><span class="token punctuation">;</span>
fr4me<span class="token operator">+</span><span class="token operator">=</span><span class="token string">'&lt;/frameset>'</span><span class="token punctuation">;</span>
<span class="token keyword">with</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">write</span><span class="token punctuation">(</span>fr4me<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Matery主题新手常见问题</title>
    <url>/posts/a53a9069.html</url>
    <content><![CDATA[<h2 id="Matery主题新手常见问题"><a href="#Matery主题新手常见问题" class="headerlink" title="Matery主题新手常见问题"></a>Matery主题新手常见问题</h2><p>本文主要针对新手入门的常见问题进行简单整理。大部门问题都可以阅读主题readme解决，如果你看不懂英文,点击这个链接就可以切换中文阅读:</p>
<p><a href="https://github.com/small-rose/hexo-theme-matery/blob/develop/README_CN.md" target="_blank" rel="noopener">Matery 中文说明</a></p>
<p><strong>遇到问题先看readme!!!</strong><br><strong>遇到问题先看readme!!!</strong><br><strong>遇到问题先看readme!!!</strong></p>
<p>看右侧目录可以快速定位你的问题。</p>
<h3 id="改代码不生效"><a href="#改代码不生效" class="headerlink" title="改代码不生效"></a>改代码不生效</h3><p><strong>问题描述：</strong>代码都是正确的，修改之后不生效怎么办?</p>
<p>（1）使用 Ctrl + F5 强制刷新之后再看。</p>
<p>（2）自己清除浏览器缓存，各个浏览器可能不一样，请自己搜索怎么清除缓存。</p>
<p>（3）如果你使用了CDN加速，本地调试千万记得先关闭加速。</p>
<p>（4）如果你修改 <code>_config.yml</code>，调试前要执行 <code>hexo clean</code> 命令。</p>
<h3 id="favicon-ico-更换之后不显示"><a href="#favicon-ico-更换之后不显示" class="headerlink" title="favicon.ico 更换之后不显示"></a>favicon.ico 更换之后不显示</h3><p><strong>问题描述：</strong> favicon.ico 已经更换成自己的图标之后不生效怎么办?</p>
<p>（1）确保 <code>favicon.ico</code>路径没有问题。</p>
<p>（2）有些浏览器不支持<code>localhost</code>显示<code>favicon.ico</code>图标,更换浏览器试试。</p>
<p>（3）更换浏览器还是不能显示，将访问路径<code>http://localhost:4000</code>改为<code>http://127.0.0.1:4000</code>访问。</p>
<h3 id="复制代码粘贴不能换行"><a href="#复制代码粘贴不能换行" class="headerlink" title="复制代码粘贴不能换行"></a>复制代码粘贴不能换行</h3><p>修改 <code>themes\matery\layout\_partial\post-detail.ejs</code></p>
<p>将</p>
<pre class=" language-html"><code class="language-html">if (selection.getRangeAt(0).commonAncestorContainer.nodeName === 'PRE') {
    newdiv.innerHTML = "<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">></span></span>" + newdiv.innerHTML + "<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">></span></span>";
}
</code></pre>
<p>修改成</p>
<pre class=" language-html"><code class="language-html">// if (selection.getRangeAt(0).commonAncestorContainer.nodeName === 'PRE') {
//     newdiv.innerHTML = "<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">></span></span>" + newdiv.innerHTML + "<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">></span></span>";
// }

//注释掉上面的if，将if中的内容释放出来
newdiv.innerHTML = "<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">></span></span>" + newdiv.innerHTML + "<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">></span></span>";</code></pre>
<h3 id="文章多个标签"><a href="#文章多个标签" class="headerlink" title="文章多个标签"></a>文章多个标签</h3><p><strong>问题描述：</strong>文章标签或分类想添加多个，不知道怎么写？</p>
<p>写法一：</p>
<pre class=" language-txt"><code class="language-txt">tags: 
  - Hexo
  - Github
  - 博客</code></pre>
<p>写法二：</p>
<pre><code>tags: [Hexo,Github,博客]
</code></pre><p>分类写法同理。</p>
<h3 id="提示-prism-plugin-配置错误。"><a href="#提示-prism-plugin-配置错误。" class="headerlink" title="提示 prism-plugin 配置错误。"></a>提示 <code>prism-plugin</code> 配置错误。</h3><p>问题描述： 高于 Hexo 4.2 的版本 （ 不一定准备，因为我的4.2 版本没有问题）， 目前在执行 <code>hexo clean</code> 时提示 <code>prism-plugin</code> 配置错误。</p>
<p>方案1：你可以忽略这个错误，因为这对实际展示不造成影响。 原因没有去细究。</p>
<p>方案2：你无法忍受报错提示，可以卸载高亮插件使用 新版Hexo 自带的高亮。</p>
<p>执行卸载高亮插件：</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> uninstall -S hexo-prism-plugin</code></pre>
<p>大写s是在本地安装，也就是只在你的博客文件所在目录的本地进行安装。卸载也是在本地卸载。</p>
<p>卸载后使用hexo 自带的高亮插件。<a href="https://hexo.io/docs/syntax-highlight" target="_blank" rel="noopener">自带的高亮插件用法</a></p>
<p><font coloer="red"><strong>注意：</strong> </font>该问题是群友遇到了，讨论尝试的解决方法。可以自行尝试。</p>
<h3 id="代码块显示问题"><a href="#代码块显示问题" class="headerlink" title="代码块显示问题"></a>代码块显示问题</h3><p><strong>问题描述：</strong> 代码块中的 <code>{  }</code> 被转义<br><strong>问题描述：</strong> 代码块的行号和内容分开成两块了，不完整怎么办？就像下图这样：</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/hexo/hexo-error.png" alt="代码块显示不正常示例图"></p>
<p>怎么解决？按步骤来：</p>
<p>（1）代码高亮插件</p>
<p>安装官方推荐的<code>hexo-prism-plugin</code>的 Hexo 代码高亮插件</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i -S hexo-prism-plugin</code></pre>
<p>（2）修改配置</p>
<p>修改 Hexo 根目录下 <code>_config.yml</code> 文件：</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">highlight</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">auto_detect</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span>
  <span class="token key atrule">wrap</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">hljs</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>

<span class="token comment" spellcheck="true"># 关闭原有 的代码高亮，使用自己的</span>
<span class="token key atrule">prism_plugin</span><span class="token punctuation">:</span>
  <span class="token key atrule">mode</span><span class="token punctuation">:</span> <span class="token string">'preprocess'</span>    <span class="token comment" spellcheck="true"># realtime/preprocess</span>
  <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">'tomorrow'</span>
  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">false    </span><span class="token comment" spellcheck="true"># default false</span>
  <span class="token key atrule">custom_css</span><span class="token punctuation">:</span>
</code></pre>
<p>可以自己比较一下，<code>highlight</code>下的 <code>enable</code>的值设置成 <code>false</code> ；<code>prism_plugin</code> 各个值可以选，如果看不懂意思就不改，或者改一个试试效果，<code>theme</code> 的值官方推荐是 <code>tomorrow</code>，如果你无法显示，就在下面的列表里换个值试试。</p>
<table>
<thead>
<tr>
<th>参数KEY</th>
<th>可选值</th>
</tr>
</thead>
<tbody><tr>
<td>mode</td>
<td>realtime (Parse code on browser in real time) <br/>preprocess (Preprocess code in node)</td>
</tr>
<tr>
<td>theme</td>
<td>default<br/> coy<br/> dark<br/> funky <br/> okaidia <br/> solarizedlight <br/> tomorrow <br/> twilight <br/> 如果要更多的选择访问： <a href="https://github.com/ele828/hexo-prism-plugin" target="_blank" rel="noopener">hexo-prism-plugin</a></td>
</tr>
<tr>
<td>line_number</td>
<td>true (Show line numbers) <br/> false (Default, Hide line numbers)</td>
</tr>
<tr>
<td>no_assets</td>
<td>true (Stop loading asset files)<br/> false (Default, load script and stylesheets files)<br/></td>
</tr>
</tbody></table>
<p>到此基本能解决。如果还是不行，到群里咨询<code>971887688</code> ，描述或者截图你的问题，然后给出相关配置代码。</p>
<p>2020年8月14日追加：</p>
<p>对于 代码块中的 <code>{  }</code> 被转义的问题，有些人是可以通过这种方式解决的，如果无法解决可以尝试使用 <a href="https://hexo.io/docs/syntax-highlight" target="_blank" rel="noopener">自带的高亮插件</a>，或者将 Hexo 降级到4.2版本。</p>
<p>2020年9月18日追加：</p>
<p>对于 代码块中的 <code>{  }</code> 被转义的问题，有的小伙伴说可以升级到hexo5.2 也可以解决。</p>
<h3 id="首页没有轮播"><a href="#首页没有轮播" class="headerlink" title="首页没有轮播"></a>首页没有轮播</h3><p><strong>问题描述：</strong>为什么别人首页可以轮播，有两个小箭头，你的只有一张图片没有轮播也没有箭头？</p>
<p>因为你没有在文章头部设置<code>cover</code>属性。</p>
<p><code>cover</code> 设置成 <code>true</code> ,表示该文章需要加入到首页轮播封面中。</p>
<p><code>coverImg</code>,表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片。<code>coverImg</code>就是用来设置轮播时的图片的，如果没有可以不设置，就用默认的。</p>
<p>比如我这篇文字的头部设置：</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span>
<span class="token key atrule">title</span><span class="token punctuation">:</span> Matery主题新手常见问题
<span class="token key atrule">tags</span><span class="token punctuation">:</span> Hexo
<span class="token key atrule">categories</span><span class="token punctuation">:</span> Hexo
<span class="token key atrule">summary</span><span class="token punctuation">:</span> Matery主题新手常见问题。
<span class="token key atrule">excerpt</span><span class="token punctuation">:</span> Matery主题新手常见问题
<span class="token key atrule">keywords</span><span class="token punctuation">:</span> <span class="token string">'hexo,matery,valine'</span>
<span class="token key atrule">author</span><span class="token punctuation">:</span> Small<span class="token punctuation">-</span>Rose /张小菜
<span class="token key atrule">abbrlink</span><span class="token punctuation">:</span> a53a9069
<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2020-06-30 22:00:00</span>
<span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /images/hexo/cover_1.jpg
<span class="token punctuation">---</span></code></pre>
<p>设置完成之后，记得把图片放到主题下的 <code>source/images</code> 目录,然后 <code>hexo  clean &amp; hexo g hexo s</code></p>
<h3 id="修改主题颜色"><a href="#修改主题颜色" class="headerlink" title="修改主题颜色"></a>修改主题颜色</h3><p><strong>问题描述：</strong>不喜欢默认的颜色，想换成自己怎么改？</p>
<p>在主题文件的 <code>/source/css/matery.css</code>文件中，搜索 <code>.bg-color</code>来修改背景颜色：</p>
<pre class=" language-css"><code class="language-css">
<span class="token comment" spellcheck="true">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */</span>
<span class="token selector"><span class="token class">.bg-color</span> </span><span class="token punctuation">{</span>
    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right, <span class="token hexcode">#4cbf30</span> <span class="token number">0%</span>, <span class="token hexcode">#0f9d58</span> <span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="关闭首页颜色变换"><a href="#关闭首页颜色变换" class="headerlink" title="关闭首页颜色变换"></a>关闭首页颜色变换</h3><p><strong>问题描述：</strong>不喜欢首页的颜色变换，怎么关闭？</p>
<p>在主题文件的 <code>/source/css/matery.css</code>文件中，搜索 <code>rainbow</code>来关闭颜色变换：</p>
<pre class=" language-css"><code class="language-css">
<span class="token atrule"><span class="token rule">@-webkit-keyframes</span> rainbow</span> <span class="token punctuation">{</span>
   <span class="token comment" spellcheck="true">/* 动态切换背景颜色.即滤镜颜色，不想要可以全部注释，或者换成你喜欢的颜色 */</span>
<span class="token punctuation">}</span>

<span class="token atrule"><span class="token rule">@keyframes</span> rainbow</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/* 动态切换背景颜色.，不想要可以全部注释，或者换成你喜欢的颜色 */</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="首页baner图不显示或不切换"><a href="#首页baner图不显示或不切换" class="headerlink" title="首页baner图不显示或不切换"></a>首页baner图不显示或不切换</h3><p>之前的版本有<code>BUG</code>，不过作者已经修复，如果你没有同步代码，就找到主题下的<code>/layout/_partial/</code>文件夹下的<code>bg-cover-content.ejs</code>文件，找到文件末尾，跟下面的片段片段比较一下：</p>
<pre class=" language-html"><code class="language-html">
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(theme.banner.enable)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
    <span class="token comment" spellcheck="true">//) 每天切换 banner 图.  Switch banner image every day.</span>
    <span class="token keyword">var</span> bannerUrl <span class="token operator">=</span> <span class="token string">"&lt;%- theme.jsDelivr.url %>&lt;%- url_for('/medias/banner/') %>"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.jpg'</span><span class="token punctuation">;</span>
    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.bg-cover'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-image'</span><span class="token punctuation">,</span> <span class="token string">'url('</span> <span class="token operator">+</span> bannerUrl <span class="token operator">+</span> <span class="token string">')'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">else</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.bg-cover'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-image'</span><span class="token punctuation">,</span> <span class="token string">'url(&lt;%- theme.jsDelivr.url %>&lt;%- url_for('</span><span class="token operator">/</span>medias<span class="token operator">/</span>banner<span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">.</span>jpg<span class="token string">') %>)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span></code></pre>
<h3 id="给卡片区添加背景"><a href="#给卡片区添加背景" class="headerlink" title="给卡片区添加背景"></a>给卡片区添加背景</h3><p>在主题文件的 <code>/source/css/matery.css</code>文件中，有个 <code>body</code> 选择器，加了中间两行之后长这样：</p>
<pre class=" language-css"><code class="language-css"><span class="token selector">body </span><span class="token punctuation">{</span>
 <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#eaeaea</span><span class="token punctuation">;</span>

  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span><span class="token number">60</span>deg, <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">224</span>,<span class="token number">255</span>,<span class="token number">125</span>, <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token number">5%</span>, <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">228</span>, <span class="token number">255</span>, <span class="token number">0.35</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token number">0%</span> <span class="token number">0%</span> / cover；<span class="token property">background-attachment</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#34495e</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span></code></pre>
<p>也可以加 <code>url</code> 用图片做背景：</p>
<pre class=" language-css"><code class="language-css"><span class="token selector">body </span><span class="token punctuation">{</span>
 <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#eaeaea</span><span class="token punctuation">;</span>

  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url">url('你的图片地址')</span>；
  <span class="token property">background-attachment</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#34495e</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span></code></pre>
<h3 id="添加加载动画"><a href="#添加加载动画" class="headerlink" title="添加加载动画"></a>添加加载动画</h3><p>参考：<a href="7496029d.html">Matery 添加加载动画</a></p>
<h3 id="不想显示英文怎么办"><a href="#不想显示英文怎么办" class="headerlink" title="不想显示英文怎么办"></a>不想显示英文怎么办</h3><p>(1) 把 Hexo 根目录的 <code>_config.yml</code> 文件语言 <code>language</code> 设置成 <code>zh-CN</code></p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">author</span><span class="token punctuation">:</span> <span class="token string">'Small Rose /) 张小菜苔'</span>
<span class="token key atrule">language</span><span class="token punctuation">:</span> zh<span class="token punctuation">-</span>CN
<span class="token key atrule">timezone</span><span class="token punctuation">:</span> <span class="token string">'Asia/Shanghai'</span></code></pre>
<p>(2)设置了不起作用？ </p>
<p>找到 <code>themes/matery/languages/</code>目录下的 <code>zh-CN.yml</code> 文件，里面的中英文是否对好了。我记得有些还是英文需要自己自己改下：</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">index</span><span class="token punctuation">:</span> 首页
<span class="token key atrule">posts</span><span class="token punctuation">:</span> 文章
<span class="token key atrule">category</span><span class="token punctuation">:</span> 分类
<span class="token key atrule">categories</span><span class="token punctuation">:</span> 分类
<span class="token key atrule">tag</span><span class="token punctuation">:</span> 标签
<span class="token key atrule">tags</span><span class="token punctuation">:</span> 标签
<span class="token key atrule">archives</span><span class="token punctuation">:</span> 归档
<span class="token key atrule">about</span><span class="token punctuation">:</span> 关于
<span class="token key atrule">contact</span><span class="token punctuation">:</span> 留言
<span class="token key atrule">friends</span><span class="token punctuation">:</span> 友情链接
<span class="token key atrule">navigate</span><span class="token punctuation">:</span> 导航
<span class="token key atrule">startRead</span><span class="token punctuation">:</span> 开始阅读
<span class="token key atrule">recommendedPosts</span><span class="token punctuation">:</span> 推荐文章
<span class="token key atrule">publishDate</span><span class="token punctuation">:</span> 发布日期
<span class="token key atrule">updateDate</span><span class="token punctuation">:</span> 更新日期
<span class="token key atrule">readCount</span><span class="token punctuation">:</span> 阅读次数
<span class="token key atrule">wordCount</span><span class="token punctuation">:</span> 文章字数
<span class="token key atrule">readTimes</span><span class="token punctuation">:</span> 阅读时长
<span class="token key atrule">Minutes</span><span class="token punctuation">:</span> 分
<span class="token key atrule">readMore</span><span class="token punctuation">:</span> 阅读更多
<span class="token key atrule">toc</span><span class="token punctuation">:</span> 目录
<span class="token key atrule">curr</span><span class="token punctuation">:</span> 本篇
<span class="token key atrule">prev</span><span class="token punctuation">:</span> 上一篇
<span class="token key atrule">next</span><span class="token punctuation">:</span> 下一篇
<span class="token key atrule">search</span><span class="token punctuation">:</span> 搜索
<span class="token key atrule">searchTip</span><span class="token punctuation">:</span> 请输入搜索的关键字
<span class="token key atrule">postTagTitle</span><span class="token punctuation">:</span> 文章标签
<span class="token key atrule">postCategoryTitle</span><span class="token punctuation">:</span> 文章分类
<span class="token key atrule">categoryRadarTitle</span><span class="token punctuation">:</span> 文章分类雷达图
<span class="token key atrule">categoryNumber</span><span class="token punctuation">:</span> 文章分类数量
<span class="token key atrule">categoryEmptyTip</span><span class="token punctuation">:</span> 你目前还没有对文章进行分类.
<span class="token key atrule">postCharts</span><span class="token punctuation">:</span> 文章统计图
<span class="token key atrule">postPublishChart</span><span class="token punctuation">:</span> 文章发布统计图
<span class="token key atrule">categoriesChart</span><span class="token punctuation">:</span> 文章分类统计图
<span class="token key atrule">top10TagsChart</span><span class="token punctuation">:</span> TOP10 标签统计图
<span class="token key atrule">postsNumberName</span><span class="token punctuation">:</span> 文章篇数
<span class="token key atrule">maximum</span><span class="token punctuation">:</span> 最大值
<span class="token key atrule">minimum</span><span class="token punctuation">:</span> 最小值
<span class="token key atrule">average</span><span class="token punctuation">:</span> 平均值
<span class="token key atrule">myProjects</span><span class="token punctuation">:</span> 我的项目
<span class="token key atrule">mySkills</span><span class="token punctuation">:</span> 我的技能
<span class="token key atrule">otherSkills</span><span class="token punctuation">:</span> 其他技能
<span class="token key atrule">gallery</span><span class="token punctuation">:</span> 相册
<span class="token key atrule">notag</span><span class="token punctuation">:</span> 无标签
<span class="token key atrule">from</span><span class="token punctuation">:</span> 来源
<span class="token key atrule">reprint</span><span class="token punctuation">:</span> 版权声明
<span class="token key atrule">author</span><span class="token punctuation">:</span> 文章作者
<span class="token key atrule">link</span><span class="token punctuation">:</span> 文章链接
<span class="token key atrule">use</span><span class="token punctuation">:</span> 本博客所有文章除特別声明外，均采用
<span class="token key atrule">licensed</span><span class="token punctuation">:</span> 许可协议。转载请注明来源
<span class="token key atrule">cc_by_url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//creativecommons.org/licenses/by/4.0/deed.zh
<span class="token key atrule">cc_by_name</span><span class="token punctuation">:</span> CC BY 4.0
<span class="token key atrule">cc_by_nd_url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//creativecommons.org/licenses/by<span class="token punctuation">-</span>nd/4.0/deed.zh
<span class="token key atrule">cc_by_nd_name</span><span class="token punctuation">:</span> CC BY<span class="token punctuation">-</span>ND 4.0
<span class="token key atrule">cc_by_sa_url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//creativecommons.org/licenses/by<span class="token punctuation">-</span>sa/4.0/deed.zh
<span class="token key atrule">cc_by_sa_name</span><span class="token punctuation">:</span> CC BY<span class="token punctuation">-</span>SA 4.0
<span class="token key atrule">cc_by_nc_url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//creativecommons.org/licenses/by<span class="token punctuation">-</span>nc/4.0/deed.zh
<span class="token key atrule">cc_by_nc_name</span><span class="token punctuation">:</span> CC BY<span class="token punctuation">-</span>NC 4.0
<span class="token key atrule">cc_by_nc_nd_url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//creativecommons.org/licenses/by<span class="token punctuation">-</span>nc<span class="token punctuation">-</span>nd/4.0/deed.zh
<span class="token key atrule">cc_by_nc_nd_name</span><span class="token punctuation">:</span> CC BY<span class="token punctuation">-</span>NC<span class="token punctuation">-</span>ND 4.0
<span class="token key atrule">cc_by_nc_sa_url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//creativecommons.org/licenses/by<span class="token punctuation">-</span>nc<span class="token punctuation">-</span>sa/4.0/deed.zh
<span class="token key atrule">cc_by_nc_sa_name</span><span class="token punctuation">:</span> CC BY<span class="token punctuation">-</span>NC<span class="token punctuation">-</span>SA 4.0
<span class="token key atrule">cc_0_url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//creativecommons.org/publicdomain/zero/1.0/deed.zh
<span class="token key atrule">toTheExtentPossibleUnderLaw</span><span class="token punctuation">:</span> 在法律允许的范围内，
<span class="token key atrule">hasWaivedAllCopyrightAndRelatedOrNeighboringRightsTo</span><span class="token punctuation">:</span> 已放弃此作品的所有版权、相关或相邻的权利
<span class="token key atrule">workPublishedFrom</span><span class="token punctuation">:</span> 。此作品发布在：
<span class="token key atrule">cc_0_country</span><span class="token punctuation">:</span> 中国大陆。
<span class="token key atrule">cc_0_content</span><span class="token punctuation">:</span> CN
<span class="token key atrule">noreprint</span><span class="token punctuation">:</span> 本文不允许转载。
<span class="token key atrule">paycontact</span><span class="token punctuation">:</span> 请联系作者
<span class="token key atrule">payreprint</span><span class="token punctuation">:</span> 付费转载。
<span class="token key atrule">pleaseFollowReprintPolicy</span><span class="token punctuation">:</span> 复制成功，请遵循本文的转载规则
<span class="token key atrule">checkPolicy</span><span class="token punctuation">:</span> 查看</code></pre>
<h3 id="卜算子显示数字特别大"><a href="#卜算子显示数字特别大" class="headerlink" title="卜算子显示数字特别大"></a>卜算子显示数字特别大</h3><p>本地启动后，发现 卜算子显示数字特别大，不要惊慌，<code>localhost</code> 是个比较特殊的域名，只要真正部署上去之后自然就正常了。</p>
<h3 id="想更换图标怎么办"><a href="#想更换图标怎么办" class="headerlink" title="想更换图标怎么办"></a>想更换图标怎么办</h3><p>Matery 主题使用的是 <code>font-awesome</code> 的图标库 Font Awesome Free 5.11.1。</p>
<p>如果你想简单的更换图片，找到主题目录下 <code>/source/libs/awesome/css/</code> 目录的 <code>all.css</code> 文件。 文件中从 192行到4373行都是图片相关的。</p>
<p>你只需要按照格式把 <code>fa-xxx</code>  或 <code>fa-xxx-xxx</code> 写到对应的位置就可以更换图标了。</p>
<p>如果你想在文章中使用图标，可以写个标签</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fas fa-home<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span></code></pre>
<p>效果大概是这样：</p>
<p><i  class="fas fa-home" ></i></p>
<p>可以先去 <a href="http://www.fontawesome.com.cn" target="_blank" rel="noopener">fontawesome 官网</a> 找，找好之后 F12  ，找到元素之后看看<code>&lt;i&gt;</code>标签的 <code>class</code> 的值是 <code>fa-xxx-xx</code> 的话再到 all.css 文件里搜一下，不过这也无法保证完全一样，因为版本不一致有的时候名字不一定一致。 多试试吧。</p>
<h3 id="想添加特效"><a href="#想添加特效" class="headerlink" title="想添加特效"></a>想添加特效</h3><p>有些同学比较喜欢特效，参考大佬写的修改方法：<br><a href="https://yafine-blog.cn/posts/12b4.html" target="_blank" rel="noopener">Matery 主题个性化修改</a></p>
<h3 id="修改主题相册"><a href="#修改主题相册" class="headerlink" title="修改主题相册"></a>修改主题相册</h3><p>有些同学比较喜欢独立相册，Matery 相册在个人里面。如果你想改成独立相册，参考大佬写的修改方法：<br><a href="https://yafine-blog.cn/posts/3b98.html" target="_blank" rel="noopener">修改 matery 原有主题相册</a></p>
<h3 id="想添加导航页"><a href="#想添加导航页" class="headerlink" title="想添加导航页"></a>想添加导航页</h3><p>参考大佬的：<a href="https://yafine-blog.cn/posts/e925.html" target="_blank" rel="noopener">Hexo添加导航页</a></p>
<h3 id="想更换字体怎么办"><a href="#想更换字体怎么办" class="headerlink" title="想更换字体怎么办"></a>想更换字体怎么办</h3><p>(1)  选个自己喜欢的字体下载，一般是<code>.ttf</code>格式的。</p>
<p>常见的开源字体有：</p>
<p>思源黑体 、 文泉驿 、 文鼎开放字体 、 柳体 、 cwTeX中文字体 、 濑户字体、江西拙楷体等。</p>
<p>免费可商用的中文字体整理：</p>
<p><strong>免责声明：</strong></p>
<p>
<font color="red">以下表格内容收集整理来自网络， 不保证实时性， 使用时建议查清字体使用相关授权说明。本站对读者使用不作任何建议。</font>
</p>

<table>
<thead>
<tr>
<th>字体</th>
<th>授权或下载</th>
</tr>
</thead>
<tbody><tr>
<td>思源系列</td>
<td>思源黑体、思源宋体。<a href="https://www.google.com/get/noto/" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>思源系列</td>
<td>思源柔黑体。<a href="http://jikasei.me/font/genjyuu/" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>思源系列</td>
<td>思源真黑体。<a href="http://jikasei.me/font/genshin/" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>明朝系列</td>
<td>App Mincho明源。<a href="www.flopdesign.com/blog/font/5852/">授权出处,点我查看</a></td>
</tr>
<tr>
<td>明朝系列</td>
<td>花园字体。<a href="http://fonts.jp/hanazono/" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>明朝系列</td>
<td>Oradano-Mincho明朝。<a href="http://www.asahi-net.or.jp/~sd5a-ucd/freefonts/Oradano-Mincho/" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>明朝系列</td>
<td>装甲明朝。<a href="www.flopdesign.com/blog/font/5228/">授权出处,点我查看</a></td>
</tr>
<tr>
<td>明朝系列</td>
<td>源界明朝。<a href="www.flopdesign.com/blog/font/5146/">授权出处,点我查看</a></td>
</tr>
<tr>
<td>明朝系列</td>
<td>源明朝。<a href="www.flopdesign.com/blog/font/7163/">授权出处,点我查看</a></td>
</tr>
<tr>
<td>方正系列</td>
<td>方正黑体、方正书宋、方正仿宋、方正楷体。<br><a href="http://www.foundertype.com/index.php/About/bookAuth/key/my_sysq.html" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>明体系列</td>
<td>源样黑体、源流明体、源石黑体、源样明体、源云明体、源泉圆体。 <br><a href="https://github.com/ButTaiwan?tab=stars" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>中文系列</td>
<td>M Plus。<a href="http://mplus-fonts.osdn.jp/about.html" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>中文系列</td>
<td>锐字真言体。<a href="http://reeji.com/font/rui_zi_zhen_yan_ti/" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>中文系列</td>
<td>可以商用，但不能在非Apple硬件上使用，否则就是侵权。<br>苹果官方说明链接 <a href="https://discussions.apple.com/thread/7493969" target="_blank" rel="noopener">https://discussions.apple.com/thread/7493969</a></td>
</tr>
<tr>
<td>中文系列</td>
<td>联盟起艺卢帅正锐黑体。<a href="https://www.zcool.com.cn/work/ZMzUxMzUzNzY=.html" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>中文系列</td>
<td>Droid Sans Fallback。<a href="https://code.google.com/archive/p/droid-sans-mono-py/" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>中文系列</td>
<td>庞门正道标题体。<a href="https://mp.weixin.qq.com/s/BGXeAXrEo6CM5-gtdQOuYA" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>中文系列</td>
<td>庞门正道粗书体。<a href="https://mp.weixin.qq.com/s/LZ_PMNc-3uX-Atmri4OLGQ" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>中文系列</td>
<td>问藏书房品牌字体。<a href="http://www.wencang.com/font.jsp" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>中文系列</td>
<td>廻想体。<a href="https://moji-waku.com/kaiso/" target="_blank" rel="noopener">https://moji-waku.com/kaiso/</a>)</td>
</tr>
<tr>
<td>中文系列</td>
<td>電字遊戯。<a href="https://moji-waku.com/denjiyugi/" target="_blank" rel="noopener">https://moji-waku.com/denjiyugi/</a>)</td>
</tr>
<tr>
<td>中文系列</td>
<td>Mogiha用钢笔写的字体。<a href="http://ahito.com/item/desktop/font/mogihaPen/#kiyaku" target="_blank" rel="noopener">http://ahito.com/item/desktop/font/mogihaPen/#kiyaku</a></td>
</tr>
<tr>
<td>中文系列</td>
<td>KH像素字体系列。<a href="http://jikasei.me/font/kh-dotfont/" target="_blank" rel="noopener">http://jikasei.me/font/kh-dotfont/</a>)</td>
</tr>
<tr>
<td>站酷系列</td>
<td>站酷酷黑、站酷快乐体、站酷高端黑、庆科黄油体、站酷小薇LOGO体、站酷文艺体。<a href="https://www.zcool.com.cn/special/zcoolfonts/" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>日式系列</td>
<td>TanukiMagic 麥克筆手繪 POP。<a href="https://tanukifont.com/tanuki-permanent-marker" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>日式系列</td>
<td>ラノベPOP 。<a href="http://www.fontna.com/blog/1706/" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>日式系列</td>
<td>怖い明朝体。<a href="http://www.fontna.com/blog/1371/" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>日式系列</td>
<td>暗黑恐字体。<a href="www.ankokukoubou.com/font/ankokuzonji.htm">授权出处,点我查看</a></td>
</tr>
<tr>
<td>日式系列</td>
<td>幻ノにじみ明朝。<a href="http://www.fontna.com/blog/1912/" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>日式系列</td>
<td>Rings Of Saturn。<a href="https://flopdesign.booth.pm/items/605389" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>日式系列</td>
<td>Smartfont。<a href="https://flopdesign.com/freefont/smartfont.html" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>日式系列</td>
<td>KanjyukuGothic。<a href="www.flopdesign.com/freefont/kanjyukugothic-freefont.html">授权出处,点我查看</a></td>
</tr>
<tr>
<td>日式系列</td>
<td>Shirokuma。<a href="https://lazypolarbear.com/entry/font-shirokuma" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>日式系列</td>
<td>超極細ゴシック体。<a href="https://font.websozai.jp/line-font-mihon.html" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>日式系列</td>
<td>平成最後。<a href="https://flopdesign.com/blog/photo/7499/" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>日式系列</td>
<td>コーポレート・ロゴ（ラウンド）。<a href="https://moji-waku.com/ronde/" target="_blank" rel="noopener">https://moji-waku.com/ronde/</a>)</td>
</tr>
<tr>
<td>日式系列</td>
<td>トガリテ。<a href="https://moji-waku.com/pigmo/" target="_blank" rel="noopener">https://moji-waku.com/pigmo/</a>)</td>
</tr>
<tr>
<td>日式系列</td>
<td>マメロン。<a href="https://moji-waku.com/mamelon/" target="_blank" rel="noopener">https://moji-waku.com/mamelon/</a>)</td>
</tr>
<tr>
<td>日式系列</td>
<td>マキナス 4 シリーズ。<a href="https://moji-waku.com/makinas/" target="_blank" rel="noopener">https://moji-waku.com/makinas/</a>)</td>
</tr>
<tr>
<td>日式系列</td>
<td>ピグモ。<a href="https://moji-waku.com/pigmo01/" target="_blank" rel="noopener">https://moji-waku.com/pigmo01/</a>)</td>
</tr>
<tr>
<td>日式系列</td>
<td>Karakaze。<a href="https://enuoka.booth.pm/items/1219316" target="_blank" rel="noopener">https://enuoka.booth.pm/items/1219316</a></td>
</tr>
<tr>
<td>851系列</td>
<td>851手写杂体。<a href="https://pm85122.onamae.jp/851fontpage.html" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>851系列</td>
<td>851 mkpop。<a href="https://pm85122.onamae.jp/851mkpop.html" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>851系列</td>
<td>851 letrogopage。<a href="https://pm85122.onamae.jp/851letrogopage.html" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>851系列</td>
<td>851 テガキカクット。<a href="https://pm85122.onamae.jp/851H_kktt.html" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>851系列</td>
<td>851 Chikuru Yoku。<a href="https://pm85122.onamae.jp/851ch-dz.html" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>851系列</td>
<td>851 チカラヨワク。<a href="https://pm85122.onamae.jp/851ch-yw.html" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>851系列</td>
<td>851 ゴチカクット。<a href="https://pm85122.onamae.jp/851Gkktt.html" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>手写系列</td>
<td>濑户字体。<a href="https://www.justfont.com/fontdetail/147" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>手写系列</td>
<td>沐瑶软笔手写体。<a href="https://www.zcool.com.cn/work/ZMjg5MjAwMDQ=.html" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>手写系列</td>
<td>杨任东竹石体。<a href="https://mp.weixin.qq.com/s/7kv3i_YEs7x9_9IrCDYvBA" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>手写系列</td>
<td>包图小白体。<a href="https://act.ibaotu.com/activity/1.html" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>手写系列</td>
<td>手写体。<a href="www.zhihu.com/question/19889152/answer/245685101">授权出处,点我查看</a></td>
</tr>
<tr>
<td>手写系列</td>
<td>贤二体。<a href="https://www.zcool.com.cn/article/ZNjk4NDM2.html" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>手写系列</td>
<td>清松手寫體。<a href="https://www.facebook.com/groups/549661292148791/" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>手写系列</td>
<td>台北黑体。<a href="https://sites.google.com/view/jtfoundry/" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>刻石錄系列</td>
<td>刻石錄顏體、刻石錄鋼筆鶴體、刻石錄明體<br/><a href="http://founder.acgvlyric.org/iu/doku.php/%E8%A8%98%E4%BA%8B:%E6%9C%AC%E9%8C%84%E6%96%87%E7%AB%A0%E7%B8%BD%E8%A6%BD" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>台湾教育部系列</td>
<td>台湾教育部标准楷书<br/><a href="https://depart.moe.edu.tw/ED2400/News_Content.aspx?n=8940E5C0456177C3&sms=893AAA1CBFE149DE&s=DFBE7BE3EE0DB6AE" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>台湾教育部系列</td>
<td>台湾教育部标准宋体<br/><a href="https://depart.moe.edu.tw/ED2400/News_Content.aspx?n=8940E5C0456177C3&sms=893AAA1CBFE149DE&s=161DEBC9EACEA333" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>台湾教育部系列</td>
<td>台湾教育部国字隶书<br/><a href="https://depart.moe.edu.tw/ED2400/News_Content.aspx?n=8940E5C0456177C3&sms=893AAA1CBFE149DE&s=AA29AF7FE3BAD13F" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>台湾教育部系列</td>
<td>全字库正宋體、全字库正楷體<br/><a href="http://data.gov.tw/node/5961" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>王汉宗系列</td>
<td>免费字体：细明、超明、细黑、特黑、颜体、酷俪海报、正海报、钢笔行楷、超黑俏皮动物、中明注音体、中明破音字、中楷注音体、中楷破音字、中魏碑简体、细新宋简体<br/><a href="https://zh.wikipedia.org/wiki/%E7%8E%8B%E6%BC%A2%E5%AE%97%E8%87%AA%E7%94%B1%E5%AD%97%E5%9E%8B" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>文泉驿系列</td>
<td>文泉驿正黑体、文泉驿微米黑、文泉驿点阵宋体（此宋体无Win版本…）<br/><a href="https://wenq.org/wqy2/index.cgi?FontGuide" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>阿里系列</td>
<td>阿里巴巴普惠体。<a href="https://ics.alibaba.com/project/Hn8mXx" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>阿里系列</td>
<td>阿里汉仪智能黑体（仅阿里平台免费商用）。<a href="https://mp.weixin.qq.com/s/Y_c_0COqWnUo90G3QJ2ojA" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>45款华康字体</td>
<td>（仅阿里平台免费商用）华康布丁体、华康彩带体 、华康儿风体、华康方圆体、华康钢笔体、华康海报体、华康手札体、华康手札体、华康翩翩体、华康黑体 、华康金文体、华康楷体、华康勘亭流、华康俪金黑、华康隶书体、华康龙门石碑、华康墨字体、华康POP1体、华康POP2体、华康POP3体、华康少女文字、华康饰艺体、华康瘦金体、华康标题宋、华康宋体、华康唐风隶、华康娃娃体、华康魏碑、华康正颜楷体、华康雅宋体、华康雅艺体、华康圆体、华康新综艺体<br/><a href="https://helpcenter.tmall.com/learn/knowledge?spm=a225r.8199751.0.0.759e443dtXIoLr&id=24179433&xttkn=00ecadba403ca9a7" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>汉仪系列</td>
<td>18款汉仪字体（仅京东平台免费使用）<br/>汉仪中黑(简/繁)、汉仪细简黑(简)、汉仪中简黑(简)、汉仪楷体(简/繁)、汉仪书宋一(简)、汉仪书宋二(繁)、汉仪粗仿宋(简)、汉仪水滴体(简/繁)、汉仪珍珠隶(简/繁)<br/><a href="http://fw.jd.com/449421.html" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>白舟書体四季词</td>
<td>这款字体共28款，分春夏秋冬四季，很漂亮。但只能在用于节日庆祝的创作上。想免费商用的需要发邮件联系<br/><a href="www.hakusyu.com/download_shiki_spring.htm">授权出处,点我查看</a></td>
</tr>
<tr>
<td>其他</td>
<td>寒蝉手拙体。 <a href="https://www.zcool.com.cn/work/ZMzAzODE0MTI=.html" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>其他</td>
<td>卓健橄榄简体。<a href="https://www.zcool.com.cn/work/ZNDA2MzA3ODQ=.html" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>其他</td>
<td>康康体。<a href="http://www.sucaijishi.com/font-37-792-1.html" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>其他</td>
<td>令东齐汲体。<a href="https://github.com/LingDong-/qiji-font" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>其他</td>
<td>阿朱泡泡字。<a href="https://www.zcool.com.cn/work/ZNDA2MzkyNTY=.html" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>其他</td>
<td>马善政毛笔楷书。<a href="https://fonts.google.com/specimen/Ma+Shan+Zheng" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>其他</td>
<td>小杉。<a href="https://fonts.google.com/specimen/Kosugi%20Maru?selection.family=Kosugi%20Maru" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>其他</td>
<td>钟齐志莽行书。<a href="https://fonts.google.com/specimen/Zhi+Mang+Xing" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>其他</td>
<td>钟齐流江毛草。<a href="https://fonts.google.com/specimen/Liu+Jian+Mao+Cao" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>其他</td>
<td>英椎楷書。<a href="https://www.ac-font.com/jp/detail_jb_007.php" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>其他</td>
<td>英椎行書。<a href="https://www.ac-font.com/jp/detail_jb_006.php" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>其他</td>
<td>衡山毛筆フォント。<a href="https://www.ac-font.com/jp/detail_jb_002.php" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>其他</td>
<td>青柳疎石フォント。<a href="https://www.ac-font.com/jp/detail_jb_001.php" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>其他</td>
<td>青柳衡山フォントT。<a href="https://www.ac-font.com/jp/detail_jb_003.php" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>其他</td>
<td>衡山毛筆フォント草書。<a href="https://www.ac-font.com/jp/detail_jb_005.php" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>其他</td>
<td>中文像素字体。<a href="https://purestudio.itch.io/ipix" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>其他</td>
<td>香港民間字集。<a href="https://github.com/hfhchan/hkcs/blob/master/LICENSE.txt" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>其他</td>
<td>有爱魔兽黑体。<a href="https://github.com/nowar-fonts/Nowar-Sans/blob/wow/LICENSE.txt" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>其他</td>
<td>有爱魔兽锐方。<a href="https://github.com/nowar-fonts/Nowar-CnC/blob/master/LICENSE.txt" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>其他</td>
<td>有爱魔兽圆体。<a href="https://github.com/nowar-fonts/Nowar-Rounded/blob/master/LICENSE.txt" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>其他</td>
<td>有爱圆体。<a href="https://github.com/nowar-fonts/Nowar-Rounded/blob/master/LICENSE.txt" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>其他</td>
<td>自由香港楷書。<a href="https://freehkfonts.opensource.hk/download/" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>其他</td>
<td>jf open 粉圓字型。<a href="https://justfont.com/huninn/" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
<tr>
<td>其他</td>
<td>思源屏显臻宋.<a href="https://bbs.themex.net/showthread.php?t=16906226" target="_blank" rel="noopener">授权出处,点我查看</a></td>
</tr>
</tbody></table>
<p>(2) 将字体放到你博客的相关目录，理论上哪里都可以，但是要注意引入路径。</p>
<p>比如我偷偷将<a href="https://cxj660.gitee.io/" target="_blank" rel="noopener">崔建博客</a>的<code>hl.ttf</code>字体 （ 江西拙楷体 ） 扒过来了（嘿嘿~ 千万不要告诉他）<br>我放在工作目录下的 <code>/source/box/font/</code> 文件夹内，即文件路径为 <code>/source/box/font/hl.ttf</code> ，如果你要用多种字体可以在<code>font</code>目录统一存放。</p>
<p>(3)  添加引入和使用</p>
<p>找到主题文件夹下的 <code>my.css</code> 文件，路径为 <code>/themes/matery/source/css/my.css</code> ，在文件末尾添加下面的代码</p>
<pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@font-face</span></span><span class="token punctuation">{</span>
    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'hl'</span><span class="token punctuation">;</span>
    <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url">url('../box/font/hl.ttf')</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">/** 表示全局使用，如果不想全局使用不要添加该段 */</span>
<span class="token selector">body</span><span class="token punctuation">{</span>
    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'hl'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token comment" spellcheck="true">/* 可以局部使用，建议添加 */</span>
<span class="token selector"><span class="token class">.diyFont</span></span><span class="token punctuation">{</span>
    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'hl'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>在你想要使用的元素的 <code>class</code>  里面加上 <code>diyFont</code> 即可。</p>
<ul>
<li><p>直接使用</p>
<p>F12，找到对应的代码片段即可：</p>
</li>
</ul>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logo-span diyFont<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>张小菜苔<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre>
<ul>
<li><p>模板使用</p>
<p>找到对应的模板 <code>header.ejs</code>中的代码片段使用即可：</p>
</li>
</ul>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logo-span diyFont<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&lt;%= config.title %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre>
<br/>


<h3 id="如果有其他问题欢迎留言或邮件提问"><a href="#如果有其他问题欢迎留言或邮件提问" class="headerlink" title="如果有其他问题欢迎留言或邮件提问"></a>如果有其他问题欢迎留言或邮件提问</h3><p>QQ:970175021<br>Email:<a href="mailto:small-rose@qq.com">small-rose@qq.com</a></p>
<br/>

<p><strong>相关文章</strong></p>
<ul>
<li><a href="9f117b.html">Hexo搭建静态博客（一）——基础搭建</a></li>
<li><a href="c1358fc8.html">Hexo搭建静态博客（二）——创建页面</a></li>
<li><a href="a5bf7e18.html">Hexo搭建静态博客（三）——主题更换</a></li>
<li><a href="cda13ebe.html">Hexo搭建静态博客（四）——插件安装</a></li>
<li><a href="ce4a93ff.html">Hexo搭建静态博客（五）——踩坑问题</a></li>
<li><a href="c68d7a69.html">Hexo搭建静态博客（六）——项目部署</a></li>
<li><a href="1c633c7e.html">Hexo搭建静态博客（七）——客服与推送</a></li>
<li><a href="caf66d5e.html">Hexo添加Live2D二次元老婆</a></li>
<li><a href="358175a6.html">Hexo博客Valine-Admin踩坑记录</a></li>
<li><a href="40099453.html">Hexo博客Matery主题valine升级与优化</a></li>
<li><a href="a53a9069.html">Hexo博客Matery主题新手常见问题</a></li>
<li><a href="5a99eb4d.html">Hexo博客Matery主题添加多级分类</a></li>
<li><a href="5a2c12e2.html">Hexo博客添加思维导图渲染</a></li>
</ul>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Matery 主题添加多级分类</title>
    <url>/posts/5a99eb4d.html</url>
    <content><![CDATA[<h2 id="Hexo-Matery-主题添加多级分类"><a href="#Hexo-Matery-主题添加多级分类" class="headerlink" title="Hexo Matery 主题添加多级分类"></a>Hexo Matery 主题添加多级分类</h2><blockquote>
<p>有同学提出 Matery 主题的 标签 和 分类 的展示太相似，可以说基本上是一样的。于是有了本文，尝试改成多级分类的。 假如要自己从零开始学习又不太现实， 所以就借鉴移植了 Fluid 主题的多级分类功能。为了给也想折腾的人，特此记录修改过程。</p>
</blockquote>
<h2 id="多级分类添加流程"><a href="#多级分类添加流程" class="headerlink" title="多级分类添加流程"></a>多级分类添加流程</h2><p>Matery 主题是卡片式结构，为了保持原来的整体结构，新建多级分类的模块。</p>
<h3 id="1、新建-category-list-ejs"><a href="#1、新建-category-list-ejs" class="headerlink" title="1、新建 category-list.ejs"></a>1、新建 category-list.ejs</h3><p>在主题目录 <code>/layout/_widget/</code>目录下新建 <code>category-list.ejs</code> 文件。 内容如下：</p>
<pre><code>
&lt;% var orderBy =  &#39;name&#39; ;  %&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.staticfile.org/twitter-bootstrap/4.4.1/css/bootstrap.min.css&quot;&gt;
&lt;script src=&quot;https://cdn.staticfile.org/twitter-bootstrap/4.4.1/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;
&lt;style&gt;
.category:not(:last-child) {
  margin-bottom: 1rem;
}
.category-item {
  font-size: 1.25rem;
  font-weight: bold;
  display: flex;
  align-items: center;
}
.category-subitem {
  font-size: 1rem;
  font-weight: bold;
}
.category-collapse {
  margin-left: 1.25rem;
  width: 100%;
}
.category-count {
  font-size: 0.9rem;
  font-weight: initial;
  min-width: 1.3em;
  line-height: 1.3em;
  display: flex;
  align-items: center;
}
.category-count i {
  padding-right: 0.25rem;
}
.category-count span {
  width: 2rem;
}
.category-item-action:not(.collapsed) &gt; i {
  transform: rotate(90deg);
  transform-origin: center center;
}
.category-item-action i {
  transition: transform 0.3s ease-out;
  display: inline-block;
  margin-left: 0.25rem;
}
.category-item-action:hover {
  z-index: 1;
  color: #38ACDF;
  text-decoration: none;
  background-color: #F8F9FA;
}
.category .row {
  margin-left: 0;
  margin-right: 0;
}


.list-group-item:first-child {
    border-top-left-radius: .25rem;
    border-top-right-radius: .25rem;
}

.category-item {
    font-size: 1.25rem;
    font-weight: 700;
    display: flex;
    align-items: center;
}
.list-group-item {
    background-color: transparent;
    border: 0;
}
.list-group-item {
    position: relative;
    display: block;
    padding: .75rem 1.25rem;
    background-color: #fff;
    /* border: 1px solid rgba(0,0,0,.125); */
}

#card-list-zzy .list-group-item:hover {
    color: #38ACDF;
    background-color: #F8F9FA;
    /*  border: 1px solid rgba(0,0,0,.125); */
}

.category-item-action i {
    transition: transform .3s ease-out;
    display: inline-block;
    margin-left: .25rem;
}

card-categories-list-spcail &gt; div:hover{

    color:#38ACDF;
    background-color: #F8F9FA;
}

.fa {
    font-size: 1rem;
    line-height: 1;
}
.category-count {
    font-size: .9rem;
    font-weight: initial;
    min-width: 1.3em;
    line-height: 1.3em;
    display: flex;
    align-items: center;
}

.collapse:not(.show) {
    display: none;
}



.collapsing {
  position: relative;
  height: 0;
  overflow: hidden;
  @include transition($transition-collapse);

}
#card-list-zzy{
    position: relative;
    /* margin-top: -2rem; */
    transition: background-color .2s ease-in-out;
    border-radius: .5rem;
    z-index: 3;
}

&lt;/style&gt;


  &lt;% function render_categories(cats, depth) { %&gt;
  &lt;% depth = depth || 0 %&gt;
  &lt;% return cats.each(function(cat){ %&gt;
    &lt;% var subCats = site.categories.find({parent: cat._id}).sort(orderBy).filter(cat =&gt; cat.length) %&gt;
    &lt;% var collapsed = subCats.length === 0 %&gt;
    &lt;div class=&quot;&lt;%= depth &lt;= 0 ? &#39;category&#39; : &#39;category-sub&#39; %&gt; row&quot;&gt;
      &lt;a
        class=&quot;&lt;%= depth &lt;= 0 ? &#39;category-item&#39; : &#39;category-subitem&#39; %&gt; &lt;%= collapsed ? &#39;collapsed&#39; : &#39;&#39; %&gt; list-group-item category-item-action col-10 col-md-11&quot;
        id=&quot;heading-&lt;%= cat._id %&gt;&quot; role=&quot;tab&quot; data-toggle=&quot;collapse&quot;   data-target=&quot;#collapse-&lt;%= cat._id %&gt;&quot;
        aria-expanded=&quot;&lt;%= collapsed ? &#39;false&#39; : &#39;true&#39; %&gt;&quot;
      &gt;
        &lt;%= cat.name %&gt;
        &lt;i class=&quot;fas fa-chevron-right&quot;&gt;&lt;/i&gt;
      &lt;/a&gt;
      &lt;a href=&quot;&lt;%= url_for(cat.path) %&gt;&quot; class=&quot;category-count col-2 col-md-1&quot;&gt;
        &lt;i class=&quot;fa fa-list&quot;&gt;&lt;/i&gt;
        &lt;span&gt;&lt;%= cat.posts.length %&gt;&lt;/span&gt;
      &lt;/a&gt;
      &lt;div class=&quot;category-collapse&quot;&gt;
        &lt;% if (subCats.length &gt; 0) { %&gt;
          &lt;%- render_sub_categories(subCats, cat, depth + 1) %&gt;
        &lt;% } else { %&gt;
          &lt;%- render_posts(cat) %&gt;
        &lt;% } %&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;% }) %&gt;
&lt;% } %&gt;

&lt;% function render_sub_categories(cats, parent, depth) { %&gt;
  &lt;div id=&quot;collapse-&lt;%= parent._id %&gt;&quot; class=&quot; collapse in show&quot; role=&quot;tabpanel&quot;
       aria-labelledby=&quot;heading-&lt;%= parent._id %&gt;&quot;&gt;
    &lt;%- render_categories(cats, depth) %&gt;
  &lt;/div&gt;
&lt;% } %&gt;

&lt;% function render_posts(cat) { %&gt;
  &lt;div id=&quot;collapse-&lt;%= cat._id %&gt;&quot; class=&quot;collapse in&quot; role=&quot;tabpanel&quot;
       aria-labelledby=&quot;heading-&lt;%= cat._id %&gt;&quot;&gt;
    &lt;% var limit = 100 ; %&gt;
    &lt;% var posts = cat.posts.sort(config.index_generator.order_by || &#39;-date&#39;) %&gt;
    &lt;% for (var idx = 0; idx &lt; posts.length; idx++) { %&gt;
      &lt;% var post = posts.data[idx] %&gt;
      &lt;% if (idx &amp;&amp; limit &amp;&amp; idx &gt;= limit) { %&gt;
        &lt;a href=&quot;&lt;%- url_for(cat.path) %&gt;&quot; class=&quot;list-group-item list-group-item-action&quot;&gt;
          &lt;span class=&quot;category-post&quot;&gt;More...&lt;/span&gt;
        &lt;/a&gt;
        &lt;% break %&gt;
      &lt;% } else { %&gt;
        &lt;a href=&quot;&lt;%- url_for(post.path) %&gt;&quot; class=&quot;list-group-item list-group-item-action&quot;&gt;
          &lt;span class=&quot;category-post&quot;&gt;&lt;%= post.title %&gt;&lt;/span&gt;
        &lt;/a&gt;
      &lt;% } %&gt;
    &lt;% } %&gt;
  &lt;/div&gt;
&lt;% } %&gt;


&lt;div class=&quot;container&quot; data-aos=&quot;fade-up&quot;&gt;
    &lt;div class=&quot;card  card-categories-list-spcail&quot;&gt;
        &lt;div class=&quot;card-content col-12 col-md-10 m-auto &quot;&gt;
            &lt;div  id=&quot;card-list-zzy&quot; class=&quot;&quot;&gt;
                &lt;div class=&quot;category-list&quot;&gt;
                  &lt;% cats = site.categories.find({parent: {$exists: false}}).sort(orderBy).filter(cat =&gt; cat.length) %&gt;
                  &lt;%- render_categories(cats) %&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre><h3 id="2、引入-category-list-ejs"><a href="#2、引入-category-list-ejs" class="headerlink" title="2、引入 category-list.ejs"></a>2、引入 category-list.ejs</h3><p>找到主题目录下 <code>/layout/categories.ejs</code> , 添加以下代码：</p>
<pre class=" language-ejs"><code class="language-ejs"><%- partial('_widget/category-list') %></code></pre>
<p>加了之后，大概是这样子：</p>
<pre><code>&lt;%- partial(&#39;_partial/bg-cover&#39;) %&gt;

&lt;main class=&quot;content&quot;&gt;

    &lt;%- partial(&#39;_widget/category-cloud&#39;) %&gt;

    &lt;% if (site.categories &amp;&amp; site.categories.length &gt; 0) { %&gt;
    &lt;%- partial(&#39;_widget/category-radar&#39;) %&gt;
    &lt;% } %&gt;

    &lt;%- partial(&#39;_widget/category-list&#39;) %&gt;
&lt;/main&gt;</code></pre><h3 id="3、使用"><a href="#3、使用" class="headerlink" title="3、使用"></a>3、使用</h3><p>在文章的头部写 <code>categories</code> 多级的写法：</p>
<pre><code>categories:
  - 收藏资源
  - 工具网站</code></pre><p>显示分级则依次从上到下。</p>
<p>最后启动看效果吧~</p>
<pre class=" language-bash"><code class="language-bash">hexo clean
hexo g
hexo s</code></pre>
<p>好吧，如果你不是歌追求完美的人，现在其实已经可以使用了。</p>
<p>咳~ 咳~ 该说正事了</p>
<p>接下来跟我的提示去瞧瞧，看看你这个页面的 baner 上的子标题，是不是有像右点跑偏的一点， 再看看这个页面的 footer 是不是没有原来规整了？</p>
<p>其实是因为这个页面引入了  <code>bootstrap.min.css</code> 造成了。</p>
<p>因为 <code>Materialize</code> 和 <code>bootstrap</code> 存在冲突。</p>
<h3 id="4、重头再来"><a href="#4、重头再来" class="headerlink" title="4、重头再来"></a>4、重头再来</h3><p>经过六个小时的摸索， 查看 <code>Materialize</code> 的官网用法，搞个 <code>Demo</code> ， 然后把刚才上面的代码重新修改调试, 达到了几本可以用， 且不再冲突，因为用的是 <code>Materialize</code> 的样式，好吧~ 不知不觉，又折腾了一遍 <code>bootstrap</code>  和  <code>Materialize</code> 。</p>
<p>新的 <code>category-list.ejs</code> 长这样：</p>
<pre class=" language-html"><code class="language-html">&lt;% var orderBy =  'name' ;  %>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">

<span class="token comment" spellcheck="true">/*
.category:not(:last-child) {
  margin-bottom: 1rem;
}
*/</span>
<span class="token selector"><span class="token class">.category-item</span> </span><span class="token punctuation">{</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">1.25</span>rem<span class="token punctuation">;</span>
  <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.category-subitem</span> </span><span class="token punctuation">{</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">1</span>rem<span class="token punctuation">;</span>
  <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.category-collapse</span> </span><span class="token punctuation">{</span>
  <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">1.25</span>rem<span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.category-count</span> </span><span class="token punctuation">{</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">0.9</span>rem<span class="token punctuation">;</span>
  <span class="token property">font-weight</span><span class="token punctuation">:</span> initial<span class="token punctuation">;</span>
  <span class="token property">min-width</span><span class="token punctuation">:</span> <span class="token number">1.3</span>em<span class="token punctuation">;</span>
  <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">1.3</span>em<span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.category-count</span> i </span><span class="token punctuation">{</span>
  <span class="token property">padding-right</span><span class="token punctuation">:</span> <span class="token number">0.25</span>rem<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.category-count</span> span </span><span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">2</span>rem<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.category-item-action</span><span class="token pseudo-class">:not(.collapsed)</span> > i </span><span class="token punctuation">{</span>
  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">90</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">transform-origin</span><span class="token punctuation">:</span> center center<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.category-item-action</span> i </span><span class="token punctuation">{</span>
  <span class="token property">transition</span><span class="token punctuation">:</span> transform <span class="token number">0.3</span>s ease-out<span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>
  <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">0.25</span>rem<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.category-item-action</span><span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>
  <span class="token property">z-index</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#38ACDF</span><span class="token punctuation">;</span>
  <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#F8F9FA</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>



<span class="token selector"><span class="token class">.list-group-item</span><span class="token pseudo-class">:first-child</span> </span><span class="token punctuation">{</span>
    <span class="token property">border-top-left-radius</span><span class="token punctuation">:</span> <span class="token number">.25</span>rem<span class="token punctuation">;</span>
    <span class="token property">border-top-right-radius</span><span class="token punctuation">:</span> <span class="token number">.25</span>rem<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector"><span class="token class">.category-item</span> </span><span class="token punctuation">{</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">1.25</span>rem<span class="token punctuation">;</span>
    <span class="token property">font-weight</span><span class="token punctuation">:</span> <span class="token number">700</span><span class="token punctuation">;</span>
    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
    <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.list-group-item</span> </span><span class="token punctuation">{</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>
    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.list-group-item</span> </span><span class="token punctuation">{</span>
    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>
    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">.75</span>rem <span class="token number">1.25</span>rem<span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/* border: 1px solid rgba(0,0,0,.125); */</span>
<span class="token punctuation">}</span>

<span class="token selector"><span class="token id">#card-list-zzy</span> <span class="token class">.list-group-item</span><span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#38ACDF</span><span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#F8F9FA</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/*  border: 1px solid rgba(0,0,0,.125); */</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">/*
.category-item-action i {
    transition: transform .3s ease-out;
    display: inline-block;
    margin-left: .25rem;
}
*/</span>

<span class="token selector">card-categories-list-spcail > div<span class="token pseudo-class">:hover</span></span><span class="token punctuation">{</span>

  <span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#38ACDF</span><span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#F8F9FA</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector"><span class="token class">.fa</span> </span><span class="token punctuation">{</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">1</span>rem<span class="token punctuation">;</span>
    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.category-count</span> </span><span class="token punctuation">{</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">.9</span>rem<span class="token punctuation">;</span>
    <span class="token property">font-weight</span><span class="token punctuation">:</span> initial<span class="token punctuation">;</span>
    <span class="token property">min-width</span><span class="token punctuation">:</span> <span class="token number">1.3</span>em<span class="token punctuation">;</span>
    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">1.3</span>em<span class="token punctuation">;</span>
    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
    <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token selector"><span class="token class">.category-content</span></span><span class="token punctuation">{</span>
   <span class="token property">border-left</span><span class="token punctuation">:</span><span class="token number">0</span>px<span class="token punctuation">;</span>
   <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">.75</span>rem <span class="token number">1.25</span>rem<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector"><span class="token class">.category-content</span> a</span><span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector"><span class="token class">.category-content</span> a<span class="token pseudo-class">:hover</span></span><span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#38ACDF</span><span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#F8F9FA</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.category-row</span> </span><span class="token punctuation">{</span>

  <span class="token property">border-color</span><span class="token punctuation">:</span> <span class="token hexcode">#F8F9FA</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
  <span class="token property">border-bottom</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector"><span class="token id">#card-list-zzy</span></span><span class="token punctuation">{</span>
    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/* margin-top: -2rem; */</span>
    <span class="token property">transition</span><span class="token punctuation">:</span> background-color <span class="token number">.2</span>s ease-in-out<span class="token punctuation">;</span>
    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">.5</span>rem<span class="token punctuation">;</span>
    <span class="token property">z-index</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.collapsible-header</span></span><span class="token punctuation">{</span>

    <span class="token property">boder</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
<span class="token punctuation">}</span>



</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">function</span> <span class="token attr-name">render_categories(cats,</span> <span class="token attr-name">depth)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>
  &lt;% depth = depth || 0 %>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">return</span> <span class="token attr-name">cats.each(function(cat){</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>
    &lt;% var subCats = site.categories.find({parent: cat._id}).sort(orderBy).filter(cat => cat.length) %>
    &lt;% var collapsed = subCats.length === 0 %>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%<span class="token punctuation">=</span> subCats.length <span class="token punctuation">></span> 0 ? <span class="token punctuation">'</span>active<span class="token punctuation">'</span> : <span class="token punctuation">'</span><span class="token punctuation">'</span> %<span class="token punctuation">></span><span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%<span class="token punctuation">=</span> depth &lt;<span class="token punctuation">=</span> 0 ? <span class="token punctuation">'</span>category-row<span class="token punctuation">'</span> : <span class="token punctuation">'</span>category-row category-sub<span class="token punctuation">'</span> %<span class="token punctuation">></span>  row collapsible-header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span>
        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span> &lt;%<span class="token punctuation">=</span> depth &lt;<span class="token punctuation">=</span> 0 ? <span class="token punctuation">'</span>category-item<span class="token punctuation">'</span> : <span class="token punctuation">'</span>category-subitem<span class="token punctuation">'</span> %<span class="token punctuation">></span> &lt;%<span class="token punctuation">=</span> subCats.length <span class="token punctuation">></span> 0 ? <span class="token punctuation">'</span><span class="token punctuation">'</span> : <span class="token punctuation">'</span>collapsed<span class="token punctuation">'</span> %<span class="token punctuation">></span> list-group-item category-item-action col s10 m9<span class="token punctuation">"</span></span>
        <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>heading-&lt;%<span class="token punctuation">=</span> cat._id %<span class="token punctuation">></span><span class="token punctuation">"</span></span> 
      <span class="token punctuation">></span></span>
        &lt;%= cat.name %>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fas fa-chevron-right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%<span class="token punctuation">=</span> url_for(cat.path) %<span class="token punctuation">></span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>category-count col s2 m3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fa fa-list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>&lt;%= cat.posts.length %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(subCats.length</span> <span class="token punctuation">></span></span> 0) { %>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>category-content collapsible-body<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%-</span> <span class="token attr-name">render_sub_categories(subCats,</span> <span class="token attr-name">cat,</span> <span class="token attr-name">depth</span> <span class="token attr-name">+</span> <span class="token attr-name">1)</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>

       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">else</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%-</span> <span class="token attr-name">render_posts(cat)</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">})</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">function</span> <span class="token attr-name">render_sub_categories(cats,</span> <span class="token attr-name">parent,</span> <span class="token attr-name">depth)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>


        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>collapsible category-row<span class="token punctuation">"</span></span>  <span class="token attr-name">data-collapsible</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>expandable<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%-</span> <span class="token attr-name">render_categories(cats,</span> <span class="token attr-name">depth)</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>


<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">function</span> <span class="token attr-name">render_posts(cat)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>collapse-&lt;%<span class="token punctuation">=</span> cat._id %<span class="token punctuation">></span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>category-content collapsible-body<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>
    &lt;% var limit = 20 ; %>
    &lt;% var posts = cat.posts.sort(config.index_generator.order_by || '-date') %>
    &lt;% for (var idx = 0; idx &lt; posts.length; idx++) { %>
      &lt;% var post = posts.data[idx] %>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(idx</span> <span class="token attr-name">&amp;&amp;</span> <span class="token attr-name">limit</span> <span class="token attr-name">&amp;&amp;</span> <span class="token attr-name">idx</span> <span class="token punctuation">></span></span>= limit) { %>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%- url_for(cat.path) %<span class="token punctuation">></span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list-group-item list-group-item-action<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>category-post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>More...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">break</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">else</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%- url_for(post.path) %<span class="token punctuation">></span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span> list-group-item list-group-item-action<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>category-post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&lt;%= post.title %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>


<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span> <span class="token attr-name">data-aos</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fade-up<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>card  card-categories-list-spcail<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>card-content col s12  m12<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>  <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>card-list-zzy<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>category-list collapsible <span class="token punctuation">"</span></span>  <span class="token attr-name">data-collapsible</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>expandable<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
          &lt;% cats = site.categories.find({parent: {$exists: false}}).sort(orderBy).filter(cat => cat.length) %>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%-</span> <span class="token attr-name">render_categories(cats)</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>


<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">

  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.list-group-item'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">var</span> id <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasClass</span><span class="token punctuation">(</span><span class="token string">'collapsed'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">'collapsed'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"aria-expanded"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">'collapsed'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"aria-expanded"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">var</span> val <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'display'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>val <span class="token operator">==</span> <span class="token string">'block'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//$(id).hide();</span>
    <span class="token comment" spellcheck="true">//$(id).slideUp();</span>
  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//$(id).show();</span>
    <span class="token comment" spellcheck="true">//$(id).slideDown();</span>
  <span class="token punctuation">}</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.collapsible'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collapsible</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>
<h3 id="5、重新编译启动"><a href="#5、重新编译启动" class="headerlink" title="5、重新编译启动"></a>5、重新编译启动</h3><p>可能还有一些样式问题，不过要睡觉了。</p>
<p>就自己调调吧~ 尽量用内联样式</p>
<p>后面调好了，文章再更新。</p>
<h3 id="6、重新更新一版"><a href="#6、重新更新一版" class="headerlink" title="6、重新更新一版"></a>6、重新更新一版</h3><p>重新调整样式， 添加了标题， 去掉了调试 Demo , 理论上不限制级别深， 添加了自定义显示多少最近多少篇配置参数。</p>
<p>新的 <code>category-list.ejs</code> 长这样：</p>
<pre class=" language-html"><code class="language-html">&lt;% var orderBy =  'name' ;  %>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">

<span class="token comment" spellcheck="true">/*
.category:not(:last-child) {
  margin-bottom: 1rem;
}
*/</span>
<span class="token selector"><span class="token class">.category-item</span> </span><span class="token punctuation">{</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">1.25</span>rem<span class="token punctuation">;</span>
  <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.category-subitem</span> </span><span class="token punctuation">{</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">1</span>rem<span class="token punctuation">;</span>
  <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.category-collapse</span> </span><span class="token punctuation">{</span>
  <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">1.25</span>rem<span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.category-count</span> </span><span class="token punctuation">{</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">0.9</span>rem<span class="token punctuation">;</span>
  <span class="token property">font-weight</span><span class="token punctuation">:</span> initial<span class="token punctuation">;</span>
  <span class="token property">min-width</span><span class="token punctuation">:</span> <span class="token number">1.3</span>em<span class="token punctuation">;</span>
  <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">1.3</span>em<span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.category-count</span> i </span><span class="token punctuation">{</span>
  <span class="token property">padding-right</span><span class="token punctuation">:</span> <span class="token number">0.25</span>rem<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.category-count</span> span </span><span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">2</span>rem<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.category-item-action</span><span class="token pseudo-class">:not(.collapsed)</span> > i </span><span class="token punctuation">{</span>
  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">90</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">transform-origin</span><span class="token punctuation">:</span> center center<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.category-item-action</span> i </span><span class="token punctuation">{</span>
  <span class="token property">transition</span><span class="token punctuation">:</span> transform <span class="token number">0.3</span>s ease-out<span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>
  <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">0.25</span>rem<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.category-item-action</span><span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>
  <span class="token property">z-index</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#38ACDF</span><span class="token punctuation">;</span>
  <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#F8F9FA</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>



<span class="token selector"><span class="token class">.list-group-item</span><span class="token pseudo-class">:first-child</span> </span><span class="token punctuation">{</span>
    <span class="token property">border-top-left-radius</span><span class="token punctuation">:</span> <span class="token number">.25</span>rem<span class="token punctuation">;</span>
    <span class="token property">border-top-right-radius</span><span class="token punctuation">:</span> <span class="token number">.25</span>rem<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector"><span class="token class">.category-item</span> </span><span class="token punctuation">{</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">1.25</span>rem<span class="token punctuation">;</span>
    <span class="token property">font-weight</span><span class="token punctuation">:</span> <span class="token number">700</span><span class="token punctuation">;</span>
    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
    <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.list-group-item</span> </span><span class="token punctuation">{</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>
    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.list-group-item</span> </span><span class="token punctuation">{</span>
    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>
    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">.75</span>rem <span class="token number">1.25</span>rem<span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/* border: 1px solid rgba(0,0,0,.125); */</span>
<span class="token punctuation">}</span>

<span class="token selector"><span class="token id">#card-list-zzy</span> <span class="token class">.list-group-item</span><span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#38ACDF</span><span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#F8F9FA</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/*  border: 1px solid rgba(0,0,0,.125); */</span>
<span class="token punctuation">}</span>

<span class="token selector"><span class="token class">.category-item-action</span> i </span><span class="token punctuation">{</span>
    <span class="token property">transition</span><span class="token punctuation">:</span> transform <span class="token number">.3</span>s ease-out<span class="token punctuation">;</span>
    <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>
    <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">.25</span>rem<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector"><span class="token class">.category-item-action</span> a</span><span class="token punctuation">{</span>
      <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>
      <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">.75</span>rem <span class="token number">1.25</span>rem<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">card-categories-list-spcail > div<span class="token pseudo-class">:hover</span></span><span class="token punctuation">{</span>

  <span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#38ACDF</span><span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#F8F9FA</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector"><span class="token class">.fa</span> </span><span class="token punctuation">{</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">1</span>rem<span class="token punctuation">;</span>
    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.category-count</span> </span><span class="token punctuation">{</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">.9</span>rem<span class="token punctuation">;</span>
    <span class="token property">font-weight</span><span class="token punctuation">:</span> initial<span class="token punctuation">;</span>
    <span class="token property">min-width</span><span class="token punctuation">:</span> <span class="token number">1.3</span>em<span class="token punctuation">;</span>
    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">1.3</span>em<span class="token punctuation">;</span>
    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
    <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token selector"><span class="token class">.category-content</span></span><span class="token punctuation">{</span>
   <span class="token property">border-left</span><span class="token punctuation">:</span><span class="token number">0</span>px<span class="token punctuation">;</span>
   <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">.75</span>rem <span class="token number">1.25</span>rem<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector"><span class="token class">.category-content</span> a</span><span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector"><span class="token class">.category-content</span> a<span class="token pseudo-class">:hover</span></span><span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#38ACDF</span><span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#F8F9FA</span><span class="token punctuation">;</span>
    <span class="token property">box-shadow</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.category-row</span> </span><span class="token punctuation">{</span>

  <span class="token property">border-color</span><span class="token punctuation">:</span> <span class="token hexcode">#F8F9FA</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
  <span class="token property">border-bottom</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span>
  <span class="token property">box-shadow</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector"><span class="token id">#card-list-zzy</span></span><span class="token punctuation">{</span>
    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/* margin-top: -2rem; */</span>
    <span class="token property">transition</span><span class="token punctuation">:</span> background-color <span class="token number">.2</span>s ease-in-out<span class="token punctuation">;</span>
    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">.5</span>rem<span class="token punctuation">;</span>
    <span class="token property">z-index</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.collapsible-header</span></span><span class="token punctuation">{</span>

    <span class="token property">boder</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector"><span class="token class">.collapsible</span></span><span class="token punctuation">{</span>
  <span class="token property">box-shadow</span><span class="token punctuation">:</span>none <span class="token important">!important</span><span class="token punctuation">;</span>
  <span class="token property">-webkit-box-shadow</span><span class="token punctuation">:</span> none <span class="token important">!important</span><span class="token punctuation">;</span>
  <span class="token property">border-left</span><span class="token punctuation">:</span>none <span class="token important">!important</span><span class="token punctuation">;</span>
  <span class="token property">border-right</span><span class="token punctuation">:</span>none <span class="token important">!important</span><span class="token punctuation">;</span>
  <span class="token property">border-bottom</span><span class="token punctuation">:</span>none <span class="token important">!important</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector"><span class="token class">.categories-title</span></span><span class="token punctuation">{</span>
    <span class="token property">padding-top</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/* padding-bottom: 5px; */</span>
    <span class="token property">margin-bottom</span><span class="token punctuation">:</span> -<span class="token number">10</span>px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">function</span> <span class="token attr-name">render_categories(cats,</span> <span class="token attr-name">depth)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>
  &lt;% depth = depth || 0 %>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">return</span> <span class="token attr-name">cats.each(function(cat){</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>
    &lt;% var subCats = site.categories.find({parent: cat._id}).sort(orderBy).filter(cat => cat.length) %>
    &lt;% var collapsed = subCats.length === 0 %>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%<span class="token punctuation">=</span> subCats.length <span class="token punctuation">></span> 0 ? <span class="token punctuation">'</span>active<span class="token punctuation">'</span> : <span class="token punctuation">'</span><span class="token punctuation">'</span> %<span class="token punctuation">></span><span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%<span class="token punctuation">=</span> depth &lt;<span class="token punctuation">=</span> 0 ? <span class="token punctuation">'</span>category-row<span class="token punctuation">'</span> : <span class="token punctuation">'</span>category-row category-sub<span class="token punctuation">'</span> %<span class="token punctuation">></span>  row collapsible-header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span>
        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span> &lt;%<span class="token punctuation">=</span> depth &lt;<span class="token punctuation">=</span> 0 ? <span class="token punctuation">'</span>category-item<span class="token punctuation">'</span> : <span class="token punctuation">'</span>category-subitem<span class="token punctuation">'</span> %<span class="token punctuation">></span> &lt;%<span class="token punctuation">=</span> subCats.length <span class="token punctuation">></span> 0 ? <span class="token punctuation">'</span><span class="token punctuation">'</span> : <span class="token punctuation">'</span>collapsed<span class="token punctuation">'</span> %<span class="token punctuation">></span> list-group-item category-item-action col s11 m11<span class="token punctuation">"</span></span>
        <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>heading-&lt;%<span class="token punctuation">=</span> cat._id %<span class="token punctuation">></span><span class="token punctuation">"</span></span> 
      <span class="token punctuation">></span></span>
        &lt;%= cat.name %>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fas fa-chevron-right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%<span class="token punctuation">=</span> url_for(cat.path) %<span class="token punctuation">></span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>category-count col s1 m1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fa fa-list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>&lt;%= cat.posts.length %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(subCats.length</span> <span class="token punctuation">></span></span> 0) { %>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>category-content collapsible-body<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%-</span> <span class="token attr-name">render_sub_categories(subCats,</span> <span class="token attr-name">cat,</span> <span class="token attr-name">depth</span> <span class="token attr-name">+</span> <span class="token attr-name">1)</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>

       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">else</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%-</span> <span class="token attr-name">render_posts(cat)</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">})</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">function</span> <span class="token attr-name">render_sub_categories(cats,</span> <span class="token attr-name">parent,</span> <span class="token attr-name">depth)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>collapsible expandable category-row<span class="token punctuation">"</span></span>  <span class="token attr-name">data-collapsible</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>expandable<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%-</span> <span class="token attr-name">render_categories(cats,</span> <span class="token attr-name">depth)</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">function</span> <span class="token attr-name">render_posts(cat)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>collapse-&lt;%<span class="token punctuation">=</span> cat._id %<span class="token punctuation">></span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>category-content collapsible-body<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>
    &lt;% var limit = theme.category.list || 10 ; %>
    &lt;% var posts = cat.posts.sort(config.index_generator.order_by || '-date') %>
    &lt;% for (var idx = 0; idx &lt; posts.length; idx++) { %>
      &lt;% var post = posts.data[idx] %>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(idx</span> <span class="token attr-name">&amp;&amp;</span> <span class="token attr-name">limit</span> <span class="token attr-name">&amp;&amp;</span> <span class="token attr-name">idx</span> <span class="token punctuation">></span></span>= limit) { %>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%- url_for(cat.path) %<span class="token punctuation">></span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list-group-item list-group-item-action<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>category-post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>More...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">break</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">else</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%- url_for(post.path) %<span class="token punctuation">></span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span> list-group-item list-group-item-action<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>category-post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&lt;%= post.title %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>


<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span> <span class="token attr-name">data-aos</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fade-up<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>card  card-categories-list-spcail<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>categories-title center-align<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fas fa-bookmark<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span> 文章多级分类
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>card-content col s12  m12<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>  <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>card-list-zzy<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>category-list collapsible expandable<span class="token punctuation">"</span></span>  <span class="token attr-name">data-collapsible</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>expandable<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
          &lt;% cats = site.categories.find({parent: {$exists: false}}).sort(orderBy).filter(cat => cat.length) %>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%-</span> <span class="token attr-name">render_categories(cats)</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>   
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>


<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdnjs.cloudflare.com/ajax/libs/materialize/0.97.8/js/materialize.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">


<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.list-group-item'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasClass</span><span class="token punctuation">(</span><span class="token string">'collapsed'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">'collapsed'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment" spellcheck="true">//$(this).parent().next().slideDown();</span>
  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
      <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">'collapsed'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment" spellcheck="true">//$(this).parent().next().slideUp();</span>

  <span class="token punctuation">}</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token keyword">var</span> elem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.collapsible .expandable'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> instance <span class="token operator">=</span> M<span class="token punctuation">.</span>Collapsible<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  accordion<span class="token punctuation">:</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>
<p>然后在主题配置中添加配置参数：</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">category</span><span class="token punctuation">:</span>
  <span class="token key atrule">list</span><span class="token punctuation">:</span> <span class="token number">10  </span></code></pre>
<p>该值表示多级分类展开时显示最近的10篇文章列表， 不设置默认会显示10篇，修改该值即可实现自定义设置显示多少条。</p>
<p>效果在我的分类里，自己看看吧~</p>
<p>  <code>category-list.ejs</code> 中引入了另一个版本的js</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdnjs.cloudflare.com/ajax/libs/materialize/0.97.8/js/materialize.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>
<p>如果去掉了这个 js 引入， 那么需要放开 js 中注释了的 <code>$(this).parent().next().slideDown();</code> 和 <code>$(this).parent().next().slideUp();</code> , 然后将 <code>&lt;li  class=&quot;&lt;%= subCats.length &gt; 0 ? &#39;active&#39; : &#39;&#39; %&gt;&quot; &gt;</code> 修改成 <code>&lt;li&gt;</code> ，只是效果略显不同。 展开后不再自动折叠。 如果你愿意动手，自己加个按钮， 可以搞个全部展开的按钮， 事件的关键代码如下：</p>
<pre class=" language-html"><code class="language-html">
function openOrClose(){

    var disVal = $(".collapsible-body").css("display");

    disVal =='none' ? $(".collapsible-body").css("display","block"); :$(".collapsible-body").css("display","none");
}
</code></pre>
<p>先备份，然后大胆的折腾，大胆的改~</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>jvm之内存结构</title>
    <url>/posts/9f103da7.html</url>
    <content><![CDATA[<h2 id="jvm-内存管理机制"><a href="#jvm-内存管理机制" class="headerlink" title="jvm 内存管理机制"></a>jvm 内存管理机制</h2><blockquote>
<p>参考资料：<br>《深入理解Java虚拟机 JVM高级特性与最佳实践 第3版》<br>《Java虚拟机规范（Java SE 7）》</p>
</blockquote>
<h3 id="运行时数据区"><a href="#运行时数据区" class="headerlink" title="运行时数据区"></a>运行时数据区</h3><p>根据《Java虚拟机规范》的规定，Java虚拟机所管理的内存将会包括以下几个运行时数据区域</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-images/jvm-pic-1.jpg" alt="运行时数据区"></p>
<h4 id="1-程序计数器"><a href="#1-程序计数器" class="headerlink" title="1. 程序计数器"></a>1. 程序计数器</h4><blockquote>
<p>程序计数器（Program Counter Register）是一块较小的内存空间，它可以看作是当前线程所执行的字节码的行号指示器。字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，它是程序控制流的指示器，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。</p>
</blockquote>
<p>程序计数器特征：<br>（1）是“线程私有”的内存。每条线程都需要有一个独立的程序计数器，各条线程之间计数器互不影响，独立存储。<br>（2）如果线程正在执行的是一个Java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是本地（Native）方法，这个计数器值则应为空（Undefined）。<br>（3）此内存区域是唯一一个在《Java虚拟机规范》中没有规定任何OutOfMemoryError情况的区域。</p>
<h4 id="2-Java虚拟机栈"><a href="#2-Java虚拟机栈" class="headerlink" title="2. Java虚拟机栈"></a>2. Java虚拟机栈</h4><blockquote>
<p>Java虚拟机栈（Java Virtual Machine Stack）也是线程私有的，它的生命周期与线程相同。虚拟机栈描述的是Java方法执行的线程内存模型：每个方法被执行的时候，Java虚拟机都会同步创建一个栈帧[栈帧是方法运行期间很重要的基础数据结构]（Stack Frame）用于存储局部变量表、操作数栈、动态连接、方法出口等信息。每一个方法被调用直至执行完毕的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。</p>
</blockquote>
<p>局部变量表相关：</p>
<blockquote>
<p>局部变量表存放了编译期可知的各种Java虚拟机基本数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（reference类型，它并不等同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或者其他与此对象相关的位置）和returnAddress类型（指向了一条字节码指令的地址）。</p>
</blockquote>
<p>在《Java虚拟机规范》中， Java虚拟机栈可能出现两类异常状况：</p>
<blockquote>
<p>（1）如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError异常；<br>（2）如果Java虚拟机栈容量可以动态扩展[Hotspot的虚拟机栈不允许扩展]，当栈扩展时无法申请到足够的内存会抛出OutOfMemoryError异常。</p>
</blockquote>
<h4 id="3-本地方法栈"><a href="#3-本地方法栈" class="headerlink" title="3. 本地方法栈"></a>3. 本地方法栈</h4><p>本地方法栈（Native Method Stacks）与虚拟机栈所发挥的作用是非常相似的，区别:</p>
<blockquote>
<p>虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，<br>本地方法栈则是为虚拟机使用到的本地（Native）方法服务。</p>
</blockquote>
<p>有的Java虚拟机（譬如Hot-Spot虚拟机）直接就把本地方法栈和虚拟机栈合二为一。<br>本地方法栈也可能出现两类异常状况：</p>
<blockquote>
<p>（1）本地方法栈也会在栈深度溢出时抛出StackOverflowError<br>（2）本地方法栈扩展失败时抛出OutOfMemoryError。</p>
</blockquote>
<h4 id="4-Java堆"><a href="#4-Java堆" class="headerlink" title="4. Java堆"></a>4. Java堆</h4><blockquote>
<p>Java堆（Java Heap）是虚拟机所管理的内存中最大的一块。Java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，Java世界里“<strong>几乎</strong>”所有的对象实例都在这里分配内存。</p>
</blockquote>
<p>Java堆是垃圾收集器管理的内存区域，因此一些资料中它也被称作“GC堆”。</p>
<p>从回收内存的角度看，由于现代垃圾收集器大部分都是基于分代收集理论设计的，所以Java堆中经常会出现“新生代”“老年代”、“永久代”、“Eden空间”、“From Survivor空间”、“To Survivor空间”等。</p>
<p>如果从分配内存的角度看，所有线程共享的Java堆中可以划分出多个线程私有的分配缓冲区（Thread Local Allocation Buffer，TLAB），以提升对象分配时的效率。</p>
<p>Java堆可以处于物理上不连续的内存空间中，但在逻辑上它应该被视为连续的。</p>
<p>Java堆既可以被实现成固定大小的，也可以是可扩展的，不过当前主流的Java虚拟机都是按照可扩展来实现的（通过参数-Xmx和-Xms设定）。</p>
<p>如果在Java堆中没有内存完成实例分配，并且堆也无法再扩展时，Java虚拟机将会抛出OutOfMemoryError异常。</p>
<h4 id="5-方法区"><a href="#5-方法区" class="headerlink" title="5. 方法区"></a>5. 方法区</h4><blockquote>
<p>方法区（Method Area）与Java堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存等数据。</p>
</blockquote>
<p>虽然《Java虚拟机规范》中把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫作“非堆”（Non-Heap），目的是与Java堆区分开来。</p>
<p>在JDK 6的时候HotSpot开发团队就有放弃永久代，逐步改为采用<code>本地内存（Native Memory）</code>来实现方法区的计划。<br>到了JDK 7的HotSpot，已经把原本放在永久代的字符串常量池、静态变量等移至堆内存。</p>
<blockquote>
<p>jdk7开始方法区的逐渐移除：符号引用(Symbols)移至native heap，字面量(interned strings)和静态变量(class statics)移至java heap。</p>
</blockquote>
<p>到了JDK 8，终于完全废弃了永久代的概念，改用与JRockit、J9一样在本地内存中实现的<code>元空间（Meta-space）</code>来代替，把JDK 7中永久代还剩余的内容（主要是类型信息）全部移到元空间中。</p>
<blockquote>
<p>JDK1.8以前的HotSpot JVM有方法区，也叫永久代(permanent generation)。<br>方法区用于存放已被虚拟机加载的类信息、常量、静态变量，即编译器编译后的代码。<br>方法区是一片连续的堆空间，通过-XX:MaxPermSize来设定永久代最大可分配空间，当JVM加载的类信息容量超过了这个值，会报OOM:PermGen错误。<br>永久代的GC是和老年代(old generation)捆绑在一起的，无论谁满了，都会触发永久代和老年代的垃圾收集。</p>
</blockquote>
<p>为什么要用Metaspace替代方法区？</p>
<p>随着动态类加载的情况越来越多，这块内存变得不太可控，如果设置小了，系统运行过程中就容易出现内存溢出，设置大了又浪费内存。</p>
<blockquote>
<p>方法区的内存回收目标主要是针对常量池的回收和对类型的卸载，卸载条件相当苛刻。<br>方法区无法满足新的内存分配需求时，将抛出OutOfMemoryError异常。</p>
</blockquote>
<h4 id="6-运行时常量池"><a href="#6-运行时常量池" class="headerlink" title="6. 运行时常量池"></a>6. 运行时常量池</h4><blockquote>
<p>运行时常量池（Runtime Constant Pool）是方法区的一部分。Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池表（Constant Pool Table），用于存放编译期生成的各种字面量与符号引用，这部分内容将在类加载后存放到方法区的运行时常量池中。</p>
</blockquote>
<p>运行时常量池特征：<br>（1）存储数据条件宽松。（保存Class文件中描述的符号引用，把由符号引用翻译出来的直接引用，均可放入运行时常量池）<br>（2）具备动态性。（预置入Class文件中常量池的内容，或运行期间新的常量[如String类的intern()方法]，均可放入）</p>
<p>运行时常量池是方法区的一部分，受到方法区内存的限制，当常量池无法再申请到内存时会抛出OutOfMemoryError异常。</p>
<h4 id="7-直接内存"><a href="#7-直接内存" class="headerlink" title="7. 直接内存"></a>7. 直接内存</h4><blockquote>
<p>直接内存（Direct Memory）并不是虚拟机运行时数据区的一部分，也不是《Java虚拟机规范》中定义的内存区域。但是这部分内存也被频繁地使用，而且也可能导致OutOfMemoryError异常出现。</p>
</blockquote>
<blockquote>
<p>在JDK 1.4中新加入了NIO（New Input/Output）类，引入了一种基于通道（Channel）与缓冲区（Buffer）的I/O方式，它可以使用Native函数库直接分配堆外内存，然后通过一个存储在Java堆里面的DirectByteBuffer对象作为这块内存的引用进行操作。这样能在一些场景中显著提高性能，因为避免了在Java堆和Native堆中来回复制数据。</p>
</blockquote>
<blockquote>
<p>本机直接内存的分配不会受Java堆大小的限制，但受到本机总内存（包括物理内存、SWAP分区或者分页文件）大小以及处理器寻址空间的限制。<br>配置虚拟机参数时，设置-Xmx等参数信息，若使得各个内存区域总和大于物理内存限制（包括物理的和操作系统级的限制），就会导致动态扩展时出现OutOfMemoryError。</p>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
        <tag>内存结构</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM学习导航（第三版）</title>
    <url>/posts/2a1a7c1f.html</url>
    <content><![CDATA[<pre><code>本系列主要记录关于深入理解JVM（第三版）相关学习比较，本文为导航。</code></pre><h2 id="JVM学习导航"><a href="#JVM学习导航" class="headerlink" title="JVM学习导航"></a>JVM学习导航</h2><h3 id="一-概况"><a href="#一-概况" class="headerlink" title="一 概况"></a>一 概况</h3><h4 id="1-java发现历程"><a href="#1-java发现历程" class="headerlink" title="1. java发现历程"></a>1. java发现历程</h4><p><img src="/medias/loading-animated.gif" data-original="/images/jvm-images/java_tech_sys_1.jpg" alt="java技术体系"></p>
<h4 id="2-java技术体系"><a href="#2-java技术体系" class="headerlink" title="2. java技术体系"></a>2. java技术体系</h4><p><img src="/medias/loading-animated.gif" data-original="/images/jvm-images/java_tech_sys_1.jpg" alt="java技术体系"></p>
<h3 id="二-JVM主要内容"><a href="#二-JVM主要内容" class="headerlink" title="二 JVM主要内容"></a>二 JVM主要内容</h3><h4 id="1-JVM内存自动管理中的的内存结构。"><a href="#1-JVM内存自动管理中的的内存结构。" class="headerlink" title="1. JVM内存自动管理中的的内存结构。"></a>1. JVM内存自动管理中的的内存结构。</h4><pre><code>程序计数器
java堆（Heap）
方法区
虚拟机栈
本地方法栈

SOF,OOM</code></pre><h4 id="2-JVM中对象的创建过程"><a href="#2-JVM中对象的创建过程" class="headerlink" title="2. JVM中对象的创建过程"></a>2. JVM中对象的创建过程</h4><pre><code>检查堆中的类符号
检查类加载
分配新对象内存空间——指针碰撞，空闲列表
初始化零值
执行&lt;init&gt;()方法</code></pre><h4 id="3-垃圾收集器算法"><a href="#3-垃圾收集器算法" class="headerlink" title="3. 垃圾收集器算法"></a>3. 垃圾收集器算法</h4><p>   分代回收理论<br>   标记——清除算法<br>   标记——复制算法<br>   标记——整理算法<br>   半复制算法</p>
<h4 id="4-常见的垃圾收集器"><a href="#4-常见的垃圾收集器" class="headerlink" title="4. 常见的垃圾收集器"></a>4. 常见的垃圾收集器</h4><pre><code>Serial收集器
ParNew收集器
Parallel Scavenge收集器
Serial Old收集器
Parallel Old收集器
CMS收集器
Garbage First收集器 (Region布局)
ZGC (Region/ZPage布局)
Shenandah (Region布局)</code></pre><h4 id="5-低延迟垃圾收集器"><a href="#5-低延迟垃圾收集器" class="headerlink" title="5. 低延迟垃圾收集器"></a>5. 低延迟垃圾收集器</h4><pre><code>Shenandoah收集器
ZGC收集器</code></pre><h4 id="6-内存分配回收策略"><a href="#6-内存分配回收策略" class="headerlink" title="6. 内存分配回收策略"></a>6. 内存分配回收策略</h4><pre><code>对象优先在Eden分配
大对象直接进入老年代
长期存活的对象将进入老年代
动态对象年龄判定
空间分配担保</code></pre><h4 id="7-性能监控、故障处理工具"><a href="#7-性能监控、故障处理工具" class="headerlink" title="7. 性能监控、故障处理工具"></a>7. 性能监控、故障处理工具</h4><pre><code>基础故障处理工具
可视化故障处理工具
Hotspot虚拟机插件及工具</code></pre><h4 id="8-调优分析学习"><a href="#8-调优分析学习" class="headerlink" title="8. 调优分析学习"></a>8. 调优分析学习</h4><h4 id="9-JVM类文件结构"><a href="#9-JVM类文件结构" class="headerlink" title="9. JVM类文件结构"></a>9. JVM类文件结构</h4><pre><code>魔数、版本信息
常量池
访问标志
类索引、父类索引、接口类索引集合
字段表集合
方法表集合
属性表集合</code></pre><h4 id="10-JVM字节码指令"><a href="#10-JVM字节码指令" class="headerlink" title="10. JVM字节码指令"></a>10. JVM字节码指令</h4><pre><code>字节码与数据类型
加载和存储指令
运算指令
类型转换指令
对象创建与访问
操作数栈
转移控制指令
方法调用与返回
异常指令
同步指令</code></pre><h4 id="11-JVM类加载机制"><a href="#11-JVM类加载机制" class="headerlink" title="11. JVM类加载机制"></a>11. JVM类加载机制</h4><pre><code>加载
连接（ 验证 - 准备- 解析）
初始化
使用
卸载

类对象与数组对象加载
类的比较
双亲委派模型工作过程
双亲委派模型破坏</code></pre><h4 id="12-JVM字节码执行引擎"><a href="#12-JVM字节码执行引擎" class="headerlink" title="12. JVM字节码执行引擎"></a>12. JVM字节码执行引擎</h4><table>
<thead>
<tr>
<th>编号</th>
<th>文章地址</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td><a href="9f103da7.html">JVM内存结构</a></td>
</tr>
<tr>
<td>2</td>
<td><a href="b287f556.html">JVM的对象创建</a></td>
</tr>
<tr>
<td>3</td>
<td><a href="bce48291.html">JVM的对象生死</a></td>
</tr>
<tr>
<td>4</td>
<td><a href="50b49e8d.html">JVM垃圾收集器算法</a></td>
</tr>
<tr>
<td>5</td>
<td><a href="d01dbbb1.html">JVM常见的垃圾收集器</a></td>
</tr>
<tr>
<td>6</td>
<td><a href="f8161112.html">JVM低延迟垃圾收集器：Shenandoah</a></td>
</tr>
<tr>
<td>7</td>
<td><a href="e3d9aed7.html">JVM低延迟垃圾收集器:ZGC</a></td>
</tr>
<tr>
<td>8</td>
<td><a href="96a9f88d.html">JVM低内存分配回收策略</a></td>
</tr>
<tr>
<td>9</td>
<td><a href="ed0fd586.html">JVM监控调优工具</a></td>
</tr>
<tr>
<td>10</td>
<td><a href="bb37497b.html">JVM常见参数汇总</a></td>
</tr>
<tr>
<td>11</td>
<td>[JVM调优指南]</td>
</tr>
<tr>
<td>12</td>
<td><a href="a2ceb3e5.html">JVM字节码指令</a></td>
</tr>
<tr>
<td>12-1</td>
<td><a href="ee62cca5.html">JVM字节码指令表</a></td>
</tr>
<tr>
<td>13</td>
<td><a href="6698cab3.html">JVM类文件结构</a></td>
</tr>
<tr>
<td>14</td>
<td><a href="22096143.html">JVM类加载机制</a></td>
</tr>
<tr>
<td>15</td>
<td><a href="49b8efd0.html">Java模块化系统</a></td>
</tr>
<tr>
<td>16</td>
<td>[JVM字节码执行引擎]</td>
</tr>
</tbody></table>
<!--
#### java虚拟机执行子系统

1. jvm类文件结构

    class类文件结构
    字节码指令
    公有设计私有实现
    class类文件结构发展

2. jvm类加载机制


3. 字节码执行引擎


#### 程序编译与代码优化

1. 前端编译与优化


2. 后端编译与优化

     即时编译
     提前编译
     编译器优化技术
     深入理解编译器


--><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>jvm之垃圾收集器算法</title>
    <url>/posts/50b49e8d.html</url>
    <content><![CDATA[<h2 id="jvm-垃圾收集算法"><a href="#jvm-垃圾收集算法" class="headerlink" title="jvm 垃圾收集算法"></a>jvm 垃圾收集算法</h2><p>垃圾收集算法基本分类：<br>（1）“引用计数式垃圾收集”（Reference Counting GC）—直接垃圾收集<br>（2）“追踪式垃圾收集”（Tracing GC）—间接垃圾收集</p>
<h3 id="1-分代收集理论"><a href="#1-分代收集理论" class="headerlink" title="1. 分代收集理论"></a>1. 分代收集理论</h3><p>1）弱分代假说（Weak Generational Hypothesis）：绝大多数对象都是朝生夕灭的。<br>2）强分代假说（Strong Generational Hypothesis）：熬过越多次垃圾收集过程的对象就越难以消亡。<br>3）跨代引用假说（Intergenerational Reference Hypothesis）：跨代引用相对于同代引用来说仅占极少数。</p>
<p>常用名词：</p>
<blockquote>
<ul>
<li>部分收集（Partial GC）：指目标不是完整收集整个Java堆的垃圾收集，其中又分为：<ul>
<li>新生代收集（Minor GC/Young GC）：指目标只是新生代的垃圾收集。</li>
<li>老年代收集（Major GC/Old GC）：指目标只是老年代的垃圾收集。目前只有CMS收-集器会有单独收集老年代的行为。另外请注意“Major GC”这个说法现在有点混淆，在不同资料上常有不同所指，读者需按上下文区分到底是指老年代的收集还是整堆收集。</li>
<li>混合收集（Mixed GC）：指目标是收集整个新生代以及部分老年代的垃圾收集。目前只有G1收集器会有这种行为。</li>
</ul>
</li>
<li>整堆收集（Full GC）：收集整个Java堆和方法区的垃圾收集。</li>
</ul>
</blockquote>
<h3 id="2-标记-清除算法（Mark-Sweep）"><a href="#2-标记-清除算法（Mark-Sweep）" class="headerlink" title="2. 标记-清除算法（Mark-Sweep）"></a>2. 标记-清除算法（Mark-Sweep）</h3><p>最早出现也是最基础的垃圾收集算法是“标记-清除”（Mark-Sweep）算法。</p>
<blockquote>
<p>算法分为“标记”和“清除”两个阶段：首先标记出所有需要回收的对象，在标记完成后，统一回收掉所有被标记的对象，也可以反过来，标记存活的对象，统一回收所有未被标记的对象</p>
</blockquote>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-images/jvm-gc-mark-sweep.jpg" alt="Serial收集器运行示意图"></p>
<p>主要缺点:<br>（1）执行效率不稳定，随着对象增加执行效率降低。</p>
<blockquote>
<p>如果Java堆中包含大量对象，而且其中大部分是需要被回收的，这时必须进行大量标记和清除的动作，导致标记和清除两个过程的执行效率都随对象数量增长而降低；</p>
</blockquote>
<p>（2）内存空间碎片化问题，遇到较大对象男分配，重新GC。</p>
<blockquote>
<p>第二个是内存空间的碎片化问题，标记、清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致当以后在程序运行过程中需要分配较大对象时无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。</p>
</blockquote>
<h3 id="3-标记-复制算法（Semispace-Copying）"><a href="#3-标记-复制算法（Semispace-Copying）" class="headerlink" title="3. 标记-复制算法（Semispace Copying）"></a>3. 标记-复制算法（Semispace Copying）</h3><p>标记-复制算法常被简称为复制算法。为了解决标记-清除算法面对大量可回收对象时执行效率低的问题。1969年Fenichel提出了一种称为“半区复制”（Semispace Copying）的垃圾收集算法：</p>
<blockquote>
<p>将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。</p>
</blockquote>
<p>优点：</p>
<p>（1）实现简单，运行高效。<br>（2）分配内存时也就不用考虑有空间碎片的复杂情况，只要移动堆顶指针，按顺序分配即可</p>
<p>缺点：</p>
<p>（1）如果内存中多数对象都是存活的，这种算法将会产生大量的内存间复制的开销。<br>（2）将可用内存缩小为了原来的一半。</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-images/jvm-gc-Semispace-Copying.jpg" alt="Serial收集器运行示意图"></p>
<blockquote>
<p>现在的商用Java虚拟机大多都优先采用了这种收集算法去回收新生代。<br>在1989年，Andrew Appel针对具备“朝生夕灭”特点的对象，提出了一种更优化的半区复制分代策略，现在称为“Appel式回收”。HotSpot虚拟机的Serial、ParNew等新生代收集器均采用了这种策略来设计新生代的内存布局。</p>
<p>Appel式回收的具体做法是把新生代分为一块较大的Eden空间和两块较小的Survivor空间（HotSpot虚拟机默认Eden和Survivor的大小比例是8∶1）每次分配内存只使用Eden和其中一块Survivor。发生垃圾搜集时，将Eden和Survivor中仍然存活的对象一次性复制到另外一块Survivor空间上，然后直接清理掉Eden和已用过的那块Survivor空间。每次新生代中可用内存空间为整个新生代容量的90%（Eden的80%加上一个Survivor的10%），只有一个Survivor空间，即10%的新生代是会被“浪费”的。</p>
<p>当复制目标的Survivor空间不足以容纳一次Minor GC之后存活的对象时，采用一种分配担保策略：多出来的对象直接进入老年代。 </p>
</blockquote>
<h3 id="4-标记-整理算法（Mark-Compact）"><a href="#4-标记-整理算法（Mark-Compact）" class="headerlink" title="4. 标记-整理算法（Mark-Compact）"></a>4. 标记-整理算法（Mark-Compact）</h3><blockquote>
<p>不同于针对新生代的复制算法，针对老年代的特点，1974年Edward Lueders提出了另外一种有针对性的“标记-整理”（Mark-Compact）算法。其中的标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向内存空间一端移动，然后直接清理掉边界以外的内存。</p>
</blockquote>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-images/jvm-gc-Mark-Compact.jpg" alt="Parallel Scavenge收集器运行示意图"></p>
<p>标记-清除算法与标记-整理算法的本质差异在于前者是一种非移动式的回收算法，而后者是移动式的。</p>
<p>优缺点：</p>
<blockquote>
<p>如果移动存活对象，尤其是在老年代这种每次回收都有大量对象存活区域，移动存活对象并更新所有引用这些对象的地方将会是一种极为负重的操作，而且这种对象移动操作必须全程暂停用户应用程序才能进行（Stop The World）。</p>
<p>如果跟标记-清除算法那样完全不考虑移动和整理存活对象的话，弥散于堆中的存活对象导致的空间碎片化问题就只能依赖更为复杂的内存分配器和内存访问器来解决。</p>
<p>是否移动对象都存在弊端，移动则内存回收时会更复杂，不移动则内存分配时会更复杂。从垃圾收集的停顿时间来看，不移动对象停顿时间会更短，甚至可以不需要停顿，但是从整个程序的吞吐量来看，移动对象会更划算。此语境中，吞吐量的实质是赋值器（Mutator，可以理解为使用垃圾收集的用户程序，本书为便于理解，多数地方用“用户程序”或“用户线程”代替）与收集器的效率总和。即使不移动对象会使得收集器的效率提升一些，但因内存分配和访问相比垃圾收集频率要高得多，这部分的耗时增加，总吞吐量仍然是下降的。HotSpot虚拟机里面关注吞吐量的Parallel Scavenge收集器是基于标记-整理算法的，而关注延迟的CMS收集器则是基于标记-清除算法的。</p>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
        <tag>垃圾收集器算法</tag>
      </tags>
  </entry>
  <entry>
    <title>DB2常用命令</title>
    <url>/posts/7f06fe17.html</url>
    <content><![CDATA[<h2 id="DB2-常用命令"><a href="#DB2-常用命令" class="headerlink" title="DB2 常用命令"></a>DB2 常用命令</h2><h3 id="1、启停命令"><a href="#1、启停命令" class="headerlink" title="1、启停命令"></a>1、启停命令</h3><p>先切换用户</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">su</span> - db2inst1  //切换用户</code></pre>
<p>再操作启停连接</p>
<pre class=" language-bash"><code class="language-bash">db2start  //启动数据库
db2stop   //停止数据库
db2stop force   //强制停止数据库</code></pre>
<p>连接相关操作</p>
<pre class=" language-bash"><code class="language-bash">db2 connect to  <span class="token operator">&lt;</span>databaseName <span class="token operator">></span>  //表示默认使用db2inst1连接db2的<span class="token operator">&lt;</span>dbName<span class="token operator">></span>

db2 disconnect  <span class="token operator">&lt;</span>databaseName <span class="token operator">></span>  //断开与<span class="token operator">&lt;</span>dbName<span class="token operator">></span>的连接

db2 connect to <span class="token operator">&lt;</span>databaseName<span class="token operator">></span> user <span class="token operator">&lt;</span>userName<span class="token operator">></span> using <span class="token operator">&lt;</span>password<span class="token operator">></span> //使用本地别名连接远端数据库</code></pre>
<h3 id="2、Schema-命令"><a href="#2、Schema-命令" class="headerlink" title="2、Schema 命令"></a>2、Schema 命令</h3><p>DB2中的schema并不直接和一个数据库用户绑定，虽然他们会有默认的绑定关系，但是DB2可以独立创建一个不存在用户关联的schema来进行使用。</p>
<p>查看当前的 <code>schema</code> :</p>
<pre class=" language-bash"><code class="language-bash">db2 <span class="token string">"values current schema"</span> </code></pre>
<p>查看当前存在的schema </p>
<pre class=" language-bash"><code class="language-bash">db2 <span class="token string">"select SCHEMANAME from syscat.SCHEMATA"</span> </code></pre>
<p>创建一个独立的<code>schema</code></p>
<pre class=" language-bash"><code class="language-bash">db2 <span class="token string">"create schema test"</span> </code></pre>
<p>切换 <code>shame</code> :</p>
<pre class=" language-bash"><code class="language-bash">db2 <span class="token string">"set current schema='TEST'"</span> 
db2 <span class="token string">"values current schema"</span> </code></pre>
<p>要使用命令行来删除模式，请输入：</p>
<pre class=" language-bash"><code class="language-bash">DROP SCHEMA <span class="token operator">&lt;</span>name<span class="token operator">></span> RESTRICT</code></pre>
<p>其实大部门情况都不必特意执行命令创建 <code>schema</code> 的，只要在建表的时候带上<code>SCHEMA</code>前缀，系统中如果不存在就会自动创建<code>schema</code>的。下面会有建表示例。</p>
<h3 id="2、建库命令"><a href="#2、建库命令" class="headerlink" title="2、建库命令"></a>2、建库命令</h3><pre class=" language-bash"><code class="language-bash">db2 create db <span class="token operator">&lt;</span>databaseName <span class="token operator">></span>     //创建数据库

db2 create db <span class="token operator">&lt;</span>databaseName<span class="token operator">></span> using codeset utf-8 territory CN  //创建数据库使用utf-8编码

db2 drop db <span class="token operator">&lt;</span>databaseName <span class="token operator">></span>  //创建数据库使用utf-8编码</code></pre>
<h3 id="3、查看信息"><a href="#3、查看信息" class="headerlink" title="3、查看信息"></a>3、查看信息</h3><pre class=" language-bash"><code class="language-bash">db2 get db cfg  <span class="token comment" spellcheck="true">## 查看数据库配置</span>
db2 get db cfg <span class="token keyword">for</span> DBCM  <span class="token comment" spellcheck="true">## 查看指定数据库的配置</span>

db2 list db directory   <span class="token comment" spellcheck="true">## 列出所有数据库</span>
db2 list active databases <span class="token comment" spellcheck="true">## 列出所有活动的数据库</span>

db2 list tables <span class="token keyword">for</span> all <span class="token comment" spellcheck="true">## 列出当前数据库下所有的表</span>
db2 list tables <span class="token keyword">for</span> schema dbcm <span class="token comment" spellcheck="true">## 列出当前数据库中schema为dbcm的表</span>

db2 list tablespaces show detail <span class="token comment" spellcheck="true">## 显示数据库空间使用情况</span>
db2 list tablespaces  <span class="token comment" spellcheck="true">## 列出表空间</span>

db2 list tables    <span class="token comment" spellcheck="true">## 查看数据库中所有表结构</span>
db2 list tables <span class="token keyword">for</span> system   <span class="token comment" spellcheck="true">## 列出所有系统表</span>

db2 describe table <span class="token operator">&lt;</span>tableName<span class="token operator">></span>  <span class="token comment" spellcheck="true">## 查看表结构</span></code></pre>
<h3 id="4、查询操作"><a href="#4、查询操作" class="headerlink" title="4、查询操作"></a>4、查询操作</h3><p><code>DB2</code>命令查询：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token number">db2</span> <span class="token string">"select ... "</span>
db2level</code></pre>
<p><code>SQL</code>系统信息查询：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--查找所有表 的中文名里包含'%日志%'的表，前提建表时有中文注释</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> SYSCAT<span class="token punctuation">.</span><span class="token keyword">TABLES</span> <span class="token keyword">where</span> REMARKS <span class="token operator">like</span> <span class="token string">'%日志%'</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">--查询现有的Schema</span>
<span class="token keyword">select</span> SCHEMANAME<span class="token punctuation">,</span>owner<span class="token punctuation">,</span>CREATE_TIME <span class="token keyword">from</span> syscat<span class="token punctuation">.</span>schemata

<span class="token variable">@desc</span> LOGINFO  <span class="token comment" spellcheck="true">--查询LOGINFO表的表结构，DBVisualizer 中可以界面操作。</span>

<span class="token comment" spellcheck="true">--查询DB2版本</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> sysibm<span class="token punctuation">.</span>sysvERSIONS </code></pre>
<p>查询前100条数据：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--查找前100条日志数据</span>
<span class="token keyword">Select</span> <span class="token operator">*</span> <span class="token keyword">from</span> DBCM<span class="token punctuation">.</span>LOGINFO  <span class="token keyword">fetch</span> <span class="token keyword">first</span> <span class="token number">100</span> <span class="token keyword">rows</span> only<span class="token punctuation">;</span></code></pre>
<p>分页查询：</p>
<pre class=" language-sql"><code class="language-sql">rownumber<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<p>简单查询实例：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span>
<span class="token keyword">select</span> <span class="token operator">*</span><span class="token punctuation">,</span>rownumber<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> row_id <span class="token keyword">from</span>  LOGINFO  
<span class="token punctuation">)</span> <span class="token keyword">where</span> row_id <span class="token operator">between</span> <span class="token number">1</span> <span class="token operator">and</span> <span class="token number">10</span></code></pre>
<p>复杂查询示例，实际使用可能较多：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span>
    <span class="token keyword">select</span> tmp_page<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span> rownumber<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> row_id <span class="token keyword">from</span> <span class="token punctuation">(</span> 
        <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> LOGINFO <span class="token keyword">where</span> OPTYPE<span class="token operator">=</span><span class="token string">'1'</span> <span class="token keyword">order</span> <span class="token keyword">by</span> id <span class="token keyword">desc</span> 
    <span class="token punctuation">)</span> <span class="token keyword">as</span> tmp_page
<span class="token punctuation">)</span> <span class="token keyword">where</span> row_id <span class="token operator">between</span> <span class="token number">1</span> <span class="token operator">and</span> <span class="token number">10</span></code></pre>
<h3 id="5、建表操作"><a href="#5、建表操作" class="headerlink" title="5、建表操作"></a>5、建表操作</h3><p>实际项目中，相对比较完整的建表的操作包括建表、字段、注释（建议有）、索引（非必须），本次为示例完整性建一下索引，如下：</p>
<p>其中<code>DBCM</code>是SCHEMA，<code>DBCM_APP</code>是对应的表空间。</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> DBCM<span class="token punctuation">.</span>LOGINFO
<span class="token punctuation">(</span>
     ID <span class="token keyword">BIGINT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> GENERATED <span class="token keyword">BY</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">AS</span> <span class="token keyword">IDENTITY</span><span class="token punctuation">,</span>
     <span class="token keyword">ENABLE</span> <span class="token keyword">SMALLINT</span><span class="token punctuation">,</span>
     USER_ID CHARACTER<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
     COUNT_AMT <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
     LOG_MSG <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
     OP_DATE <span class="token keyword">DATE</span> <span class="token keyword">default</span> <span class="token keyword">CURRENT</span> <span class="token keyword">DATE</span>
     OP_TIME TIME <span class="token keyword">default</span>  <span class="token keyword">CURRENT</span>  TIME<span class="token punctuation">,</span>
     OP_TIMESTAMP <span class="token keyword">TIMESTAMP</span> <span class="token keyword">default</span>  <span class="token keyword">CURRENT</span>  <span class="token keyword">timestamp</span><span class="token punctuation">,</span>
     OP_TYPE CHAR<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
     <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>ID<span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token operator">in</span> DBCM_APP <span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">--表与字段相关注释</span>
<span class="token keyword">COMMENT</span> <span class="token keyword">ON</span> <span class="token keyword">TABLE</span> DBCM<span class="token punctuation">.</span>LOGINFO <span class="token operator">IS</span> <span class="token string">"操作日志表"</span><span class="token punctuation">;</span>
<span class="token keyword">COMMENT</span> <span class="token keyword">ON</span> <span class="token keyword">TABLE</span> DBCM<span class="token punctuation">.</span>LOGINFO<span class="token punctuation">.</span><span class="token keyword">ENABLE</span> <span class="token operator">IS</span> <span class="token string">"查询限制（1-可查，0-禁查）"</span><span class="token punctuation">;</span>
<span class="token keyword">COMMENT</span> <span class="token keyword">ON</span> <span class="token keyword">TABLE</span> DBCM<span class="token punctuation">.</span>LOGINFO<span class="token punctuation">.</span>USER_ID <span class="token operator">IS</span> <span class="token string">"用户ID"</span><span class="token punctuation">;</span>
<span class="token keyword">COMMENT</span> <span class="token keyword">ON</span> <span class="token keyword">TABLE</span> DBCM<span class="token punctuation">.</span>LOGINFO<span class="token punctuation">.</span>COUNT_AMT <span class="token operator">IS</span> <span class="token string">"操作金额"</span><span class="token punctuation">;</span>
<span class="token keyword">COMMENT</span> <span class="token keyword">ON</span> <span class="token keyword">TABLE</span> DBCM<span class="token punctuation">.</span>LOGINFO<span class="token punctuation">.</span>LOG_MSG <span class="token operator">IS</span> <span class="token string">"操作信息"</span><span class="token punctuation">;</span>
<span class="token keyword">COMMENT</span> <span class="token keyword">ON</span> <span class="token keyword">TABLE</span> DBCM<span class="token punctuation">.</span>LOGINFO<span class="token punctuation">.</span>OP_DATE <span class="token operator">IS</span> <span class="token string">"操作日期"</span><span class="token punctuation">;</span>
<span class="token keyword">COMMENT</span> <span class="token keyword">ON</span> <span class="token keyword">TABLE</span> DBCM<span class="token punctuation">.</span>LOGINFO<span class="token punctuation">.</span>OP_TIME <span class="token operator">IS</span> <span class="token string">"操作时间"</span><span class="token punctuation">;</span>
<span class="token keyword">COMMENT</span> <span class="token keyword">ON</span> <span class="token keyword">TABLE</span> DBCM<span class="token punctuation">.</span>LOGINFO<span class="token punctuation">.</span>OP_TIMESTAMP <span class="token operator">IS</span> <span class="token string">"操作时间戳"</span><span class="token punctuation">;</span>
<span class="token keyword">COMMENT</span> <span class="token keyword">ON</span> <span class="token keyword">TABLE</span> DBCM<span class="token punctuation">.</span>LOGINFO<span class="token punctuation">.</span>OP_TYPE <span class="token operator">IS</span> <span class="token string">"操作时类型"</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">--创建表索引</span>
<span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx1_dbcm_user_id <span class="token keyword">ON</span> DBCM<span class="token punctuation">.</span>LOGINFO<span class="token punctuation">(</span>USER_ID<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx1_dbcm_opdate <span class="token keyword">ON</span> DBCM<span class="token punctuation">.</span>LOGINFO<span class="token punctuation">(</span>OP_DATE<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>如果数据库中不存在名为<code>DBCM</code>的SCHEMA，则会自动创建。</p>
<p>对应的，如果要删除索引</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> idx1_dbcm_opdate <span class="token keyword">ON</span> DBCM<span class="token punctuation">.</span>LOGINFO<span class="token punctuation">(</span>OP_DATE<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h3 id="6、改表操作"><a href="#6、改表操作" class="headerlink" title="6、改表操作"></a>6、改表操作</h3><p>改表操作在实际中也会遇到，业务变更导致字段变化。</p>
<h4 id="增加列-："><a href="#增加列-：" class="headerlink" title="增加列 ："></a>增加列 ：</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token operator">&lt;</span><span class="token keyword">schema</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token operator">&lt;</span>tableName<span class="token operator">></span> <span class="token keyword">ADD</span> <span class="token keyword">COLUMN</span> <span class="token operator">&lt;</span>columnName<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token keyword">type</span><span class="token operator">></span></code></pre>
<p>如给刚才的<code>LOGINFO</code>表追加一个备用字段<code>MARK_1</code>：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> DBCM<span class="token punctuation">.</span>LOGINFO <span class="token keyword">ADD</span> <span class="token keyword">COLUMN</span> MARK_1 <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>添加带默认值的属性：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token punctuation">[</span>table_name<span class="token punctuation">]</span> <span class="token keyword">ADD</span> <span class="token keyword">COLUMN</span> <span class="token punctuation">[</span>column_name<span class="token punctuation">]</span> <span class="token punctuation">[</span>column_type<span class="token punctuation">]</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">WITH</span> <span class="token keyword">DEFAULT</span> <span class="token punctuation">[</span><span class="token keyword">value</span><span class="token punctuation">]</span></code></pre>
<p>如新增带默认值的时间戳列:</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> DBCM<span class="token punctuation">.</span>LOGINFO  <span class="token keyword">ALTER</span> <span class="token keyword">column</span> test_timestamp  <span class="token keyword">SET</span> <span class="token keyword">DEFAULT</span>  <span class="token keyword">current</span> <span class="token keyword">timestamp</span><span class="token punctuation">;</span></code></pre>
<h4 id="修改列-："><a href="#修改列-：" class="headerlink" title="修改列 ："></a>修改列 ：</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token operator">&lt;</span><span class="token keyword">schema</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token operator">&lt;</span>table_name<span class="token operator">></span> <span class="token keyword">ALTER</span> <span class="token keyword">COLUMN</span> <span class="token operator">&lt;</span>columnName<span class="token operator">></span> <span class="token keyword">SET</span> <span class="token keyword">DATA</span> <span class="token keyword">TYPE</span> <span class="token operator">&lt;</span>columnType<span class="token operator">></span></code></pre>
<p>如给刚才的<code>LOGINFO</code>表修改<code>OP_TYPE</code>字段：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> DBCM<span class="token punctuation">.</span>LOGINFO  <span class="token keyword">ALTER</span> <span class="token keyword">COLUMN</span> OP_TYPE <span class="token keyword">SET</span> <span class="token keyword">DATA</span> <span class="token keyword">TYPE</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span></code></pre>
<p>如修改<code>OP_TYPE</code>字段，删除非空属性：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> DBCM<span class="token punctuation">.</span>LOGINFO  <span class="token keyword">ALTER</span> <span class="token keyword">COLUMN</span> OP_TYPE <span class="token keyword">DROP</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span></code></pre>
<p>修改列默认值：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span>  <span class="token operator">&lt;</span><span class="token keyword">schema</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token operator">&lt;</span>table_name<span class="token operator">></span>  <span class="token keyword">ALTER</span> <span class="token keyword">COLUMN</span> <span class="token punctuation">[</span>column_name<span class="token punctuation">]</span> <span class="token keyword">SET</span> <span class="token keyword">default</span> <span class="token punctuation">[</span><span class="token keyword">value</span><span class="token punctuation">]</span></code></pre>
<h4 id="重命名列："><a href="#重命名列：" class="headerlink" title="重命名列："></a>重命名列：</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token punctuation">[</span>table_name<span class="token punctuation">]</span>  <span class="token keyword">RENAME</span> <span class="token keyword">COLUMN</span> <span class="token punctuation">[</span>column_name<span class="token punctuation">]</span>  <span class="token keyword">TO</span> <span class="token punctuation">[</span>new_column_name<span class="token punctuation">]</span>  <span class="token punctuation">;</span></code></pre>
<p>如重命名<code>OP_TYPE</code>字段：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> DBCM<span class="token punctuation">.</span>LOGINFO  <span class="token keyword">RENAME</span> <span class="token keyword">COLUMN</span> OP_TYPE <span class="token keyword">TO</span> NEW_OP_TYPE<span class="token punctuation">;</span></code></pre>
<h4 id="删除列："><a href="#删除列：" class="headerlink" title="删除列："></a>删除列：</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span>  <span class="token operator">&lt;</span><span class="token keyword">schema</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token operator">&lt;</span>tableName<span class="token operator">></span>  <span class="token keyword">DROP</span> <span class="token keyword">COLUMN</span>  <span class="token operator">&lt;</span>columnName<span class="token operator">></span>  </code></pre>
<p>如给刚才的<code>LOGINFO</code>表删除备用字段<code>MARK_1</code>：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span>  DBCM<span class="token punctuation">.</span>LOGINFO   <span class="token keyword">DROP</span> <span class="token keyword">COLUMN</span>  MARK_1 <span class="token punctuation">;</span></code></pre>
<p>你以为这样就完美了吗？不，还要进行重构表。</p>
<h4 id="重构表："><a href="#重构表：" class="headerlink" title="重构表："></a>重构表：</h4><p>重构表操作，可以使用命令，也可以使用<code>SQL</code>操作：</p>
<p>（1）命令操作模式：</p>
<pre class=" language-BASH"><code class="language-BASH">REORG TABLE  <schema>.<tableName> </code></pre>
<p>以上面的<code>LOGINFO</code>表为例，执行命令：</p>
<pre class=" language-bash"><code class="language-bash">REORG TABLE DBCM.LOGINFO <span class="token punctuation">;</span></code></pre>
<p>（2）<code>SQL</code>操作模式：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">CALL</span> SYSPROC<span class="token punctuation">.</span>admin_cmd<span class="token punctuation">(</span><span class="token string">'reorg table  &lt;schema>.&lt;tableName>  '</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>以上面的<code>LOGINFO</code>表为例，执行<code>SQL</code>：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">CALL</span> SYSPROC<span class="token punctuation">.</span>admin_cmd<span class="token punctuation">(</span><span class="token string">'reorg table DB2INST1.DATA_BASE'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h4 id="REORG扩展："><a href="#REORG扩展：" class="headerlink" title="REORG扩展："></a><code>REORG</code>扩展：</h4><p>什么是<code>REORG</code>?</p>
<p>对表数据进行增删改等操作，经过一系列更改后，逻辑上连续的数据可能会位于不连续的物理数据页上，在许多插入操作创建了溢出记录时尤其如此。按这种方式组织数据时，数据库管理器必须执行其他读操作才能访问顺序数据。而在删除大量行后，也需要执行其他的读操作。</p>
<p><code>REORG</code>（重组/重构）表的操作会整理数据碎片来减少浪费的空间，并对行进行重新排序以合并溢出记录，从而加快数据访问速度并最终提高查询性能。</p>
<p>什么时候执行<code>REORG</code> ?</p>
<p>（a）增加列，扩长度，修改列类型等。</p>
<p>（b）表中的记录变化量很大时，则需要在表上做<code>REORG</code>操作来优化数据库性能。</p>
<p>（c）对数据库对象的大量操作，如反复地删除表，删除索引，存储过程，会引起系统表中数据的频繁改变，导致表或索引碎片太多时需要<code>REORG</code>。可以使用<code>db2</code>工具<code>reorgchk</code>检查。</p>
<br/>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>DB2</category>
      </categories>
      <tags>
        <tag>DB2</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>jvm之对象创建与布局</title>
    <url>/posts/b287f556.html</url>
    <content><![CDATA[<h2 id="HotSpot-虚拟机对象创建与布局"><a href="#HotSpot-虚拟机对象创建与布局" class="headerlink" title="HotSpot 虚拟机对象创建与布局"></a>HotSpot 虚拟机对象创建与布局</h2><p>HotSpot虚拟机在Java堆中对象分配、布局和访问的全过程。<br>创建对象的三种方式：new关键字、复制、反序列化。</p>
<h3 id="一-对象的创建"><a href="#一-对象的创建" class="headerlink" title="一. 对象的创建"></a>一. 对象的创建</h3><p>此处提及的对象创建，只是普通Java对象，不包括数组和Class对象。</p>
<h4 id="1-检查符合引用和类加载情况"><a href="#1-检查符合引用和类加载情况" class="headerlink" title="1. 检查符合引用和类加载情况"></a>1. 检查符合引用和类加载情况</h4><p>当Java虚拟机遇到一条字节码new指令时，首先将去检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已被加载、解析和初始化过。如果没有，那必须先执行相应的类加载过程。</p>
<h4 id="2-为新生对象分配内存"><a href="#2-为新生对象分配内存" class="headerlink" title="2. 为新生对象分配内存"></a>2. 为新生对象分配内存</h4><p>在类加载检查通过后，接下来虚拟机将为新生对象分配内存。对象所需内存的大小在类加载完成后便可完全确定，为对象分配空间的任务其实就是把一块确定大小的内存块从Java堆中划分出来存放该对象。</p>
<p>关于对象内存分配方式：<br>（1）“指针碰撞”（Bump The Pointer）</p>
<blockquote>
<p>假设Java堆中内存是绝对规整的，所有被使用过的内存都被放在一边，空闲的内存被放在另一边，中间放着一个指针作为分界点的指示器，那所分配内存就仅仅是把那个指针向空闲空间方向挪动一段与对象大小相等的距离，这种分配方式称为“指针碰撞”（Bump The Pointer）</p>
</blockquote>
<p>（2）“空闲列表”（Free List）:</p>
<blockquote>
<p>Java堆中的内存并不是规整的，已被使用的内存和空闲的内存相互交错在一起，那就没有办法简单地进行指针碰撞了，虚拟机就必须维护一个列表，记录上哪些内存块是可用的，在分配的时候从列表中找到一块足够大的空间划分给对象实例，并更新列表上的记录，这种分配方式称为“空闲列表”（Free List）</p>
</blockquote>
<p>选择哪种分配方式，取决于Java堆是否规整决定，而Java堆是否规整又由所采用的垃圾收集器是否带有空间压缩整理（Compact）的能力决定。因此：</p>
<p>（A）当使用Serial、ParNew等带压缩整理过程的收集器时，系统采用的分配算法是指针碰撞，既简单又高效；<br>（B）当使用CMS这种基于清除（Sweep）算法的收集器时，理论上就只能采用较为复杂的空闲列表来分配内存。</p>
<p>考虑对象内存分配的线程安全问题：</p>
<blockquote>
<p>把内存分配的动作按照线程划分在不同的空间之中进行，即每个线程在Java堆中预先分配一小块内存，称为<code>本地线程分配缓冲（Thread Local Allocation Buffer，TLAB）</code>，哪个线程要分配内存，就在哪个线程的本地缓冲区中分配，只有本地缓冲区用完了，分配新的缓存区时才需要同步锁定【对分配内存空间的动作进行同步处理——实际上虚拟机是采用<code>CAS</code>配上失败重试的方式保证更新操作的原子性】。虚拟机是否使用<code>TLAB</code>，可以通过<code>-XX：+/-UseTLAB</code>参数来设定。</p>
</blockquote>
<p>每个线程在堆中都会有私有的<code>分配缓冲区(TLAB)</code>，这样可以很大程度避免在并发情况下频繁创建对象造成的线程不安全。</p>
<h4 id="3-将分配的内存初始化为零值"><a href="#3-将分配的内存初始化为零值" class="headerlink" title="3. 将分配的内存初始化为零值"></a>3. 将分配的内存初始化为零值</h4><p>内存分配完成之后，虚拟机必须将分配到的内存空间（但不包括对象头）都初始化为零值，如果使用了TLAB的话，这一项工作也可以提前至<code>TLAB</code>分配时顺便进行。这步操作保证了对象的实例字段在Java代码中可以不赋初始值就直接使用，使程序能访问到这些字段的数据类型所对应的零值。</p>
<h4 id="4-对新生的对象进行设置"><a href="#4-对新生的对象进行设置" class="headerlink" title="4. 对新生的对象进行设置"></a>4. 对新生的对象进行设置</h4><p>对象的元数据信息、对象的哈希码（实际上对象的哈希码会延后到真正调用<code>Object::hashCode()</code>方法时才计算）、对象的<code>GC</code>分代年龄等信息。这些信息存放在对象的对象头（Object Header）之中。根据虚拟机当前运行状态的不同，如是否启用偏向锁等，对象头会有不同的设置方式。</p>
<h4 id="5-执行-lt-init-gt-方法。"><a href="#5-执行-lt-init-gt-方法。" class="headerlink" title="5. 执行&lt;init&gt;()方法。"></a>5. 执行<code>&lt;init&gt;()</code>方法。</h4><p>new指令之后会接着执行<code>&lt;init&gt;()</code>方法，按照程序员的意愿对对象进行初始化，这样一个真正可用的对象才算完全被构造出来。</p>
<p><code>&lt;init&gt;()</code>方法是 对象构造时用以初始化对象的，构造器以及非静态初始化块中的代码。</p>
<p>区别与类加载的<code>&lt;clinit&gt;()</code>方法</p>
<h3 id="二、对象的布局"><a href="#二、对象的布局" class="headerlink" title="二、对象的布局"></a>二、对象的布局</h3><p><code>HotSpot</code>虚拟机里，对象在堆内存中的存储布局可以划分为三个部分：</p>
<pre><code>对象头（Header）、
实例数据（Instance Data）
对齐填充（Padding）。</code></pre><h4 id="1-对象头"><a href="#1-对象头" class="headerlink" title="1. 对象头"></a>1. 对象头</h4><p>对象头部分包括两类信息：</p>
<p>（1）第一类是用于存储对象自身的运行时数据，如哈希码<code>（HashCode）</code>、<code>GC分代年龄</code>、<code>锁状态标志</code>、<code>线程持有的锁</code>、<code>偏向线程ID</code>、<code>偏向时间戳</code>等，这部分数据的长度在32位和64位的虚拟机（未开启压缩指针）中分别为32个比特和64个比特，官方称它为“Mark Word”。</p>
<p>（2）第二类是类型指针，即对象指向它的类型元数据的指针，Java虚拟机通过这个指针来确定该对象是哪个类的实例。</p>
<pre><code>并不是所有的虚拟机实现都必须在对象数据上保留类型指针，即，查找对象的元数据信息并不一定要经过对象本身</code></pre><h4 id="2-实例数据："><a href="#2-实例数据：" class="headerlink" title="2. 实例数据："></a>2. 实例数据：</h4><p>实例数据部分是对象真正存储的有效信息，即我们在程序代码里面所定义的各种类型的字段内容，无论是从父类继承下来的，还是在子类中定义的字段都必须记录起来。</p>
<blockquote>
<p>这部分的存储顺序会受到虚拟机分配策略参数（-XX：FieldsAllocationStyle参数）和字段在Java源码中定义顺序的影响。</p>
<p>HotSpot虚拟机默认的分配顺序为longs/doubles、ints、shorts/chars、bytes/booleans、oops（Ordinary Object Pointers，OOPs）。<br>相同宽度的字段总是被分配到一起存放，在满足这个前提条件的情况下，在父类中定义的变量会出现在子类之前。</p>
<p>如果HotSpot虚拟机的+XX：CompactFields参数值为true（默认就为true），那子类之中较窄的变量也允许插入父类变量的空隙之中，以节省出一点点空间</p>
</blockquote>
<h4 id="3-对齐填充"><a href="#3-对齐填充" class="headerlink" title="3.对齐填充"></a>3.对齐填充</h4><p>（A）非必然，无特殊含义，仅作占位符使用。</p>
<p>（B）对象实例数据没有对齐时需要对齐填充。</p>
<blockquote>
<p>对齐填充，这并不是必然存在的，也没有特别的含义，它仅仅起着占位符的作用。由于<code>HotSpot虚拟机</code>的自动内存管理系统要求对象起始地址必须是8字节的整数倍，换句话说就是任何对象的大小都必须是8字节的整数倍。对象头部分已经被精心设计成正好是8字节的倍数（1倍或者2倍），因此，如果对象实例数据部分没有对齐的话，就需要通过对齐填充来补全。</p>
</blockquote>
<h3 id="三、对象的访问定位"><a href="#三、对象的访问定位" class="headerlink" title="三、对象的访问定位"></a>三、对象的访问定位</h3><p>Java程序会通过栈上的reference数据来操作堆上的具体对象。</p>
<p>对象访问主流的访问方式主要有使用句柄和直接指针两种：</p>
<p>（1）使用句柄访问的话，Java堆中将可能会划分出一块内存来作为句柄池，reference中存储的就是对象的句柄地址，而句柄中包含了对象实例数据与类型数据各自具体的地址信息：</p>
<p><img src="/medias/loading-animated.gif" data-original="/images//jvm-images/jvm-obj-ref-1.jpg" alt="句柄访问示意图"></p>
<p>（2）使用直接指针访问的话，Java堆中对象的内存布局就必须考虑如何放置访问类型数据的相关信息，reference中存储的直接就是对象地址，如果只是访问对象本身的话，就不需要多一次间接访问的开销。</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-images/jvm-obj-ref-2.jpg" alt="直接指针访问示意图"></p>
<p><strong>句柄访问</strong> 与 <strong>直接指针</strong> 比较：</p>
<p>（A）使用句柄的最大好处是 reference 中存储的是稳定的句柄地址，在对象移动(GC)是只改变实例数据指针地址，reference 自身不需要修改。<br>（B）直接指针访问的最大好处是速度快，节省了一次指针定位的时间开销。如果是对象频繁 GC 那么句柄方法好，如果是对象频繁访问则直接指针访问好。</p>
<p><code>HotSpot</code>而言，它主要使用第二种方式进行对象访问。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>jvm之对象生死</title>
    <url>/posts/bce48291.html</url>
    <content><![CDATA[<h3 id="jvm-检测判断对象的生死"><a href="#jvm-检测判断对象的生死" class="headerlink" title="jvm 检测判断对象的生死"></a>jvm 检测判断对象的生死</h3><p>垃圾收集（Garbage Collection，简称GC）</p>
<p>对象生死</p>
<blockquote>
<p>堆里面存放着Java世界中几乎所有的对象实例，垃圾收集器在对堆进行回收前，第一件事情就是要确定这些对象之中哪些还“存活”着，哪些已经“死去”（“死去”即不可能再被任何途径使用的对象）了。对象是否存活的算法各不相同。</p>
</blockquote>
<h4 id="1-引用计数算法"><a href="#1-引用计数算法" class="headerlink" title="1. 引用计数算法"></a>1. 引用计数算法</h4><p>引用计数算法:<br><P><br>在对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加一；当引用失效时，计数器值就减一；任何时刻计数器为零的对象就是不可能再被使用的<br></P><br>引用计数算法（Reference Counting）虽然占用了一些额外的内存空间来进行计数，但它的原理简单，判定效率也很高，在大多数情况下它都是一个不错的算法。</p>
<p>引用计数算法的缺陷：两个对象相互引用，永不回收。<br>代码示例：</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * testGC()方法执行后，objA和objB会不会被GC呢？
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReferenceCountingGC</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> Object instance <span class="token operator">=</span> null<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> _1MB <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 这个成员属性的唯一意义就是占点内存，以便能在GC日志中看清楚是否有回收过
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bigSize <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testGC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ReferenceCountingGC objA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceCountingGC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ReferenceCountingGC objB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceCountingGC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        objA．instance <span class="token operator">=</span> objB<span class="token punctuation">;</span>
        objB．instance <span class="token operator">=</span> objA<span class="token punctuation">;</span>

        objA <span class="token operator">=</span> null<span class="token punctuation">;</span>
        objB <span class="token operator">=</span> null<span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 假设在这行发生GC，objA和objB是否能被回收？</span>
        System<span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>运行结果：</p>
<pre><code>[Full GC (System) [Tenured: 0K-&gt;210K(10240K), 0.0149142 secs] 4603K-&gt;210K(19456K), [Perm : 2999K-&gt;2999K(21248K)], 0.0150007 secs] [Times: user=0.01 sys=0.00, real=0.02 secs]
Heap
    def new generation   total 9216K, used 82K [0x00000000055e0000, 0x0000000005fe0000, 0x0000000005fe0000)
    Eden space 8192K,   1% used [0x00000000055e0000, 0x00000000055f4850, 0x0000000005de0000)
    from space 1024K,   0% used [0x0000000005de0000, 0x0000000005de0000, 0x0000000005ee0000)
    to   space 1024K,   0% used [0x0000000005ee0000, 0x0000000005ee0000, 0x0000000005fe0000)
    tenured generation   total 10240K, used 210K [0x0000000005fe0000, 0x00000000069e0000, 0x00000000069e0000)
    the space 10240K,   2% used [0x0000000005fe0000, 0x0000000006014a18, 0x0000000006014c00, 0x00000000069e0000)
    compacting perm gen  total 21248K, used 3016K [0x00000000069e0000, 0x0000000007ea0000, 0x000000000bde0000)
    the space 21248K,  14% used [0x00000000069e0000, 0x0000000006cd2398, 0x0000000006cd2400, 0x0000000007ea0000)
    No shared spaces configured.</code></pre><p>内存回收日志中包含<code>“4603K-&gt;210K”</code>，意味着虚拟机并没有因为这两个对象互相引用就放弃回收它们，这也从侧面说明了Java虚拟机并不是通过引用计数算法来判断对象是否存活的。</p>
<h4 id="2-可达性分析算法"><a href="#2-可达性分析算法" class="headerlink" title="2.可达性分析算法"></a>2.可达性分析算法</h4><p>当前主流的商用程序语言（Java、C#，上溯至前面提到的古老的Lisp）的内存管理子系统，都是通过可达性分析（Reachability Analysis）算法来判定对象是否存活的。这个算法的基本思路:</p>
<blockquote>
<p>通过一系列称为“GC Roots”的根对象作为起始节点集，从这些节点开始，根据引用关系向下搜索，搜索过程所走过的路径称为“引用链”（Reference Chain），如果某个对象到GCRoots间没有任何引用链相连，或者用图论的话来说就是从GC Roots到这个对象不可达时，则证明此对象是不可能再被使用的。</p>
</blockquote>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-images/jvm-gc-1.jpg" alt="GC Roots 示意图"></p>
<p>在Java技术体系里面，固定可作为GC Roots的对象包括以下几种：</p>
<blockquote>
<p>（1）在虚拟机栈（栈帧中的本地变量表）中引用的对象，譬如各个线程被调用的方法堆栈中使用到的参数、局部变量、临时变量等。<br>（2）在方法区中类静态属性引用的对象，譬如Java类的引用类型静态变量。<br>（3）在方法区中常量引用的对象，譬如字符串常量池（String Table）里的引用。<br>（4）在本地方法栈中JNI（即通常所说的Native方法）引用的对象。<br>（5）Java虚拟机内部的引用，如基本数据类型对应的Class对象，一些常驻的异常对象（比如NullPointExcepiton、OutOfMemoryError）等，还有系统类加载器。<br>（6）所有被同步锁（synchronized关键字）持有的对象。<br>（7）反映Java虚拟机内部情况的JMXBean、JVMTI中注册的回调、本地代码缓存等。</p>
</blockquote>
<p>除了这些固定的GC Roots集合以外，根据用户所选用的垃圾收集器以及当前回收的内存区域不同，还可以有其他对象“临时性”地加入，共同构成完整GC Roots集合。</p>
<h4 id="3-对象引用及分类"><a href="#3-对象引用及分类" class="headerlink" title="3. 对象引用及分类"></a>3. 对象引用及分类</h4><p>在JDK 1.2版之后，Java对引用的概念进行了扩充，将引用分为<code>强引用（Strongly Re-ference）</code>、<code>软引用（Soft Reference）</code>、<code>弱引用（Weak Reference）</code>和<code>虚引用（PhantomReference）</code>4种，这4种引用强度依次逐渐减弱。可以简写成：</p>
<pre><code>强引用 &gt; 软引用 &gt; 弱引用 &gt; 虚引用</code></pre><p>（1）强引用（Strongly Re-ference）</p>
<blockquote>
<p>强引用是最传统的“引用”的定义，是指在程序代码之中普遍存在的引用赋值，即类似<code>“Object obj=new Object()”</code>这种引用关系。无论任何情况下，只要强引用关系还存在，垃圾收集器就永远不会回收掉被引用的对象。</p>
</blockquote>
<p>（2）软引用（Soft Reference）</p>
<blockquote>
<p>软引用是用来描述一些还有用，但非必须的对象。只被软引用关联着的对象，在系统将要发生内存溢出异常前，会把这些对象列进回收范围之中进行第二次回收，如果这次回收还没有足够的内存，才会抛出内存溢出异常。在JDK 1.2版之后提供了<code>SoftReference</code>类来实现软引用。</p>
</blockquote>
<p>（3）弱引用（Weak Reference）</p>
<blockquote>
<p>弱引用也是用来描述那些非必须对象，但是它的强度比软引用更弱一些，被弱引用关联的对象只能生存到下一次垃圾收集发生为止。当垃圾收集器开始工作，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。在JDK 1.2版之后提供了<code>WeakReference</code>类来实现弱引用。</p>
</blockquote>
<p>（4）虚引用（PhantomReference）</p>
<blockquote>
<p>虚引用也称为“幽灵引用”或者“幻影引用”，它是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的只是为了能在这个对象被收集器回收时收到一个系统通知。在JDK 1.2版之后提供了<code>PhantomReference</code>类来实现虚引用。</p>
</blockquote>
<h4 id="4-是生是死？"><a href="#4-是生是死？" class="headerlink" title="4. 是生是死？"></a>4. 是生是死？</h4><blockquote>
<p>在可达性分析算法中判定为不可达的对象，也不是“非死不可”的，这时候它们暂时还处于“缓刑”阶段，要真正宣告一个对象死亡，至少要经历两次标记过程：如果对象在进行可达性分析后发现没有与GC Roots相连接的引用链，那它将会被第一次标记，随后进行一次筛选，筛选的条件是此对象是否有必要执行finalize()方法。假如对象没有覆盖finalize()方法，或者finalize()方法已经被虚拟机调用过，那么虚拟机将这两种情况都视为“没有必要执行”。</p>
</blockquote>
<p>如果这个对象被判定为确有必要执行finalize()方法，那么该对象将会被放置在一个名为F-Queue的队列之中，并在稍后由一条由虚拟机自动建立的、低调度优先级的Finalizer线程去执行它们的finalize()方法。这里所说的“执行”是指虚拟机会触发这个方法开始运行，但并不承诺一定会等待它运行结束。这样做的原因是，如果某个对象的finalize()方法执行缓慢，或者更极端地发生了死循环，将很可能导致F-Queue队列中的其他对象永久处于等待，甚至导致整个内存回收子系统的崩溃。</p>
<p>finalize()方法是对象逃脱死亡命运的最后一次机会，稍后收集器将对F-Queue中的对象进行第二次小规模的标记，如果对象要在finalize()中成功拯救自己——只要重新与引用链上的任何一个对象建立关联即可，譬如把自己（this关键字）赋值给某个类变量或者对象的成员变量，那在第二次标记时它将被移出“即将回收”的集合；如果对象这时候还没有逃脱，那基本上它就真的要被回收了。</p>
<p>书中代码示例：</p>
<pre><code>/**
 * 此代码演示了两点：
 * 1.对象可以在被GC时自我拯救。
 * 2.这种自救的机会只有一次，因为一个对象的finalize()方法最多只会被系统自动调用一次
 */
public class FinalizeEscapeGC {

    public static FinalizeEscapeGC SAVE_HOOK = null;

    public void isAlive() {
        System.out.println(&quot;yes, i am still alive :)&quot;);
    }

    @Override
    protected void finalize() throws Throwable {
        super.finalize();
        System.out.println(&quot;finalize method executed!&quot;);
        FinalizeEscapeGC．SAVE_HOOK = this;
    }

    public static void main(String[] args) throws Throwable {
        SAVE_HOOK = new FinalizeEscapeGC();

        //对象第一次成功拯救自己
        SAVE_HOOK = null;
        System.gc();
        // 因为Finalizer方法优先级很低，暂停0.5秒，以等待它
        Thread.sleep(500);
        if (SAVE_HOOK != null) {
            SAVE_HOOK.isAlive();
        } else {
            System.out.println(&quot;no, i am dead :(&quot;);
        }

        // 下面这段代码与上面的完全相同，但是这次自救却失败了
        SAVE_HOOK = null;
        System.gc();
        // 因为Finalizer方法优先级很低，暂停0.5秒，以等待它
        Thread.sleep(500);
        if (SAVE_HOOK != null) {
            SAVE_HOOK.isAlive();
        } else {
            System.out.println(&quot;no, i am dead :(&quot;);
        }
    }
}</code></pre><p>运行结果：</p>
<pre><code>finalize method executed!
yes, i am still alive :)
no, i am dead :(</code></pre><p>结论</p>
<blockquote>
<p>任何一个对象的finalize()方法都只会被系统自动调用一次，如果对象面临下一次回收，它的finalize()方法不会被再次执行。</p>
</blockquote>
<h4 id="5-回收方法区"><a href="#5-回收方法区" class="headerlink" title="5. 回收方法区"></a>5. 回收方法区</h4><blockquote>
<p>在Java堆中，尤其是在新生代中，对常规应用进行一次垃圾收集通常可以回收70%至99%的内存空间，方法区回收条件苛刻，回收成果极小。</p>
</blockquote>
<p>方法区的垃圾收集主要回收两部分内容：废弃的常量，不再使用的类型。<br>（1）废弃的常量</p>
<blockquote>
<p>回收废弃常量与回收Java堆中的对象非常类似。举个常量池中字面量回收的例子，假如一个字符串“java”曾经进入常量池中，但是当前系统又没有任何一个字符串对象的值是“java”，换句话说，已经没有任何字符串对象引用常量池中的“java”常量，且虚拟机中也没有其他地方引用这个字面量。如果在这时发生内存回收，而且垃圾收集器判断确有必要的话，这个“java”常量就将会被系统清理出常量池。常量池中其他类（接口）、方法、字段的符号引用也与此类似。</p>
</blockquote>
<p>系统和虚拟机中均没有引用改常量即可。</p>
<p>（2）不再使用的类型</p>
<p>需要同时满足下面三个条件:<br>A. 该类所有的实例都已经被回收，Java堆中不存在该类及其任何派生子类的实例<br>B. 加载该类的类加载器已经被回收。（难达成）<br>C. 该类对应的java.lang.Class对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。 </p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
        <tag>对象生死</tag>
      </tags>
  </entry>
  <entry>
    <title>jvm之字节码指令</title>
    <url>/posts/a2ceb3e5.html</url>
    <content><![CDATA[<h2 id="jvm字节码指令"><a href="#jvm字节码指令" class="headerlink" title="jvm字节码指令"></a>jvm字节码指令</h2><blockquote>
<p>Java虚拟机的指令由一个字节长度的、代表着某种特定操作含义的数字（称为操作码，Opcode）以及跟随其后的零至多个代表此操作所需的参数（称为操作数，Operand）构成。</p>
<p>Java虚拟机采用面向操作数栈，而不是面向寄存器的架构，大多数指令都不包含操作数，只有一个操作码，指令参数都存放在操作数栈中。</p>
</blockquote>
<p>字节码指令集可算是一种具有鲜明特点、优势和劣势均很突出的指令集架构，由于限制了Java虚拟机操作码的长度为一个字节（即0～255），这意味着指令集的操作码总数不能够超过256条；又由于Class文件格式放弃了编译后代码的操作数长度对齐，这就意味着虚拟机在处理那些超过一个字节的数据时，不得不在运行时从字节中重建出具体数据的结构。</p>
<blockquote>
<p>放弃了操作数长度对齐[插图]，就意味着可以省略掉大量的填充和间隔符号；用一个字节来代表操作码，也是为了尽可能获得短小精干的编译代码。这种追求尽可能小数据量、高传输效率的设计是由Java语言设计之初主要面向网络、智能家电的技术背景所决定的，并一直沿用至今。</p>
</blockquote>
<p>如果不考虑异常处理的话，那Java虚拟机的解释器可以使用下面这段伪代码作为最基本的执行模型来理解，这个执行模型虽然很简单，但依然可以有效正确地工作：</p>
<pre class=" language-txt"><code class="language-txt">do {
    自动计算PC寄存器的值加1;
    根据PC寄存器指示的位置，从字节码流中取出操作码;
    if (字节码存在操作数) 从字节码流中取出操作数;
    执行操作码所定义的操作;
} while (字节码流长度 > 0);</code></pre>
<h3 id="一、字节码与数据类型"><a href="#一、字节码与数据类型" class="headerlink" title="一、字节码与数据类型"></a>一、字节码与数据类型</h3><p>在Java虚拟机的指令集中，大多数指令都包含其操作所对应的数据类型信息。举个例子，iload指令用于从局部变量表中加载int型的数据到操作数栈中，而fload指令加载的则是float类型的数据。这两条指令的操作在虚拟机内部可能会是由同一段代码来实现的，但在Class文件中它们必须拥有各自独立的操作码。</p>
<p>对于大部分与数据类型相关的字节码指令，它们的操作码助记符中都有特殊的字符来表明专门为哪种数据类型服务：i代表对int类型的数据操作，l代表long，s代表short，b代表byte，c代表char，f代表float，d代表double，a代表reference。也有一些指令的助记符中没有明确指明操作类型的字母，例如arraylength指令，它没有代表数据类型的特殊字符，但操作数永远只能是一个数组类型的对象。还有另外一些指令，例如无条件跳转指令goto则是与数据类型无关的指令。</p>
<p>Java虚拟机的指令集对于特定的操作只提供了有限的类型相关指令去支持，这种特效称为：“Not Orthogonal”，并非每种数据类型和每一种操作都有对应的指令。有一些单独的指令可以在必要的时候用来将一些不支持的类型转换为可被支持的类型。</p>
<p>Java虚拟机指令集所支持的数据类型：</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-bytecode/jvm-6-bytecode-dataType.jpg" alt="java虚拟机指令集所支持的数据类型"></p>
<p>大部分指令都没有支持整数类型byte、char和short，甚至没有任何指令支持boolean类型。编译器会在编译期或运行期将byte和short类型的数据带符号扩展（Sign-Extend）为相应的int类型数据，将boolean和char类型数据零位扩展（Zero-Extend）为相应的int类型数据。</p>
<p>多数对于boolean、byte、short和char类型数据的操作，实际上都是使用相应的对int类型作为运算类型（Computational Type）来进行的。</p>
<p><a href="ee62cca5.html">《Java虚拟机规范（Java SE 7）》中文版》</a></p>
<h3 id="二、加载和存储指令"><a href="#二、加载和存储指令" class="headerlink" title="二、加载和存储指令"></a>二、加载和存储指令</h3><p>加载和存储指令用于将数据在栈帧中的局部变量表和操作数栈之间来回传输，这类指令包括：</p>
<p>将一个局部变量加载到操作栈：</p>
<p><code>iload</code>、<code>iload_&lt;n&gt;</code>、<code>lload</code>、<code>lload_&lt;n&gt;</code>、<code>fload</code>、<code>fload_&lt;n&gt;</code>、<code>dload</code>、<code>dload_&lt;n&gt;</code>、<code>aload</code>、<code>aload_&lt;n&gt;</code></p>
<p>将一个数值从操作数栈存储到局部变量表：</p>
<p><code>istore</code>、<code>istore_&lt;n&gt;</code>、<code>lstore</code>、<code>lstore_&lt;n&gt;</code>、<code>fstore</code>、<code>fstore_&lt;n&gt;</code>、<code>dstore</code>、<code>dstore_&lt;n&gt;</code>、<code>astore</code>、<code>astore_&lt;n&gt;</code></p>
<p>将一个常量加载到操作数栈：<code>bipush</code>、<code>sipush</code>、<code>ldc</code>、<code>ldc_w</code>、<code>ldc2_w</code>、<code>aconst_null</code>、<code>iconst_m1</code>、<code>iconst_&lt;i&gt;</code>，<code>lconst_&lt;l&gt;</code>、<code>fconst_&lt;f&gt;</code>、<code>dconst_&lt;d&gt;</code></p>
<p>扩充局部变量表的访问索引的指令：wide</p>
<p>存储数据的操作数栈和局部变量表主要由加载和存储指令进行操作，除此之外，还有少量指令，如访问对象的字段或数组元素的指令也会向操作数栈传输数据。</p>
<p>以尖括号结尾的（例如<code>iload_&lt;n&gt;</code>），这些指令助记符实际上代表了一组指令（例如<code>iload_&lt;n&gt;</code>，它代表了<code>iload_0</code>、<code>iload_1</code>、<code>iload_2</code>和<code>iload_3</code>这几条指令）。</p>
<p>这几组指令都是某个带有一个操作数的通用指令（例如<code>iload</code>）的特殊形式，对于这几组特殊指令，它们省略掉了显式的操作数，不需要进行取操作数的动作，因为实际上操作数就隐含在指令中。</p>
<h3 id="三、运算指令"><a href="#三、运算指令" class="headerlink" title="三、运算指令"></a>三、运算指令</h3><p>算术指令用于对两个操作数栈上的值进行某种特定运算，并把结果重新存入到操作栈顶。</p>
<p>运算指令可以分为两种：对整型数据进行运算的指令与对浮点型数据进行运算的指令。</p>
<p>运算指令都是用Java虚拟机的算术类型来进行计算，不存在直接支持byte、short、char和boolean类型的算术指令，他们的运算都使用int类型的指令代替。</p>
<p>所有的算术指令包括：</p>
<p>加法指令：<code>iadd</code>、<code>ladd</code>、<code>fadd</code>、<code>dadd</code></p>
<p>减法指令：<code>isub</code>、<code>lsub</code>、<code>fsub</code>、<code>dsub</code></p>
<p>乘法指令：<code>imul</code>、<code>lmul</code>、<code>fmul</code>、<code>dmul</code></p>
<p>除法指令：<code>idiv</code>、<code>ldiv</code>、<code>fdiv</code>、<code>ddiv</code></p>
<p>求余指令：<code>irem</code>、<code>lrem</code>、<code>frem</code>、<code>drem</code></p>
<p>取反指令：<code>ineg</code>、<code>lneg</code>、<code>fneg</code>、<code>dneg</code></p>
<p>位移指令：<code>ishl</code>、<code>ishr</code>、<code>iushr</code>、<code>lshl</code>、<code>lshr</code>、<code>lushr</code></p>
<p>按位或指令：<code>ior</code>、<code>lor</code></p>
<p>按位与指令：<code>iand</code>、<code>land</code></p>
<p>按位异或指令：<code>ixor</code>、<code>lxor</code></p>
<p>局部变量自增指令：<code>iinc</code></p>
<p>比较指令：<code>dcmpg</code>、<code>dcmpl</code>、<code>fcmpg</code>、<code>fcmpl</code>、<code>lcmp</code></p>
<p>《Java虚拟机规范》规定了在处理整型数据时，只有除法指令（idiv和ldiv）以及求余指令（irem和lrem）中当出现除数为零时会导致虚拟机抛出<code>ArithmeticException</code>异常，其余任何整型数运算场景都不应该抛出运行时异常。</p>
<blockquote>
<p>Java虚拟机必须完全支持IEEE 754中定义的“非正规浮点数值”（Denormalized Floating-Point Number）和“逐级下溢”（Gradual Underflow）的运算规则。这些规则将会使某些数值算法处理起来变得明确，不会出现模棱两可的困境。譬如以上规则要求Java虚拟机在进行浮点数运算时，所有的运算结果都必须舍入到适当的精度，非精确的结果必须舍入为可被表示的最接近的精确值；如果有两种可表示的形式与该值一样接近，那将优先选择最低有效位为零的。这种舍入模式也是IEEE 754规范中的默认舍入模式，称为向最接近数舍入模式。而在把浮点数转换为整数时，Java虚拟机使用IEEE 754标准中的向零舍入模式，这种模式的舍入结果会导致数字被截断，所有小数部分的有效字节都会被丢弃掉。向零舍入模式将在目标数值类型中选择一个最接近，但是不大于原值的数字来作为最精确的舍入结果。</p>
</blockquote>
<p>浮点异常</p>
<blockquote>
<p>Java虚拟机在处理浮点数运算时，不会抛出任何运行时异常（这里所讲的是Java语言中的异常，不可与IEEE 754规范中的浮点异常互相混淆，IEEE 754的浮点异常是一种运算信号），当一个操作产生溢出时，将会使用有符号的无穷大来表示；如果某个操作结果没有明确的数学定义的话，将会使用<code>NaN</code>（Not a Number）值来表示。所有使用<code>NaN</code>值作为操作数的算术操作，结果都会返回<code>NaN</code>。</p>
</blockquote>
<p>Java虚拟机在处理浮点数运算时，不会抛出任何运行时异常（这里所讲的是Java语言中的异常，请读者勿与IEEE 754规范中的浮点异常互相混淆，IEEE 754的浮点异常是一种运算信号），当一个操作产生溢出时，将会使用有符号的无穷大来表示；如果某个操作结果没有明确的数学定义的话，将会使用NaN（Not a Number）值来表示。所有使用NaN值作为操作数的算术操作，结果都会返回NaN。</p>
<h3 id="四、类型转换指令"><a href="#四、类型转换指令" class="headerlink" title="四、类型转换指令"></a>四、类型转换指令</h3><p>类型转换指令可以将两种不同的数值类型相互转换，这些转换操作一般用于实现用户代码中的显式类型转换操作，或者用来处理本节开篇所提到的字节码指令集中数据类型相关指令无法与数据类型一一对应的问题。</p>
<p>Java虚拟机直接支持（即转换时无须显式的转换指令）以下数值类型的宽化类型转换（Widening Numeric Conversion，即小范围类型向大范围类型的安全转换）：</p>
<p>int类型到long、float或者double类型</p>
<p>long类型到float、double类型</p>
<p>float类型到double类型</p>
<p>与之相对的，处理窄化类型转换（Narrowing Numeric Conversion）时，就必须显式地使用转换指令来完成，这些转换指令包括<code>i2b</code>、<code>i2c</code>、<code>i2s</code>、<code>l2i</code>、<code>f2i</code>、<code>f2l</code>、<code>d2i</code>、<code>d2l</code>和<code>d2f</code>。</p>
<p>窄化类型转换可能会导致转换结果产生不同的正负号、不同的数量级的情况，转换过程很可能会导致数值的精度丢失。</p>
<p>在将<code>int</code>或<code>long</code>类型窄化转换为整数类型T的时候，转换过程仅仅是简单丢弃除最低位N字节以外的内容，N是类型T的数据类型长度，这将可能导致转换结果与输入值有不同的正负号。对于了解计算机数值存储和表示的程序员来说这点很容易理解，因为原来符号位处于数值的最高位，高位被丢弃之后，转换结果的符号就取决于低N字节的首位了。</p>
<p>Java虚拟机将一个浮点值窄化转换为整数类型T（T限于<code>int</code>或<code>long</code>类型之一）的时候，必须遵循以下转换规则：</p>
<p>（a）如果浮点值是<code>NaN</code>，那转换结果就是int或long类型的0。</p>
<p>（b）如果浮点值不是无穷大的话，浮点值使用IEEE 754的向零舍入模式取整，获得整数值v。如果v在目标类型T（int或long）的表示范围之类，那转换结果就是v；否则，将根据v的符号，转换为T所能表示的最大或者最小正数。</p>
<p>从double类型到float类型做窄化转换的过程与IEEE 754中定义的一致，通过IEEE 754向最接近数舍入模式舍入得到一个可以使用float类型表示的数字。如果转换结果的绝对值太小、无法使用float来表示的话，将返回float类型的正负零；如果转换结果的绝对值太大、无法使用float来表示的话，将返回float类型的正负无穷大。对于double类型的NaN值将按规定转换为float类型的NaN值。</p>
<p>尽管数据类型窄化转换可能会发生上限溢出、下限溢出和精度丢失等情况，但是《Java虚拟机规范》中明确规定数值类型的窄化转换指令永远不可能导致虚拟机抛出运行时异常。</p>
<h3 id="五、对象创建与访问指令"><a href="#五、对象创建与访问指令" class="headerlink" title="五、对象创建与访问指令"></a>五、对象创建与访问指令</h3><p>虽然类实例和数组都是对象，但Java虚拟机对类实例和数组的创建与操作使用了不同的字节码指令（在下一章会讲到数组和普通类的类型创建过程是不同的）。对象创建后，就可以通过对象访问指令获取对象实例或者数组实例中的字段或者数组元素，这些指令包括：</p>
<p>（a）创建类实例的指令：<code>new</code></p>
<p>（b）创建数组的指令：<code>newarray</code>、<code>anewarray</code>、<code>multianewarray</code></p>
<p>（c）访问类字段（<code>static</code>字段，或者称为类变量）和实例字段（非<code>static</code>字段，或者称为实例变量）的指令：<code>getfield</code>、<code>putfield</code>、<code>getstatic</code>、<code>putstatic</code></p>
<p>（d）把一个数组元素加载到操作数栈的指令：<code>baload</code>、<code>caload</code>、<code>saload</code>、<code>iaload</code>、<code>laload</code>、<code>faload</code>、<code>daload</code>、<code>aaload</code></p>
<p>（e）将一个操作数栈的值储存到数组元素中的指令：<code>bastore</code>、<code>castore</code>、<code>sastore</code>、<code>iastore</code>、<code>fastore</code>、<code>dastore</code>、<code>aastore</code></p>
<p>（f）取数组长度的指令：<code>arraylength</code></p>
<p>（g）检查类实例类型的指令：<code>instanceof</code>、<code>checkcast</code></p>
<h3 id="六、操作数栈管理指令"><a href="#六、操作数栈管理指令" class="headerlink" title="六、操作数栈管理指令"></a>六、操作数栈管理指令</h3><p>如同操作一个普通数据结构中的堆栈那样，Java虚拟机提供了一些用于直接操作操作数栈的指令，包括：</p>
<p>（a）将操作数栈的栈顶一个或两个元素出栈：<code>pop</code>、<code>pop2</code></p>
<p>（b）复制栈顶一个或两个数值并将复制值或双份的复制值重新压入栈顶：<code>dup</code>、<code>dup2</code>、<code>dup_x1</code>、<code>dup2_x1</code>、<code>dup_x2</code>、<code>dup2_x2</code></p>
<p>（c）将栈最顶端的两个数值互换：<code>swap</code></p>
<h3 id="七、控制转移指令"><a href="#七、控制转移指令" class="headerlink" title="七、控制转移指令"></a>七、控制转移指令</h3><p>控制转移指令可以让Java虚拟机有条件或无条件地从指定位置指令（而不是控制转移指令）的下一条指令继续执行程序，从概念模型上理解，可以认为控制指令就是在有条件或无条件地修改PC寄存器的值。控制转移指令包括：</p>
<p>（a）条件分支：<code>ifeq</code>、<code>iflt</code>、<code>ifle</code>、<code>ifne</code>、<code>ifgt</code>、<code>ifge</code>、<code>ifnull</code>、<code>ifnonnull</code>、<code>if_icmpeq</code>、<code>if_icmpne</code>、<code>if_icmplt</code>、<code>if_icmpgt</code>、<code>if_icmple</code>、<code>if_icmpge</code>、<code>if_acmpeq和if_acmpne</code></p>
<p>（b）复合条件分支：<code>tableswitch</code>、<code>lookupswitch</code></p>
<p>（c）无条件分支：<code>goto</code>、<code>goto_w</code>、<code>jsr</code>、<code>jsr_w</code>、<code>ret</code></p>
<p>Java虚拟机中有专门的指令集用来处理int和reference类型的条件分支比较操作，为了可以无须明显标识一个数据的值是否null，也有专门的指令用来检测null值。</p>
<blockquote>
<p>对于boolean类型、byte类型、char类型和short类型的条件分支比较操作，都使用int类型的比较指令来完成，而对于long类型、float类型和double类型的条件分支比较操作，则会先执行相应类型的比较运算指令（dcmpg、dcmpl、fcmpg、fcmpl、lcmp），运算指令会返回一个整型值到操作数栈中，随后再执行int类型的条件分支比较操作来完成整个分支跳转。由于各种类型的比较最终都会转化为int类型的比较操作，int类型比较是否方便、完善就显得尤为重要，而Java虚拟机提供的int类型的条件分支指令是最为丰富、强大的。</p>
</blockquote>
<h3 id="八、方法调用和返回指令"><a href="#八、方法调用和返回指令" class="headerlink" title="八、方法调用和返回指令"></a>八、方法调用和返回指令</h3><p>指令用于方法调用：</p>
<p>（a）<code>invokevirtual</code>指令：用于调用对象的实例方法，根据对象的实际类型进行分派（虚方法分派），这也是Java语言中最常见的方法分派方式。</p>
<p>（b）<code>invokeinterface</code>指令：用于调用接口方法，它会在运行时搜索一个实现了这个接口方法的对象，找出适合的方法进行调用。</p>
<p>（c）<code>invokespecial</code>指令：用于调用一些需要特殊处理的实例方法，包括实例初始化方法、私有方法和父类方法。</p>
<p>（d）<code>invokestatic</code>指令：用于调用类静态方法（static方法）。</p>
<p>（e）<code>invokedynamic</code>指令：用于在运行时动态解析出调用点限定符所引用的方法。并执行该方法。前面四条调用指令的分派逻辑都固化在Java虚拟机内部，用户无法改变，而<code>invokedynamic</code>指令的分派逻辑是由用户所设定的引导方法决定的。</p>
<p>方法调用指令与数据类型无关，而方法返回指令是根据返回值的类型区分的，包括<code>ireturn</code>（当返回值是<code>boolean</code>、<code>byte</code>、<code>char</code>、<code>short</code>和<code>int</code>类型时使用）、<code>lreturn</code>、<code>freturn</code>、<code>dreturn</code>和<code>areturn</code>，另外还有一条return指令供声明为<code>void</code>的方法、实例初始化方法、类和接口的类初始化方法使用。</p>
<h3 id="九、异常指令"><a href="#九、异常指令" class="headerlink" title="九、异常指令"></a>九、异常指令</h3><p>Java程序中显式抛出异常的操作（throw语句）都由athrow指令来实现，除了用throw语句显式抛出异常的情况之外，《Java虚拟机规范》还规定了许多运行时异常会在其他Java虚拟机指令检测到异常状况时自动抛出。例如前面介绍整数运算中，当除数为零时，虚拟机会在idiv或ldiv指令中抛出ArithmeticException异常。而在Java虚拟机中，处理异常（catch语句）不是由字节码指令来实现的（很久之前曾经使用jsr和ret指令来实现，现在已经不用了），而是采用异常表来完成。</p>
<h3 id="十、同步指令"><a href="#十、同步指令" class="headerlink" title="十、同步指令"></a>十、同步指令</h3><p>Java虚拟机可以支持方法级的同步和方法内部一段指令序列的同步，这两种同步结构都是使用管程（<code>Monitor</code>，更常见的是直接将它称为“锁”）来实现的。</p>
<p>方法级的同步是隐式的，无须通过字节码指令来控制，它实现在方法调用和返回操作之中。虚拟机可以从方法常量池中的方法表结构中的<code>ACC_SYNCHRONIZED</code>访问标志得知一个方法是否被声明为同步方法。当方法调用时，调用指令将会检查方法的<code>ACC_SYNCHRONIZED</code>访问标志是否被设置，如果设置了，执行线程就要求先成功持有管程，然后才能执行方法，最后当方法完成（无论是正常完成还是非正常完成）时释放管程。在方法执行期间，执行线程持有了管程，其他任何线程都无法再获取到同一个管程。如果一个同步方法执行期间抛出了异常，并且在方法内部无法处理此异常，那这个同步方法所持有的管程将在异常抛到同步方法边界之外时自动释放。</p>
<p>同步一段指令集序列通常是由Java语言中的<code>synchronized</code>语句块来表示的，Java虚拟机的指令集中有<code>monitorenter</code>和<code>monitorexit</code>两条指令来支持<code>synchronized</code>关键字的语义，正确实现<code>synchronized</code>关键字需要Javac编译器与Java虚拟机两者共同协作支持</p>
<p>java代码</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">onlyMe</span><span class="token punctuation">(</span>Foo f<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">synchronized</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>对应的字节码清单：</p>
<pre class=" language-txt"><code class="language-txt">Method void onlyMe(Foo)
0 aload_1                         // 将对象f入栈
1 dup                           // 复制栈顶元素（即f的引用）
2 astore_2                        // 将栈顶元素存储到局部变量表变量槽 2中
3 monitorenter                    // 以栈定元素（即f）作为锁，开始同步
4 aload_0                         // 将局部变量槽 0（即this指针）的元素入栈
5 invokevirtual #5                // 调用doSomething()方法
8 aload_2                         // 将局部变量Slow 2的元素（即f）入栈
9 monitorexit                     // 退出同步
10 goto 18                        // 方法正常结束，跳转到18返回
13 astore_3                       // 从这步开始是异常路径，见下面异常表的Taget 13
14 aload_2                        // 将局部变量Slow 2的元素（即f）入栈
15 monitorexit                    // 退出同步
16 aload_3                        // 将局部变量Slow 3的元素（即异常对象）入栈
17 athrow                         // 把异常对象重新抛出给onlyMe()方法的调用者
18 return                         // 方法正常返回

Exception table:
FromTo Target Type
   4    10     13 any
  13    16     13 any</code></pre>
<p>编译器必须确保无论方法通过何种方式完成，方法中调用过的每条<code>monitorenter</code>指令都必须有其对应的<code>monitorexit</code>指令，而无论这个方法是正常结束还是异常结束。</p>
<p>为了保证在方法异常完成时<code>monitorenter</code>和<code>monitorexit</code>指令依然可以正确配对执行，编译器会自动产生一个异常处理程序，这个异常处理程序声明可处理所有的异常，它的目的就是用来执行<code>monitorexit</code>指令。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
        <tag>字节码指令</tag>
      </tags>
  </entry>
  <entry>
    <title>jvm之类加载机制</title>
    <url>/posts/22096143.html</url>
    <content><![CDATA[<h2 id="jvm类加载机制"><a href="#jvm类加载机制" class="headerlink" title="jvm类加载机制"></a>jvm类加载机制</h2><p>什么是类加载机制？</p>
<blockquote>
<p>Java虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的Java类型，这个过程被称作虚拟机的类加载机制。</p>
</blockquote>
<h3 id="一、类的生命周期"><a href="#一、类的生命周期" class="headerlink" title="一、类的生命周期"></a>一、类的生命周期</h3><p>个类型从被加载到虚拟机内存中开始，到卸载出内存为止，它的整个生命周期将会经历加载（Loading）、验证（Verification）、准备（Preparation）、解析（Resolution）、初始化（Initialization）、使用（Using）和卸载（Unloading）七个阶段。</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-clazz-load/jvm-class-load-life.jpg" alt="类的生命周期"></p>
<p>其中验证、准备、解析三个部分统称为连接（Linking）。</p>
<p>加载、验证、准备、初始化和卸载这五个阶段的顺序是确定的，类型的加载过程必须按照这种顺序按部就班地开始，这些阶段通常都是互相交叉地混合进行的，会在一个阶段执行的过程中调用、激活另一个阶段。</p>
<p>《Java虚拟机规范》严格规定了有且只有六种情况必须立即对类进行“初始化”（而加载、验证、准备自然需要在此之前开始）：</p>
<p>1）遇到new、getstatic、putstatic或invokestatic这四条字节码指令时，如果类型没有进行过初始化，则需要先触发其初始化阶段。能够生成这四条指令的典型Java代码场景有：</p>
<p>​    （a）使用new关键字实例化对象的时候。</p>
<p>​    （b）读取或设置一个类型的静态字段（被final修饰、已在编译期把结果放入常量池的静态字段除外）的时候。</p>
<p>​    （c）调用一个类型的静态方法的时候。</p>
<p>2）使用java.lang.reflect包的方法对类型进行反射调用的时候，如果类型没有进行过初始化，则需要先触发其初始化。</p>
<p>3）当初始化类的时候，如果发现其父类还没有进行过初始化，则需要先触发其父类的初始化。</p>
<p>4）当虚拟机启动时，用户需要指定一个要执行的主类（包含main()方法的那个类），虚拟机会先初始化这个主类。</p>
<p>5）当使用JDK 7新加入的动态语言支持时，如果一个java.lang.invoke.MethodHandle实例最后的解析结果为REF_getStatic、REF_putStatic、REF_invokeStatic、REF_newInvokeSpecial四种类型的方法句柄，并且这个方法句柄对应的类没有进行过初始化，则需要先触发其初始化。</p>
<p>6）当一个接口中定义了JDK 8新加入的默认方法（被default关键字修饰的接口方法）时，如果有这个接口的实现类发生了初始化，那该接口要在其之前被初始化。</p>
<p>这六种场景中的行为称为对一个类型进行主动引用。除此之外，所有引用类型的方式都不会触发初始化，称为被动引用。</p>
<p>另外的几种情况：</p>
<p>示例一：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zzy<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>clazzload<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * 被动使用类字段演示一：
 * 通过子类引用父类的静态字段，不会导致子类初始化
 **/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SuperClass</span> <span class="token punctuation">{</span>

    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SuperClass init!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zzy<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>clazzload<span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SubClass</span> <span class="token keyword">extends</span> <span class="token class-name">SuperClass</span> <span class="token punctuation">{</span>

    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SubClass init!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zzy<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>clazzload<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">/**
 * 非主动使用类字段演示
 **/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NotInitialization</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>SubClass<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span></code></pre>
<p>输出结果 </p>
<pre class=" language-txt"><code class="language-txt">SuperClass init!
123</code></pre>
<p>输出“SuperClass init！”,没有输出子类的初始化。</p>
<p>对于静态字段，只有直接定义这个字段的类才会被初始化，因此通过其子类来引用父类中定义的静态字段，只会触发父类的初始化而不会触发子类的初始化。</p>
<p>若要触发子类的加载和验证阶段，对于HotSpot虚拟机来说，可通过-XX：+TraceClassLoading参数观察到此操作是会导致子类加载的。</p>
<p>示例二：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zzy<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>clazzload<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * 被动使用类字段演示二：
 * 通过数组定义来引用类，不会触发此类的初始化
 **/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NotInitialization</span> <span class="token punctuation">{</span>
     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token comment" spellcheck="true">//System.out.println(SubClass.value);</span>

         SuperClass<span class="token punctuation">[</span><span class="token punctuation">]</span> sca <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperClass</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>运行之后发现没有输出“SuperClass init！”</p>
<p>这段代码里面触发了另一个名为“[Lcom.zzy.demo.clazzload.SuperClass”的类的初始化阶段，对于用户代码来说，这并不是一个合法的类型名称，它是一个由虚拟机自动生成的、直接继承于java.lang.Object的子类，创建动作由字节码指令newarray触发。</p>
<blockquote>
<p>这个类代表了一个元素类型为com.zzy.demo.clazzload.SuperClass的一维数组，数组中应有的属性和方法（用户可直接使用的只有被修饰为public的length属性和clone()方法）都实现在这个类里。Java语言中对数组的访问要比C/C++相对安全，很大程度上就是因为这个类包装了数组元素的访问[插图]，而C/C++中则是直接翻译为对数组指针的移动。在Java语言里，当检查到发生数组越界时会抛出java.lang.ArrayIndexOutOfBoundsException异常，避免了直接造成非法内存访问。</p>
</blockquote>
<p>示例三：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zzy<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>clazzload<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * 被动使用类字段演示三：
 * 常量在编译阶段会存入调用类的常量池中，本质上没有直接引用到定义常量的类，因此不会触发定义常量的
   类的初始化
 **/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConstClass</span> <span class="token punctuation">{</span>

    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ConstClass init!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String HELLOWORLD <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zzy<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>clazzload<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">/**
 * 非主动使用类字段演示
 **/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NotInitialization</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ConstClass<span class="token punctuation">.</span>HELLOWORLD<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>上述代码运行之后，也没有输出“ConstClass init！”，这是因为虽然在Java源码中确实引用了ConstClass类的常量HELLOWORLD，但其实在编译阶段通过常量传播优化，已经将此常量的值“hello world”直接存储在NotInitialization类的常量池中，以后NotInitialization对常量ConstClass.HELLOWORLD的引用，实际都被转化为NotInitialization类对自身常量池的引用了。也就是说，实际上NotInitialization的Class文件之中并没有ConstClass类的符号引用入口，这两个类在编译成Class文件后就已不存在任何联系了。</p>
<p>接口初始化：</p>
<p>接口的加载过程与类加载过程稍有不同，接口也有初始化过程，这点与类是一致的。</p>
<p>上面的代码都是用静态语句块“static{}”来输出初始化信息的，而接口中不能使用“static{}”语句块，但编译器仍然会为接口生成<code>&quot;&lt;&quot;clinit&gt;()&quot;</code>类构造器，用于初始化接口中所定义的成员变量。</p>
<p>接口与类真正有所区别的是前面讲述的六种“有且仅有”需要触发初始化场景中的第三种：当一个类在初始化时，要求其父类全部都已经初始化过了，但是一个接口在初始化时，并不要求其父接口全部都完成了初始化，只有在真正使用到父接口的时候（如引用接口中定义的常量）才会初始化。</p>
<h3 id="二、类加载过程"><a href="#二、类加载过程" class="headerlink" title="二、类加载过程"></a>二、类加载过程</h3><h4 id="1-加载"><a href="#1-加载" class="headerlink" title="1 加载"></a>1 加载</h4><p>“加载”（Loading）阶段是整个“类加载”（Class Loading）过程中的一个阶段，希望读者没有混淆这两个看起来很相似的名词。在加载阶段，Java虚拟机需要完成以下三件事情：</p>
<p>1）通过一个类的全限定名来获取定义此类的二进制字节流。</p>
<p>2）将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。</p>
<p>3）在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口。</p>
<p>数组类加载：</p>
<p>数组类本身不通过类加载器创建，它是由Java虚拟机直接在内存中动态构造出来的。但数组类与类加载器仍然有很密切的关系，因为数组类的元素类型（Element Type，指的是数组去掉所有维度的类型）最终还是要靠类加载器来完成加载，一个数组类（下面简称为C）创建过程遵循以下规则：</p>
<p>（1）如果数组的组件类型（Component Type，指的是数组去掉一个维度的类型，注意和前面的元素类型区分开来）是引用类型，那就递归采用本节中定义的加载过程去加载这个组件类型，数组C将被标识在加载该组件类型的类加载器的类名称空间上。</p>
<p>（2）如果数组的组件类型不是引用类型（例如int[]数组的组件类型为int），Java虚拟机将会把数组C标记为与引导类加载器关联。</p>
<p>（3）数组类的可访问性与它的组件类型的可访问性一致，如果组件类型不是引用类型，它的数组类的可访问性将默认为public，可被所有的类和接口访问到。</p>
<p>加载阶段结束后，Java虚拟机外部的二进制字节流就按照虚拟机所设定的格式存储在方法区。方法区中的数据存储格式完全由虚拟机实现自行定义，《Java虚拟机规范》未规定此区域的具体数据结构。类型数据妥善安置在方法区之后，会在Java堆内存中实例化一个java.lang.Class类的对象，这个对象将作为程序访问方法区中的类型数据的外部接口。</p>
<blockquote>
<p>加载阶段与连接阶段的部分动作（如一部分字节码文件格式验证动作）是交叉进行的，加载阶段尚未完成，连接阶段可能已经开始，但这些夹在加载阶段之中进行的动作，仍然属于连接阶段的一部分，这两个阶段的开始时间仍然保持着固定的先后顺序。</p>
</blockquote>
<h4 id="2-验证"><a href="#2-验证" class="headerlink" title="2 验证"></a>2 验证</h4><p>验证是连接阶段的第一步，这一阶段的目的是确保Class文件的字节流中包含的信息符合《Java虚拟机规范》的全部约束要求，保证这些信息被当作代码运行后不会危害虚拟机自身的安全。</p>
<p>验证阶段大致上会完成下面四个阶段的检验动作：文件格式验证、元数据验证、字节码验证和符号引用验证。</p>
<p>1）文件格式验证</p>
<p>第一阶段的主要目的：</p>
<p>​    是为保证输入的字节流能正确地解析并存储于方法区之内，格式上符合描述一个Java类型信息的要求。</p>
<p>第一阶段要验证字节流是否符合Class文件格式的规范，并且能被当前版本的虚拟机处理。这一阶段可能包括下面这些验证点：</p>
<p>（a）是否以魔数0xCAFEBABE开头。</p>
<p>（b）主、次版本号是否在当前Java虚拟机接受范围之内。</p>
<p>（c）常量池的常量中是否有不被支持的常量类型（检查常量tag标志）。</p>
<p>（d）指向常量的各种索引值中是否有指向不存在的常量或不符合类型的常量。</p>
<p>（e）CONSTANT_Utf8_info型的常量中是否有不符合UTF-8编码的数据。</p>
<p>（f）Class文件中各个部分及文件本身是否有被删除的或附加的其他信息。</p>
<p>（g）……等等等等</p>
<p>验证点还远不止这些。</p>
<p>2）元数据验证</p>
<p>第二阶段的主要目的：</p>
<p>​    对类的元数据信息进行语义校验，保证不存在与《Java语言规范》定义相悖的元数据信息。</p>
<p>第二阶段是对字节码描述的信息进行语义分析，以保证其描述的信息符合《Java语言规范》的要求，这个阶段可能包括的验证点如下：</p>
<p>（a）这个类是否有父类（除了java.lang.Object之外，所有的类都应当有父类）。</p>
<p>（b）这个类的父类是否继承了不允许被继承的类（被final修饰的类）。</p>
<p>（c）如果这个类不是抽象类，是否实现了其父类或接口之中要求实现的所有方法。</p>
<p>（d）类中的字段、方法是否与父类产生矛盾（例如覆盖了父类的final字段，或者出现不符合规则的方法重载，例如方法参数都一致，但返回值类型却不同等）。</p>
<p>（e）……等等等等</p>
<p>3）字节码验证</p>
<p>第三阶段是整个验证过程中最复杂的一个阶段，主要目的：</p>
<p>​    通过数据流分析和控制流分析，确定程序语义是合法的、符合逻辑的。</p>
<p>在第二阶段对元数据信息中的数据类型校验完毕以后，这阶段就要对类的方法体（Class文件中的Code属性）进行校验分析，保证被校验类的方法在运行时不会做出危害虚拟机安全的行为。</p>
<p>（a）保证任意时刻操作数栈的数据类型与指令代码序列都能配合工作，例如不会出现类似于“在操作栈放置了一个int类型的数据，使用时却按long类型来加载入本地变量表中”这样的情况。</p>
<p>（b）保证任何跳转指令都不会跳转到方法体以外的字节码指令上。</p>
<p>（c）保证方法体中的类型转换总是有效的，例如可以把一个子类对象赋值给父类数据类型，这是安全的，但是把父类对象赋值给子类数据类型，甚至把对象赋值给与它毫无继承关系、完全不相干的一个数据类型，则是危险和不合法的。</p>
<p>（d）……等等等等</p>
<blockquote>
<p>JDK 6的HotSpot虚拟机中提供了-XX：-UseSplitVerifier选项来关闭掉这项优化，或者使用参数<code>-XX：+FailOverToOldVerifier</code>要求在类型校验失败的时候退回到旧的类型推导方式进行校验。而到了JDK 7之后，尽管虚拟机中仍然保留着类型推导验证器的代码，但是对于主版本号大于50（对应JDK 6）的Class文件，使用类型检查来完成数据流分析校验则是唯一的选择，不允许再退回到原来的类型推导的校验方式。</p>
</blockquote>
<p>4）符号引用验证</p>
<p>符号引用验证的主要目的:</p>
<p>​    确保解析行为能正常执行，如果无法通过符号引用验证，Java虚拟机将会抛出一个<code>java.lang.IncompatibleClassChangeError</code>的子类异常，典型的如：<code>java.lang.IllegalAccessError</code>、<code>java.lang.NoSuchFieldError</code>、<code>java.lang.NoSuchMethodError</code>等。</p>
<p>最后一个阶段的校验行为发生在虚拟机将符号引用转化为直接引用[插图]的时候，这个转化动作将在连接的第三阶段——解析阶段中发生。</p>
<p>符号引用验证可以看作是对类自身以外（常量池中的各种符号引用）的各类信息进行匹配性校验，通俗来说就是，该类是否缺少或者被禁止访问它依赖的某些外部类、方法、字段等资源。</p>
<p>本阶段通常需要校验下列内容：</p>
<p>（a）符号引用中通过字符串描述的全限定名是否能找到对应的类。</p>
<p>（b）在指定类中是否存在符合方法的字段描述符及简单名称所描述的方法和字段。</p>
<p>（c）符号引用中的类、字段、方法的可访问性（<code>private</code>、<code>protected</code>、<code>public</code>、<code>&lt;package&gt;</code>）是否可被当前类访问。</p>
<p>（d）……等等等等</p>
<blockquote>
<p>验证阶段对于虚拟机的类加载机制来说，是一个非常重要的、但却不是必须要执行的阶段，因为验证阶段只有通过或者不通过的差别，只要通过了验证，其后就对程序运行期没有任何影响了。如果程序运行的全部代码（包括自己编写的、第三方包中的、从外部加载的、动态生成的等所有代码）都已经被反复使用和验证过，在生产环境的实施阶段就可以考虑使用-Xverify：none参数来关闭大部分的类验证措施，以缩短虚拟机类加载的时间。</p>
</blockquote>
<h4 id="3-准备"><a href="#3-准备" class="headerlink" title="3 准备"></a>3 准备</h4><p>准备阶段是正式为类中定义的变量（即静态变量，被static修饰的变量）分配内存并设置类变量初始值的阶段。</p>
<p>在JDK 7及之前，HotSpot使用永久代来实现方法区时，这些变量所使用的内存都应当在方法区中进行分配。</p>
<p>在JDK 8及之后，类变量则会随着Class对象一起存放在Java堆中。</p>
<p>注意：</p>
<p>（1）准备阶段进行内存分配的仅包括类变量，而不包括实例变量，实例变量将会在对象实例化时随着对象一起分配在Java堆中。</p>
<p>（2）初始值“通常情况”下是数据类型的零值。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">1234</span><span class="token punctuation">;</span></code></pre>
<p>那变量value在准备阶段过后的初始值为0而不是1234，因为这时尚未开始执行任何Java方法，而把value赋值为123的putstatic指令是程序被编译后，存放于类构造器<clinit>()方法之中，所以把value赋值为123的动作要到类的初始化阶段才会被执行。</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-clazz-load/jvm-class-load-initvalue.jpg" alt="基本数据类型的零值"></p>
<p>（3）“特殊情况”下：如果类字段的字段属性表中存在ConstantValue属性，那在准备阶段变量值就会被初始化为ConstantValue属性所指定的初始值，</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span></code></pre>
<p>编译时Javac将会为value生成ConstantValue属性，在准备阶段虚拟机就会根据Con-stantValue的设置将value赋值为123。</p>
<h4 id="4-解析"><a href="#4-解析" class="headerlink" title="4 解析"></a>4 解析</h4><p>解析阶段是Java虚拟机将常量池内的符号引用替换为直接引用的过程。</p>
<p>什么是符号引用？</p>
<blockquote>
<p>符号引用（Symbolic References）：符号引用以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可。</p>
<p>符号引用与虚拟机实现的内存布局无关，引用的目标并不一定是已经加载到虚拟机内存当中的内容。</p>
<p>各种虚拟机实现的内存布局可以各不相同，但是它们能接受的符号引用必须都是一致的，因为符号引用的字面量形式明确定义在《Java虚拟机规范》的Class文件格式中。</p>
<p>符号引用以CONSTANT_Class_info、CONSTANT_Fieldref_info、CONSTANT_Methodref_info等类型的常量出现。</p>
</blockquote>
<p>什么是直接引用？</p>
<blockquote>
<p>直接引用（Direct References）：直接引用是可以直接指向目标的指针、相对偏移量或者是一个能间接定位到目标的句柄。</p>
<p>直接引用是和虚拟机实现的内存布局直接相关的，同一个符号引用在不同虚拟机实例上翻译出来的直接引用一般不会相同。如果有了直接引用，那引用的目标必定已经在虚拟机的内存中存在。</p>
</blockquote>
<p>解析阶段要求：</p>
<blockquote>
<p>解析阶段要求在执行ane-warray、checkcast、getfield、getstatic、instanceof、invokedynamic、invokeinterface、invoke-special、invokestatic、invokevirtual、ldc、ldc_w、ldc2_w、multianewarray、new、putfield和putstatic这17个用于操作符号引用的字节码指令之前，先对它们所使用的符号引用进行解析。</p>
<p>虚拟机实现可以根据需要来自行判断，到底是在类被加载器加载时就对常量池中的符号引用进行解析，还是等到一个符号引用将要被使用前才去解析它。</p>
</blockquote>
<p>类似地，对方法或者字段的访问，也会在解析阶段中对它们的可访问性（public、protected、private、<package>）进行检查。</p>
<p>符号引用请求基本准则：一次成功，次次成功；一次失败，次次失败。</p>
<blockquote>
<p>对同一个符号引用进行多次解析请求是很常见的事情，除<code>invokedynamic</code>指令以外，虚拟机实现可以对第一次解析的结果进行缓存，譬如在运行时直接引用常量池中的记录，并把常量标识为已解析状态，从而避免解析动作重复进行。无论是否真正执行了多次解析动作，Java虚拟机都需要保证的是在同一个实体中，如果一个符号引用之前已经被成功解析过，那么后续的引用解析请求就应当一直能够成功；同样地，如果第一次解析失败了，其他指令对这个符号的解析请求也应该收到相同的异常，哪怕这个请求的符号在后来已成功加载进Java虚拟机内存之中。</p>
<p>因为invokedynamic指令的目的本来就是用于动态语言支持，它对应的引用称为“动态调用点限定符（Dynamically-Computed Call Site Specifier）”，这里“动态”的含义是指必须等到程序实际运行到这条指令时，解析动作才能进行。相对地，其余可触发解析的指令都是“静态”的，可以在刚刚完成加载阶段，还没有开始执行代码时就提前进行解析。</p>
</blockquote>
<p>解析动作主要针对类或接口、字段、类方法、接口方法、方法类型、方法句柄和调用点限定符这7类符号引用进行，分别对应于常量池的</p>
<p><code>CONSTANT_Class_info</code>(类)、</p>
<p><code>CON-STANT_Fieldref_info</code>（字段）、</p>
<p><code>CONSTANT_Methodref_info</code>（方法）、</p>
<p><code>CONSTANT_InterfaceMethodref_info</code>（接口方法）、<code>CONSTANT_MethodType_info</code>、<code>CONSTANT_MethodHandle_info</code>、<code>CONSTANT_Dyna-mic_info</code>和<code>CONSTANT_InvokeDynamic_info</code> 8种常量类型。</p>
<p>前4种常量类型解析<a href="/images/jvm-clazz-load/jiexi-details.txt">jiexi_Details.txt</a></p>
<h4 id="5-初始化"><a href="#5-初始化" class="headerlink" title="5 初始化"></a>5 初始化</h4><p>类的初始化阶段是类加载过程的最后一个步骤，之前介绍的几个类加载的动作里，除了在加载阶段用户应用程序可以通过自定义类加载器的方式局部参与外，其余动作都完全由Java虚拟机来主导控制。直到初始化阶段，Java虚拟机才真正开始执行类中编写的Java程序代码，将主导权移交给应用程序。</p>
<p>初始化阶段就是执行类构造器<code>&lt;clinit&gt;()</code>方法的过程。<code>&lt;clinit&gt;()</code>是Javac编译器的自动生成物。</p>
<p>（1）<code>&lt;clinit&gt;()</code>方法是由编译器自动收集类中的所有类变量的赋值动作和静态语句块（static{}块）中的语句合并产生的，编译器收集的顺序是由语句在源文件中出现的顺序决定的，静态语句块中只能访问到定义在静态语句块之前的变量，定义在它之后的变量，在前面的静态语句块可以赋值，但是不能访问。</p>
<p>（2）<code>&lt;clinit&gt;()</code>方法与类的构造函数（即在虚拟机视角中的实例构造器<code>&lt;init&gt;()</code>方法）不同，它不需要显式地调用父类构造器，Java虚拟机会保证在子类的<code>&lt;clinit&gt;()</code>方法执行前，父类的<code>&lt;clinit&gt;()</code>方法已经执行完毕。因此在Java虚拟机中第一个被执行的<code>&lt;clinit&gt;()</code>方法的类型肯定是java.lang.Object。</p>
<p> 由于父类的<code>&lt;clinit&gt;()</code>方法先执行，也就意味着父类中定义的静态语句块要优先于子类的变量赋值操作。如下代码清单中，字段B的值将会是2而不是1。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zzy<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>clazzload<span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> A <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        A <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Sub</span> <span class="token keyword">extends</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> B <span class="token operator">=</span> A<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Sub<span class="token punctuation">.</span>B<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>（3）<code>&lt;clinit&gt;()</code>方法对于类或接口来说并不是必需的，如果一个类中没有静态语句块，也没有对变量的赋值操作，那么编译器可以不为这个类生成<code>&lt;clinit&gt;()</code>方法。</p>
<p>（4）接口中不能使用静态语句块，但仍然有变量初始化的赋值操作，因此接口与类一样都会生成<code>&lt;clinit&gt;()</code>方法。接口与类不同的是，执行接口的<clinit>()方法不需要先执行父接口的<code>&lt;clinit&gt;()</code>方法，因为只有当父接口中定义的变量被使用时，父接口才会被初始化。此外，接口的实现类在初始化时也一样不会执行接口的<code>&lt;clinit&gt;()</code>方法。</p>
<p>（5）Java虚拟机必须保证一个类的<code>&lt;clinit&gt;()</code>方法在多线程环境中被正确地加锁同步，如果多个线程同时去初始化一个类，那么只会有其中一个线程去执行这个类的<code>&lt;clinit&gt;()</code>方法，其他线程都需要阻塞等待，直到活动线程执行完毕<code>&lt;clinit&gt;()</code>方法。如果在一个类的<code>&lt;clinit&gt;()</code>方法中有耗时很长的操作，那就可能造成多个进程阻塞[插图]，在实际应用中这种阻塞往往是很隐蔽的。下面的代码清单演示了这种场景</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DeadLoopClass</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 如果不加上这个if语句，编译器将提示“Initializer does not complete normally”</span>
           并拒绝编译
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"init DeadLoopClass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Runnable script <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            DeadLoopClass dlc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeadLoopClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" run over"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    Thread thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Thread thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>
    thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>运行结果如下，一条线程在死循环以模拟长时间操作，另外一条线程在阻塞等待：</p>
<pre class=" language-txt"><code class="language-txt">Thread[Thread-0,5,main]start
Thread[Thread-1,5,main]start
Thread[Thread-0,5,main]init DeadLoopClass</code></pre>
<h3 id="三、类加载器"><a href="#三、类加载器" class="headerlink" title="三、类加载器"></a>三、类加载器</h3><h4 id="1、类的比较"><a href="#1、类的比较" class="headerlink" title="1、类的比较"></a>1、类的比较</h4><p>比较两个类是否“相等”，只有在这两个类是由同一个类加载器加载的前提下才有意义，否则，即使这两个类来源于同一个Class文件，被同一个Java虚拟机加载，只要加载它们的类加载器不同，那这两个类就必定不相等。</p>
<p>“相等”：包括代表类的Class对象的equals()方法、isAssignableFrom()方法、isInstance()方法的返回结果，也包括了使用instanceof关键字做对象所属关系判定等各种情况。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zzy<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>clazzload<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">/**
 * 类加载器与instanceof关键字演示
 *
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassLoaderTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>

        ClassLoader myLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">loadClass</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    String fileName <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">".class"</span><span class="token punctuation">;</span>
                    InputStream is <span class="token operator">=</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>is <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>is<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                    is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> <span class="token function">defineClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        Object obj <span class="token operator">=</span> myLoader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">"com.zzy.demo.clazzload.ClassLoaderTest"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">com<span class="token punctuation">.</span>zzy<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>clazzload<span class="token punctuation">.</span>ClassLoaderTest</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>运行结果:</p>
<pre class=" language-txt"><code class="language-txt">class com.zzy.demo.clazzload.ClassLoaderTest
false</code></pre>
<p>因为Java虚拟机中同时存在了两个ClassLoaderTest类，一个是由虚拟机的应用程序类加载器所加载的，另外一个是由我们自定义的类加载器加载的，虽然它们都来自同一个Class文件，但在Java虚拟机中仍然是两个互相独立的类，做对象所属类型检查时的结果自然为false。</p>
<h4 id="2、双亲委派模型"><a href="#2、双亲委派模型" class="headerlink" title="2、双亲委派模型"></a>2、双亲委派模型</h4><p>自JDK 1.2以来，Java一直保持着三层类加载器、双亲委派的类加载架构。</p>
<p>3个系统提供的类加载器：</p>
<p>（1）启动类加载器（Bootstrap Class Loader）</p>
<p>负责加载存放在<JAVA_HOME>\lib目录，或者被-Xbootclasspath参数所指定的路径中存放的，而且是Java虚拟机能够识别的（按照文件名识别，如rt.jar、tools.jar，名字不符合的类库即使放在lib目录中也不会被加载）类库加载到虚拟机的内存中。</p>
<p>启动类加载器无法被Java程序直接引用，用户在编写自定义类加载器时，如果需要把加载请求委派给引导类加载器去处理，那直接使用null代替即可。</p>
<p>ClassLoader.getClassLoader()方法的代码片段：</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
Returns the class loader for the class.  Some implementations may use null to represent the bootstrap class loader. This method will return  null in such implementations if this class was loaded by the bootstrap class loader.
*/</span>
<span class="token keyword">public</span> ClassLoader <span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ClassLoader cl <span class="token operator">=</span> <span class="token function">getClassLoader0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cl <span class="token operator">==</span> null<span class="token punctuation">)</span>
        <span class="token keyword">return</span> null<span class="token punctuation">;</span>
    SecurityManager sm <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>sm <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ClassLoader ccl <span class="token operator">=</span> ClassLoader<span class="token punctuation">.</span><span class="token function">getCallerClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ccl <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> ccl <span class="token operator">!=</span> cl <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>cl<span class="token punctuation">.</span><span class="token function">isAncestor</span><span class="token punctuation">(</span>ccl<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            sm<span class="token punctuation">.</span><span class="token function">checkPermission</span><span class="token punctuation">(</span>SecurityConstants<span class="token punctuation">.</span>GET_CLASSLOADER_PERMISSION<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> cl<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>（2）扩展类加载器（Extension Class Loader）</p>
<p>这个类加载器是在类sun.misc.Launcher$ExtClassLoader中以Java代码的形式实现的。它负责加载<JAVA_HOME>\lib\ext目录中，或者被java.ext.dirs系统变量所指定的路径中所有的类库。</p>
<p>开发中可以直接在程序中使用扩展类加载器来加载Class文件。</p>
<p>（3）应用程序类加载器（Application Class Loader）</p>
<p>这个类加载器由sun.misc.Launcher$AppClassLoader来实现。由于应用程序类加载器是ClassLoader类中的getSystem-ClassLoader()方法的返回值，所以有些场合中也称它为“系统类加载器”。</p>
<p>它负责加载用户类路径（ClassPath）上所有的类库，开发者同样可以直接在代码中使用这个类加载器。</p>
<p>如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-clazz-load/jvm-class-load-classLoader.jpg" alt="类加载器双亲委派模型"></p>
<p>JDK 9之前的Java应用都是由这三种类加载器互相配合来完成加载的，如果用户认为有必要，还可以加入自定义的类加载器来进行拓展，典型的如增加除了磁盘位置之外的Class文件来源，或者通过类加载器实现类的隔离、重载等功能。</p>
<p>图中类加载器之间的层次关系被称为类加载器的“双亲委派模型（Parents Delegation Model）”。</p>
<p>双亲委派模型要求除了顶层的启动类加载器外，其余的类加载器都应有自己的父类加载器。不过这里类加载器之间的父子关系一般不是以继承（Inheritance）的关系来实现的，而是通常使用组合（Composition）关系来复用父加载器的代码。</p>
<p>双亲委派模型的工作过程：</p>
<blockquote>
<p>如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到最顶层的启动类加载器中，只有当父加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需的类）时，子加载器才会尝试自己去完成加载。</p>
</blockquote>
<p>双亲委派模型的实现:</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">synchronized</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">loadClass</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">boolean</span> resolve<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException
<span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 首先，检查请求的类是否已经被加载过了</span>
    Class <span class="token class-name">c</span> <span class="token operator">=</span> <span class="token function">findLoadedClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            c <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            c <span class="token operator">=</span> <span class="token function">findBootstrapClassOrNull</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 如果父类加载器抛出ClassNotFoundException</span>
            <span class="token comment" spellcheck="true">// 说明父类加载器无法完成加载请求</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 在父类加载器无法加载时</span>
            <span class="token comment" spellcheck="true">// 再调用本身的findClass方法来进行类加载</span>
            c <span class="token operator">=</span> <span class="token function">findClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">resolveClass</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> c<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>这段代码的逻辑：</p>
<p>先检查请求加载的类型是否已经被加载过，若没有则调用父加载器的loadClass()方法，若父加载器为空则默认使用启动类加载器作为父加载器。假如父类加载器加载失败，抛出ClassNotFoundException异常的话，才调用自己的findClass()方法尝试进行加载。</p>
<h4 id="3、破坏双亲委派模型"><a href="#3、破坏双亲委派模型" class="headerlink" title="3、破坏双亲委派模型"></a>3、破坏双亲委派模型</h4><p>双亲委派模型主要出现过3次较大规模“被破坏”的情况。</p>
<p>第一次：</p>
<p>发生在双亲委派模型出现之前——即JDK 1.2面世以前的“远古”时代。</p>
<p>类加载器的概念和抽象类java.lang.ClassLoader则在Java的第一个版本中就已经存在，面对已经存在的用户自定义类加载器的代码，Java设计者们引入双亲委派模型时不得不做出一些妥协，为了兼容这些已有代码，无法再以技术手段避免loadClass()被子类覆盖的可能性，只能在JDK 1.2之后的java.lang.ClassLoader中添加一个新的protected方法findClass()，并引导用户编写的类加载逻辑时尽可能去重写这个方法，而不是在loadClass()中编写代码。</p>
<p>按照上面loadClass()方法，双亲委派的具体逻辑就实现在这里面，按照loadClass()方法的逻辑，如果父类加载失败，会自动调用自己的findClass()方法来完成加载，这样既不影响用户按照自己的意愿去加载类，又可以保证新写出来的类加载器是符合双亲委派规则的。</p>
<p>第二次：</p>
<p>是由这个模型自身的缺陷导致的，双亲委派很好地解决了各个类加载器协作时基础类型的一致性问题（越基础的类由越上层的加载器进行加载），基础类型之所以被称为“基础”，是因为它们总是作为被用户代码继承、调用的API存在，但程序设计往往没有绝对不变的完美规则，如果有基础类型又要调用回用户的代码，那该怎么办呢？</p>
<p>一个典型的例子便是JNDI服务，JNDI现在已经是Java的标准服务，它的代码由启动类加载器来完成加载（在JDK1.3时加入到rt.jar的），肯定属于Java中很基础的类型了。但JNDI存在的目的就是对资源进行查找和集中管理，它需要调用由其他厂商实现并部署在应用程序的ClassPath下的JNDI服务提供者接口（Service ProviderInterface，SPI）的代码，现在问题来了，启动类加载器是绝不可能认识、加载这些代码的，那该怎么办？</p>
<p>Java的设计团队只好引入了一个不太优雅的设计：线程上下文类加载器（Thread Context ClassLoader）。这个类加载器可以通过java.lang.Thread类的setContext-ClassLoader()方法进行设置，如果创建线程时还未设置，它将会从父线程中继承一个，如果在应用程序的全局范围内都没有设置过的话，那这个类加载器默认就是应用程序类加载器。有了线程上下文类加载器，程序就可以做一些“舞弊”的事情了。JNDI服务使用这个线程上下文类加载器去加载所需的SPI服务代码，这是一种父类加载器去请求子类加载器完成类加载的行为，这种行为实际上是打通了双亲委派模型的层次结构来逆向使用类加载器，已经违背了双亲委派模型的一般性原则，但也是无可奈何的事情。Java中涉及SPI的加载基本上都采用这种方式来完成，例如JNDI、JDBC、JCE、JAXB和JBI等。不过，当SPI的服务提供者多于一个的时候，代码就只能根据具体提供者的类型来硬编码判断，为了消除这种极不优雅的实现方式，在JDK 6时，JDK提供了java.util.ServiceLoader类，以META-INF/services中的配置信息，辅以责任链模式，这才算是给SPI的加载提供了一种相对合理的解决方案。</p>
<p>第三次：</p>
<p>双亲委派模型的第三次“被破坏”是由于用户对程序动态性的追求而导致的，这里所说的“动态性”指的是一些非常“热”门的名词：代码热替换（Hot Swap）、模块热部署（Hot Deployment）等。说白了就是希望Java应用程序能像我们的电脑外设那样，接上鼠标、U盘，不用重启机器就能立即使用，鼠标有问题或要升级就换个鼠标，不用关机也不用重启。对于个人电脑来说，重启一次其实没有什么大不了的，但对于一些生产系统来说，关机重启一次可能就要被列为生产事故，这种情况下热部署就对软件开发者，尤其是大型系统或企业级软件开发者具有很大的吸引力。</p>
<blockquote>
<p>早在2008年，在Java社区关于模块化规范的第一场战役里，由Sun/Oracle公司所提出的JSR-294[插图]、JSR-277[插图]规范提案就曾败给以IBM公司主导的JSR-291（即OSGi R4.2）提案。尽管Sun/Oracle并不甘心就此失去Java模块化的主导权，随即又再拿出Jigsaw项目迎战，但此时OSGi已经站稳脚跟，成为业界“事实上”的Java模块化标准[插图]。曾经在很长一段时间内，IBM凭借着OSGi广泛应用基础让Jigsaw吃尽苦头，其影响一直持续到Jigsaw随JDK 9面世才算告一段落。而且即使Jigsaw现在已经是Java的标准功能了，它仍需小心翼翼地避开OSGi运行期动态热部署上的优势，仅局限于静态地解决模块间封装隔离和访问控制的问题</p>
</blockquote>
<p>OSGi是如何通过类加载器实现热部署？</p>
<p>OSGi实现模块化热部署的关键是它自定义的类加载器机制的实现，每一个程序模块（OSGi中称为Bundle）都有一个自己的类加载器，当需要更换一个Bundle时，就把Bundle连同类加载器一起换掉以实现代码的热替换。在OSGi环境下，类加载器不再双亲委派模型推荐的树状结构，而是进一步发展为更加复杂的网状结构，当收到类加载请求时，OSGi将按照下面的顺序进行类搜索：<br>1）将以<code>java.*</code>开头的类，委派给父类加载器加载。<br>2）否则，将委派列表名单内的类，委派给父类加载器加载。<br>3）否则，将Import列表中的类，委派给Export这个类的Bundle的类加载器加载。<br>4）否则，查找当前Bundle的ClassPath，使用自己的类加载器加载。<br>5）否则，查找类是否在自己的Fragment Bundle中，如果在，则委派给Fragment Bundle的类加载器加载。<br>6）否则，查找Dynamic Import列表的Bundle，委派给对应Bundle的类加载器加载。<br>7）否则，类查找失败。</p>
<p>上面的查找顺序中只有开头两点仍然符合双亲委派模型的原则，其余的类查找都是在平级的类加载器中进行的。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM LLGC：ZGC</title>
    <url>/posts/e3d9aed7.html</url>
    <content><![CDATA[<h2 id="jvm低延迟垃圾收集器-ZGC"><a href="#jvm低延迟垃圾收集器-ZGC" class="headerlink" title="jvm低延迟垃圾收集器 ZGC"></a>jvm低延迟垃圾收集器 ZGC</h2><p>EN： JVM Low-Latency Garbage Collector : Z Garbage Collector</p>
<h3 id="一-、ZGC简介"><a href="#一-、ZGC简介" class="headerlink" title="一 、ZGC简介"></a>一 、ZGC简介</h3><p>一款在JDK 11中新加入的具有实验性质[插图]的低延迟垃圾收集器，是由Oracle公司研发的。2018年Oracle创建了JEP 333将ZGC提交给OpenJDK。</p>
<h5 id="主要目标："><a href="#主要目标：" class="headerlink" title="主要目标："></a>主要目标：</h5><p>尽可能对吞吐量影响不太大的前提下，实现在任意堆内存大小下都可以把垃圾收集的停顿时间限制在十毫秒以内的低延迟。</p>
<p>演变简史：</p>
<p>Azul VM上的PGC（Pauseless GC） : </p>
<p>​    实现了标记和整理阶段都全程与用户线程并发运行的垃圾收集。</p>
<p>Zing VM上的C4 （Concurrent Continuously Compacting Collector） ：</p>
<p>​     在PGC之上增加了分代收集支持，大幅提升了收集器能够承受的对象分配速度。Azul的C4收集器实现了分代收集后，能够应对的对象分配速率就比不分代的PGC收集器提升了十倍之多。</p>
<p>PGC——》C4——》ZGC</p>
<p>特征简介：</p>
<p>ZGC收集器是一款基于Region内存布局的，（暂时）不设分代的，使用了读屏障、染色指针和内存多重映射等技术来实现可并发的标记-整理算法的，以低延迟为首要目标的一款垃圾收集器。</p>
<h3 id="二-ZGC主要特征："><a href="#二-ZGC主要特征：" class="headerlink" title="二 ZGC主要特征："></a>二 ZGC主要特征：</h3><p>（1）以低延迟为首要目标。</p>
<p>（2）暂不支持分代的，无跨代引用。</p>
<p>（3）基于Region的堆内存布局。</p>
<p>（4）染色指针和读屏障实现并发整理算法。Colored Pointer。</p>
<p>（5）内存多重映射技术。</p>
<p>（6）支持“NUMA-Aware”的内存分配。(NUMA非统一内存访问架构)</p>
<h3 id="三-ZG内存布局"><a href="#三-ZG内存布局" class="headerlink" title="三  ZG内存布局"></a>三  ZG内存布局</h3><p>ZGC在x64硬件平台下的内存布局如图：</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-images/jvm-gc-zgc-2.jpg" alt="ZGC的堆内存布局(彩图)"></p>
<p>ZGC的Region / Page / ZPage 称为 Size Groups ,</p>
<p>大致分三种类：</p>
<p>（A）小型Region（Small Region）：容量固定为2MB，用于放置小于256KB的小对象。</p>
<p>（B）中型Region（Medium Region）：容量固定为32MB，用于放置大于等于256KB但小于4MB的对象。</p>
<p>（C）大型Region（Large Region）：容量不固定，可以动态变化，但必须为2MB的整数倍，用于放置4MB或以上的大对象。实际容量完全有可能小于中型Region，最小容量可低至4MB。大型Region在ZGC的实现中是不会被重分配。</p>
<h3 id="四-并发整理实现：染色指针"><a href="#四-并发整理实现：染色指针" class="headerlink" title="四 并发整理实现：染色指针"></a>四 并发整理实现：染色指针</h3><p>染色指针技术（Colored Pointer   、Tag Pointer或者Version Pointer）是ZGC的标志性设计。</p>
<p>染色指针是一种直接将少量额外的信息存储在指针上的技术。在ZGC中使用染色指针直接把标记信息记在引用对象的指针上。</p>
<p>前提条件：内存多重映射（Multi-Mapping）技术。</p>
<p>染色指针带来的不利：</p>
<p>​    染色指针有4TB的内存限制，不能支持32位平台，不能支持压缩指针。</p>
<p>染色指针带来的优势：</p>
<p>​    （1）染色指针可以使某个Region的存活对象被移走之后，该Region立即就能够被释放和重用掉。</p>
<p>​    （2）染色指针可以大幅减少在垃圾收集过程中内存屏障的使用数量。只使用了读屏障（染色指针+无分代引用）</p>
<p>​    （3）染色指针可以作为一种可扩展的存储结构用来记录更多与对象标记、重定位过程相关的数据，以便日后进一步提高性能。</p>
<h3 id="五-ZGC收集工作过程"><a href="#五-ZGC收集工作过程" class="headerlink" title="五 ZGC收集工作过程"></a>五 ZGC收集工作过程</h3><p><img src="/medias/loading-animated.gif" data-original="/images/jvm-images/jvm-gc-zgc-job.jpg" alt="ZGC收集工作过程"></p>
<p>ZGC收集工作全部四个阶段都是可以并发执行的。仅在两个阶段中间会存在短暂的停顿小阶段。</p>
<h4 id="1-并发标记（Concurrent-Mark）"><a href="#1-并发标记（Concurrent-Mark）" class="headerlink" title="1 并发标记（Concurrent Mark）"></a>1 并发标记（Concurrent Mark）</h4><p>（A）遍历对象图做可达性分析的阶段。（初始标记、最终标记）</p>
<p>（B）标记过程是面向全堆的，有短暂停顿。</p>
<p>（C）ZGC的标记不标记对象，会更新染色指针中的Marked 0、Marked 1标志位。</p>
<h4 id="2-并发预备重分配（Concurrent-Prepare-for-Relocate）"><a href="#2-并发预备重分配（Concurrent-Prepare-for-Relocate）" class="headerlink" title="2 并发预备重分配（Concurrent Prepare for Relocate）"></a>2 并发预备重分配（Concurrent Prepare for Relocate）</h4><p>（A）统计要清理的Region/ size groups, 组成重分配集（Relocation Set）</p>
<p>（B）统计范围是面向全堆的。</p>
<p>（C）在JDK 12的ZGC中开始支持的类卸载以及弱引用的处理，也是在这个阶段中完成的。</p>
<h4 id="3-并发重分配（Concurrent-Relocate）"><a href="#3-并发重分配（Concurrent-Relocate）" class="headerlink" title="3 并发重分配（Concurrent Relocate）"></a>3 并发重分配（Concurrent Relocate）</h4><p>（A）是ZGC执行过程的核心阶段。</p>
<p>（B）把重分配集中的存活对象复制到新的Region上，并为重分配集中的每个Region维护一个转发表（Forward Table），记录从旧对象到新对象的转向关系。</p>
<p>（C）指针自愈（Self-Healing）</p>
<p>因为染色指针的支持，ZGC收集器能仅从引用上就明确得知一个对象是否处于重分配集之中，如果用户线程此时并发访问了位于重分配集中的对象，这次访问将会被预置的内存屏障所截获，然后立即根据Region上的转发表记录将访问转发到新复制的对象上，并同时修正更新该引用的值，使其直接指向新对象，ZGC将这种行为称为指针的“自愈”（Self-Healing）能力。</p>
<pre><code>Shenandoah转发指针与ZGC染色指针比较：
    Shenandoah的Brooks转发指针每次都要转发。
    ZGC的染色指针可以指针自愈，只转发一次。</code></pre><h4 id="4-并发重映射（Concurrent-Remap）"><a href="#4-并发重映射（Concurrent-Remap）" class="headerlink" title="4 并发重映射（Concurrent Remap）"></a>4 并发重映射（Concurrent Remap）</h4><p>（A）修正整个堆中指向重分配集中旧对象的所有引用。（类似Shenandoah的引用更新）</p>
<p>（B）重映射清理这些旧引用的主要目的是为了不变慢，还可以释放转发表。</p>
<p>（C）并发重映射阶段要做的工作合并到下一次垃圾收集循环中的并发标记阶段里去完成。</p>
<h3 id="六-ZGC优缺点"><a href="#六-ZGC优缺点" class="headerlink" title="六 ZGC优缺点"></a>六 ZGC优缺点</h3><p>1.（与其他收集器相比）优点：</p>
<p>（1）动态的Region布局。</p>
<p>（2）无记忆集，不占大量内存。</p>
<p>（3）无分代，无卡表，无写屏障。（染色指针）</p>
<p>（4）支持“NUMA-Aware”的内存分配。NUMA（Non-Uniform Memory Access，非统一内存访问架构）是一种为多处理器或者多核处理器的计算机所设计的内存架构</p>
<p>2.（与其他收集器相比）缺点：</p>
<p>（1）堆空间较大时，并发收集的周期较长，浮动垃圾多，对象分配速率不会太高。</p>
<p>（2）需要较大的堆（Heap）容量。</p>
<h3 id="七-性能及前景"><a href="#七-性能及前景" class="headerlink" title="七 性能及前景"></a>七 性能及前景</h3><p>目前处于测试阶段。ZGC与Parallel Scavenge、G1三款收集器通过SPECjbb 2015 的测试结果如下：</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-images/jvm-gc-zgc-compare1.jpg" alt="ZGC的吞吐量测试"></p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-images/jvm-gc-zgc-compare2.jpg" alt="ZGC的停顿时间测试"></p>
<p>（1）ZGC的“弱项”吞吐量</p>
<p>在ZGC的“弱项”吞吐量方面，以低延迟为首要目标的ZGC已经达到了以高吞吐量为目标Parallel Scavenge的99%，直接超越了G1。如果将吞吐量测试设定为面向SLA（Service LevelAgreements）应用的“Critical Throughput”的话[插图]，ZGC的表现甚至还反超了ParallelScavenge收集器。</p>
<p>（2）ZGC的强项停顿时间</p>
<p>ZGC的强项停顿时间测试上，它就毫不留情地与Parallel Scavenge、G1拉开了两个数量级的差距。不论是平均停顿，还是95%停顿、99%停顿、99.9%停顿，抑或是最大停顿时间，ZGC均能毫不费劲地控制在十毫秒之内。ZGC的停顿时间测试图中a）是ZGC的柱状条，b）纵坐标从线性尺度调整成对数尺度。</p>
<p>（3）将会成为服务端、大内存、低延迟应用的首选收集器的有力竞争者。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
        <tag>垃圾收集器</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM LLGC：Shenandoah</title>
    <url>/posts/f8161112.html</url>
    <content><![CDATA[<h2 id="JVM低延迟垃圾收集器：Shenandoah"><a href="#JVM低延迟垃圾收集器：Shenandoah" class="headerlink" title="JVM低延迟垃圾收集器：Shenandoah"></a>JVM低延迟垃圾收集器：Shenandoah</h2><p>EN： JVM Low-Latency Garbage Collector : Shenandoah</p>
<h3 id="一-、Shenandoah简介"><a href="#一-、Shenandoah简介" class="headerlink" title="一 、Shenandoah简介"></a>一 、Shenandoah简介</h3><blockquote>
<p>一款不由Oracle（包括以前的Sun）公司的虚拟机团队所领导开发的HotSpot垃圾收集器。只有OpenJDK才会包含，而OracleJDK里反而不存在的收集器，“免费开源版”比“收费商业版”功能更多。</p>
</blockquote>
<blockquote>
<p>2014年RedHat把Shenandoah贡献给了OpenJDK，并推动它成为OpenJDK 12的正式特性之一，也就是后来的JEP 189。</p>
</blockquote>
<p>目标：<strong>实现一种能在任何堆内存大小下都可以把垃圾收集的停顿时间限制在十毫秒以内的垃圾收集器。</strong></p>
<h3 id="二、Shenandoah特征及实现思路："><a href="#二、Shenandoah特征及实现思路：" class="headerlink" title="二、Shenandoah特征及实现思路："></a>二、Shenandoah特征及实现思路：</h3><p><strong>Shenandoah主要特征</strong>：</p>
<p>（1）基于Region的堆内存布局,去除传统分代。</p>
<p>（2）回收策略优先处理回收价值最大的Region</p>
<p>（3）支持并发的整理算法。</p>
<p><strong>Shenandoah收集器的实现思路</strong>：</p>
<p>（1）基于Region的堆内存布局，默认不使用分代收集，<code>(相比G1的记忆集（RemberSet）处理跨代指针时维护消耗)</code>改用名为“连接矩阵”（Connection Matrix）的全局数据结构来记录跨Region的引用关系。降低了伪共享问题的发生概率。</p>
<blockquote>
<p>连接矩阵可以简单理解为一张二维表格，如果RegionN有对象指向Region M，就在表格的N行M列中打上一个标记，如图3-15所示，如果Region 5中的对象Baz引用了Region 3的Foo，Foo又引用了Region 1的Bar，那连接矩阵中的5行3列、3行1列就应该被打上标记。在回收时通过这张表格就可以得出哪些Region之间产生了跨代引用。</p>
</blockquote>
<p>（2）使用转发指针（Brooks Pointer）和读写屏障来实现与用户线程并发的整理算法。</p>
<blockquote>
<p>转发指针是在原有对象布局结构的最前面统一增加一个新的引用字段，在正常不处于并发移动的情况下，该引用指向对象自己。<br>当对象拥有了一份新的副本时，只需要修改一处指针的值，即旧对象上转发指针的引用位置，使其指向新对象，便可将所有对该对象的访问转发到新的副本上。这样只要旧对象的内存仍然存在，未被清理掉，虚拟机内存中所有通过旧引用地址访问的代码便仍然可用，都会被自动转发到新对象上继续工作。</p>
</blockquote>
<h3 id="三、Shenandoah收集器的工作过程（九阶段划分）："><a href="#三、Shenandoah收集器的工作过程（九阶段划分）：" class="headerlink" title="三、Shenandoah收集器的工作过程（九阶段划分）："></a>三、Shenandoah收集器的工作过程（九阶段划分）：</h3><h4 id="1-始标记（Initial-Marking）"><a href="#1-始标记（Initial-Marking）" class="headerlink" title="1. 始标记（Initial Marking）"></a>1. 始标记（Initial Marking）</h4><p>​    （A）与G1一样，首先标记与GC Roots直接关联的对象.</p>
<p>​    （B）需要“Stop The World”，有停顿，但停顿时间与堆大小无关，只与GC Roots的数量相关。</p>
<h4 id="2-并发标记（Concurrent-Marking）"><a href="#2-并发标记（Concurrent-Marking）" class="headerlink" title="2. 并发标记（Concurrent Marking）"></a>2. 并发标记（Concurrent Marking）</h4><p>​    （A）<strong>重要的并发过程之一。</strong></p>
<p>​    （B）与G1一样，遍历对象图，标记出全部可达的对象。可达性分析。</p>
<p>​    （C）与用户线程并发执行，时间长短取决于堆中存活对象的数量以及对象图的结构复杂程度。</p>
<h4 id="3-最终标记（Final-Marking）"><a href="#3-最终标记（Final-Marking）" class="headerlink" title="3. 最终标记（Final Marking）"></a>3. 最终标记（Final Marking）</h4><p>（A）与G1一样，处理剩余的SATB扫描，并在这个阶段统计出回收价值最高的Region，将这些Region构成一组回收集（Collection Set）。</p>
<p>​（B）会有一小段短暂的停顿。</p>
<h4 id="4-并发清理（Concurrent-Cleanup）"><a href="#4-并发清理（Concurrent-Cleanup）" class="headerlink" title="4. 并发清理（Concurrent Cleanup）"></a>4. 并发清理（Concurrent Cleanup）</h4><p>​    （A）清理那些整个区域内连一个存活对象都没有找到的Region（这类Region被称为Immediate Garbage Region）。</p>
<h4 id="5-并发回收（Concurrent-Evacuation）"><a href="#5-并发回收（Concurrent-Evacuation）" class="headerlink" title="5. 并发回收（Concurrent Evacuation）"></a>5. 并发回收（Concurrent Evacuation）</h4><p>​    （A）<strong>重要的并发过程之一。</strong>并发回收阶段是Shenandoah与之前HotSpot中其他收集器的核心差异。</p>
<p>​    （B）Shenandoah要把回收集里面的存活对象先复制一份到其他未被使用的Region之中。</p>
<p>  （C）使用<strong>读屏障</strong>和被称为”Brooks Pointers”的<strong>转发指针</strong>实现并发过程，并发回收阶段运行的时间长短取。</p>
<h4 id="6-初始引用更新（Initial-Update-Reference）"><a href="#6-初始引用更新（Initial-Update-Reference）" class="headerlink" title="6. 初始引用更新（Initial Update Reference）"></a>6. 初始引用更新（Initial Update Reference）</h4><p>​    （A）并发回收阶段复制对象结束后，把堆中所有指向旧对象的引用修正到复制后的新地址，这个操作称为引用更新。</p>
<p>​    （B）此阶段实际上并未做什么具体的处理，设立这个阶段只是为了建立一个线程集合点，确保所有并发回收阶段中进行的收集器线程都已完成分配给它们的对象移动任务而已。</p>
<p>​    （B）初始引用更新时间很短，会产生一个非常短暂的停顿。</p>
<h4 id="7-并发引用更新（Concurrent-Update-Reference）"><a href="#7-并发引用更新（Concurrent-Update-Reference）" class="headerlink" title="7. 并发引用更新（Concurrent Update Reference）"></a>7. 并发引用更新（Concurrent Update Reference）</h4><p>​    （A）<strong>重要的并发过程之一。</strong></p>
<p>​    （B）真正开始进行引用更新操作，与用户线程一起并发的，时间长短取决于内存中涉及的引用数量的多少。    </p>
<p>​    （C）并发引用更新与并发标记不同，它不再需要沿着对象图来搜索，只需要按照内存物理地址的顺序，线性地搜索出引用类型，把旧值改为新值即可。</p>
<h4 id="8-最终引用更新（Final-Update-Reference）"><a href="#8-最终引用更新（Final-Update-Reference）" class="headerlink" title="8. 最终引用更新（Final Update Reference）"></a>8. 最终引用更新（Final Update Reference）</h4><p>​    （A）解决了堆中的引用更新后，还要修正存在于GCRoots中的引用。</p>
<p>​    （B）此阶段是Shenandoah的最后一次停顿，停顿时间只与GC Roots的数量相关。</p>
<h4 id="9-并发清理（Concurrent-Cleanup）"><a href="#9-并发清理（Concurrent-Cleanup）" class="headerlink" title="9. 并发清理（Concurrent Cleanup）"></a>9. 并发清理（Concurrent Cleanup）</h4><p>经过并发回收和引用更新之后，整个回收集中所有的Region已再无存活对象，这些Region都变成Immediate Garbage Regions了，最后再调用一次并发清理过程来回收这些Region的内存空间，供以后新对象分配使用。</p>
<p> Shenandoah收集器的重要的三个并发过程：</p>
<ol>
<li>并发标记</li>
<li>并发回收</li>
<li>并发引用更新</li>
</ol>
<p>Shenandoah收集器的工作流程图：</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-images/jvm-gc-shen-andoah-do-job.png" alt="Shenandoah收集器的工作过程"></p>
<p>图片来源：<a href="https://shipilev.net/talks/devoxx-Nov2017-shenandoah.pdf" target="_blank" rel="noopener">《Shenandoah GC Part I: The Garbage Collector That Could》</a></p>
<p>说明：</p>
<p>黄色区域代表的是被选入回收集的Region。</p>
<p>绿色部分就代表还存活的对象。</p>
<p>蓝色区域就是用户线程可以用来分配对象的内存Region。</p>
<h3 id="四、GC收集器比较"><a href="#四、GC收集器比较" class="headerlink" title="四、GC收集器比较"></a>四、GC收集器比较</h3><h4 id="1、Shenandoah-与其他收集器并发比较"><a href="#1、Shenandoah-与其他收集器并发比较" class="headerlink" title="1、Shenandoah 与其他收集器并发比较"></a>1、Shenandoah 与其他收集器并发比较</h4><p><img src="/medias/loading-animated.gif" data-original="/images/jvm-images/jvm-gc-shen-andoah.png" alt="Shenandoah与其他垃圾收集器比较"></p>
<p>图片来源：<a href="https://shipilev.net/talks/devoxx-Nov2017-shenandoah.pdf" target="_blank" rel="noopener">《Shenandoah GC Part I: The Garbage Collector That Could》</a></p>
<p>黄色：表示必须挂起用户线程</p>
<p>绿色：表示收集器线程与用户线程并发执行。</p>
<p>结论：</p>
<p>（1）CMS和G1之前的全部收集器，其工作的所有步骤都会产生“Stop TheWorld”式的停顿；</p>
<p>（2）CMS和G1分别使用增量更新和原始快照(SATB)技术，实现了标记阶段的并发，不会因管理的堆内存变大，要标记的对象变多而导致停顿时间随之增长。但是对于标记阶段之后的处理，仍未得到妥善解决。</p>
<p>（3）CMS使用标记-清除算法，虽然避免了整理阶段收集器带来的停顿，但是清除算法不论如何优化改进，在设计原理上避免不了空间碎片的产生，随着空间碎片不断淤积最终依然逃不过“Stop The World”的命运。</p>
<p>（4）G1虽然可以按更小的粒度进行回收，从而抑制整理阶段出现时间过长的停顿，也有暂停。</p>
<p>（5）Shenandoah只有初始标记、最终标记这些阶段有短暂的停顿，这部分停顿的时间基本上是固定的，与堆的容量、堆中对象的数量没有正比例关系。</p>
<h4 id="2、Shenandoah-与G1比较"><a href="#2、Shenandoah-与G1比较" class="headerlink" title="2、Shenandoah 与G1比较"></a>2、Shenandoah 与G1比较</h4><table>
    <th>
        <td width="46%">Shenandoah</td>
        <td width="46%">G1（Garbage First）</td>
    </th>
    <tr>
    <td rowspan="3">不同</td>
    <td >Shenandoah（目前）是默认不使用分代收集的,不会有专门的新生代Region或者老年代Region的存在，没有实现分代。
     </td>
    <td >G1仍然保留新生代和老年代概况，只是变成Region区组成的逻辑连续的动态集合。
     </td>
  </tr>
<tr>
    <td >使用“连接矩阵”（Connection Matrix）的全局数据结构来记录跨Region的引用关系。</td>
    <td >使用记忆集（Rember Set）避免全堆作为GC Roots扫描,每个Region都维护有自己的记忆集。</td>
  </tr>
<tr>
    <td >Shenandoah通过读屏障和被称为“Brooks Pointers”的转发指针实现并发回收,支持与用户线程并发。 </td>
    <td >G1的回收阶段是可以多线程并行的，但却不能与用户线程并发。 </td>
  </tr>
<tr>
    <td>相同</td>
    <td colspan="2">（1）都是基于Region的堆内存布局，都有用于存放大对象的Humongous Region<br/>（2）并发回收思路高度一致，<br/>（3）默认的回收策略都是优先处理回收价值最大的Region<br/>（4） 都采用标记-整理，标记-复制算法回收。<br/></td>
   </tr>
</table>




<h3 id="四、相关概念"><a href="#四、相关概念" class="headerlink" title="四、相关概念"></a>四、相关概念</h3><p><strong>写屏障</strong>：<br>    在赋值操作前后，加入一些处理（类似针对写操作进行AOP的处理）<br>    目的通常是为了记录对象引用的变动情况</p>
<p><strong>读屏障</strong>：</p>
<p>​   在读值操作前后，加入一些处理（类似针对读操作进行AOP的处理）<br>   目的通常是为了读取对象更新引用后的原有直。</p>
<blockquote>
<p>说明：读写屏障没有找到相关科学定义，写屏障的理解来自网络，读屏障是根据写屏障的理解暂作说明的，如果不当，欢迎指正。</p>
</blockquote>
<p><strong><span id="jump">指针转发</span></strong> Brooks Pointer（Forwarding Pointer / Indirection Pointer）</p>
<p>相关历史简介：</p>
<p>1984年，Brooks提出使用转发指针来实现对象移动与用户程序并发的一种解决方案。</p>
<p>Brooks提出的新方案不需要用到内存保护陷阱，而是在原有对象布局结构的最前面统一增加一个新的引用字段，在正常不处于并发移动的情况下，该引用指向对象自己。当对象拥有了一份新的副本时，只需要修改一处指针的值，即旧对象上转发指针的引用位置，使其指向新对象，便可将所有对该对象的访问转发到新的副本上。这样只要旧对象的内存仍然存在，未被清理掉，虚拟机内存中所有通过旧引用地址访问的代码便仍然可用，都会被自动转发到新对象上继续工作，</p>
<p>指针转发如图：</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-images/jvm-gc-shen-andoah-brooks-pointer.jpg" alt="指针转发示意图"></p>
<blockquote>
<p>Brooks形式的转发指针在设计上决定了它是必然会出现多线程竞争问题的，如果收集器线程与用户线程发生的只是并发读取，那无论读到旧对象还是新对象上的字段，返回的结果都应该是一样的，这个场景还可以有一些“偷懒”的处理余地；但如果发生的是并发写入，就一定必须保证写操作只能发生在新复制的对象上，而不是写入旧对象的内存中。以下三件事情并发进行时：</p>
</blockquote>
<p>1）收集器线程复制了新的对象副本；<br>2）用户线程更新对象的某个字段；<br>3）收集器线程更新转发指针的引用值为新副本地址。</p>
<blockquote>
<p>如果不做任何保护措施，让事件2在事件1、事件3之间发生的话，将导致的结果就是用户线程对对象的变更发生在旧对象上，所以这里必须针对转发指针的访问操作采取同步措施，让收集器线程或者用户线程对转发指针的访问只有其中之一能够成功，另外一个必须等待，避免两者交替进行。实际上Shenandoah收集器是通过比较并交换（Compare And Swap，CAS）操作来保证并发时对象的访问正确性的。</p>
</blockquote>
<blockquote>
<p>CAS：compare and swap，解决多线程并行情况下使用锁造成性能损耗的一种机制，CAS操作包含三个操作数——内存位置（V）、预期原值（A）和新值(B)。如果内存位置的值与预期原值相匹配，那么处理器会自动将该位置值更新为新值。否则，处理器不做任何操作。无论哪种情况，它都会在CAS指令之前返回该位置的值。CAS有效地说明了“我认为位置V应该包含值A；如果包含该值，则将B放到这个位置；否则，不要更改该位置，只告诉我这个位置现在的值即可。</p>
</blockquote>
<p><strong>转发指针和句柄定位比较</strong>：</p>
<table>
    <th>
        <td>转发指针</td>
        <td>句柄定位</td>
    </th>
    <tr>
        <td rowspan="2">不同</td>
        <td>分散存放在每一个对象头前面</td>
        <td>统一存储在专门的句柄池中</td>
    </tr>
    <tr><td>出现多线程竞争问题</td>
    <td></td>
</tr>
<tr>
    <td>相同</td>
    <td colspan="2">间接性的对象访问方式；对象访问会带来一次额外的转向开销</td>
</tr>
    </table>


<p><strong>内存保护陷阱</strong>扩展了解：</p>
<p>在此之前，实现类似的并发操作，通常是在被移动对象原有的内存上设置保护陷阱（Memory Protection Trap），一旦用户程序访问到归属于旧对象的内存空间就会产生自陷中段，进入预设好的异常处理器中，再由其中的代码逻辑把访问转发到复制后的新对象上。虽然确实能够实现对象移动与用户线程并发，但是如果没有操作系统层面的直接支持，这种方案将导致用户态频繁切换到核心态。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
        <tag>垃圾收集器</tag>
      </tags>
  </entry>
  <entry>
    <title>jvm之对象查询OQL</title>
    <url>/posts/2197a49e.html</url>
    <content><![CDATA[<h2 id="jvm之对象查询OQL"><a href="#jvm之对象查询OQL" class="headerlink" title="jvm之对象查询OQL"></a>jvm之对象查询OQL</h2><h3 id="一、SELECT子句"><a href="#一、SELECT子句" class="headerlink" title="一、SELECT子句"></a>一、SELECT子句</h3><p>SELECT子句用于确定查询语句需要从堆转储快照中选择什么内容。如果需要显示堆转储快照中的对象，并且浏览这些对象的引用关系，可以使用<code>&quot;*&quot;</code>，这与传统<code>SQL</code> 语句中的习惯是一致的，如：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String</code></pre>
<h4 id="1-选择特定的显示列"><a href="#1-选择特定的显示列" class="headerlink" title="1.选择特定的显示列"></a>1.选择特定的显示列</h4><p>查询也可以选择特定的需要显示的字段，如：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> toString<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>count<span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token keyword">value</span> <span class="token keyword">FROM</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String s</code></pre>
<p>查询可以通过“@”符号来使用Java对象的内存属性访问器。MAT提供了一系列的内置函数来获取与分析相关的信息，如：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> toString<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token variable">@userdHeapSize</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token variable">@retainedHeapSize</span> <span class="token keyword">FROM</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String s</code></pre>
<p>2、使用列别名</p>
<p>可以使用AS关键字来对选择的列进行命名。如：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>
toString<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">as</span> val<span class="token punctuation">,</span> 
s<span class="token punctuation">.</span><span class="token variable">@userdHeapSize</span> <span class="token keyword">as</span> <span class="token string">"shallw Size"</span><span class="token punctuation">,</span> 
s<span class="token punctuation">.</span><span class="token variable">@retainedHeapSize</span> <span class="token keyword">as</span> <span class="token string">"restained Seize"</span>
<span class="token keyword">FROM</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String s</code></pre>
<p>可以使用AS RETAINED SET关键字来获得与选择对象相关联的对象集合，如：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">AS</span> RETAINED  <span class="token keyword">SET</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String</code></pre>
<h4 id="3-拼合成为一个对象列表选择项目"><a href="#3-拼合成为一个对象列表选择项目" class="headerlink" title="3.拼合成为一个对象列表选择项目"></a>3.拼合成为一个对象列表选择项目</h4><p>可以使用OBJECTS关键字把SELECT子句中查找出来的数据项目转换为对象，如：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> OBJECTS dominators<span class="token punctuation">(</span>s<span class="token punctuation">)</span>  <span class="token keyword">FROM</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String s</code></pre>
<p><code>dominators()</code>函数将会返回一个对象数组，所以如果没有OBJECTS关键字，上面的查询将返回一组二维的对象数组的列表。通过使用关键字OBJECTS，迫使<code>OQL</code>把查询结果缩减为一维的对象列表。</p>
<h4 id="4-排除重复对象"><a href="#4-排除重复对象" class="headerlink" title="4.排除重复对象"></a>4.排除重复对象</h4><p>使用DISTINCT关键字可以排除结果集中的重复对象，如：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>  <span class="token keyword">DISTINCT</span>  classof<span class="token punctuation">(</span>s<span class="token punctuation">)</span>  <span class="token keyword">FROM</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String s</code></pre>
<p><code>classof()</code>函数的作用是返回对象所属的Java类。</p>
<h3 id="二、FROM-子句"><a href="#二、FROM-子句" class="headerlink" title="二、FROM 子句"></a>二、FROM 子句</h3><h4 id="1-FROM子句"><a href="#1-FROM子句" class="headerlink" title="1.FROM子句"></a>1.FROM子句</h4><p>指定需要查询的类OQL查询需要在FROM子句定义的查询范围内进行操作。FROM子句可以接受的查询范围有下列几种描述方式：</p>
<p>（1）通过类名进行查询，如：</p>
<pre><code>SELECT  *  FROM java.lang.String </code></pre><p>（2）通过正则表达式匹配一组类名进行查询，如：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>  <span class="token operator">*</span>  <span class="token keyword">FROM</span> <span class="token string">"java\.lang\..*"</span> </code></pre>
<p>（3）通过类对象在堆转储快照中的地址进行查询，如：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>  <span class="token operator">*</span>  <span class="token keyword">FROM</span> <span class="token number">0xe12a20</span> </code></pre>
<p>（4）通过对象在堆转储快照中的ID进行查询，如：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>  <span class="token operator">*</span>  <span class="token keyword">FROM</span> <span class="token number">4872</span> </code></pre>
<p>（5）在子查询中的结果集中进行查询，如：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>  <span class="token operator">*</span>  <span class="token keyword">FROM</span> <span class="token punctuation">(</span> <span class="token keyword">SELECT</span>  <span class="token operator">*</span>  <span class="token keyword">FROM</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Class <span class="token number">c</span> <span class="token keyword">WHERE</span> <span class="token number">c</span> implements <span class="token operator">or</span> g<span class="token punctuation">.</span>eclipse<span class="token punctuation">.</span>mat<span class="token punctuation">.</span><span class="token keyword">snapshot</span><span class="token punctuation">.</span>model<span class="token punctuation">.</span>IClass<span class="token punctuation">)</span> </code></pre>
<p>上面的查询返回堆转储快照中所有实现了<code>org.eclipse.mat.snapshot.model.IClass</code>接口的类。下面的这句查询语句使用属性访问器达到了同样的效果，它直接调用了ISnapshot对象的方法：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> $<span class="token keyword">snapshot</span><span class="token punctuation">.</span>getClass<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<h4 id="2-包含子类"><a href="#2-包含子类" class="headerlink" title="2.包含子类"></a>2.包含子类</h4><p>使用<code>INSTANCEOF</code>关键字把指定类的子类列入查询结果集之中，如：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> INSTANCEOF  java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ref<span class="token punctuation">.</span>Reference</code></pre>
<p>这个查询的结果集中将会包含WeakReference、SoftReference和PhantomReference类型的对象，因为它们都继承自java.lang.ref.Reference。下面这句查询语句也有相同的结果：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> $<span class="token keyword">snapshot</span><span class="token punctuation">.</span>getClassesByName<span class="token punctuation">(</span><span class="token string">"java.lang.ref.Reference"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span></code></pre>
<h4 id="3-禁止查询类实例"><a href="#3-禁止查询类实例" class="headerlink" title="3.禁止查询类实例"></a>3.禁止查询类实例</h4><p>在FROM子句中使用OBJECTS关键字可以禁止<code>OQL</code>把查询的范围解释为对象实例，如：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> OBJECTS java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String </code></pre>
<p>这个查询的结果不是返回快照中所有的字符串，而是只有一个对象，也就是与<code>java.lang.String</code>类对应的Class对象。</p>
<p>三、WHERE 子句</p>
<p>1、范围操作与关系操作</p>
<p>常见的范围有：  <code>&gt;=</code> ，<code>&lt;=</code>，<code>&gt;</code>，<code>&lt;</code>，<code>[NOT] LIKE</code>，<code>[ NOT ] IN</code></p>
<p>WHERE子句用于指定搜索的条件，即从查询结果中删除不需要的数据，如：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String s <span class="token keyword">WHERE</span> s<span class="token punctuation">.</span>count <span class="token operator">>=</span> <span class="token number">100</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String s <span class="token keyword">WHERE</span> totring<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">LIKE</span> <span class="token string">".*service"</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String s <span class="token keyword">WHERE</span> s<span class="token punctuation">.</span><span class="token keyword">value</span> <span class="token operator">NOT</span> <span class="token operator">IN</span> dominators<span class="token punctuation">(</span>s<span class="token punctuation">)</span></code></pre>
<p>2、 等于操作（ <code>=</code>  ，<code>!=</code>）</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String s <span class="token keyword">WHERE</span> totring<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"sayService"</span></code></pre>
<p>3、条件与操作（<code>AND</code>）</p>
<p>and操作：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String s <span class="token keyword">WHERE</span> s<span class="token punctuation">.</span>count <span class="token operator">>=</span> <span class="token number">100</span> <span class="token operator">AND</span> s<span class="token punctuation">.</span><span class="token variable">@retainedHeapSize</span> <span class="token operator">></span> s<span class="token punctuation">.</span><span class="token variable">@usedHeapSize</span></code></pre>
<p>4、条件或 操作（<code>OR</code>）</p>
<p>条件或 操作可以应用于表达式、常量文本和子查询。如：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String s <span class="token keyword">WHERE</span> s<span class="token punctuation">.</span>count <span class="token operator">>=</span> <span class="token number">100</span>  <span class="token operator">OR</span> s<span class="token punctuation">.</span><span class="token keyword">value</span><span class="token punctuation">.</span><span class="token variable">@length</span> <span class="token operator">></span> <span class="token number">500</span></code></pre>
<p>5、文字表达式</p>
<p>文字表达式保存布尔值、字符串、整型、长整型和null，如：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String s <span class="token keyword">WHERE</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>count <span class="token operator">>=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token boolean">true</span> 
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String s <span class="token keyword">WHERE</span> toString<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"hello World!"</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String s <span class="token keyword">WHERE</span> dominators<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String s <span class="token keyword">WHERE</span> s<span class="token punctuation">.</span><span class="token variable">@retainedHeapSize</span> <span class="token operator">></span> 1024L
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String s <span class="token keyword">WHERE</span> s<span class="token punctuation">.</span><span class="token variable">@GCRootInfo</span> <span class="token operator">!=</span> <span class="token boolean">null</span></code></pre>
<h3 id="四、属性访问器"><a href="#四、属性访问器" class="headerlink" title="四、属性访问器"></a>四、属性访问器</h3><p>1、访问堆转储快照中对象的字段对象的内存属性可以通过传统的“点表示法”进行访问，格式为：</p>
<pre class=" language-txt"><code class="language-txt">[ <alias>.] <field>.<field>.<field>...</code></pre>
<p>2、访问Java Bean属性</p>
<pre class=" language-sql"><code class="language-sql"><span class="token punctuation">[</span> <span class="token operator">&lt;</span>alias<span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">]</span> @<span class="token operator">&lt;</span>attribute<span class="token operator">></span> </code></pre>
<p>使用@符号，<code>OQL</code>可以访问底层Java对象的内存属性。下表列出了一些常用的Java属性。</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-class/jvm-oql.jpg" alt="常用的Java属性"></p>
<p>3、调用<code>OQL</code> Java方法</p>
<pre class=" language-txt"><code class="language-txt">[ <alias>.] @<method>([<expression>, <expression>]) </code></pre>
<p>加“()”会将MAT解释为一个<code>OQL</code> Java方法调用。这个方法的调用是通过反射执行的。常见的<code>OQL</code>Java方法如下：</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-class/jvm-oql-2.jpg" alt="常见的OQL Java方法"></p>
<p>4、OQL的内建函数</p>
<pre class=" language-sql"><code class="language-sql"><span class="token operator">&lt;</span><span class="token keyword">function</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&lt;</span>parameter<span class="token operator">></span><span class="token punctuation">)</span></code></pre>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-class/jvm-oql-3.jpg" alt="常用内建函数"></p>
<h3 id="五、OQL语言的BNF范式"><a href="#五、OQL语言的BNF范式" class="headerlink" title="五、OQL语言的BNF范式"></a>五、OQL语言的BNF范式</h3><p><img src="/medias/loading-animated.gif" data-original="/images/jvm-class/jvm-oql-bnf-1.jpg" alt="常用内建函数"></p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-class/jvm-oql-bnf-2.jpg" alt="常用内建函数"></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
        <tag>OQL</tag>
      </tags>
  </entry>
  <entry>
    <title>jvm之分配与回收策略</title>
    <url>/posts/96a9f88d.html</url>
    <content><![CDATA[<h2 id="JVM内存分配与回收策略"><a href="#JVM内存分配与回收策略" class="headerlink" title="JVM内存分配与回收策略"></a>JVM内存分配与回收策略</h2><p>Java的自动内存管理，最根本的目标是自动化解决两个问题：自动给对象分配内存和自动回收分配给对象的内存。</p>
<h3 id="一、对象内存分配"><a href="#一、对象内存分配" class="headerlink" title="一、对象内存分配"></a>一、对象内存分配</h3><p>从概念上讲，应该都是在堆上分配（而实际上也有可能经过即时编译后被拆散为标量类型并间接地在栈上分配）。</p>
<blockquote>
<p>在经典的分代收集器中，新生对象一般会分配在新生代。特殊情况下回直接分配在老年代，如对象大小超过阈值。</p>
</blockquote>
<h4 id="1、对象优先在新生代Eden区分配。"><a href="#1、对象优先在新生代Eden区分配。" class="headerlink" title="1、对象优先在新生代Eden区分配。"></a>1、对象优先在新生代Eden区分配。</h4><p>当Eden区没有足够空间分配时，JVM发起一次新生代回收Minor GC。</p>
<p>HotSpot虚拟机收集器日志参数：<code>-XX：+PrintGCDetails</code></p>
<blockquote>
<p>该参数使JVM发生垃圾收集行为时打印内存回收日志，并在进程退出时输出当前的内存各个区域分配情况。在实际的问题排查中，收集器日志常会打印到文件后通过工具进行分析。</p>
</blockquote>
<p><code>-XX：Survivor-Ratio=8</code></p>
<p>设置新生代中Eden区与一个Survivor区的空间比例是8∶1</p>
<p>如果新生代大小 -Xmn=10M,那么Eden区大小为8192K，2个Survivor取均为1024K，新生代实际总可用空间8192K+1024K=9216KB。</p>
<p><code>-verbose :gc</code>在输出设备上显示虚拟机运行GC信息。   </p>
<p>示例：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> _1MB <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * VM参数：-verbose:gc -Xms20M -Xmx20M -Xmn10M -XX:+PrintGCDetails -XX:SurvivorRatio=8
 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testAllocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> allocation1<span class="token punctuation">,</span> allocation2<span class="token punctuation">,</span> allocation3<span class="token punctuation">,</span> allocation4<span class="token punctuation">;</span>
    allocation1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>
    allocation2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>
    allocation3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>
    allocation4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 出现一次Minor GC</span>
 <span class="token punctuation">}</span></code></pre>
<p>结果</p>
<pre><code>[GC [DefNew: 6651K-&gt;148K(9216K), 0.0070106 secs] 6651K-&gt;6292K(19456K), 0.0070426 secs] [Times: user=0.00 sys=0.00, real=0.00 secs]
Heap
    def new generation   total 9216K, used 4326K [0x029d0000, 0x033d0000, 0x033d0000)
        eden space 8192K,  51% used [0x029d0000, 0x02de4828, 0x031d0000)
        from space 1024K,  14% used [0x032d0000, 0x032f5370, 0x033d0000)
        to   space 1024K,   0% used [0x031d0000, 0x031d0000, 0x032d0000)
    tenured generation   total 10240K, used 6144K [0x033d0000, 0x03dd0000, 0x03dd0000)
            the space 10240K,  60% used [0x033d0000, 0x039d0030, 0x039d0200, 0x03dd0000)
    compacting perm gen  total 12288K, used 2114K [0x03dd0000, 0x049d0000, 0x07dd0000)
            the space 12288K,  17% used [0x03dd0000, 0x03fe0998, 0x03fe0a00, 0x049d0000)
No shared spaces configured.</code></pre><h4 id="2、大对象直接进入老年代"><a href="#2、大对象直接进入老年代" class="headerlink" title="2、大对象直接进入老年代"></a>2、大对象直接进入老年代</h4><p>大对象就是指需要大量连续内存空间的Java对象，最典型的大对象便是那种很长的字符串，或者元素数量很庞大的数组或集合。</p>
<p>写程序应该避免大对象，因为分配空间时容易导致明明还有空间却提前出发垃圾收集，获取足够的连续空间来分配大对象。另外复制大对象，也需要大量的内存复制开销。</p>
<p><code>-XX：PretenureSizeThreshold</code></p>
<p>该参数用来指定大于该设置值的对象直接在老年代分配。该参数只对Serial和ParNew两款新生代收集器有效</p>
<blockquote>
<p>目的就是避免在Eden区及两个Survivor区之间来回复制，产生大量的内存复制操作。</p>
</blockquote>
<p>必须使用此参数进行调优，可考虑ParNew加CMS的收集器组合。</p>
<p>示例</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> _1MB <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * VM参数：-verbose:gc -Xms20M -Xmx20M -Xmn10M -XX:+PrintGCDetails -XX:SurvivorRatio=8
 * -XX:PretenureSizeThreshold=3145728
 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testPretenureSizeThreshold</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> allocation<span class="token punctuation">;</span>
    allocation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//直接分配在老年代中</span>
<span class="token punctuation">}</span></code></pre>
<p>执行结果</p>
<pre><code>Heap
    def new generation   total 9216K, used 671K [0x029d0000, 0x033d0000, 0x033d0000)
        eden space 8192K,   8% used [0x029d0000, 0x02a77e98, 0x031d0000)
        from space 1024K,   0% used [0x031d0000, 0x031d0000, 0x032d0000)
        to   space 1024K,   0% used [0x032d0000, 0x032d0000, 0x033d0000)
    tenured generation   total 10240K, used 4096K [0x033d0000, 0x03dd0000, 0x03dd0000)
            the space 10240K,  40% used [0x033d0000, 0x037d0010, 0x037d0200, 0x03dd0000)
    compacting perm gen  total 12288K, used 2107K [0x03dd0000, 0x049d0000, 0x07dd0000)
            the space 12288K,  17% used [0x03dd0000, 0x03fdefd0, 0x03fdf000, 0x049d0000)
No shared spaces configured.</code></pre><h4 id="3、长期存活的对象将进入老年代"><a href="#3、长期存活的对象将进入老年代" class="headerlink" title="3、长期存活的对象将进入老年代"></a>3、长期存活的对象将进入老年代</h4><p>虚拟机给每个对象定义了一个对象年龄（Age）计数器，存储在对象头中。</p>
<blockquote>
<p>对象通常在Eden区里诞生，如果经过第一次Minor GC后仍然存活，并且能被Survivor容纳的话，该对象会被移动到Survivor空间中，并且将其对象年龄设为1岁。对象在Survivor区中每熬过一次Minor GC，年龄就增加1岁，当它的年龄增加到一定程度（默认为15），就会被晋升到老年代中。</p>
</blockquote>
<p><code>-XX：MaxTenuringThreshold</code>：</p>
<p>该参数可以用来设置对象晋升老年代的年龄阈值。</p>
<p>示例</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> _1MB <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * VM参数：-verbose:gc -Xms20M -Xmx20M -Xmn10M -XX:+PrintGCDetails -XX:Survivor-
   Ratio=8 -XX:MaxTenuringThreshold=1
 * -XX:+PrintTenuringDistribution
 */</span>
<span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unused"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testTenuringThreshold</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> allocation1<span class="token punctuation">,</span> allocation2<span class="token punctuation">,</span> allocation3<span class="token punctuation">;</span>
    allocation1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>_1MB <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 什么时候进入老年代决定于XX:MaxTenuring-</span>
                                                   Threshold设置
    allocation2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>
    allocation3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>
    allocation3 <span class="token operator">=</span> null<span class="token punctuation">;</span>
    allocation3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>以-XX：MaxTenuringThreshold=1参数来运行的结果：</p>
<pre><code>[GC [DefNew
Desired Survivor size 524288 bytes, new threshold 1 (max 1)
- age   1:     414664 bytes,     414664 total
: 4859K-&gt;404K(9216K), 0.0065012 secs] 4859K-&gt;4500K(19456K), 0.0065283 secs] [Times: user=0.02 sys=0.00, real=0.02 secs]
[GC [DefNew
Desired Survivor size 524288 bytes, new threshold 1 (max 1)
: 4500K-&gt;0K(9216K), 0.0009253 secs] 8596K-&gt;4500K(19456K), 0.0009458 secs] [Times: user=0.00 sys=0.00, real=0.00 secs]
Heap
    def new generation   total 9216K, used 4178K [0x029d0000, 0x033d0000, 0x033d0000)
        eden space 8192K,  51% used [0x029d0000, 0x02de4828, 0x031d0000)
        from space 1024K,   0% used [0x031d0000, 0x031d0000, 0x032d0000)
        to   space 1024K,   0% used [0x032d0000, 0x032d0000, 0x033d0000)
    tenured generation   total 10240K, used 4500K [0x033d0000, 0x03dd0000, 0x03dd0000)
            the space 10240K,  43% used [0x033d0000, 0x03835348, 0x03835400, 0x03dd0000)
    com\pacting perm gen  total 12288K, used 2114K [0x03dd0000, 0x049d0000, 0x07dd0000)
            the space 12288K,  17% used [0x03dd0000, 0x03fe0998, 0x03fe0a00, 0x049d0000)
No shared spaces configured.</code></pre><p>以-XX：MaxTenuringThreshold=15参数来运行的结果：</p>
<pre><code>[GC [DefNew
Desired Survivor size 524288 bytes, new threshold 15 (max 15)
- age   1:     414664 bytes,     414664 total
: 4859K-&gt;404K(9216K), 0.0049637 secs] 4859K-&gt;4500K(19456K), 0.0049932 secs] [Times: user=0.00 sys=0.00, real=0.00 secs]
[GC [DefNew
Desired Survivor size 524288 bytes, new threshold 15 (max 15)
- age   2:     414520 bytes,     414520 total
: 4500K-&gt;404K(9216K), 0.0008091 secs] 8596K-&gt;4500K(19456K), 0.0008305 secs] [Times: user=0.00 sys=0.00, real=0.00 secs]
Heap
    def new generation   total 9216K, used 4582K [0x029d0000, 0x033d0000, 0x033d0000)
        eden space 8192K,  51% used [0x029d0000, 0x02de4828, 0x031d0000)
        from space 1024K,  39% used [0x031d0000, 0x03235338, 0x032d0000)
        to   space 1024K,   0% used [0x032d0000, 0x032d0000, 0x033d0000)
    tenured generation   total 10240K, used 4096K [0x033d0000, 0x03dd0000, 0x03dd0000)
            the space 10240K,  40% used [0x033d0000, 0x037d0010, 0x037d0200, 0x03dd0000)
    compacting perm gen  total 12288K, used 2114K [0x03dd0000, 0x049d0000, 0x07dd0000)
            the space 12288K,  17% used [0x03dd0000, 0x03fe0998, 0x03fe0a00, 0x049d0000)
No shared spaces configured.</code></pre><h4 id="4、动态对象年龄判断"><a href="#4、动态对象年龄判断" class="headerlink" title="4、动态对象年龄判断"></a>4、动态对象年龄判断</h4><p>HotSpot虚拟机并不是永远要求对象的年龄必须达到-XX：MaxTenuringThreshold才能晋升老年代，如果在Survivor空间中相同年龄所有对象大小的总和大于Survivor空间的一半，年龄大于或等于该年龄的对象就可以直接进入老年代，无须等到<code>-XX：MaxTenuringThreshold</code>中要求的年龄。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> _1MB <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * VM参数：-verbose:gc -Xms20M -Xmx20M -Xmn10M -XX:+PrintGCDetails -XX:SurvivorRatio=8
   -XX:MaxTenuringThreshold=15
 * -XX:+PrintTenuringDistribution
 */</span>
<span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unused"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testTenuringThreshold2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> allocation1<span class="token punctuation">,</span> allocation2<span class="token punctuation">,</span> allocation3<span class="token punctuation">,</span> allocation4<span class="token punctuation">;</span>
    allocation1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>_1MB <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// allocation1+allocation2大于survivo空间一半</span>
    allocation2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>_1MB <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    allocation3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>
    allocation4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>
    allocation4 <span class="token operator">=</span> null<span class="token punctuation">;</span>
    allocation4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>运行结果：</p>
<pre><code>[GC [DefNew
Desired Survivor size 524288 bytes, new threshold 1 (max 15)
- age   1:     676824 bytes,     676824 total
: 5115K-&gt;660K(9216K), 0.0050136 secs] 5115K-&gt;4756K(19456K), 0.0050443 secs] [Times: user=0.00 sys=0.01, real=0.01 secs]
[GC [DefNew
Desired Survivor size 524288 bytes, new threshold 15 (max 15)
: 4756K-&gt;0K(9216K), 0.0010571 secs] 8852K-&gt;4756K(19456K), 0.0011009 secs] [Times: user=0.00 sys=0.00, real=0.00 secs]
Heap
    def new generation   total 9216K, used 4178K [0x029d0000, 0x033d0000, 0x033d0000)
        eden space 8192K,  51% used [0x029d0000, 0x02de4828, 0x031d0000)
        from space 1024K,   0% used [0x031d0000, 0x031d0000, 0x032d0000)
        to   space 1024K,   0% used [0x032d0000, 0x032d0000, 0x033d0000)
    tenured generation   total 10240K, used 4756K [0x033d0000, 0x03dd0000, 0x03dd0000)
            the space 10240K,  46% used [0x033d0000, 0x038753e8, 0x03875400, 0x03dd0000)
    compacting perm gen  total 12288K, used 2114K [0x03dd0000, 0x049d0000, 0x07dd0000)
        the space 12288K,  17% used [0x03dd0000, 0x03fe09a0, 0x03fe0a00, 0x049d0000)
No shared spaces configured.</code></pre><h4 id="5、空间分配担保"><a href="#5、空间分配担保" class="headerlink" title="5、空间分配担保"></a>5、空间分配担保</h4><p>在发生Minor GC之前，虚拟机必须先检查老年代最大可用的连续空间是否大于新生代所有对象总空间，如果这个条件成立，那这一次Minor GC可以确保是安全的。如果不成立，则虚拟机会先查看-XX：HandlePromotionFailure参数的设置值是否允许担保失败（HandlePromotion Failure）；如果允许，那会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果大于，将尝试进行一次Minor GC，尽管这次Minor GC是有风险的；如果小于，或者-XX：HandlePromotionFailure设置不允许冒险，那这时就要改为进行一次Full GC。</p>
<p>关于“冒险”的解释：</p>
<blockquote>
<p>新生代使用复制收集算法，但为了内存利用率，只使用其中一个Survivor空间来作为轮换备份，因此当出现大量对象在Minor GC后仍然存活的情况——最极端的情况就是内存回收后新生代中所有对象都存活，需要老年代进行分配担保，把Survivor无法容纳的对象直接送入老年代，这与生活中贷款担保类似。老年代要进行这样的担保，前提是老年代本身还有容纳这些对象的剩余空间，但一共有多少对象会在这次回收中活下来在实际完成内存回收之前是无法明确知道的，所以只能取之前每一次回收晋升到老年代对象容量的平均大小作为经验值，与老年代的剩余空间进行比较，决定是否进行Full GC来让老年代腾出更多空间。取历史平均值来比较其实仍然是一种赌概率的解决办法，也就是说假如某次Minor GC存活后的对象突增，远远高于历史平均值的话，依然会导致担保失败。如果出现了担保失败，那就只好老老实实地重新发起一次Full GC，这样停顿时间就很长了。虽然担保失败时绕的圈子是最大的，但通常情况下都还是会将-XX：HandlePromotionFailure开关打开，避免Full GC过于频繁。</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> _1MB <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * VM参数：-Xms20M -Xmx20M -Xmn10M -XX:+PrintGCDetails -XX:SurvivorRatio=8 -XX:-Handle-
   PromotionFailure
 */</span>
<span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unused"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testHandlePromotion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> allocation1<span class="token punctuation">,</span> allocation2<span class="token punctuation">,</span> allocation3<span class="token punctuation">,</span> allocation4<span class="token punctuation">,</span> allocation5<span class="token punctuation">,</span> alloca<span class="token operator">-</span>tion6<span class="token punctuation">,</span> allocation7<span class="token punctuation">;</span>
    allocation1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>
    allocation2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>
    allocation3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>
    allocation1 <span class="token operator">=</span> null<span class="token punctuation">;</span>
    allocation4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>
    allocation5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>
    allocation6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>
    allocation4 <span class="token operator">=</span> null<span class="token punctuation">;</span>
    allocation5 <span class="token operator">=</span> null<span class="token punctuation">;</span>
    allocation6 <span class="token operator">=</span> null<span class="token punctuation">;</span>
    allocation7 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>以-XX：HandlePromotionFailure=false参数来运行的结果：</p>
<pre><code>[GC [DefNew: 6651K-&gt;148K(9216K), 0.0078936 secs] 6651K-&gt;4244K(19456K), 0.0079192 secs] [Times: user=0.00 sys=0.02, real=0.02 secs]
[GC [DefNew: 6378K-&gt;6378K(9216K), 0.0000206 secs][Tenured: 4096K-&gt;4244K(10240K), 0.0042901 secs] 10474K-&gt;4244K(19456K), [Perm : 2104K-&gt;2104K(12288K)], 0.0043613 secs] [Times: user=0.00 sys=0.00, real=0.00 secs]</code></pre><p>以-XX：HandlePromotionFailure=true参数来运行的结果：</p>
<pre><code>[GC [DefNew: 6651K-&gt;148K(9216K), 0.0054913 secs] 6651K-&gt;4244K(19456K), 0.0055327 secs] [Times: user=0.00 sys=0.00, real=0.00 secs]
[GC [DefNew: 6378K-&gt;148K(9216K), 0.0006584 secs] 10474K-&gt;4244K(19456K), 0.0006857 secs] [Times: user=0.00 sys=0.00, real=0.00 secs]</code></pre><p><code>-XX：HandlePromotionFailure</code>参数在实际虚拟机中已经不会再使用它。JDK 6 Update 24之后的规则变为只要老年代的连续空间大于新生代对象总大小或者历次晋升的平均大小，就会进行Minor GC，否则将进行Full GC。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis(一)主要组件</title>
    <url>/posts/b802139a.html</url>
    <content><![CDATA[<h2 id="Mybatis-一-主要组件"><a href="#Mybatis-一-主要组件" class="headerlink" title="Mybatis(一)主要组件"></a>Mybatis(一)主要组件</h2><blockquote>
<p>在实际工作中，已经不止一次的使用Mybatis这个持久化框架，包括逆向工程，XML配置，注解配置，动态SQL，分页或分页插件，与Spring搭配使用，都有过实战操作，但是对理论性知识不够完善，但不够系统化，因此此Mybatis系列诞生。测试使用的Mybatis是3.4.1版本。</p>
</blockquote>
<h3 id="一、Mybatis-简介。"><a href="#一、Mybatis-简介。" class="headerlink" title="一、Mybatis 简介。"></a>一、Mybatis 简介。</h3><blockquote>
<p>MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。 </p>
</blockquote>
<h3 id="二、MyBatis-的基本构成"><a href="#二、MyBatis-的基本构成" class="headerlink" title="二、MyBatis 的基本构成"></a>二、MyBatis 的基本构成</h3><p>Mybatis核心组件：</p>
<ul>
<li>SqlSessionFactoryBuilder（构造器）：根据配置信息或代码生成SqlSessionFactory工厂接口。</li>
<li>SqlSessionFactory（工厂接口）：用来生成SqlSession会话。</li>
<li>SqlSession（会话）：是一个可以发送SQL去执行并返回结果、可以获取Mapper的接口。</li>
<li>SqlMapper：Mybatis新设计的组件，是由一个Java接口和XML文件（或注解）构成，需要给出对应的SQL和映射规则。主要负责发送SQL执行并返回结果。</li>
</ul>
<p><img src="/medias/loading-animated.gif" data-original="/images/mybatis-imgs/Mybatis-jibenzujian.png" alt="Mybatis构成"></p>
<h4 id="1、构建SqlSessionFactoy"><a href="#1、构建SqlSessionFactoy" class="headerlink" title="1、构建SqlSessionFactoy"></a>1、构建SqlSessionFactoy</h4><p>Mybatis应用以SqlSessionFactory的实例为中心，SqlSessionFactory通过SqlSessionFactoryBuider获取。最终是为了创建SqlSession。SqlSession类似Jdbc的连接对象Connection。</p>
<p>但SqlSessionFactory是工厂接口，不能直接创建。Mybatis有两种方式创建SqlSessionFactory:</p>
<p>（A）使用XML配置的方式。</p>
<p>（B）代码方式。</p>
<p>Configuration的类全限定名：org.apache.ibatis.session.Configuration.在Mybatis中以一个Configuration类对象的形式存在，生命周期是整个Mybatis应用的生命周期。Mybatis应用解析一次配置的XML会保存到Configuration类对象中，可以重复读取使用。</p>
<p>SqlSession实现类有2个：DefaultSqlSessionFactory 和 SqlSessionManager (暂未使用)，如下图：</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/mybatis-imgs/Mybatis-jibenzujian2.png" alt="两个SessionFactory实现类"></p>
<p>1、使用XML方式构建</p>
<p>这里以我前几年的一个项目的mybatis-config.xml为例，如下：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token doctype">&lt;!DOCTYPE configuration
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-config.dtd"></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapUnderscoreToCamelCase<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- 打印查询语句 --></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>STDOUT_LOGGING<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.demo.entity<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- 数据库连接池信息 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- com.github.pagehelper为PageHelper类所在包名 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span> <span class="token attr-name">interceptor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.github.pagehelper.PageInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token comment" spellcheck="true">&lt;!-- 使用下面的方式配置参数，后面会有所有的参数介绍 --></span>
            <span class="token comment" spellcheck="true">&lt;!-- &lt;property name="param1" value="value1"/> --></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>reasonable<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!--- mappers等 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span> </code></pre>
<p>上面的配置文件中没有连接数据库和Mappers节点，是因为我在<code>spring.xml</code>中配置了c3p0连接池，配置了SqlSessionFactory，并指定了mapperLocations。这里要注意的是<code>&lt;configuration&gt;</code>标签，Mybatis解析程序会将配置文件信息解析到Configuration类对象，接着可以利用SqlSessionFactoryBuilder创建SqlSessionFactory。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>web<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>test<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Resources<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSessionFactory<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSessionFactoryBuilder<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SqlSessionFactoryTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

         String resource <span class="token operator">=</span> <span class="token string">"mybatis-config.xml"</span><span class="token punctuation">;</span>
         SqlSessionFactory sqlSessionFactory <span class="token operator">=</span> null<span class="token punctuation">;</span>

         <span class="token keyword">try</span> <span class="token punctuation">{</span>
             <span class="token comment" spellcheck="true">//1、创建XML的文件输入流</span>
            InputStream inputStream <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token comment" spellcheck="true">//2、利用SqlSessionFactoryBuilder读取XML信息来创建SqlSessionFactory</span>
            sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>2、使用代码的方式构建</p>
<p>（1）构建Configuration的类对象，注册相关信息。</p>
<p>（2）通过Configurationl类对象，构建SqlSessionFactory。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>web<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>test<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>pooled<span class="token punctuation">.</span>PooledDataSource<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>mapping<span class="token punctuation">.</span>Environment<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSessionFactory<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSessionFactoryBuilder<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>TransactionFactory<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>JdbcTransactionFactory<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>web<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>emp<span class="token punctuation">.</span>EmployeeMapper<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>web<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>emp<span class="token punctuation">.</span>Employee<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SqlSessionFactoryCodeTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment" spellcheck="true">//构建数据库连接池</span>
        PooledDataSource dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PooledDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dataSource<span class="token punctuation">.</span><span class="token function">setDriver</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dataSource<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://locahost:3306/test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dataSource<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dataSource<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//构建数据库事务</span>
        TransactionFactory transactionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTransactionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//创建数据库允许环境</span>
        Environment evn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Environment</span><span class="token punctuation">(</span><span class="token string">"dev"</span><span class="token punctuation">,</span> transactionFactory<span class="token punctuation">,</span> dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//构建Configuration类对象</span>
        Configuration configuration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span>evn<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//注册别名</span>
        configuration<span class="token punctuation">.</span><span class="token function">getTypeAliasRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">registerAlias</span><span class="token punctuation">(</span><span class="token string">"emp"</span><span class="token punctuation">,</span> Employee<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//加入映射器</span>
        configuration<span class="token punctuation">.</span><span class="token function">addMapper</span><span class="token punctuation">(</span>EmployeeMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        SqlSessionFactory sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>configuration<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>XML方式和JAVA的方式都的类似的。一般情况下用XML方式，如果需要加入自己的特性可以用Java方式。</p>
<h4 id="2、构建SqlSession"><a href="#2、构建SqlSession" class="headerlink" title="2、构建SqlSession"></a>2、构建SqlSession</h4><p>SqlSession是一个接口类，真正内部执行的是Executor类。SqlSession通过SqlSessionFactory获取，主要是注意资源回滚与关闭。如下例：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>web<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>test<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Resources<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSession<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSessionFactory<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSessionFactoryBuilder<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SqlSessionTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        String resource <span class="token operator">=</span> <span class="token string">"mybatis-config.xml"</span><span class="token punctuation">;</span>
        SqlSessionFactory sqlSessionFactory <span class="token operator">=</span> null<span class="token punctuation">;</span>
        SqlSession sqlSession <span class="token operator">=</span> null<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            InputStream inputStream <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>
            sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>

            sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            sqlSession<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>sqlSession<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>
                sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>SqlSession的主要用途：</p>
<p>（1）获取映射器，让映射器通过命名空间（XML头部的namespace）和方法名称（sql标签里的id）定位SQL，发送给数据库执行后返回结果。</p>
<p>（2）通过update/insert/select/delete等方法带上SQL的id来操作XML中配置的SQL；通过commit、rollback方法提交或回滚事务。</p>
<h4 id="3、映射器"><a href="#3、映射器" class="headerlink" title="3、映射器"></a>3、映射器</h4><blockquote>
<p>映射器是由Java接口和XML文件（或注解）共同组成，对参数、缓存、SQL语句、映射关系的管理器。</p>
</blockquote>
<p>主要作用：</p>
<p>（1）定义参数类型。</p>
<p>（2）描述缓存。</p>
<p>（3）描述SQL语句。</p>
<p>（4）定义查询结果和POJO的映射关系。</p>
<p>映射器的实现方式：</p>
<p>（A）通过XML文件方式实现。就是在mybatis-config.xml文件中配置POJO的XML,生成Mapper。</p>
<p>（B）代码方式实现。在Configuration里注册Mapper接口。</p>
<p>映射器是Mybatis的核心内容，最复杂。</p>
<p>1）XML方式实现Mapper示例：</p>
<p>（A）定义Java接口：根据主键ID查询Employee对象。</p>
<p>对应的POJO：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>web<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>emp<span class="token punctuation">;</span>

<span class="token keyword">import</span> javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>constraints<span class="token punctuation">.</span>Pattern<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token keyword">implements</span> <span class="token class-name">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 6654960072154305288L<span class="token punctuation">;</span>

    <span class="token keyword">private</span> Integer Id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String empName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String sex<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String email<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">Employee</span><span class="token punctuation">(</span>Integer empId<span class="token punctuation">,</span> String empName<span class="token punctuation">,</span> String sex<span class="token punctuation">,</span> String email<span class="token punctuation">,</span><span class="token keyword">int</span> did<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>empId <span class="token operator">=</span> empId<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>empName <span class="token operator">=</span> empName<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> email<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>did <span class="token operator">=</span> did<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> Department <span class="token function">getDepartment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> department<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDepartment</span><span class="token punctuation">(</span>Department department<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>department <span class="token operator">=</span> department<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> Integer <span class="token function">getEmpId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> empId<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setEmpId</span><span class="token punctuation">(</span>Integer empId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>empId <span class="token operator">=</span> empId<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> String <span class="token function">getEmpName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> empName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setEmpName</span><span class="token punctuation">(</span>String empName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>empName <span class="token operator">=</span> empName <span class="token operator">==</span> null <span class="token operator">?</span> null <span class="token operator">:</span> empName<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> String <span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> sex<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSex</span><span class="token punctuation">(</span>String sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex <span class="token operator">==</span> null <span class="token operator">?</span> null <span class="token operator">:</span> sex<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> String <span class="token function">getEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> email<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setEmail</span><span class="token punctuation">(</span>String email<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> email <span class="token operator">==</span> null <span class="token operator">?</span> null <span class="token operator">:</span> email<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>定义对应接口：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>web<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>emp<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span> 
<span class="token keyword">import</span> com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>web<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>emp<span class="token punctuation">.</span>Employee<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EmployeeMapper</span> <span class="token punctuation">{</span>

    Employee <span class="token function">selectByPrimaryKey</span><span class="token punctuation">(</span>Integer empId<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span></code></pre>
<p>（2）定义XML映射</p>
<pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token doctype">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.demo.dao.emp.EmployeeMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectByPrimaryKey<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.Integer<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.demo.entity.emp.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    select 
    emp_id as empId, emp_name as empName,email as email
    from tbl_emp
    where emp_id = #{empId,jdbcType=INTEGER}
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre>
<p>（a）这个XML文件通常配置在mybatis-config.xml中，mybatis会为这个配置文件生成映射器。</p>
<p>（b）XML定义了一个命名空间为com.ssm.web.demo.dao.emp.EmployeeMapper的SQL Mapper，这个命名空间和接口全限定名称一致。</p>
<p>（c）用select标签定义一个查询SQL，其id和接口的方法名一致。参数类型parameterType的值为”java.lang.Integer”，也和接口方法参数 类型一致。返回类型resultType，如果没有注册别名需要使用对应POJO的全限定，如代码例，如果注册了POJO的别名直接使用别名即可。</p>
<p>（d）#{empId,jdbcType=INTEGER}为这个条SQL的参数，SQL的列别名与POJO的属性名一致。那么Mybatis会把该SQL语句查询结果自动映射到对应的POJO属性上，这个过程称为自动映射。</p>
<p>如果用SqlSession获取Mapper，代码片段如下：</p>
<pre class=" language-java"><code class="language-java">EmployeeMapper empMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>EmployeeMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Employee emp <span class="token operator">=</span> empMapper<span class="token punctuation">.</span><span class="token function">selectByPrimaryKey</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>这样就完成了一次查询。</p>
<p>当然也可以使用注解SQL方式，有关注解方式会另外单独整理一篇。</p>
<pre><code>package com.ssm.web.demo.dao.emp;

import java.util.List; 
import com.ssm.web.demo.entity.emp.Employee;

public interface EmployeeMapper2 {

    @Select(value=&quot;select emp_id as empId, emp_name as empName,email as email from tbl_emp where emp_id = #{empId}&quot;)
    Employee selectByPrimaryKey(Integer empId); 
}</code></pre><p><strong>特别注意</strong>：</p>
<p>Mybatis依旧可以使用ibatis中通过命名空间和SQL的id，定位执行SQL返回数据的方式，不需要映射器。</p>
<pre class=" language-java"><code class="language-java">Employee emp2 <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token string">"com.ssm.web.demo.dao.emp.DepartmentMapper.selectByPrimaryKey"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>如果SQL的id全局唯一，还可以省略命名空间：</p>
<pre class=" language-java"><code class="language-java">Employee emp2 <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token string">"selectByPrimaryKey"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>如果SQL的id不是全局唯一，那么该省略命名空间的写法就有问题。</p>
<p>Mybatis的Mapper只是接口，没有实现类，是一种接口编程模式，是通过Java语言的动态代理来实现的。</p>
<blockquote>
<p>在Mybatis上下文描述接口，Mybatis会为该接口生成代理类对象，代理对象会根据“接口全路径+方法名”去匹配，找到对应的XML配置或注解中的SQL任务执行并返回结果。</p>
</blockquote>
<h3 id="三、Mybaits组件生命周期"><a href="#三、Mybaits组件生命周期" class="headerlink" title="三、Mybaits组件生命周期"></a>三、Mybaits组件生命周期</h3><h4 id="1、SqlSessionFactoryBuilder"><a href="#1、SqlSessionFactoryBuilder" class="headerlink" title="1、SqlSessionFactoryBuilder"></a>1、SqlSessionFactoryBuilder</h4><p>SqlSessionFactoryBuilder利用XML或编码获取资源，构建SqlSessionFactory，它可以构建多个SqlSessionFactory。SqlSessionFactoryBuilder只是一个构造器，构造出SqlSessionFactory之后，作用就完结，会被废弃回收。</p>
<p>作用：作为构造器生成SqlSessionFactory。</p>
<p>生命周期：只存在于方法的局部。</p>
<h4 id="2、SqlSessionFactory"><a href="#2、SqlSessionFactory" class="headerlink" title="2、SqlSessionFactory"></a>2、SqlSessionFactory</h4><p>作用：SqlSessionFactory的责任唯一，就是创建SqlSession会话。适合采用单例模式。避免数据库连接资源消耗。</p>
<p>生命周期：Mybatis应用的整个生命周期中。</p>
<h4 id="3、SqlSession"><a href="#3、SqlSession" class="headerlink" title="3、SqlSession"></a>3、SqlSession</h4><p>作用：数据库连接会话，相当于JDBC的Connectiond对象。</p>
<p>生命周期：请求数据库处理事务的过程中，可以执行多条SQL保证事务一致性。</p>
<p>是一个线程不安全对象，多线程时需要注册隔离级别和数据库锁等高级特性。</p>
<p>注意SqlSession使用的开启与及时关闭。</p>
<h4 id="4、Mapper"><a href="#4、Mapper" class="headerlink" title="4、Mapper"></a>4、Mapper</h4><p>只是一个接口，没有实现类。</p>
<p>作用：发送SQL返回结果或执行SQL修改数据。</p>
<p>生命周期：在SqlSession事务方法内，是方法级别。</p>
<br/>

<p><strong>相关文章：</strong></p>
<table>
<thead>
<tr>
<th>文章名称</th>
</tr>
</thead>
<tbody><tr>
<td><a href="b802139a.html">《Mybatis(一)主要组件》</a></td>
</tr>
<tr>
<td><a href="5d11555a.html">《Mybatis(二)配置》</a></td>
</tr>
<tr>
<td><a href="d467df29.html">《Mybatis(三)动态SQL》</a></td>
</tr>
<tr>
<td><a href="3bfa75b5.html">《Mybtis(四)工作原理》</a></td>
</tr>
<tr>
<td><a href="ae8510ea.html">《Mybtis(五)Mapper映射器》</a></td>
</tr>
<tr>
<td><a href="44c4c800.html">《Mybtis(六)Mapper级联》</a></td>
</tr>
</tbody></table>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>jvm常见参数汇总</title>
    <url>/posts/bb37497b.html</url>
    <content><![CDATA[<h2 id="jvm常见参数汇总"><a href="#jvm常见参数汇总" class="headerlink" title="jvm常见参数汇总"></a>jvm常见参数汇总</h2><blockquote>
<p>主要是针对之前的学习，进行一个参数的集中整理。</p>
</blockquote>
<h3 id="一、环境因素"><a href="#一、环境因素" class="headerlink" title="一、环境因素"></a>一、环境因素</h3><p><strong>JVM 中最大堆大小有三方面限制:</strong></p>
<ul>
<li><p>相关操作系统的数据模型（32-bt还是64-bit）限制；</p>
</li>
<li><p>系统的可用虚拟内存限制；</p>
</li>
<li><p>系统的可用物理内存限制。32位系统下，一般限制在<code>1.5G ~ 2G</code>；64为操作系统对内存无限制。</p>
</li>
</ul>
<p>在内存自动管理过程中，新生代中的98%对象都是”朝生夕死”的，所以并不需要按照1:1的比例来划分内存空间，而是将内存分为一块比较大的<code>Eden</code>空间和两块较小的<code>Survivor</code>空间，每次使用<code>Eden</code>和其中一块<code>Survivor</code>。当回收时，将<code>Eden</code>和<code>Survivor</code>中还存活着的对象一次性地复制到另外一块<code>Survivor</code>空间上，最后清理掉<code>Eden</code>和刚才用过的<code>Survivor</code>空间。<code>HotSpot</code>虚拟机默认<code>Eden</code>和<code>Survivor</code>的大小比例是<code>8:1</code>，也就是说，每次新生代中可用内存空间为整个新生代容量的90%（80%+10%），只有10%的空间会被浪费。</p>
<h3 id="二、参数使用说明"><a href="#二、参数使用说明" class="headerlink" title="二、参数使用说明"></a>二、参数使用说明</h3><p>参数使用是以 <code>-XX:</code>为前缀，中间以 <code>+</code> 或 <code>-</code> 连接，后面跟参数名，如果需要设置参数值的使用赋值符号 <code>=</code> 连接值。</p>
<p><code>+</code> :表示启用该参数； <code>-</code> :表示禁用该参数。</p>
<p>如：</p>
<pre><code>-XX:SurvivorRatio=8</code></pre><h3 id="三、通用的参数"><a href="#三、通用的参数" class="headerlink" title="三、通用的参数"></a>三、通用的参数</h3><p>通用的参数是不需要区分收集器的。</p>
<p>基本常用参数</p>
<table>
<thead>
<tr>
<th>参数关键词</th>
<th>参数说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>-Xms</code></td>
<td>设置堆的最小值，初始内存大小。</td>
<td><code>-Xms1024m</code>  堆的初始内存为1G。</td>
</tr>
<tr>
<td><code>-Xmx</code></td>
<td>设置堆的最大值 ，最大可用内存。</td>
<td><code>-Xms1024m</code>  堆的最大可用内存为1G。一般为系统可用内存的1/4大小</td>
</tr>
<tr>
<td><code>-Xmn</code></td>
<td>设置新生代（年轻代）的大小。</td>
<td><code>-Xmn380m</code> 不设置则默认值为堆内存的1/3 。</td>
</tr>
<tr>
<td><code>-Xss</code></td>
<td>设置每个线程的堆栈大小。</td>
<td></td>
</tr>
<tr>
<td><code>-XX:NewSize</code></td>
<td>新生代初始化内存大小，该值需要小于-Xms的值</td>
<td><code>-XX:NewSize=512m</code></td>
</tr>
<tr>
<td><code>-XX:MaxNewSize</code></td>
<td>新生代可分配内存大小，该值需要小于-Xmx的值</td>
<td><code>-XX:MaxNewSiz=900m</code></td>
</tr>
<tr>
<td><code>-XX:SurvivorRatio</code></td>
<td>年轻代中 Eden:SFrom:STO=n:1:1</td>
<td><code>-XX:SurvivorRatio=8</code></td>
</tr>
<tr>
<td><code>-XX:PretenureSizeThreshold</code></td>
<td>设置直接晋升到老年代的对象大小</td>
<td><code>-XX:PretenureSizeThreshold=4m</code> 对象如果超过4M就可以直接晋升到老年代</td>
</tr>
<tr>
<td><code>-XX:MaxTenuringThreshold=0</code></td>
<td>垃圾最大年龄,置垃圾最大年龄。大于这个年龄的都会进入老年代区。如果设置为0的话，则年轻代对象不经过Survivor区，直接进入年老代。</td>
<td><code>-XX:MaxTenuringThreshold=0</code><br/><code>-XX:MaxTenuringThreshold=15</code></td>
</tr>
</tbody></table>
<p><strong>特别说明：</strong></p>
<p> <code>-Xms</code> ：物理内存的1/64(&lt;1GB)。默认(MinHeapFreeRatio参数可以调整)空余堆内存小于40%时，JVM就会增大堆直到-Xmx的最大限制。</p>
<p> <code>-Xmx</code> ：物理内存的1/4(&lt;1GB)默认(MaxHeapFreeRatio参数可以调整)空余堆内存大于70%时，JVM会减少堆直到 -Xms的最小限制。</p>
<p> <code>-Xmn</code> ：整个堆大小=年轻代大小 + 年老代大小 + 持久代大小。 增大年轻代后，将会减小年老代大，此值对系统性能影响较大,Sun官方推荐配置为整个堆的3/8。</p>
<p> <code>-XX:PermSize</code>：物理内存的1/64。</p>
<p> <code>-XX:MaxPermSize</code> ：物理内存的1/4。</p>
<p> <code>-Xss</code>： JDK5以后每个线程堆栈大小为1M，以前每个线程堆栈大小为256K。更具应用的线程所需内存大小进行 调整。在相同物理内存下，减小这个值能生成更多的线程。但是操作系统对一个进程内的线程数还是有限制的，不能无限生成，经验值在3000~5000左右<br>一般小的应用，如果栈不是很深，应该是128k够用的，大的应用建议使用256k。这个选项对性能影响比较大，需要严格的测试。</p>
<p> <code>-XX:SurvivorRatio</code>： Eden区与Survivor区的大小比值。设置为8,则两个Survivor区与一个Eden区的比值为2:8,一个Survivor区占整个年轻代的1/10</p>
<p> <code>-XX:MaxTenuringThreshold</code>：如果设置为0的话,则年轻代对象不经过Survivor区，直接进入年老代。对于年老代比较多的应用，可以提高效率。如果将此值设置为一个较大值，则年轻代对象会在Survivor区进行多次复制,这样可以增加对象再年轻代的存活时间，增加在年轻代即被回收的概率，该参数只有在串行GC时才有效。</p>
<p><strong>直接内存设置</strong></p>
<p>直接内存，就是堆外内存</p>
<pre><code>-XX:MaxDirectMemorySize=1024m</code></pre><p>当缓冲区分配的堆外内存到达指定大小后，即触发<code>Full GC</code>。注意该值是有上限的，默认是64M，最大为<code>sun.misc.VM.maxDirectMemory()</code>，在程序中中可以获得<code>-XX:MaxDirectMemorySize</code>的设置的值。</p>
<p><strong>方法区/永久代/非堆区</strong></p>
<p>jdk1.7及之前:</p>
<pre><code>-XX:PermSize
-XX:MaxPermSize；</code></pre><p>jdk1.8以后:</p>
<pre><code>-XX:MetaspaceSize
-XX:MaxMetaspaceSize</code></pre><p><code>MetaspaceSize</code> 默认20.8M左右(x86下开启c2模式)，主要是设置metaspaceGC发生的初始阈值，也是最小阈值，<br><code>MaxMetaspaceSize</code>默认基本是无穷大，建议设置，设置后参数会限制metaspace(包括了Klass Metaspace以及NoKlass Metaspace)被committed的内存大小，会保证committed的内存不会超过这个值，一旦超过就会触发GC。</p>
<h3 id="四、垃圾回收统计信息"><a href="#四、垃圾回收统计信息" class="headerlink" title="四、垃圾回收统计信息"></a>四、垃圾回收统计信息</h3><p>统计信息参数</p>
<table>
<thead>
<tr>
<th>参数关键词</th>
<th>参数说明</th>
</tr>
</thead>
<tbody><tr>
<td>-XX:+PrintGC</td>
<td>显示GC</td>
</tr>
<tr>
<td>-XX:+PrintGCDetails</td>
<td>显示GC详细信息</td>
</tr>
<tr>
<td>-XX:+PrintGCTimeStamps</td>
<td>显示GC 收回时间戳</td>
</tr>
<tr>
<td>-XX:+PrintGCDateStamps</td>
<td>打印GC 操作的时间戳</td>
</tr>
<tr>
<td>-Xloggc:filename</td>
<td>把相关日志信息记录到文件以便分析</td>
</tr>
<tr>
<td>-XX:PrintHeapAtGC</td>
<td>打印GC前后的详细堆栈信息</td>
</tr>
</tbody></table>
<h3 id="五、收集器参数"><a href="#五、收集器参数" class="headerlink" title="五、收集器参数"></a>五、收集器参数</h3><h4 id="Serial-串行收集器"><a href="#Serial-串行收集器" class="headerlink" title="Serial 串行收集器"></a>Serial 串行收集器</h4><p>Serial / Serial old</p>
<p>无需多线程交互，但无法发挥出多处理器的优势，适合单处理器的机器以及数据量较小的情况。</p>
<pre><code>-XX:+UseSerialGC</code></pre><p>虚拟机运行在Client 模式下的默认值，打开此开关后，使用 <code>(新生代)Serial + （老年代）Serial Old</code>的收集器组合进行内存回收。</p>
<h4 id="ParNew-并行收集器"><a href="#ParNew-并行收集器" class="headerlink" title="ParNew 并行收集器"></a>ParNew 并行收集器</h4><pre><code>-XX:+UseParNewGC</code></pre><p>启用该参数后，使用ParNew + Serial Old 的收集器组合进行内存回收。</p>
<h4 id="Parallel-并行收集器"><a href="#Parallel-并行收集器" class="headerlink" title="Parallel 并行收集器"></a>Parallel 并行收集器</h4><p>Parallel / Parallel old</p>
<p>1、年轻代开启并行</p>
<p>jdk5引入，用于对年轻代进行回收，一般用在多线程处理器上。使用以下设置可以开启使用。</p>
<pre><code>-XX:+UseParallerGC</code></pre><p>虚拟机server模式，使用<code>Parallel Scavenge+Serial Old</code>的收集器组合进行内存回收。</p>
<p>2、老年代开启并行</p>
<p>jdk6之后可对老年代进行回收，若不打开默认是单线程，使用<code>-XX:+UseParallerOldGC</code>开启使用。</p>
<pre><code>-XX:+UseParallerOldGC</code></pre><p>打开此开关后，使用<code>Parallel Scavenge + Parallel Old</code>的收集器组合进行内存回收</p>
<h4 id="Parallel-Scavenge-收集器"><a href="#Parallel-Scavenge-收集器" class="headerlink" title="Parallel Scavenge 收集器"></a>Parallel Scavenge 收集器</h4><p>1、 目标最大停顿</p>
<p>控制最大垃圾收集停顿时间，一般<code>200 ~ 300</code>毫秒。</p>
<pre><code>-XX:MaxGCPauseMillis=200</code></pre><p>2、目标吞吐量参数</p>
<p>直接设置吞吐量大小的</p>
<pre><code>-XX:GCTimeRatio=99</code></pre><p>值则应当是一个大于0小于100的整数，也就是垃圾收集时间占总时间的比率，相当于吞吐量的倒数。如把此参数设置为19，那允许的最大垃圾收集时间就占总时间的5%（即1/(1+19)），默认值为99，即允许最大1%（即1/(1+99)）的垃圾收集时间。 </p>
<p>3、自适应策略参数</p>
<p>自适应调节策略参数:</p>
<pre><code>-XX:+UseAdaptiveSizePolicy</code></pre><p>参数被激活之后，就不需要人工指定新生代的大小（-Xmn）、Eden与Survivor区的比例（-XX:SurvivorRatio）、晋升老年代对象大小（-XX:PretenureSizeThreshold）等细节参数。虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或者最大的吞吐量。这种调节方式称为垃圾收集的自适应的调节策略（GC Ergonomics）。</p>
<h4 id="CMS-收集器"><a href="#CMS-收集器" class="headerlink" title="CMS 收集器"></a>CMS 收集器</h4><p>1、启用CMS收集器</p>
<pre><code>-XX:+UseConcMarkSweepGC</code></pre><p>打开此开关后，使用<code>ParNew + CMS + Serial Old</code>的收集器组合进行内存回收。<br><code>ParNew</code>收集器是激活CMS后（使用-XX:+UseConcMarkSweepGC选项）的默认新生代收集器。<br><code>Serial Old</code>收集器将作为 CMS 收集器出现<code>Concurrent Mode Failure</code>失败后的后备收集器使用。</p>
<p>2、老年代阈值触发CMS</p>
<p>老年代使用多少后触发 CMS:</p>
<pre><code>-XX:+CMSInitiatingOccupancyFraction=68%</code></pre><p>在JDK 5的默认设置下，CMS收集器当老年代使用了68%的空间后就会被激活，在实际应用中老年代增长并不是太快，可以适当调高参数<code>-XX:CMSInitiatingOccu-pancyFraction</code>的值来提高CMS的触发百分比，降低内存回收频率，获取更好的性能。</p>
<p>3、碎片整理条件参数</p>
<p>CMS 在n次GC后，启动内存碎片整理。</p>
<pre><code>-XX:+CMSFullGCsBeforeCompaction=5</code></pre><p>是用于设置执行多少次不压缩的Full GC后，跟着来一次带压缩的（默认值为0，表示每次进入FullGC时都进行碎片整理）。</p>
<p>CMS 完成后，启动内存碎片整理:</p>
<pre><code>-XX:+UseCMSCompactAtFullCollection   </code></pre><p>4、增量模式参数</p>
<p>增量模式，适用于单CPU情况:</p>
<pre><code>-XX:+CMSIncrementalMode</code></pre><p>5、CMS 年轻代收集并行线程数参数</p>
<p>CMS 年轻代收集方式为并行收集时,使用的CPU数，并行收集线程数。</p>
<pre><code>-XX:ParallelGCThreads=n</code></pre><h4 id="G1-收集器"><a href="#G1-收集器" class="headerlink" title="G1 收集器"></a>G1 收集器</h4><p>1、G1 启用参数</p>
<pre><code>-XX:+UseG1GC</code></pre><p>2、目标最大停顿时间</p>
<p>指定目标的最大停顿时间，默认值是200毫秒。G1尝试调整新生代和老年代的比例，堆大小，晋升年龄来达到这个目标时间。</p>
<pre><code>-XX:MaxGCPauseMillis=200</code></pre><p>3、GC工作线程数</p>
<p>设置GC的工作线程数量参数</p>
<pre><code>-XX:ParallerGCThreads=n</code></pre><h4 id="其他参数"><a href="#其他参数" class="headerlink" title="其他参数"></a>其他参数</h4><p>1、年轻代Eden区占比</p>
<p>年轻代中 <code>Eden:SFrom:STO=n:1:1</code>，第一个表格已说明。</p>
<pre><code>-XX:SurvivorRatio=n</code></pre><p>2、直接晋升老年代大小</p>
<p>设置直接晋升到老年代的对象大小，第一个表格已说明。</p>
<pre><code>-XX:PretenureSizeThreshold</code></pre><p>3、担保策略参数</p>
<p>老年代的剩余空间不足以应付新生代的整个Eden和Survivor区的所有对象都存活的极端情况时，是否允许分配担保失败：</p>
<pre><code>-XX:HandlePromotionFailure</code></pre><p>4、加速编译</p>
<p>加快编译参数，通常在项目稳定之后，改动较小时使用，该参数会在编译时忽略一些Class内部检查。</p>
<pre><code>-XX:+AggressiveOpts</code></pre><p>5、线程栈大小参数</p>
<pre><code>-XX:ThreadStackSize=0</code></pre><p>0表示使用默认堆栈大小。[Sparc:512；Solaris x86:320（5.0及更早版本中为256）；Sparc 64位：1024；Linux amd64:1024（在5.0及更早版本中为0）；所有其他0。] </p>
<h3 id="六、JDK-默认GC收集器"><a href="#六、JDK-默认GC收集器" class="headerlink" title="六、JDK 默认GC收集器"></a>六、JDK 默认GC收集器</h3><p>jdk1.7 和 jdk1.8 默认垃圾收集器Parallel Scavenge（新生代）+Parallel Old（老年代）。</p>
<p>jdk1.9 默认垃圾收集器G1。</p>
<p>如果想知道自己的运行环境的JVM使用了何种收集器，怎么办？</p>
<p>（1）使用<code>-XX:+PrintCommandLineFlagsjvm</code>参数可查看默认设置收集器类型。</p>
<pre class=" language-bash"><code class="language-bash">java -XX:+PrintCommandLineFlags -version
</code></pre>
<p>（2）使用<code>-XX:+PrintGCDetails</code>参数打印的GC日志的新生代、老年代名称判断收集器类型。</p>
<h3 id="七、参数补充"><a href="#七、参数补充" class="headerlink" title="七、参数补充"></a>七、参数补充</h3><p>如果整理遗漏，后续补充。</p>
<p>本次整理日期:2020年7月16日。</p>
<br>

<p>参考：<br><a href="https://blog.csdn.net/wangsweetkid/article/details/94310547" target="_blank" rel="noopener">https://blog.csdn.net/wangsweetkid/article/details/94310547</a><br><a href="https://www.jianshu.com/p/950e6990bd80" target="_blank" rel="noopener">https://www.jianshu.com/p/950e6990bd80</a><br><a href="https://www.cnblogs.com/redcreen/archive/2011/05/04/2037057.html" target="_blank" rel="noopener">https://www.cnblogs.com/redcreen/archive/2011/05/04/2037057.html</a></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>jvm字节码指令表</title>
    <url>/posts/ee62cca5.html</url>
    <content><![CDATA[<h2 id="JVM字节码指令表"><a href="#JVM字节码指令表" class="headerlink" title="JVM字节码指令表"></a>JVM字节码指令表</h2><h3 id="java虚拟机字节码指令表"><a href="#java虚拟机字节码指令表" class="headerlink" title="java虚拟机字节码指令表"></a>java虚拟机字节码指令表</h3><p><img src="/medias/loading-animated.gif" data-original="/images/jvm-class/jvm-code-byte-1.jpg" alt="java虚拟机字节码指令表1"></p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-class/jvm-code-byte-2.jpg" alt="java虚拟机字节码指令表2"></p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-class/jvm-code-byte-3.jpg" alt="java虚拟机字节码指令表3"></p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-class/jvm-code-byte-4.jpg" alt="java虚拟机字节码指令表4"></p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-class/jvm-code-byte-5.jpg" alt="java虚拟机字节码指令表5"></p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-class/jvm-code-byte-6.jpg" alt="java虚拟机字节码指令表6"></p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-class/jvm-code-byte-7.jpg" alt="java虚拟机字节码指令表7"></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>字节码指令表</tag>
      </tags>
  </entry>
  <entry>
    <title>java模块化系统</title>
    <url>/posts/49b8efd0.html</url>
    <content><![CDATA[<h2 id="Java模块化系统"><a href="#Java模块化系统" class="headerlink" title="Java模块化系统"></a>Java模块化系统</h2><p>Java模块化系统（Java Platform Module System，JPMS）是在JDK 9中引入的。</p>
<h3 id="1、封装隔离机制"><a href="#1、封装隔离机制" class="headerlink" title="1、封装隔离机制"></a>1、封装隔离机制</h3><p>主要是为了实现可配置的封装隔离机制。</p>
<p>Java虚拟机对类加载架构也做出了相应的变动调整，才使模块化系统得以顺利地运作。</p>
<p>JDK 9的模块不仅仅像之前的JAR包那样只是简单地充当代码的容器，除了代码外，Java的模块定义还包含以下内容：</p>
<p>（1）依赖其他模块的列表。</p>
<p>（2）导出的包列表，即其他模块可以使用的列表。</p>
<p>（3）开放的包列表，即其他模块可反射访问模块的列表。</p>
<p>（4）使用的服务列表。</p>
<p>（5）提供服务的实现列表。</p>
<p>可配置的封装隔离机制作用：</p>
<p>（1）解决JDK 9之前基于类路径（ClassPath）来查找依赖的可靠性问题。</p>
<blockquote>
<p>在JDK 9之前前，如果类路径中缺失了运行时依赖的类型，那就只能等程序运行到发生该类型的加载、链接时才会报出运行的异常。</p>
<p>在JDK 9以后，如果启用了模块化进行封装，模块就可以声明对其他模块的显式依赖，Java虚拟机就能够在启动时验证应用程序开发阶段设定好的依赖关系在运行期是否完备，如有缺失那就直接启动失败，从而避免了大部分由于类型依赖而引发的运行时异常。</p>
</blockquote>
<p>（2）解决原来类路径上跨JAR文件的public类型的可访问性问题。</p>
<blockquote>
<p>JDK 9中的public类型不再意味着程序的所有地方的代码都可以随意访问到它们，模块提供了更精细的可访问性控制，必须明确声明其中哪一些public的类型可以被其他哪一些模块访问，这种访问控制也主要是在类加载过程中完成的。</p>
</blockquote>
<h3 id="2、模块的兼容性"><a href="#2、模块的兼容性" class="headerlink" title="2、模块的兼容性"></a>2、模块的兼容性</h3><p>（一）向下兼容</p>
<p>为了实现可配置的封装隔离机制能够兼容传统的类路径查找机制，JDK 9提出了与“类路径”（ClassPath）相对应的“模块路径”（ModulePath）的概念。</p>
<blockquote>
<p>就是一个类库到底是模块还是传统的JAR包，只取决于它存放在哪种路径上。</p>
<p>只要放在类路径上的JAR文件，无论其中是否包含模块化信息（是否包含了module-info.class文件），它都会被当作传统的JAR包来对待；</p>
<p>只要放在模块路径上的JAR文件，即使没有使用JMOD后缀，甚至说其中并不包含module-info.class文件，它也仍然会被当作一个模块来对待。</p>
</blockquote>
<p>传统类路径依赖的Java程序可以不经修改地直接运行在JDK 9及以后的Java版本上，模块化系统提供的运行规则：</p>
<p>（1）JAR文件在类路径的访问规则。</p>
<blockquote>
<p>所有类路径下的JAR文件及其他资源文件，都被视为自动打包在一个匿名模块（Unnamed Module）里，这个匿名模块几乎是没有任何隔离的，它可以看到和使用类路径上所有的包、JDK系统模块中所有的导出包，以及模块路径上所有模块中导出的包。</p>
</blockquote>
<p>（2）模块在模块路径的访问规则</p>
<blockquote>
<p>模块路径下的具名模块（Named Module）只能访问到它依赖定义中列明依赖的模块和包，匿名模块里所有的内容对具名模块来说都是不可见的，即具名模块看不见传统JAR包的内容。</p>
</blockquote>
<p>（3）JAR文件在模块路径的访问规则</p>
<blockquote>
<p>如果把一个传统的、不包含模块定义的JAR文件放置到模块路径中，它就会变成一个自动模块（Automatic Module）。尽管不包含module-info.class，但自动模块将默认依赖于整个模块路径中的所有模块，因此可以访问到所有模块导出的包，自动模块也默认导出自己所有的包。</p>
</blockquote>
<p>这3条规则保证了即使Java应用依然使用传统的类路径，升级到JDK 9对应用来说几乎不会有任何感觉，项目也不需要专门为了升级JDK版本而去把传统JAR包升级成模块。</p>
<p>（二）模块直接的兼容</p>
<p>模块间的管理和兼容性问题：</p>
<p>当同一个模块发行了多个不同的版本，那只能由开发者在编译打包时人工选择好正确版本的模块来保证依赖的正确性。</p>
<p>暂不支持在模块定义中加入版本号来管理和约束依赖，本身也不支持多版本号的概念和版本选择功能。</p>
<p>但是查看模块列表（<code>java--list-modules</code>）时可以看到版本信息。</p>
<p>编译时使用“javac–module-version”可以用来指定模块版本。</p>
<p><code>java.lang.module.ModuleDescriptor.Version</code>接口可以在运行时获取到模块的版本号。</p>
<h3 id="3、模块化下的类加载器"><a href="#3、模块化下的类加载器" class="headerlink" title="3、模块化下的类加载器"></a>3、模块化下的类加载器</h3><p>为了保证兼容性，JDK 9类加载依旧使用三层类加载器架构以及双亲委派模型。</p>
<p>（一）模块类加载器变动</p>
<p>但模块化下的类加载器有变化：</p>
<p>（1）扩展类加载器（Extension Class Loader）被平台类加载器（Platform ClassLoader）取代。</p>
<p>取消 <code>&lt;JAVA_HOME&gt;\lib\ext</code>目录、<code>&lt;JAVA_HOME&gt;\jre</code>目录，可以借助模块以组合构建出程序运行所需的JRE,如只使用java.base模块中的类型，可以构建需要的包：</p>
<pre class=" language-bash"><code class="language-bash">jlink -p <span class="token variable">$JAVA_HOME</span>/jmods --add-modules java.base --output jre</code></pre>
<p>（2）平台类加载器和应用程序类加载器都不再派生自java.net.URLClassLoader。</p>
<p>现在启动类加载器、平台类加载器、应用程序类加载器全都继承于jdk.internal.loader.BuiltinClassLoader，在BuiltinClassLoader中实现了新的模块化架构下类如何从模块中加载的逻辑，以及模块中资源可访问性的处理。</p>
<blockquote>
<p>如果有程序直接依赖了这种继承关系，或者依赖了URLClassLoader类的特定方法，那代码很可能会在JDK9及更高版本的JDK中崩溃。</p>
</blockquote>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-module/jdk-9-before.jpg" alt="JDK9之前的类加载器继承结构"></p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-module/jdk-9-after.jpg" alt="JDK9之后的类加载器继承结构"></p>
<p>（3）JDK 9中类加载的委派关系也发生了变动。</p>
<p>当平台及应用程序类加载器收到类加载请求，在委派给父加载器加载前，要先判断该类是否能够归属到某一个系统模块中，如果可以找到这样的归属关系，就要优先委派给负责那个模块的加载器完成加载，也许这可以算是对双亲委派的第四次破坏。</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-module/jdk-9-classLoad.jpg" alt="JDK9后的类加载器委派关系"></p>
<p>（二）类加载器负责模块</p>
<p>三个类加载器负责各自加载的模块:</p>
<p>（a）启动类加载器负责加载的模块：</p>
<pre class=" language-txt"><code class="language-txt">java.base                        java.security.sasl
java.datatransfer                java.xml
java.desktop                     jdk.httpserver
java.instrument                  jdk.internal.vm.ci
java.logging                     jdk.management
java.management                  jdk.management.agent
java.management.rmi              jdk.naming.rmi
java.naming                      jdk.net
java.prefs                       jdk.sctp
java.rmi                         jdk.unsupported</code></pre>
<p>（b）平台类加载器负责加载的模块：</p>
<pre class=" language-txt"><code class="language-txt">java.activation*                jdk.accessibility
java.compiler*                  jdk.charsets
java.corba*                     jdk.crypto.cryptoki
java.scripting                  jdk.crypto.ec
java.se                         jdk.dynalink
java.se.ee                      jdk.incubator.httpclient
java.security.jgss              jdk.internal.vm.compiler*
java.smartcardio                jdk.jsobject
java.sql                        jdk.localedata
java.sql.rowset                 jdk.naming.dns
java.transaction*               jdk.scripting.nashorn
java.xml.bind*                  jdk.security.auth
java.xml.crypto                 jdk.security.jgss
java.xml.ws*                    jdk.xml.dom
java.xml.ws.annotation*         jdk.zipfs</code></pre>
<p>（c）应用程序类加载器负责加载的模块：</p>
<pre class=" language-txt"><code class="language-txt">jdk.aot                         jdk.jdeps
jdk.attach                      jdk.jdi
jdk.compiler                    jdk.jdwp.agent
jdk.editpad                     jdk.jlink
jdk.hotspot.agent               jdk.jshell
jdk.internal.ed                 jdk.jstatd
jdk.internal.jvmstat            jdk.pack
jdk.internal.le                 jdk.policytool
jdk.internal.opt                jdk.rmic
jdk.jartool                     jdk.scripting.nashorn.shell
jdk.javadoc                     jdk.xml.bind*
jdk.jcmd                        jdk.xml.ws*
jdk.jconsole</code></pre>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>模块化系统</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybtis(六)Mapper级联</title>
    <url>/posts/44c4c800.html</url>
    <content><![CDATA[<h2 id="Mybtis-六-Mapper级联"><a href="#Mybtis-六-Mapper级联" class="headerlink" title="Mybtis(六)Mapper级联"></a>Mybtis(六)Mapper级联</h2><blockquote>
<p>原本是放在映射器元素resultMap映射结果集的内容，因为篇幅太长，单独另做一篇，查询也方便查找。</p>
</blockquote>
<p>Mybatis映射器里的resultMap元素：</p>
<pre class=" language-txt"><code class="language-txt">1、select 元素
2、resultMap元素
3、insert/update元素
4、delete元素
5、sql元素
5、cache元素</code></pre>
<p>本文主要说明resultMap中级联使用</p>
<p>MyBatis级联主要有：</p>
<p>（1）association：<code>一对一</code>。</p>
<p>（2）collection：<code>一对多</code>。</p>
<p>（3）discriminator ：鉴别器。</p>
<p>为了演示方便，建两张表，原本想给出建表脚本，奈何系统重装了，数据库没有了。就根据数据库字字段建一些，字段比较少也不难。</p>
<h3 id="一、association关联"><a href="#一、association关联" class="headerlink" title="一、association关联"></a>一、association关联</h3><p>association可以说是比较简单的一对一级联。</p>
<p>级联的写法也有不同：</p>
<h4 id="1、级联的嵌套结果映射"><a href="#1、级联的嵌套结果映射" class="headerlink" title="1、级联的嵌套结果映射"></a>1、级联的嵌套结果映射</h4><p>级联的嵌套结果映射其实就是直接把结果集映射写在对象中，SQL使用联合查询查出所有映射列。直接看例子：查询员工发时候要求同时查询出所在的部门信息。</p>
<p>java类有两个：</p>
<p>Employee类：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>web<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>emp<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token keyword">implements</span> <span class="token class-name">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 6654960072154305288L<span class="token punctuation">;</span>

    <span class="token keyword">private</span> Integer empId<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String empName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String sex<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String email<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> did<span class="token punctuation">;</span>
    <span class="token keyword">private</span> Department department <span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">Employee</span><span class="token punctuation">(</span>Integer empId<span class="token punctuation">,</span> String empName<span class="token punctuation">,</span> String sex<span class="token punctuation">,</span> String email<span class="token punctuation">,</span><span class="token keyword">int</span> did<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>empId <span class="token operator">=</span> empId<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>empName <span class="token operator">=</span> empName<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> email<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>did <span class="token operator">=</span> did<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
     <span class="token comment" spellcheck="true">// getter setter  toString ...</span>
<span class="token punctuation">}</span></code></pre>
<p>Department类：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>web<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>emp<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Department</span>  <span class="token keyword">implements</span> <span class="token class-name">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable</span><span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 4969741886389350881L<span class="token punctuation">;</span>

    <span class="token keyword">private</span> Integer deptId<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String deptName<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// getter setter  toString ...</span>
<span class="token punctuation">}</span></code></pre>
<p>XML映射器：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.demo.entity.emp.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp_id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empId<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp_name<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empName<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>CHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept_id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>did<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>WithDeptResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.demo.entity.emp.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp_id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empId<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp_name<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empName<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>CHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>department<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.demo.entity.emp.Department<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept_id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deptId<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept_name<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deptName<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span></code></pre>
<p>很明显要求<code>Employee</code>对象存在<code>department</code>类型属性。</p>
<p>如果<code>WithDeptResultMap</code>的resultMap不想写那么多，也可以使用<code>extends</code>来减少代码：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.demo.entity.emp.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp_id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empId<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp_name<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empName<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>CHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept_id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>did<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>WithDeptResultMap<span class="token punctuation">"</span></span>  <span class="token attr-name">extends</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.demo.entity.emp.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>department<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.demo.entity.emp.Department<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept_id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deptId<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept_name<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deptName<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span></code></pre>
<p>这样就直接把关联的<code>Department</code>对象写到<code>Employee</code>对象中，对应的<code>SELECT</code>标签：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectByPrimaryKeyWithDepart<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.Integer<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>WithDeptResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      select
    e.emp_id, e.emp_name, e.sex, e.email,d.dept_id,d.dept_name
    from tbl_emp e
    left join tbl_dept d on e.dept_id=d.dept_id
    where emp_id = #{empId,jdbcType=INTEGER}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre>
<p>这样查询的时候直接查询结果里的<code>Department</code>信息会直接映射到<code>Employee</code>的<code>department</code>属性里。</p>
<h4 id="2、级联的嵌套-Select-查询"><a href="#2、级联的嵌套-Select-查询" class="headerlink" title="2、级联的嵌套 Select 查询"></a>2、级联的嵌套 Select 查询</h4><p>关联的嵌套 Select 查询其实就是利用子查询进行结果封装。还是查询员工的例子：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.demo.entity.emp.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp_id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empId<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp_name<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empName<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>CHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept_id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>did<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>WithDeptResultMap<span class="token punctuation">"</span></span>  <span class="token attr-name">extends</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.demo.entity.emp.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>department<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.demo.entity.emp.Department<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept_id<span class="token punctuation">"</span></span>  <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectDept<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectByPrimaryKeyWithDepart<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.Integer<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>WithDeptResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    
    select
    e.emp_id, e.emp_name, e.sex, e.email,e.dept_id
    from tbl_emp
    where emp_id = #{empId,jdbcType=INTEGER}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectDept<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.Integer<span class="token punctuation">"</span></span>  <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.demo.entity.emp.Department<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    
    select
    *
    from tbl_dept
    where dept_id = #{dept_id,jdbcType=INTEGER}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>     </code></pre>
<p>这样就可以通过<code>select</code>子查询来映射<code>department</code>的属性了。</p>
<p>这种方式虽然很简单，但在大型数据集或大型数据表上表现不佳。 这个问题被称为“N+1 查询问题”。N+1 查询是这样的：         </p>
<ul>
<li>你执行了一个单独的 SQL 语句来获取结果的一个列表（就是“+1”）。</li>
<li>对列表返回的每条记录，你执行一个 select 查询语句来为每条记录加载详细信息（就是“N”）。           </li>
</ul>
<p>这个问题会导致成百上千的 SQL 语句被执行。但带来的好处是，MyBatis 能够对这样的查询进行延迟加载，因此可以将大量语句同时运行的开销分散开来。 需要注意的是，如果你加载记录列表之后立刻就遍历列表以获取嵌套的数据，就会触发所有的延迟加载查询，性能可能会变得很糟糕。 </p>
<p>所以尽可能根据实际使用场景来决定用哪种方式，在数据列较多或数据集较大时优先使用关联的嵌套结果映射。如果实际需要使用的是一张大表，但是真正使用的并不是所有数据，可以单独定义一个POJO来映射结果集，<code>resultMap</code>其实可以根据POJO属性来重新定义，也可以不写，因为MybatiS可以根据POJO领域模型，完成自动映射。这样就有了第三种方式，利用POJO别名自动映射。</p>
<h4 id="3、利用POJO别名自动映射。"><a href="#3、利用POJO别名自动映射。" class="headerlink" title="3、利用POJO别名自动映射。"></a>3、利用POJO别名自动映射。</h4><p>还是刚才的例子：</p>
<p>先看POJO：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmpInfoVO</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> empId<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String empName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String sex <span class="token punctuation">;</span>
    <span class="token keyword">private</span> String email<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> did<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String deptName<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// getter  and setter</span>
<span class="token punctuation">}</span></code></pre>
<p>再看XML：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectByPrimaryKeyWithDepart<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.Integer<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>WithDeptResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      select
    e.emp_id as  empId, 
    e.emp_name as empName, 
    e.sex as sex, 
    e.email as email,
    d.dept_id as did,
    d.dept_name as department.deptName
    from tbl_emp e
    left join tbl_dept d on e.dept_id=d.dept_id
    where emp_id = #{empId,jdbcType=INTEGER}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre>
<p>需要注意的是：别名要和POJO的属性对应。Mybatis默认没有大小写敏感，但是方便阅读尽量和POJO的属性写一致，如果开启了驼峰式命名规范</p>
<p>重新定义POJO的好处是，要使用哪些就直接定义好，不需要查询所有字段出来，对于大表来说还是比较实用的。如果你不确定或就是不想新建POJO或VO来自动映射，非得使用原有的<code>Employee</code>类，也可以：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectByPrimaryKeyWithDepart<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.Integer<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>WithDeptResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      select
    e.emp_id as  empId, 
    e.emp_name as empName, 
    e.sex as sex, 
    e.email as email,
    d.dept_id as department.deptId,
    d.dept_name as department.deptName
    from tbl_emp e
    left join tbl_dept d on e.dept_id=d.dept_id
    where emp_id = #{empId,jdbcType=INTEGER}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre>
<p>这样就可以实现和<code>Employee</code>类属性自动映射了。导航式别名也要求和POJO的属性对应。导航别名<code>department.deptName</code>是点式分隔，也可以使用下划线分割如：<code>department_deptName</code>这种写法也可以。</p>
<h4 id="4、关联多结果集"><a href="#4、关联多结果集" class="headerlink" title="4、关联多结果集"></a>4、关联多结果集</h4><p>关联的多结果集（ResultSet）</p>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">column</td>
<td align="left">当使用多个结果集时，该属性指定结果集中用于与 <code>foreignColumn</code>  匹配的列（多个列名以逗号隔开），以识别关系中的父类型与子类型。</td>
</tr>
<tr>
<td align="left">foreignColumn</td>
<td align="left">指定外键对应的列名，指定的列将与父类型中 <code>column</code> 的给出的列进行匹配。</td>
</tr>
<tr>
<td align="left">resultSet</td>
<td align="left">指定用于加载复杂类型的结果集名字。</td>
</tr>
</tbody></table>
<p>例如</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectEmployee<span class="token punctuation">"</span></span> <span class="token attr-name">resultSets</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>employees,depts<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>EmpResult<span class="token punctuation">"</span></span> <span class="token attr-name">statementType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>CALLABLE<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  {call getDeptsAndEmplyees(#{id,jdbcType=INTEGER,mode=IN})}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre>
<p>对应的存储过程里的查询：</p>
<pre class=" language-SQL"><code class="language-SQL">SELECT * FROM tbl_dept WHERE dept_id = #{id}

SELECT * FROM tbl_emp WHERE emp_id = #{id}</code></pre>
<p>对应的<code>resultMap</code>：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>EmpResult<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp_id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empId<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp_name<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empName<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>CHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept_id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>did<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>department<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.demo.entity.emp.Department<span class="token punctuation">"</span></span> <span class="token attr-name">resultSet</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>depts<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept_id<span class="token punctuation">"</span></span> <span class="token attr-name">foreignColumn</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept_id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept_id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deptId<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept_name<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deptName<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span></code></pre>
<p>虽然使用了两个结果集，其实是指定使用 “depts” 结果集的数据来填充 “department” 关联。</p>
<h3 id="二、collection级联"><a href="#二、collection级联" class="headerlink" title="二、collection级联"></a>二、collection级联</h3><p>collection级联，集合级联。通常对应的集合类型属性，如<code>List</code>,<code>Set</code>等形式的属性。集合元素和关联元素几乎是一样的。</p>
<p>还是用上面的例子，一个员工通常只属于一个部门，那么一个部门可以有很多员工。假设现在需要根据部门查询员工，首先在<code>Department</code>类中添加员工集合：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Department</span>  <span class="token keyword">implements</span> <span class="token class-name">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable</span><span class="token punctuation">{</span>

    <span class="token keyword">private</span> Integer deptId<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String deptName<span class="token punctuation">;</span>

    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Employee<span class="token operator">></span> empList<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//setter getter tostring ...</span>
<span class="token punctuation">}</span></code></pre>
<p>然后在映射器中映射嵌套结果集合到一个 List 中，可以使用集合元素<code>collection</code>。 </p>
<h4 id="1、集合级联嵌套Select"><a href="#1、集合级联嵌套Select" class="headerlink" title="1、集合级联嵌套Select"></a>1、集合级联嵌套Select</h4><p>先看XML</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deptResult<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.demo.entity.emp.Department<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empList<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ArrayList<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept_Id<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.demo.entity.emp.Employee<span class="token punctuation">"</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectEmpsForDept<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectDept<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deptResult<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  SELECT * FROM tbl_dept WHERE dept_Id = #{id}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectEmpsForDept<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.demo.entity.emp.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  SELECT * FROM tbl_emp WHERE dept_Id = #{id}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre>
<p>集合元素中有一个新的 “ofType” 属性。这个属性非常重要，它用来将 JavaBean（或字段）属性的类型和集合存储的类型区分开来。 所以你可以按照下面这样来阅读映射： </p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empList<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ArrayList<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept_Id<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.demo.entity.emp.Employee<span class="token punctuation">"</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectEmpsForDept<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre>
<p>含义是： “<code>empList</code>是一个存储 <code>com.ssm.web.demo.entity.emp.Employee</code>的 <code>ArrayList</code>集合” 。</p>
<p>一般情况下，MyBatis 可以推断 javaType 属性，因此可以不需要填写。所以很多时候你可以简略成：         </p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empList<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept_Id<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.demo.entity.emp.Employee<span class="token punctuation">"</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectEmpsForDept<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre>
<h4 id="2、集合的嵌套结果映射"><a href="#2、集合的嵌套结果映射" class="headerlink" title="2、集合的嵌套结果映射"></a>2、集合的嵌套结果映射</h4><p>集合的嵌套结果映射和级联的嵌套结果映射类似，就是多了一个<code>ofType</code>属性：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deptResult<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.demo.entity.emp.Department<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deptId<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept_id<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deptName<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept_name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empList<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.demo.entity.emp.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empId<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp_id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empName<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp_name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectDepart<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.Integer<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deptResult<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      select
    d.dept_id as deptId,
    d.dept_name as deptName，
    e.emp_id as  empId, 
    e.emp_name as empName, 
    e.sex as sex, 
    e.email as email
    from tbl_dept d
    left join tbl_emp e on e.dept_id=d.dept_id
    where d.tbl_dept = #{deptId,jdbcType=INTEGER}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre>
<p>如果希望更细节化、可重用也可以拆开了写：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deptResult<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.demo.entity.emp.Department<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deptId<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept_id<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deptName<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept_name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empList<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.demo.entity.emp.Employee<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deptEmpsResult<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deptEmpsResult<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.demo.entity.emp.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empId<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp_id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empName<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp_name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span></code></pre>
<p>需要注意的是我命名的时候没有规范化，如果进行规范化命名，可以指定前缀属性：<code>columnPrefix</code></p>
<pre class=" language-xml"><code class="language-xml"> &lt;collection property="empList" ofType="com.ssm.web.demo.entity.emp.Employee" resultMap="deptEmpsResult"  columnPrefix="Emp_"`/></code></pre>
<p>这样对应的<code>id=&quot;deptEmpsResult&quot;</code>的<code>resultMap</code>里的<code>column</code>的值就可以省略前缀。</p>
<h4 id="3、集合的多结果集"><a href="#3、集合的多结果集" class="headerlink" title="3、集合的多结果集"></a>3、集合的多结果集</h4><p>和关联元素那样，我们可以通过执行存储过程实现，它会执行两个查询并返回两个结果集，在映射语句中，必须通过 <code>resultSets</code> 属性为每个结果集指定一个名字，多个名字使用逗号隔开。 </p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectDepart<span class="token punctuation">"</span></span> <span class="token attr-name">resultSets</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>depts,emps<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DeptResult<span class="token punctuation">"</span></span> <span class="token attr-name">statementType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>CALLABLE<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  {call getDeptsAndEmplyees(#{id,jdbcType=INTEGER,mode=IN})}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre>
<p>对应的存储过程里的查询：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> tbl_dept <span class="token keyword">WHERE</span> dept_id <span class="token operator">=</span> <span class="token comment" spellcheck="true">#{id}</span>

<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> tbl_emp <span class="token keyword">WHERE</span> emp_id <span class="token operator">=</span> <span class="token comment" spellcheck="true">#{id}</span></code></pre>
<p>对应的<code>resultMap</code>：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DeptResult<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.demo.entity.emp.Department<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept_id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deptId<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept_name<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deptName<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empList<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.demo.entity.emp.Employee<span class="token punctuation">"</span></span> <span class="token attr-name">resultSet</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emps<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept_id<span class="token punctuation">"</span></span> <span class="token attr-name">foreignColumn</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept_id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp_id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empId<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp_name<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empName<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>CHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept_id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>did<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span></code></pre>
<p><code>ofType</code>的含义是指定 “empList” 集合将会使用存储在 “emps” 结果集中的数据进行填充。  </p>
<p>关联或集合的映射，并没有深度、广度或组合上的要求。但在实际使用中映射时要留意性能问题。 </p>
<h3 id="三、discriminator-级联"><a href="#三、discriminator-级联" class="headerlink" title="三、discriminator 级联"></a>三、discriminator 级联</h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>discriminator</span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>case</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DraftPost<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>discriminator</span><span class="token punctuation">></span></span></code></pre>
<p>鉴别器的概念很好理解——它很像 Java 语言中的 switch 语句。 </p>
<p>有时候，一个数据库查询可能会返回多个不同的结果集（但总体上还是有一定的联系的）。 鉴别器（discriminator）元素就是被设计来应对这种情况的，另外也能处理其它情况，例如类的继承层次结构。 </p>
<p>一个鉴别器的定义需要指定 column 和 javaType 属性。column 指定了 MyBatis 查询被比较值的地方。 而 javaType 用来确保使用正确的相等测试（虽然很多情况下字符串的相等测试都可以工作）。例如： </p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vehicleResult<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Vehicle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vin<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vin<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>year<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>year<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>make<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>make<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>model<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>model<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>color<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>color<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>discriminator</span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vehicle_type<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>case</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>carResult<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>case</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>truckResult<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>case</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vanResult<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>case</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suvResult<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>discriminator</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span></code></pre>
<p>这个示例中，MyBatis 会从结果集中得到每条记录，然后比较它的 vehicle type 值。 如果它匹配任意一个鉴别器的 case，就会使用这个 case 指定的结果映射。 这个过程是互斥的，也就是说，剩余的结果映射将被忽略（除非它是扩展的，我们将在稍后讨论它）。 如果不能匹配任何一个 case，MyBatis 就只会使用鉴别器块外定义的结果映射。 所以，如果 carResult 的声明如下：         </p>
<pre><code>&lt;resultMap id=&quot;carResult&quot; type=&quot;Car&quot;&gt;
  &lt;result property=&quot;doorCount&quot; column=&quot;door_count&quot; /&gt;
&lt;/resultMap&gt;</code></pre><p>那么只有 doorCount 属性会被加载。如果希望剩余的属性也能被加载，使用<code>extends</code>属性可以实现 。         </p>
<pre><code>&lt;resultMap id=&quot;carResult&quot; type=&quot;Car&quot; extends=&quot;vehicleResult&quot;&gt;
  &lt;result property=&quot;doorCount&quot; column=&quot;door_count&quot; /&gt;
&lt;/resultMap&gt;</code></pre><p>现在 vehicleResult 和 carResult 的属性都会被加载了。         </p>
<p>简洁完整写法:</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vehicleResult<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Vehicle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vin<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vin<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>year<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>year<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>make<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>make<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>model<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>model<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>color<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>color<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>discriminator</span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vehicle_type<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>case</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>carResult<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doorCount<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>door_count<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>case</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>case</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>truckResult<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>boxSize<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box_size<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>extendedCab<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>extended_cab<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>case</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>case</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vanResult<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>powerSlidingDoor<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>power_sliding_door<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>case</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>case</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suvResult<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>allWheelDrive<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>all_wheel_drive<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>case</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>discriminator</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span></code></pre>
<p>这些都是结果映射，如果你完全不设置任何的 result 元素，MyBatis 将为你自动匹配列和属性。 需要注意实际使用场景。</p>
<br/>

<p><strong>相关文章：</strong></p>
<table>
<thead>
<tr>
<th>文章名称</th>
</tr>
</thead>
<tbody><tr>
<td><a href="b802139a.html">《Mybatis(一)主要组件》</a></td>
</tr>
<tr>
<td><a href="5d11555a.html">《Mybatis(二)配置》</a></td>
</tr>
<tr>
<td><a href="d467df29.html">《Mybatis(三)动态SQL》</a></td>
</tr>
<tr>
<td><a href="3bfa75b5.html">《Mybtis(四)工作原理》</a></td>
</tr>
<tr>
<td><a href="ae8510ea.html">《Mybtis(五)Mapper映射器》</a></td>
</tr>
<tr>
<td><a href="44c4c800.html">《Mybtis(六)Mapper级联》</a></td>
</tr>
</tbody></table>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis(二)配置</title>
    <url>/posts/5d11555a.html</url>
    <content><![CDATA[<h3 id="Mybatis-二-配置"><a href="#Mybatis-二-配置" class="headerlink" title="Mybatis(二)配置"></a>Mybatis(二)配置</h3><blockquote>
<p>关于Mybatis配置，其实官网都有，本文是学习《深入浅出Mybatis技术原理与实战》的笔记，同时参考官网相关说明，进行阅读整理。</p>
</blockquote>
<h3 id="一、配置configuration"><a href="#一、配置configuration" class="headerlink" title="一、配置configuration"></a>一、配置configuration</h3><p>1、MyBatis 的配置文件层级结构。</p>
<pre class=" language-XML"><code class="language-XML">configuration（配置）
    properties（属性）
    settings（设置）
    typeAliases（类型别名）
    typeHandlers（类型处理器）
    objectFactory（对象工厂）
    plugins（插件）
    environments（环境配置）
        environment（环境变量）
            transactionManager（事务管理器）
            dataSource（数据源）
    databaseIdProvider（数据库厂商标识）
    mappers（映射器）</code></pre>
<p> 说明：层次结构不能随意颠倒顺序。</p>
<h3 id="二、属性-properties"><a href="#二、属性-properties" class="headerlink" title="二、属性 properties"></a>二、属性 properties</h3><p>properties是配置属性的元素。</p>
<p>主要配置方式有3种：</p>
<p>（1）直接配置properties子元素。</p>
<p>（2）使用properties配置文件。</p>
<p>（3）程序参数传递。</p>
<h4 id="1、配置properties子元素"><a href="#1、配置properties子元素" class="headerlink" title="1、配置properties子元素"></a>1、配置properties子元素</h4><p>在典型的 Java 属性文件中配置这些属性 :</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${driver}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${url}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${username}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${password}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span></code></pre>
<p>从 MyBatis 3.4.2 开始，也可以为占位符指定一个默认值。 如：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
   <span class="token comment" spellcheck="true">&lt;!-- ... 其他省略--></span>
   <span class="token comment" spellcheck="true">&lt;!-- 如果属性 'username' 没有被配置，'username' 属性的值将为 'ut_user' --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${username:ut_user}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span></code></pre>
<p>这个特性默认是关闭的。要启用这个特性，需要添加一个特定的属性来开启这个特性。例如：         </p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org/mybatis/example/config.properties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token comment" spellcheck="true">&lt;!-- ... --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.ibatis.parsing.PropertyParser.enable-default-value<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!-- 表示启用默认值特性 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span></code></pre>
<p>如果你在属性名中使用了 <code>&quot;:&quot;</code> 字符（如：<code>db:username</code>），或者在 SQL映射中使用了 OGNL 表达式的三元运算符（如： <code>${tableName != null ? tableName : &#39;global_constants&#39;}</code>），就需要设置特定的属性来修改分隔属性名和默认值的字符。例如：         </p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org/mybatis/example/config.properties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token comment" spellcheck="true">&lt;!-- ... --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.ibatis.parsing.PropertyParser.default-value-separator<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>?:<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!-- 修改默认值的分隔符 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token comment" spellcheck="true">&lt;!-- ... --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${db:username?:ut_user}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span></code></pre>
<h4 id="2、使用properties配置文件"><a href="#2、使用properties配置文件" class="headerlink" title="2、使用properties配置文件"></a>2、使用properties配置文件</h4><p>dbconfig.properties</p>
<pre class=" language-properties"><code class="language-properties"><span class="token attr-name">validationQuery.sqlserver</span><span class="token punctuation">=</span><span class="token attr-value">SELECT 1</span>
<span class="token attr-name">jdbc.driver</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span>
<span class="token attr-name">jdbc.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/ssm?useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8</span>
<span class="token attr-name">jdbc.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span>
<span class="token attr-name">jdbc.password</span><span class="token punctuation">=</span><span class="token attr-value">123456</span>
<span class="token attr-name">jdbc.dbType</span><span class="token punctuation">=</span><span class="token attr-value">mysql</span></code></pre>
<p>在配置文件中引入</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resouce</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dbconfig.properties<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre>
<h4 id="3、程序参数传入"><a href="#3、程序参数传入" class="headerlink" title="3、程序参数传入"></a>3、程序参数传入</h4><p>如用户名密码加密，需要解密时，在 SqlSessionFactoryBuilder.build() 方法中传入属性值。 </p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>web<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>test<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStreamReader<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Reader<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Resources<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSession<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSessionFactory<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSessionFactoryBuilder<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xmlbeans<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Base64<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>propertyeditors<span class="token punctuation">.</span>InputStreamEditor<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Base64Decoder<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PropertiesTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String ClASS_LOCK <span class="token operator">=</span> <span class="token string">"_lock_"</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> SqlSessionFactory sqlSessionFactory<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

         InputStream cfgStream <span class="token operator">=</span> null<span class="token punctuation">;</span>
         Reader cfgReader <span class="token operator">=</span> null <span class="token punctuation">;</span>
         InputStream proStream <span class="token operator">=</span> null<span class="token punctuation">;</span>
         Reader proReader <span class="token operator">=</span> null<span class="token punctuation">;</span>
         Properties properties <span class="token operator">=</span> null<span class="token punctuation">;</span>
         <span class="token keyword">try</span> <span class="token punctuation">{</span>
             <span class="token comment" spellcheck="true">//读入配置文件流</span>
             cfgStream <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"mybatis-config.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

             cfgReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>cfgStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//读取配置文件</span>
             proStream <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"dbconfig.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             proReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>proStream<span class="token punctuation">)</span><span class="token punctuation">;</span>

             properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>proStream<span class="token punctuation">)</span><span class="token punctuation">;</span>

             <span class="token comment" spellcheck="true">//解密</span>
             properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span>Base64<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span>Base64<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// TODO: handle exception</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>ClASS_LOCK<span class="token punctuation">)</span> <span class="token punctuation">{</span>

            <span class="token keyword">if</span><span class="token punctuation">(</span>sqlSessionFactory <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>
                sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>cfgReader<span class="token punctuation">,</span> properties<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="4、配置properties的优先级"><a href="#4、配置properties的优先级" class="headerlink" title="4、配置properties的优先级"></a>4、配置properties的优先级</h4><p>MyBatis 将按照下面的顺序来加载： </p>
<p>（1）在properties元素体内的指定的属性优先读取。</p>
<p>（2）根据properties的resouce属性读取类路径下的属性文件，或者url属性指定的路径读取属性文件，并覆盖已读取的同名属性。</p>
<p>（3）读取作为方法参数传递的属性，并覆盖已读取的同名属性。</p>
<p>因此，优先级从高到底依次为：</p>
<pre><code>方法参数传递属性 &gt;  resource/url指定配置文件 &gt; properties属性中指定的属性</code></pre><p>实际使用时需注意：</p>
<p>（A）尽可能不要使用混合方式</p>
<p>（B）首选方式properties</p>
<p>（B）进行加密或其他加工时参考示例，今天使用同一个配置文件，方便管理。</p>
<h3 id="三、设置setting"><a href="#三、设置setting" class="headerlink" title="三、设置setting"></a>三、设置setting</h3><p>一个配置完整的 settings 元素的示例如下： </p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cacheEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lazyLoadingEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipleResultSetsEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>useColumnLabel<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>useGeneratedKeys<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>autoMappingBehavior<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>PARTIAL<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>autoMappingUnknownColumnBehavior<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>WARNING<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>defaultExecutorType<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SIMPLE<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>defaultStatementTimeout<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>25<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>defaultFetchSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>safeRowBoundsEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapUnderscoreToCamelCase<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>localCacheScope<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SESSION<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcTypeForNull<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>OTHER<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lazyLoadTriggerMethods<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>equals,clone,hashCode,toString<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span></code></pre>
<p>大部分时候不需要配全，如需配置参考<a href="https://mybatis.org/mybatis-3/zh/configuration.html" target="_blank" rel="noopener">Mybatis官网-设置说明</a>参数说明。</p>
<h3 id="四、类型别名-typeAliases"><a href="#四、类型别名-typeAliases" class="headerlink" title="四、类型别名 typeAliases"></a>四、类型别名 typeAliases</h3><p><strong>typeAliases主要分两类</strong>：</p>
<p>（A）系统定义别名typeAliases</p>
<p>（B）自定义别名typeAliases</p>
<h4 id="1、系统定义别名"><a href="#1、系统定义别名" class="headerlink" title="1、系统定义别名"></a>1、系统定义别名</h4><p>系统定义的别名，可以查看Mybatis源码，<code>org.apache.ibatis.type.TypeAliasRegistry</code>类中定义。部分代码如下：</p>
<pre><code>package org.apache.ibatis.type;

import java.util.*；
import org.apache.ibatis.io.ResolverUtil;
import org.apache.ibatis.io.Resources;

public class TypeAliasRegistry {

  private final Map&lt;String, Class&lt;?&gt;&gt; TYPE_ALIASES = new HashMap&lt;String, Class&lt;?&gt;&gt;();

  public TypeAliasRegistry() {
    registerAlias(&quot;string&quot;, String.class);

    registerAlias(&quot;byte&quot;, Byte.class);
    registerAlias(&quot;long&quot;, Long.class);
    registerAlias(&quot;short&quot;, Short.class);
    registerAlias(&quot;int&quot;, Integer.class);
    registerAlias(&quot;integer&quot;, Integer.class);
    registerAlias(&quot;double&quot;, Double.class);
    registerAlias(&quot;float&quot;, Float.class);
    registerAlias(&quot;boolean&quot;, Boolean.class);
    //....其他省略
   }
}</code></pre><h4 id="2、自定义别名"><a href="#2、自定义别名" class="headerlink" title="2、自定义别名"></a>2、自定义别名</h4><p>类型别名可为 Java 类型设置一个缩写名字。它仅用于 XML 配置，意在降低冗余的全限定类名书写。例如：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Author<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>domain.blog.Author<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Blog<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>domain.blog.Blog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Comment<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>domain.blog.Comment<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Post<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>domain.blog.Post<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Section<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>domain.blog.Section<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Tag<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>domain.blog.Tag<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span></code></pre>
<p>如果你的POJO非常多，还可以这样配置：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>domain.blog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span></code></pre>
<p>每一个在包 <code>domain.blog</code> 中的 Java Bean，在没有注解的情况下，会使用 Bean 的首字母小写的非限定类名来作为它的别名。 比如 <code>domain.blog.Author</code> 的别名为 <code>author</code>。那有注解的话，按注解别名使用。</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Alias</span><span class="token punctuation">(</span><span class="token string">"author"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Author</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//some code 省略</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="五、类型处理器-typeHandler"><a href="#五、类型处理器-typeHandler" class="headerlink" title="五、类型处理器 typeHandler"></a>五、类型处理器 typeHandler</h3><blockquote>
<p>Mybatis在预处理语句（PreparedStatement）中设置一个参数，或者从结果集（ResultSet）中取出一个值时，都会使用注册过的typeHandler进行处理。</p>
</blockquote>
<p>数据库不同，设置参数可能不同，数据库也可以自定义数据类型，typeHandler可以自定义设置Java传递到数据库的参数，或从数据库读取数据，也可以进行特殊处理，都可以在自定义typeHandler中处理。特别是枚举类型需要使用typeHandler进行转换。</p>
<p>typeHandler常用的配置为Java类型（javaType）、JDBC类型（jdbcType）。主要数据库的Java类型和JDBC类型对应关系，可以参考<a href="dc390855.html">《常见数据库字段的Java类型和JDBC类型对应关系》</a></p>
<blockquote>
<p>从 3.4.5 开始，MyBatis 默认支持 JSR-310（日期和时间 API） </p>
</blockquote>
<p><strong>typeHandler主要分两类</strong>：</p>
<p>（A）系统定义typeHandler</p>
<p>（B）自定义的typeHandler</p>
<h4 id="1、系统定义类型处理器"><a href="#1、系统定义类型处理器" class="headerlink" title="1、系统定义类型处理器"></a>1、系统定义类型处理器</h4><p>Mybatis系统内定义了一系列的类型处理器，可以查看Mybatis源码，<code>org.apache.ibatis.type.TypeHandlerRegistry</code>类中定义。部分代码如下：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">TypeHandlerRegistry</span> <span class="token punctuation">{</span>
     <span class="token comment" spellcheck="true">// some code</span>
     <span class="token keyword">public</span> <span class="token function">TypeHandlerRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">register</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BooleanTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BooleanTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">register</span><span class="token punctuation">(</span>JdbcType<span class="token punctuation">.</span>BOOLEAN<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BooleanTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">register</span><span class="token punctuation">(</span>JdbcType<span class="token punctuation">.</span>BIT<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BooleanTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// some code</span>

        <span class="token function">register</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">IntegerTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">IntegerTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">register</span><span class="token punctuation">(</span>JdbcType<span class="token punctuation">.</span>INTEGER<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">IntegerTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// some code</span>
     <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>比如源码中StringTypeHandler大概长这个样子：</p>
<pre class=" language-java"><code class="language-java"> <span class="token keyword">package</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>type<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>CallableStatement<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>PreparedStatement<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>ResultSet<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLException<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @author Clinton Begin
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringTypeHandler</span> <span class="token keyword">extends</span> <span class="token class-name">BaseTypeHandler</span><span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token punctuation">{</span>
 <span class="token comment" spellcheck="true">//对PreparedStatement设置参数</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNonNullParameter</span><span class="token punctuation">(</span>PreparedStatement ps<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> String parameter<span class="token punctuation">,</span> JdbcType jdbcType<span class="token punctuation">)</span>
      <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>
    ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
 <span class="token comment" spellcheck="true">//ResultSet使用下表columnName来获取结果数据 </span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> String <span class="token function">getNullableResult</span><span class="token punctuation">(</span>ResultSet rs<span class="token punctuation">,</span> String columnName<span class="token punctuation">)</span>
      <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>
    <span class="token keyword">return</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>columnName<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//ResultSet使用下表columnIndex来获取结果数据</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> String <span class="token function">getNullableResult</span><span class="token punctuation">(</span>ResultSet rs<span class="token punctuation">,</span> <span class="token keyword">int</span> columnIndex<span class="token punctuation">)</span>
      <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>
    <span class="token keyword">return</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>columnIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment" spellcheck="true">//CallableStatement存储过程获取结果及数据</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> String <span class="token function">getNullableResult</span><span class="token punctuation">(</span>CallableStatement cs<span class="token punctuation">,</span> <span class="token keyword">int</span> columnIndex<span class="token punctuation">)</span>
      <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>
    <span class="token keyword">return</span> cs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>columnIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>StringTypeHandler继承了BaseTypeHandler。BaseTypeHandler实现了接口typeHandler，并且自己定义了4个抽象方法，StringTypeHandler需要实现其定义的4个抽象方法。@Override注解已经注明。</p>
<p>更多有关Mybatis系统注册的typeHandler更多说明参考<a href="https://mybatis.org/mybatis-3/zh/configuration.html" target="_blank" rel="noopener">Mybatis官网</a>说明。</p>
<p>需要注意：</p>
<p>（1）数值类型的精度，数据库int、double、decimal这些类型和java的精度、长度都是不一样的。</p>
<p>（2）时间精度，取数据到日用DateOnlyTypeHandler，用到精度为秒的用SqlTimestampTypeHandler等</p>
<h4 id="2、自定义类型处理器"><a href="#2、自定义类型处理器" class="headerlink" title="2、自定义类型处理器"></a>2、自定义类型处理器</h4><p>可以重写已有的类型处理器或创建你自己的类型处理器来处理不支持的或非标准的类型。</p>
<p> 具体做法为：</p>
<blockquote>
<p>实现<code>org.apache.ibatis.type.TypeHandler</code>接口，或继承一个很便利的类 <code>org.apache.ibatis.type.BaseTypeHandler</code>，并且可以（可选地）将它映射到一个 JDBC 类型。 </p>
</blockquote>
<p>定义一个typeHandler，如使用ExampleTypeHandler覆盖原有的StringTypeHandler：</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// ExampleTypeHandler.java</span>
<span class="token annotation punctuation">@MappedType</span><span class="token punctuation">(</span><span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span> 
<span class="token annotation punctuation">@MappedJdbcTypes</span><span class="token punctuation">(</span>JdbcType<span class="token punctuation">.</span>VARCHAR<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleTypeHandler</span> <span class="token keyword">extends</span> <span class="token class-name">BaseTypeHandler</span><span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token punctuation">{</span>

  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNonNullParameter</span><span class="token punctuation">(</span>PreparedStatement ps<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> String parameter<span class="token punctuation">,</span> JdbcType jdbcType<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"---ExampleTypeHandler设置参数----"</span><span class="token punctuation">)</span>
    ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> String <span class="token function">getNullableResult</span><span class="token punctuation">(</span>ResultSet rs<span class="token punctuation">,</span> String columnName<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>
      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"---ExampleTypeHandler 获取列名字符串----"</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>columnName<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> String <span class="token function">getNullableResult</span><span class="token punctuation">(</span>ResultSet rs<span class="token punctuation">,</span> <span class="token keyword">int</span> columnIndex<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>
      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"---ExampleTypeHandler 获取列名字符串----"</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>columnIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> String <span class="token function">getNullableResult</span><span class="token punctuation">(</span>CallableStatement cs<span class="token punctuation">,</span> <span class="token keyword">int</span> columnIndex<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>
     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"---ExampleTypeHandler----"</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> cs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>columnIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>@MappedType - 定义的是JavaType类型，可以指定哪些Java类型被拦截。如果不用注解，也可以在类型处理器的配置元素（typeHandler 元素）上增加一个 <code>javaType</code> 属性（比如：<code>javaType=&quot;String&quot;</code>） 。</p>
<p>@MappedJdbcTypes - 定义的是JdbcType类型，它需要满足枚举类org.apache.ibatis.type.JdbcType所列举的类型。如果不用注解，也可以在类型处理器的配置元素上增加一个 <code>jdbcType</code> 属性（比如：<code>jdbcType=&quot;VARCHAR&quot;</code>）。</p>
<p>配置 mybatis-config.xml使用ExampleTypeHandler：</p>
<pre><code>&lt;!-- mybatis-config.xml --&gt;
&lt;typeHandlers&gt;
  &lt;typeHandler handler=&quot;org.mybatis.example.ExampleTypeHandler&quot; /&gt;
&lt;/typeHandlers&gt;</code></pre><p>需要注意：使用上述的类型处理器将会覆盖已有的处理 Java String 类型的属性以及 VARCHAR 类型的参数和结果的类型处理器。 </p>
<p>如果有多个类型转换器，可以使用扫描式：</p>
<p>让 MyBatis 帮你查找类型处理器（ExampleTypeHandler在包）：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- mybatis-config.xml --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeHandlers</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.typehandle<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeHandlers</span><span class="token punctuation">></span></span></code></pre>
<p>在mybatis-config.xml中配置表示全局使用。如果只想使用在某个字段上，可以这样：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token doctype">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.demo.dao.emp.EmployeeMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.demo.entity.emp.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp_id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empId<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp_name<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empName<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>CHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">typeHandler</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.demo.ExampleTypeHandler<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept_id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>did<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>
    // some code 省略
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span>    </code></pre>
<h4 id="3、枚举类型处理器"><a href="#3、枚举类型处理器" class="headerlink" title="3、枚举类型处理器"></a>3、枚举类型处理器</h4><p>Mybatis系统自带枚举类型处理器：</p>
<p>（A）<code>org.apache.ibatis.type.EnumTypeHandler</code></p>
<p>（B） <code>org.apache.ibatis.type.EnumOrdinalTypeHandler</code> </p>
<p>EnumTypeHandler是使用枚举字符串名称作为参数传递的，EnumOrdinalTypeHandler是使用整数下标作为参数传递的。枚举和数据库字典保持一致就可以使用。</p>
<p><strong>EnumOrdinalTypeHandler的使用</strong>：</p>
<p>使用自定义枚举类型，比如性别枚举：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>web<span class="token punctuation">.</span>myenum<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">enum</span> Sex <span class="token punctuation">{</span>

    <span class="token function">MALE</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">FEMALE</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"女"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> index<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token function">Sex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token function">Sex</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> index<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//getter setter method ...</span>
<span class="token punctuation">}</span></code></pre>
<p>全局配置加上类型转换器以让Mybatis认识枚举类型：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- mybatis-config.xml --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeHandlers</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeHandler</span> <span class="token attr-name">handler</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.ibatis.type.EnumOrdinalTypeHandler<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.myenum.Sex<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeHandlers</span><span class="token punctuation">></span></span></code></pre>
<p>最后在需要的字段上指定即可：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token doctype">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.demo.dao.emp.EmployeeMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.demo.entity.emp.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp_id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empId<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp_name<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empName<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">typeHandler</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.ibatis.type.EnumOrdinalTypeHandler<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">typeHandler</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.demo.ExampleTypeHandler<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept_id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>did<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>
    // some code 省略
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span>    </code></pre>
<p>当这样配置时，sex为整数型，数据库插入的是序号（下标）值，1或2。</p>
<p>自动映射器（auto-mapper）会自动地选用 <code>EnumOrdinalTypeHandler</code> 来处理枚举类型。</p>
<p><strong>EnumTypeHandler的使用</strong>：</p>
<p>EnumTypeHandler使用枚举名称去处理Java枚举类型。EnumTypeHandler对应的是一个字符串。</p>
<p>将sex类型变为VARCHAR类型，之前是int类型。</p>
<p>在xml文件中使用，在insert的时候需要显示的指明自定义类型转换器：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token doctype">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.demo.dao.emp.EmployeeMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.demo.entity.emp.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp_id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empId<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp_name<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empName<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">typeHandler</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.typehandle.EnumTypeHandler<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">typeHandler</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.demo.ExampleTypeHandler<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept_id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>did<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>
    // some code 省略

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>insert<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.demo.entity.emp.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    insert into tbl_emp (emp_id, emp_name, sex, 
      email,dept_id)
    values (#{empId,jdbcType=INTEGER}, #{empName,jdbcType=VARCHAR}, #{sex,typeHandler="com.ssm.web.typehandle.EnumTypeHandler"}, 
      #{email,jdbcType=VARCHAR},#{did,jdbcType=INTEGER},)
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span> </code></pre>
<p>数据库中sex列写入的是 MALE或FAMALE。</p>
<p>自定义类型转换器使用：</p>
<p>定义自己的typeHandler，比如SexEnumTypeHandler类：</p>
<pre><code>package com.ssm.web.typehandle;

import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import org.apache.ibatis.type.JdbcType;
import org.apache.ibatis.type.TypeHandler;

import com.ssm.web.myenum.Sex;

public class SexEnumTypeHandler implements TypeHandler&lt;Sex&gt;{

    @Override
    public void setParameter(PreparedStatement ps, int i, Sex sex, JdbcType jdbcType) throws SQLException {
        // TODO Auto-generated method stub
        ps.setInt(i, sex.getIndex());
    }

    @Override
    public Sex getResult(ResultSet rs, String columnName) throws SQLException {
        // TODO Auto-generated method stub
        int id = rs.getInt(columnName);
        return Sex.getSext(id);
    }

    @Override
    public Sex getResult(ResultSet rs, int columnIndex) throws SQLException {
        int id = rs.getInt(columnIndex);
        return Sex.getSext(id);
    }

    @Override
    public Sex getResult(CallableStatement cs, int columnIndex) throws SQLException {
        int id = cs.getInt(columnIndex);
        return Sex.getSext(id);
    }
}</code></pre><p>最后配置mybatis-config.xml（也可以不配，在指定字段处配置），使用自定义的类型处理器SexEnumTypeHandler映射自定义枚举类Sex：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- mybatis-config.xml --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeHandlers</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeHandler</span> <span class="token attr-name">handler</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.typehandle.SexEnumTypeHandler<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.myenum.Sex<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeHandlers</span><span class="token punctuation">></span></span></code></pre>
<p>使用：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token doctype">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.demo.dao.emp.EmployeeMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.demo.entity.emp.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp_id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empId<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp_name<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empName<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">typeHandler</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.typehandle.SexEnumTypeHandler<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">typeHandler</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.demo.ExampleTypeHandler<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept_id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>did<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>
    // some code 省略

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>insert<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.demo.entity.emp.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    insert into tbl_emp (emp_id, emp_name, sex, 
      email,dept_id)
    values (#{empId,jdbcType=INTEGER}, #{empName,jdbcType=VARCHAR}, #{sex,typeHandler="com.ssm.web.typehandle.SexEnumTypeHandler"}, 
      #{email,jdbcType=VARCHAR},#{did,jdbcType=INTEGER},)
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span> </code></pre>
<h3 id="六、对象工厂objectFactory"><a href="#六、对象工厂objectFactory" class="headerlink" title="六、对象工厂objectFactory"></a>六、对象工厂objectFactory</h3><p>每次 MyBatis 创建结果对象的新实例时，它都会使用一个对象工厂（ObjectFactory）实例来完成实例化工作。 默认的对象工厂需要做的仅仅是实例化目标类，要么通过默认无参构造方法，要么通过存在的参数映射来调用带有参数的构造方法。 </p>
<p>如果想覆盖对象工厂的默认行为，可以通过创建自己的对象工厂来实现。比如： </p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// MyObjectFactory.java</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyObjectFactory</span> <span class="token keyword">extends</span> <span class="token class-name">DefaultObjectFactory</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> Object <span class="token function">create</span><span class="token punctuation">(</span>Class <span class="token class-name">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token comment" spellcheck="true">//自定义工厂调用不带参数的构造方法</span>
    <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> Object <span class="token function">create</span><span class="token punctuation">(</span>Class <span class="token class-name">type</span><span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Class<span class="token operator">></span> constructorArgTypes<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> constructorArgs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">//自定义工厂调用带参数的构造方法</span>
    <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> constructorArgTypes<span class="token punctuation">,</span> constructorArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setProperties</span><span class="token punctuation">(</span>Properties properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token comment" spellcheck="true">//自定义工厂设置属性</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setProperties</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">boolean</span> <span class="token function">isCollection</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> Collection<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>配置 mybatis-config.xml：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- mybatis-config.xml --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>objectFactory</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.objectFactorytest.ExampleObjectFactory<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>someProperty<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>objectFactory</span><span class="token punctuation">></span></span></code></pre>
<h3 id="七、插件"><a href="#七、插件" class="headerlink" title="七、插件"></a>七、插件</h3><blockquote>
<p>MyBatis 允许你在映射语句执行过程中的某一点进行拦截调用。</p>
<p>默认情况下，MyBatis 允许使用插件来拦截的方法调用包括：  </p>
<ul>
<li>Executor(update, query, flushStatements, commit, rollback,  getTransaction, close,  isClosed)           </li>
<li>ParameterHandler (getParameterObject, setParameters)           </li>
<li>ResultSetHandler  (handleResultSets, handleOutputParameters)           </li>
<li>StatementHandler (prepare, parameterize, batch, update, query)        </li>
</ul>
</blockquote>
<p>这些类中方法的细节可以通过查看每个方法的签名来发现，或者直接查看 MyBatis 发行包中的源代码。</p>
<p>MyBatis 提供的强大机制，使用插件是非常简单的，只需实现 Interceptor 接口，并指定想要拦截的方法签名即可。</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// ExamplePlugin.java</span>
<span class="token annotation punctuation">@Intercepts</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token annotation punctuation">@Signature</span><span class="token punctuation">(</span>
  type<span class="token operator">=</span> Executor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>
  method <span class="token operator">=</span> <span class="token string">"update"</span><span class="token punctuation">,</span>
  args <span class="token operator">=</span> <span class="token punctuation">{</span>MappedStatement<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExamplePlugin</span> <span class="token keyword">implements</span> <span class="token class-name">Interceptor</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> Object <span class="token function">intercept</span><span class="token punctuation">(</span>Invocation invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// implement pre processing if need</span>
    Object returnObject <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// implement post processing if need</span>
    <span class="token keyword">return</span> returnObject<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setProperties</span><span class="token punctuation">(</span>Properties properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>properties <span class="token operator">=</span> properties<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<pre><code>&lt;!-- mybatis-config.xml --&gt;
&lt;plugins&gt;
  &lt;plugin interceptor=&quot;com.ssm.web.example.ExamplePlugin&quot;&gt;
    &lt;property name=&quot;someProperty&quot; value=&quot;100&quot;/&gt;
  &lt;/plugin&gt;
&lt;/plugins&gt;</code></pre><p>上面的插件将会拦截在 Executor 实例中所有的 “update” 方法调用，           这里的 Executor 是负责执行底层映射语句的内部对象。</p>
<p>提示<strong>覆盖配置类</strong>         </p>
<p>除了用插件来修改 MyBatis 核心行为以外，还可以通过完全覆盖配置类来达到目的。只需继承配置类后覆盖其中的某个方法，再把它传递到  SqlSessionFactoryBuilder.build(myConfig) 方法即可。特别说明，这可能会极大影响 MyBatis  的行为，务请慎之又慎。</p>
<p>涉及Mybatis内部运行原理。</p>
<p>参考<a href="">《Mybatis运行原理》</a></p>
<h3 id="八、配置环境"><a href="#八、配置环境" class="headerlink" title="八、配置环境"></a>八、配置环境</h3><p>MyBatis 可以配置成适应多种环境，这种机制有助于将 SQL 映射应用于多种数据库之中， 现实情况下有多种理由需要这么做。例如，开发、测试和生产环境需要有不同的配置；或者想在具有相同 Schema 的多个生产数据库中使用相同的 SQL 映射。还有许多类似的使用场景。 </p>
<p>也就是可以注册多个数据源（DataSource），每个数据源分两个部分：数据源配置和数据库事务（transactionManager）配置。</p>
<p>注意：<strong>每个 SqlSessionFactory 实例只能选择一种环境。每个数据库对应一个 SqlSessionFactory 实例</strong>。  </p>
<h4 id="1、环境配置"><a href="#1、环境配置" class="headerlink" title="1、环境配置"></a>1、环境配置</h4><p>environments 元素定义了如何配置环境：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${driver}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${url}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${username}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${password}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>autoCommit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transactionManager</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span></code></pre>
<p>（1）environments元素的default属性表示缺省时，启用的数据源配置。</p>
<p>（2）environment元素是配置数据源的开始，id是这个数据源的标志，方便Mybatis上下文使用。</p>
<p>（3）transactionManager配置数据库事务，其type属性有3种配置方式：</p>
<p>​    （a）JDBC,采用JDBC方式管理事务，直接使用了 JDBC 的提交和回滚设施，它依赖从数据源获得的连接来管理事务作用域。 独立编码常用。</p>
<p>​    （b）MANAGED，采用容器方式管理事务，它从不提交或回滚一个连接，而是让容器来管理事务的整个生命周期 。默认情况下它会关闭连接。然而一些容器并不希望连接被关闭，因此需要将 closeConnection 属性设置为 false 来阻止默认的关闭行为。 在JNDI数据源源中常用。</p>
<p>​    （c）自定义，自定义数据库事务管理办法，适用于特殊应用。</p>
<p>transactionManager元素下的properties 元素可以配置数据源的各类属性，这里配置autoCommit的值false，表示要求数据源不自动提交。</p>
<h4 id="2、数据源"><a href="#2、数据源" class="headerlink" title="2、数据源"></a>2、数据源</h4><p><dataSource>标签元素是配置数据源连接信息，type 属性表示数据库连接方式配置，常见的配置方式有：</p>
<p>​    （a）UNPOOLED ：非连接池数据库（UnpooledDataSource）。Mybatis使用<code>org.apache.ibatis.datasource.unpooled.UnpooledDataSource</code>类实现。</p>
<p>​    （b）POOLED ：连接池数据库（PooledDataSource）。Mybatis使用<code>org.apache.ibatis.datasource.pooled.PooledDataSource</code>类实现。</p>
<p>​    （c）JNDI ：JNDI数据源（JNDIDateSource）。Mybatis使用<code>org.apache.ibatis.datasource.jndi.JndiDataSourceFactory</code>获取数据源。</p>
<p>​    （d）自定义数据源。使用自定义数据源，必须实现``接口，如</p>
<h4 id="3、数据库事务"><a href="#3、数据库事务" class="headerlink" title="3、数据库事务"></a>3、数据库事务</h4><p>Mybatis的数据库事务是由SqlSession控制，通过SqlSession提交（commit）或者回滚（rollback）。大部分情况会使用spring的中的事务管理器覆盖Mybatis的事务管理器transactionManager。</p>
<p>如果要使用，直接用TransactionFactory 接口实现类的全限定名或类型别名代替，同时实现还需要创建一个 Transaction 接口的实现类。使用这两个接口，可以完全自定义 MyBatis 对事务的处理。</p>
<p>3、数据源</p>
<p>   UNPOOLED，POOLED，JNDI除了常见通用的基本属性，还有属于自己的额外属性，实际使用时，具体参考<a href="https://mybatis.org/mybatis-3/zh/configuration.html" target="_blank" rel="noopener">Mybatis官网</a>说明。</p>
<p>主要说明一下 自定义数据源（或第三方数据源）。使用自定义数据源要求必须实现接口 <code>org.apache.ibatis.datasource.DataSourceFactory</code>  。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DataSourceFactory</span> <span class="token punctuation">{</span>
  <span class="token keyword">void</span> <span class="token function">setProperties</span><span class="token punctuation">(</span>Properties props<span class="token punctuation">)</span><span class="token punctuation">;</span>
  DataSource <span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>如：自定义DBCP数据源：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>web<span class="token punctuation">.</span>example<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLFeatureNotSupportedException<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span>

<span class="token keyword">import</span> javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DataSource<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>DataSourceFactory<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>dbcp<span class="token punctuation">.</span>dbcp<span class="token punctuation">.</span>BasicDataSource<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>dbcp<span class="token punctuation">.</span>dbcp<span class="token punctuation">.</span>BasicDataSourceFactory<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DBCPDataSource</span> <span class="token keyword">extends</span> <span class="token class-name">BasicDataSource</span> <span class="token keyword">implements</span> <span class="token class-name">DataSourceFactory</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> Properties props <span class="token operator">=</span> null<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> Logger <span class="token function">getParentLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLFeatureNotSupportedException <span class="token punctuation">{</span>
        <span class="token keyword">return</span> null<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setProperties</span><span class="token punctuation">(</span>Properties props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>props <span class="token operator">=</span> props <span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> DataSource <span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        DataSource dataSource <span class="token operator">=</span> null<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            dataSource <span class="token operator">=</span> BasicDataSourceFactory<span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> dataSource<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>配置自定义数据源：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.example.DBCPDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.postgresql.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:postgresql:mydb<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>postgres<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span></code></pre>
<p>如果不实现接口也可以，使用<code>org.apache.ibatis.datasource.unpooled.UnpooledDataSourceFactory</code> 可被用作父类来构建新的数据源适配器。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>web<span class="token punctuation">.</span>example<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>unpooled<span class="token punctuation">.</span>UnpooledDataSourceFactory<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>mchange<span class="token punctuation">.</span>v2<span class="token punctuation">.</span>c3p0<span class="token punctuation">.</span>ComboPooledDataSource<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">C3P0DataSource</span> <span class="token keyword">extends</span> <span class="token class-name">UnpooledDataSourceFactory</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token function">C3P0DataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token keyword">this</span><span class="token punctuation">.</span>dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComboPooledDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="九、数据库厂商标识"><a href="#九、数据库厂商标识" class="headerlink" title="九、数据库厂商标识"></a>九、数据库厂商标识</h3><p>MyBatis 可以根据不同的数据库厂商执行不同的语句，这种多厂商的支持是基于映射语句中的 <code>databaseId</code> 属性。</p>
<p>如要使用在mybatis-config.xml中配置即可。</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>databaseIdProvider</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DB_VENDOR<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre>
<h4 id="1、系统默认规则"><a href="#1、系统默认规则" class="headerlink" title="1、系统默认规则"></a>1、系统默认规则</h4><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>databaseIdProvider</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DB_VENDOR<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SQL Server<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlserver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DB2<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>db2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Oracle<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>oracle<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>databaseIdProvider</span><span class="token punctuation">></span></span></code></pre>
<p> type=”DB_VENDOR”是启动Mybatis内部注册的策略器。Mybatis将配置信息写入Configuration类中，在数据库连接后调用<code>DatabaseMetaData的getDatabaseProductName()</code> 方法获取数据库信息，然后跟配置的name值是做匹配，得到DatabaseId。</p>
<p>用代码也可以得到数据库ID：</p>
<pre class=" language-java"><code class="language-java">String dbId <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDatabaseId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>也可以指定SQL在某个数据库厂商执行，XML配置：</p>
<pre class=" language-xml"><code class="language-xml">
<span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token doctype">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.demo.dao.emp.EmployeeMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.demo.entity.emp.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
     // some code 省略
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>
    // some code 省略

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>insert<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.demo.entity.emp.Employee<span class="token punctuation">"</span></span> <span class="token attr-name">databaseId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mysql<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    insert into tbl_emp (emp_id, emp_name, sex, 
      email,dept_id)
    values (#{empId,jdbcType=INTEGER}, #{empName,jdbcType=VARCHAR}, #{sex,typeHandler="com.ssm.web.typehandle.EnumTypeHandler"}, 
      #{email,jdbcType=VARCHAR},#{did,jdbcType=INTEGER},)
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span> </code></pre>
<p>在insert标签中多了databaseId属性时，Mybatis提供如下规则：</p>
<p>（1）若没有配置databaseIdProvider标签，databaseId会返回null。</p>
<p>（2）若配置了databaseIdProvider标签，Mybatis会用配置的name值去匹配数据库信息，匹配上就会设置databaseId，否则值为null。</p>
<p>（3）若Configuration的databaseId不为空，则它只能找到配置databaseId的SQL语句。</p>
<p>（4）MyBatis 会加载带有匹配当前数据库 <code>databaseId</code> 属性和所有不带 <code>databaseId</code> 属性的语句。 如果同时找到带有 <code>databaseId</code> 和不带 <code>databaseId</code> 的相同语句，则后者（不带 <code>databaseId</code> 的语句）会被舍弃。 </p>
<h4 id="2、不使用默认规则"><a href="#2、不使用默认规则" class="headerlink" title="2、不使用默认规则"></a>2、不使用默认规则</h4><p>Mybatis允许自定义规则，只要</p>
<p>（A）实现<code>org.apache.ibatis.mapping.DatabaseIdProvider</code>接口，</p>
<p>（B）在mybatis-config.xml中配置<code>DatabaseIdProvider</code>。</p>
<p>如自定义MyDbIdProvider：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>web<span class="token punctuation">.</span>example<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLException<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DataSource<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>mapping<span class="token punctuation">.</span>DatabaseIdProvider<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyDbIdProvider</span> <span class="token keyword">implements</span> <span class="token class-name">DatabaseIdProvider</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> Properties props <span class="token operator">=</span> null<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setProperties</span><span class="token punctuation">(</span>Properties p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>props <span class="token operator">=</span> p <span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> String <span class="token function">getDatabaseId</span><span class="token punctuation">(</span>DataSource dataSource<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>
        String dbName <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMetaData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDatabaseProductName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String dbId <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>dbName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> dbId<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>然后配置自定义的MyDbIdProvider ：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>databaseIdProvider</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.example.MyDbIdProvider<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SQL Server<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlserver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DB2<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>db2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Oracle<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>oracle<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>databaseIdProvider</span><span class="token punctuation">></span></span></code></pre>
<h3 id="十、映射器引入（Mappers）"><a href="#十、映射器引入（Mappers）" class="headerlink" title="十、映射器引入（Mappers）"></a>十、映射器引入（Mappers）</h3><p>映射器是Mybatis的核心组件。</p>
<p>引入映射器首先需要定义映射器接口：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>web<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>emp<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>web<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>emp<span class="token punctuation">.</span>Employee<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>web<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>emp<span class="token punctuation">.</span>EmployeeExample<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EmployeeMapper</span> <span class="token punctuation">{</span>

    <span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span>Employee record<span class="token punctuation">)</span><span class="token punctuation">;</span>
    List<span class="token operator">&lt;</span>Employee<span class="token operator">></span> <span class="token function">selectByExample</span><span class="token punctuation">(</span>EmployeeExample example<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Employee <span class="token function">selectByPrimaryKey</span><span class="token punctuation">(</span>Integer empId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token function">updateByPrimaryKey</span><span class="token punctuation">(</span>Employee record<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//some other code ...</span>
<span class="token punctuation">}</span></code></pre>
<p>对应的EmployeeMapper.xml文件：</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.ssm.web.demo.dao.emp.EmployeeMapper&quot;&gt;
  &lt;resultMap id=&quot;BaseResultMap&quot; type=&quot;com.ssm.web.demo.entity.emp.Employee&quot;&gt;
    &lt;id column=&quot;emp_id&quot; jdbcType=&quot;INTEGER&quot; property=&quot;empId&quot; /&gt;
    &lt;result column=&quot;emp_name&quot; jdbcType=&quot;VARCHAR&quot; property=&quot;empName&quot; /&gt;
    &lt;result column=&quot;sex&quot; property=&quot;sex&quot; typeHandler=&quot;com.ssm.web.typehandle.EnumTypeHandler&quot; /&gt;
    &lt;result column=&quot;email&quot; property=&quot;email&quot; typeHandler=&quot;com.ssm.web.demo.ExampleTypeHandler&quot;/&gt;
    &lt;result column=&quot;dept_id&quot; jdbcType=&quot;VARCHAR&quot; property=&quot;did&quot; /&gt;
  &lt;/resultMap&gt;
    // some code 省略

    &lt;insert id=&quot;insert&quot; parameterType=&quot;com.ssm.web.demo.entity.emp.Employee&quot;&gt;
    insert into tbl_emp (emp_id, emp_name, sex, 
      email,dept_id)
    values (#{empId,jdbcType=INTEGER}, #{empName,jdbcType=VARCHAR}, #{sex,typeHandler=&quot;com.ssm.web.typehandle.EnumTypeHandler&quot;}, 
      #{email,jdbcType=VARCHAR},#{did,jdbcType=INTEGER},)
  &lt;/insert&gt;</code></pre><p>引入映射器的方式有几种:</p>
<p>1、文件相对路径引入映射器：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 使用相对于类路径的资源引用 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com/ssm/web/demo/dao/emp/EmployeeMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span></code></pre>
<p>2、使用包名引入映射器：</p>
<pre><code>&lt;!-- 将包内的映射器接口实现全部注册为映射器 --&gt;
&lt;mappers&gt;
  &lt;package name=&quot;com.ssm.web.demo.dao.emp&quot;/&gt;
&lt;/mappers&gt;</code></pre><p>3、使用类注册引入映射器：</p>
<pre><code>&lt;!-- 使用映射器接口实现类的完全限定类名 --&gt;
&lt;mappers&gt;
  &lt;mapper class=&quot;com.ssm.web.demo.dao.emp.AuthorMapper&quot;/&gt;
&lt;/mappers&gt;</code></pre><p>4、文件绝对路径引入映射器：</p>
<pre><code>&lt;!-- 使用完全限定资源定位符（URL） --&gt;
&lt;mappers&gt;
  &lt;mapper url=&quot;file:///var/mappers/com/ssm/web/demo/dao/emp/EmployeeMapper.xml&quot;/&gt;
&lt;/mappers&gt;</code></pre><br/>

<p><strong>相关文章：</strong></p>
<table>
<thead>
<tr>
<th>文章名称</th>
</tr>
</thead>
<tbody><tr>
<td><a href="b802139a.html">《Mybatis(一)主要组件》</a></td>
</tr>
<tr>
<td><a href="5d11555a.html">《Mybatis(二)配置》</a></td>
</tr>
<tr>
<td><a href="d467df29.html">《Mybatis(三)动态SQL》</a></td>
</tr>
<tr>
<td><a href="3bfa75b5.html">《Mybtis(四)工作原理》</a></td>
</tr>
<tr>
<td><a href="ae8510ea.html">《Mybtis(五)Mapper映射器》</a></td>
</tr>
<tr>
<td><a href="44c4c800.html">《Mybtis(六)Mapper级联》</a></td>
</tr>
</tbody></table>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>jvm之垃圾收集器</title>
    <url>/posts/d01dbbb1.html</url>
    <content><![CDATA[<h2 id="jvm-垃圾收集器"><a href="#jvm-垃圾收集器" class="headerlink" title="jvm 垃圾收集器"></a>jvm 垃圾收集器</h2><h2 id="一-关于垃圾收集器"><a href="#一-关于垃圾收集器" class="headerlink" title="一 关于垃圾收集器"></a>一 关于垃圾收集器</h2><blockquote>
<p>垃圾收集器是垃圾回收算法（标记-清除算法、标记-复制算法、标记-整理算法、半复制算法）的具体实现，不同商家、不同版本的JVM所提供的垃圾收集器可能会有很在差别，本文主要介绍HotSpot虚拟机中的垃圾收集器。</p>
</blockquote>
<p>相关术语</p>
<h3 id="1-并行与并发"><a href="#1-并行与并发" class="headerlink" title="1. 并行与并发"></a>1. 并行与并发</h3><table>
<thead>
<tr>
<th>并行（Parallel）</th>
<th>并发（Concurrent）</th>
</tr>
</thead>
<tbody><tr>
<td>指多条垃圾收集线程同一时间并行协同工作，此时用户线程仍然处于等待状态；如ParNew、Parallel Scavenge、Parallel Old；</td>
<td>指用户线程与垃圾收集线程同时都在执行（但不一定是并行的，可能会交替执行）；用户程序在继续运行，未被冻结，程序仍然能响应服务请求。垃圾收集程序线程占用系统资源。如CMS、G1（也有并行）；</td>
</tr>
</tbody></table>
<h3 id="2-部分收集和整堆收集"><a href="#2-部分收集和整堆收集" class="headerlink" title="2. 部分收集和整堆收集"></a>2. 部分收集和整堆收集</h3><p>（1）部分收集（Partial GC）：</p>
<p>​    指目标不是完整收集整个Java堆的垃圾收集。主要三种：</p>
<p>​    A. 新生代收集（Minor GC/Young GC）：指目标只是新生代的垃圾收集。<br>​    B. 老年代收集（Major GC/Old GC）：指目标只是老年代的垃圾收集。目前只有CMS收集器会有单独收集老年代的行为。</p>
<p>​    C. 混合收集（Mixed GC）：指目标是收集整个新生代以及部分老年代的垃圾收集。目前只有G1收集器会有这种行为。    </p>
<p>（2）整堆收集（Full GC）：收集整个Java堆和方法区的垃圾收集。</p>
<blockquote>
<p><strong>注意</strong>：“Major GC”这个说法现在有点混淆，在不同资料上常有不同所指，请按资料上下文区分到底是指老年代的收集还是整堆收集。因为有的Major GC表示老年代GC有的表示整堆GC。</p>
</blockquote>
<h3 id="3-收集器的指标"><a href="#3-收集器的指标" class="headerlink" title="3. 收集器的指标"></a>3. 收集器的指标</h3><p>收集器的指标一般体现在设计它的目的上，如：Parallel Scavenge收集器首要目标是吞吐量。</p>
<p>主要权衡指标有三个：</p>
<p>（A）低延迟</p>
<p>（B）吞吐量</p>
<p>（C）较小的内存占用</p>
<h2 id="二-Hotspot七种垃圾收集器"><a href="#二-Hotspot七种垃圾收集器" class="headerlink" title="二 Hotspot七种垃圾收集器"></a>二 Hotspot七种垃圾收集器</h2><p><img src="/medias/loading-animated.gif" data-original="/images/jvm-images/jvm-gcr-1.jpg" alt="常见的七种垃圾收集器"><br>（图片来自《深入理解java虚拟机:jvm高级特性与最佳实践 》第三版。JVM系列黑白图均来自电子书，彩图来自网络）</p>
<p>图中是七种作用于不同分代的收集器。<br>如果两个收集器之间存在连线，就说明它们可以搭配使用。<br>图中收集器所处的区域，则表示它是属于新生代收集器抑或是老年代收集器。<br>其中Serial Old作为CMS出现”Concurrent Mode Failure”失败的后备预案。</p>
<p>整理成表格如下：</p>
<table>
<thead>
<tr>
<th>收集区域</th>
<th>收集器</th>
</tr>
</thead>
<tbody><tr>
<td>新生代收集器</td>
<td>Serial、ParNew、Parallel Scavenge</td>
</tr>
<tr>
<td>老年代收集器</td>
<td>Serial Old、Parallel Old、CMS</td>
</tr>
<tr>
<td>整堆收集器</td>
<td>G1</td>
</tr>
</tbody></table>
<h3 id="1、Serial-收集器"><a href="#1、Serial-收集器" class="headerlink" title="1、Serial 收集器"></a>1、Serial 收集器</h3><p>Serial 串口，串行的意思。</p>
<blockquote>
<p>Serial收集器是一个单线程工作的收集器。是HotSpot虚拟机运行在客户端模式下的默认新生代收集器，有着优于其他收集器的地方，那就是简单而高效。（高效是指与其他收集器的单线程相比）</p>
</blockquote>
<h4 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h4><p>​    （1）针对新生代的收集器。<br>    （2）只会使用一个处理器或一条收集线程去完成垃圾收集工作，进行垃圾收集时，必须暂停其他所有工作线程，直到它收集结束。</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-images/jvm-5-gc-serial.jpg" alt="Serial收集器运行示意图"></p>
<h3 id="2、ParNew-收集器"><a href="#2、ParNew-收集器" class="headerlink" title="2、ParNew 收集器"></a>2、ParNew 收集器</h3><p>ParNew收集器实质上是Serial收集器的多线程并行版本。其余的行为包括Serial收集器可用的所有控制参数（例如：<code>-XX：SurvivorRatio</code>、<code>-XX：PretenureSizeThreshold</code>、<code>-XX：HandlePromotionFailure</code>等）、收集算法、Stop The World、对象分配规则、回收策略等都与Serial收集器完全一致。二者共用许多代码。</p>
<h4 id="特点：-1"><a href="#特点：-1" class="headerlink" title="特点："></a>特点：</h4><p>​    （1）新生代收集器</p>
<p>​    （2）支持多线程并行收集。</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-images/jvm-5-gc-ParNew.jpg" alt="ParNew/Serial Old收集器运行示意图"></p>
<p>ParNew收集器是激活CMS后（使用-XX：+UseConcMarkSweepGC选项）的默认新生代收集器，也可以使用-XX：+/-UseParNewGC选项来强制指定或者禁用它。</p>
<h3 id="3、Parallel-Scavenge-收集器"><a href="#3、Parallel-Scavenge-收集器" class="headerlink" title="3、Parallel Scavenge 收集器"></a>3、Parallel Scavenge 收集器</h3><p>Parallel Scavenge收集器也是一款新生代收集器，它同样是基于标记-复制算法实现的收集器，也是能够并行收集的多线程收集器。早期只能和Serial Old搭配。不能和CMS搭配。</p>
<p>目标：</p>
<p>希望达到一个可控制的吞吐量（Throughput）。</p>
<p>Parallel Scavenge收集器也经常被称作“吞吐量优先收集器”。</p>
<h4 id="特点：-2"><a href="#特点：-2" class="headerlink" title="特点："></a>特点：</h4><p>（1）新生代收集器，基于标记-复制算法实现</p>
<p>（2）能够多线程并行收集</p>
<p>（3）停顿-吞吐量的自适应的调节策略。可以设定目标让收集器自行调节。</p>
<p>（4）支持NUMA(非统一内存访问架构)内存分配</p>
<p>运行示意图：</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-images/jvm-5-gc-Parallel-Scavenge-or-Parallel-Old.jpg" alt="Parallel Scavenge / Parallel Old收集器运行示意图"></p>
<blockquote>
<p>Parallel Scavenge收集器提供了两个参数用于精确控制吞吐量，分别是控制最大垃圾收集停顿时间的<code>-XX：MaxGCPauseMillis</code>参数以及直接设置吞吐量大小的<code>-XX：GCTimeRatio</code>参数。</p>
</blockquote>
<blockquote>
<p><code>-XX：MaxGCPauseMillis</code>参数允许的值是一个大于0的毫秒数，收集器将尽力保证内存回收花费的时间不超过用户设定值。</p>
</blockquote>
<blockquote>
<p><code>-XX：GCTimeRatio</code>参数的值则应当是一个大于0小于100的整数，也就是垃圾收集时间占总时间的比率，相当于吞吐量的倒数。如把此参数设置为19，那允许的最大垃圾收集时间就占总时间的5%（即1/(1+19)），默认值为99，即允许最大1%（即1/(1+99)）的垃圾收集时间。</p>
</blockquote>
<p>停顿-吞吐量的自适应的调节策略：</p>
<blockquote>
<p>Parallel Scavenge收集器还有一个参数<code>-XX：+UseAdaptiveSizePolicy</code>值得我们关注。这是一个开关参数，当这个参数被激活之后，就不需要人工指定新生代的大小（-Xmn）、Eden与Survivor区的比例（<code>-XX：SurvivorRatio</code>）、晋升老年代对象大小（<code>-XX：PretenureSizeThreshold</code>）等细节参数了，虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或者最大的吞吐量。这种调节方式称为垃圾收集的自适应的调节策略（GC Ergonomics）.</p>
</blockquote>
<blockquote>
<p>把基本的内存数据设置好（如<code>-Xmx</code>设置最大堆），然后使用<code>-XX：MaxGCPauseMillis</code>参数（更关注最大停顿时间）或<code>-XX：GCTimeRatio</code>（更关注吞吐量）参数给虚拟机设立一个优化目标，那具体细节参数的调节工作就由虚拟机完成了。自适应调节策略也是Parallel Scavenge收集器区别于ParNew收集器的一个重要特性。</p>
</blockquote>
<h3 id="4、Serial-Old-收集器"><a href="#4、Serial-Old-收集器" class="headerlink" title="4、Serial Old  收集器"></a>4、Serial Old  收集器</h3><p>Serial Old是Serial收集器的老年代版本，它同样是一个单线程收集器，使用标记-整理算法。</p>
<h4 id="特点：-3"><a href="#特点：-3" class="headerlink" title="特点："></a>特点：</h4><p>（1）老年代收集器，</p>
<p>（2）单线程收集器，</p>
<p>（3）使用标记-整理算法。</p>
<p>使用环境：</p>
<p>客户端：主要供客户端模式下的HotSpot虚拟机使用。</p>
<p>服务端：（A）在JDK 5以及之前的版本中与Parallel Scavenge收集器搭配使用；</p>
<p>​    （B）作为CMS收集器发生失败时的后备预案，在并发收集发生Concurrent ModeFailure时使用。</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-images/jvm-5-gc-serial.jpg" alt="Serial/ Serial old 收集器运行示意图"></p>
<h3 id="5、Parallel-Old-收集器"><a href="#5、Parallel-Old-收集器" class="headerlink" title="5、Parallel Old 收集器"></a>5、Parallel Old 收集器</h3><p>Parallel Old是Parallel Scavenge收集器的老年代版本，支持多线程并发收集，基于标记-整理算法实现。这个收集器是直到JDK 6时才开始提供的。</p>
<h4 id="特点：-4"><a href="#特点：-4" class="headerlink" title="特点："></a>特点：</h4><p>同Parallel Scavenge收集器。</p>
<p>“吞吐量优先”收集器：</p>
<blockquote>
<p>在注重吞吐量或者处理器资源较为稀缺的场合，都可以优先考虑Parallel Scavenge加Parallel Old收集器这个组合。     </p>
</blockquote>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-images/jvm-5-gc-Parallel-Scavenge-or-Parallel-Old.jpg" alt="Parallel Scavenge / Parallel Old收集器运行示意图"></p>
<h3 id="6、CMS-收集器"><a href="#6、CMS-收集器" class="headerlink" title="6、CMS  收集器"></a>6、CMS  收集器</h3><p>CMS : Concurrent Mark Sweep</p>
<p>官方文档称之为：“并发低停顿收集器”（Concurrent Low Pause Collector）</p>
<h4 id="特点：-5"><a href="#特点：-5" class="headerlink" title="特点："></a>特点：</h4><p>​    （1）以获取最短回收停顿时间为目标。</p>
<p>​    （2）基于标记-清除算法实现。</p>
<blockquote>
<p>关注服务的响应速度，希望系统停顿时间尽可能短,如B/S系统应用服务端，适合CMS收集器。</p>
</blockquote>
<p>CMS堆内存布局</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-images/jvm-5-gc-cms.png" alt="Concurrent Mark Sweep收集器运行示意图"></p>
<h5 id="CMS收集器工作过程："><a href="#CMS收集器工作过程：" class="headerlink" title="CMS收集器工作过程："></a>CMS收集器工作过程：</h5><p>运行示意图如下</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-images/jvm-5-gc-cms-workflow.jpg" alt="Concurrent Mark Sweep收集器运行示意图"></p>
<p>1）初始标记（CMS initial mark）</p>
<p>​    （A）标记一下GC Roots能直接关联到的对象，速度很快。</p>
<p>​    （B）有短暂停顿</p>
<p>2）并发标记（CMS concurrent mark）</p>
<p>​    （A）从GC Roots的直接关联对象开始遍历整个对象图的过程。</p>
<p>​    （B）该过程耗时较长，用户线程可以与垃圾收集线程一起并发运行</p>
<p>3）重新标记（CMS remark）</p>
<p>​    （A）修正并发标记期间，因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录。</p>
<p>​    （B）有停顿，比初始标记停顿时间稍长，比并发标记阶段的时间短。</p>
<p>4）并发清除（CMS concurrent sweep）</p>
<p>​    （A）清理删除掉标记阶段判断的已经死亡的对象。</p>
<p>​    （B）不需要移动存活对象，可以与用户线程同时并发执行。</p>
<h4 id="CMS收集器优缺点："><a href="#CMS收集器优缺点：" class="headerlink" title="CMS收集器优缺点："></a>CMS收集器优缺点：</h4><p>优点：</p>
<p>​    并发收集、低停顿</p>
<p>缺点：</p>
<p>​    （1）对处理器资源非常敏感，并发阶段线程运行占用资源。</p>
<p>​    （2）无法处理并发标记和并发清理阶段产生的“浮动垃圾”（Floating Garbage）。有可能出现“Con-current Mode Failure”失败进而导致另一次完全“Stop The World”的Full GC的产生。</p>
<p>​    （3）“标记-清除”算法实现带来的空间碎片问题。</p>
<blockquote>
<p><strong>浮动垃圾</strong>：在CMS的并发标记和并发清理阶段，用户线程是还在继续运行的，程序在运行自然就还会伴随有新的垃圾对象不断产生，但这一部分垃圾对象是出现在标记过程结束以后，CMS无法在当次收集中处理掉它们，只好留待下一次垃圾收集时再清理掉。这一部分垃圾就称为“浮动垃圾”</p>
</blockquote>
<p>因为浮动垃圾带来的问题怎么办？</p>
<blockquote>
<p>CMS收集器不能像其他收集器那样等待到老年代几乎完全被填满了再进行收集，必须预留一部分空间供并发收集时的程序运作使用。在JDK 5的默认设置下，CMS收集器当老年代使用了68%的空间后就会被激活，这是一个偏保守的设置，如果在实际应用中老年代增长并不是太快，可以适当调高参数<code>-XX：CMSInitiatingOccu-pancyFraction</code>的值来提高CMS的触发百分比，降低内存回收频率，获取更好的性能。到了JDK 6时，CMS收集器的启动阈值就已经默认提升至92%。但这又会更容易面临另一种风险：要是CMS运行期间预留的内存无法满足程序分配新对象的需要，就会出现一次“并发失败”（Concurrent Mode Failure），这时候虚拟机将不得不启动后备预案：冻结用户线程的执行，临时启用Serial Old收集器来重新进行老年代的垃圾收集，但这样停顿时间就很长了。所以参数<code>-XX：CMSInitiatingOccupancyFraction</code>设置得太高将会很容易导致大量的并发失败产生，性能反而降低，用户应在生产环境中根据实际应用情况来权衡设置。</p>
</blockquote>
<h3 id="7、G1垃圾收集器"><a href="#7、G1垃圾收集器" class="headerlink" title="7、G1垃圾收集器"></a>7、G1垃圾收集器</h3><p>G1 : Garbage First</p>
<blockquote>
<p>Garbage First（简称G1）收集器是垃圾收集器技术发展历史上的里程碑式的成果，它开创了收集器面向局部收集的设计思路和基于Region的内存布局形式。</p>
<p>从JDK 6 Update 14开始就有Early Access版本的G1收集器供开发人员实验和试用，但由此开始G1收集器的“实验状态”（Experimental）持续了数年时间，直至JDK 7Update 4，Oracle才认为它达到足够成熟的商用程度，移除了“Experimental”的标识；到了JDK 8 Update 40的时候，G1提供并发的类卸载的支持，补全了其计划功能的最后一块拼图。这个版本以后的G1收集器才被Oracle官方称为“全功能的垃圾收集器”（Fully-FeaturedGarbage Collector）。</p>
<p>JDK9发布之日，G1宣告取代Parallel Scavenge加Parallel Old组合，成为服务端模式下的默认垃圾收集器。</p>
</blockquote>
<p>设计思路：</p>
<p>​    追求能够应付应用的内存分配速率（Allocation Rate），而不追求一次把整个Java堆全部清理干净。</p>
<blockquote>
<p>应用在分配，同时收集器在收集，只要收集的速度能跟得上对象分配的速度，那一切就能运作得很完美。这种新的收集器设计思路从工程实现上看是从G1开始兴起的。</p>
<p>G1是收集器技术发展的一个里程碑。也是jdk11的默认垃圾收集器。</p>
</blockquote>
<h4 id="特点：-6"><a href="#特点：-6" class="headerlink" title="特点："></a>特点：</h4><p>​    （1）面向服务端应用的垃圾收集器。</p>
<p>​    （2）基于Region的堆内存布局。</p>
<p>​    （3）使用Mixed GC模式，不再按“代”进行回收。（Region布局支持）</p>
<p>​    （4）遵循分代收集理论设计，新生代和老年代不再是固定大小与数理，只要求是逻辑连续的动态集合。</p>
<p>​    （5）回收策略是优先处理回收价值最大的Region</p>
<h4 id="内存布局图："><a href="#内存布局图：" class="headerlink" title="内存布局图："></a>内存布局图：</h4><p><img src="/medias/loading-animated.gif" data-original="/images/jvm-images/jvm-5-gc-G1.png" alt="G1收集器堆内存布局"></p>
<blockquote>
<p>G1不再是固定大小以及固定数量的分代区域划分，而是把连续的Java堆划分为多个大小相等的独立区域（Region），每一个Region都可以根据需要，扮演新生代的Eden空间、Survivor空间，或者老年代空间。收集器能够对扮演不同角色的Region采用不同的策略去处理。</p>
<p>Region中还有一类特殊的Humongous区域，专门用来存储大对象。G1认为只要大小超过了一个Region容量一半的对象即可判定为大对象。每个Region的大小可以通过参数<code>-XX：G1HeapRegionSize</code>设定，取值范围为1MB～32MB，且应为2的N次幂。而对于那些超过了整个Region容量的超级大对象，将会被存放在N个连续的<code>Humongous Region</code>之中，G1的大多数行为都把<code>Humongous Region</code>作为老年代的一部分来进行看待</p>
</blockquote>
<h4 id="G1收集器实现思路："><a href="#G1收集器实现思路：" class="headerlink" title="G1收集器实现思路："></a>G1收集器实现思路：</h4><p>（1）基于Region的堆内存布局,把连续的Java堆划分为多个大小相等的独立区域（Region），每一个Region都可以根据需要，扮演新生代的Eden空间、Survivor空间，或者老年代空间。收集器能够对扮演不同角色的Region采用不同的策略去处理。</p>
<p>（2)将堆分成多个独立Region后，使用记忆集避免全堆作为GC Roots扫描，每个Region都维护有自己的记忆集，记忆集会记录下别的Region指向自己的指针，并标记这些指针分别在哪些卡页的范围之内。</p>
<blockquote>
<p>G1的记忆集在存储结构的本质上是一种哈希表，Key是别的Region的起始地址，Value是一个集合，里面存储的元素是卡表的索引号。这种“双向”的卡表结构（卡表是“我指向谁”，这种结构还记录了“谁指向我”）比原来的卡表实现起来更复杂，同时由于Region数量比传统收集器的分代数量明显要多得多，因此G1收集器要比其他的传统垃圾收集器有着更高的内存占用负担。G1至少要耗费大约相当于Java堆容量10%至20%的额外内存来维持收集器工作。</p>
</blockquote>
<p>（3）在并发标记阶段，通过原始快照（SATB）算法来实现用户线程改变对象引用关系时，不打破原本的对象图结构。</p>
<p>（4）在回收过程中新创建对象的内存分配上，程序要继续运行就肯定会持续有新对象被创建，G1为每一个Region设计了两个名为TAMS（Top at Mark Start）指针，把Region中的一部分空间划分出来用于并发回收过程中的新对象分配，并发回收时新分配的对象地址都必须要在这两个指针位置上。G1收集器默认在这个地址以上的对象是被隐式标记过的，即默认它们是存活的，不纳入回收范围。</p>
<p>可预测的“停顿时间模型”（Pause Prediction Model）:</p>
<blockquote>
<p>G1收集器之所以能建立可预测的停顿时间模型，是因为它将Region作为单次回收的最小单元，即每次收集到的内存空间都是Region大小的整数倍，这样可以有计划地避免在整个Java堆中进行全区域的垃圾收集。更具体的处理思路是让G1收集器去跟踪各个Region里面的垃圾堆积的“价值”大小，价值即回收所获得的空间大小以及回收所需时间的经验值，然后在后台维护一个优先级列表，每次根据用户设定允许的收集停顿时间（使用参数<code>-XX：MaxGCPauseMillis</code>指定，默认值是200毫秒），优先处理回收价值收益最大的那些Region，这也就是“Garbage First”名字的由来。这种使用Region划分内存空间，以及具有优先级的区域回收方式，保证了G1收集器在有限的时间内获取尽可能高的收集效率。</p>
</blockquote>
<blockquote>
<p>G1收集器的停顿预测模型是以衰减均值（Decaying Average）为理论基础来实现的，在垃圾收集过程中，G1收集器会记录每个Region的回收耗时、每个Region记忆集里的脏卡数量等各个可测量的步骤花费的成本，并分析得出平均值、标准偏差、置信度等统计信息。这里强调的“衰减平均值”是指它会比普通的平均值更容易受到新数据的影响，平均值代表整体平均状态，但衰减平均值更准确地代表“最近的”平均状态。换句话说，Region的统计状态越新越能决定其回收的价值。然后通过这些信息预测现在开始回收的话，由哪些Region组成回收集才可以在不超过期望停顿时间的约束下获得最高的收益。</p>
</blockquote>
<p><code>-XX：MaxGCPauseMillis</code>-用户指定期望的停顿时间：</p>
<blockquote>
<p>用户指定期望的停顿时间是G1收集器很强大的一个功能，设置不同的期望停顿时间，可使得G1在不同应用场景中取得关注吞吐量和关注延迟之间的最佳平衡。不过，这里设置的“期望值”必须是符合实际的，不能异想天开，毕竟G1是要冻结用户线程来复制对象的，这个停顿时间再怎么低也得有个限度。它默认的停顿目标为两百毫秒，一般来说，回收阶段占到几十到一百甚至接近两百毫秒都很正常，但如果我们把停顿时间调得非常低，譬如设置为二十毫秒，很可能出现的结果就是由于停顿目标时间太短，导致每次选出来的回收集只占堆内存很小的一部分，收集器收集的速度逐渐跟不上分配器分配的速度，导致垃圾慢慢堆积。很可能一开始收集器还能从空闲的堆内存中获得一些喘息的时间，但应用运行时间一长就不行了，最终占满堆引发Full GC反而降低性能，所以通常把望期停顿时间设置为一两百毫秒或者两三百毫秒会是比较合理的。</p>
</blockquote>
<h4 id="G1工作流程："><a href="#G1工作流程：" class="headerlink" title="G1工作流程："></a>G1工作流程：</h4><p>流程图如下：</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-images/jvm-5-gc-G1-workflow.jpg" alt="G1收集器堆内存布局"></p>
<p>1、初始标记（Initial Marking）：<br>（A）只是标记一下GC Roots能直接关联到的对象，并且修改TAMS指针的值，让下一阶段用户线程并发运行时，能正确地在可用的Region中分配新对象。</p>
<p>（B）该阶段需要停顿线程，但耗时很短。</p>
<blockquote>
<p>初始标记是借用进行Minor GC的时候同步完成的，所以G1收集器在这个阶段实际并没有额外的停顿。</p>
</blockquote>
<p>2、并发标记（Concurrent Marking）：<br>（A）从GC Root开始对堆中对象进行可达性分析，递归扫描整个堆里的对象图，找出要回收的对象。</p>
<p>（B）这阶段耗时较长，可与用户程序并发执行。</p>
<p>（C）当对象图扫描完成以后，还要重新处理SATB记录下的在并发时有引用变动的对象。</p>
<p>3、最终标记（Final Marking）</p>
<p>（A）对用户线程做另一个短暂的暂停，处理并发阶段结束后仍遗留下来的最后那少量的SATB记录。</p>
<p>4、筛选回收（Live Data Counting and Evacuation）</p>
<p>（A）负责更新Region的统计数据，对各个Region的回收价值和成本进行排序，根据用户所期望的停顿时间来制定回收计划，可以自由选择任意多个Region构成回收集，然后把决定回收的那一部分Region的存活对象复制到空的Region中，再清理掉整个旧Region的全部空间。</p>
<p>（B）操作涉及存活对象的移动，必须暂停用户线程。</p>
<p>（C）筛选回收由多条收集器线程并行完成的。</p>
<h4 id="G1与CMS比较"><a href="#G1与CMS比较" class="headerlink" title="G1与CMS比较"></a>G1与CMS比较</h4><table>
<th><td width="50%">G1</td><td width="50%">CMS</td></th>
<tr><td rowspan="6">不同</td> <td>G1基于Region布局，实现分代。</td><td>CMS传统的分代布局。</td></tr>
<tr><td>G1可以设置最大停顿,关注点在吞吐量和延迟之间自行平衡或定制适应。</td><td>CMS以最小停顿为关注点。</td></tr>
<tr><td>G1按收益动态确定回收集。</td><td>CMS传统的按代回收。</td></tr>
<tr><td>G1整体基于“标记-整理”算法、局部（两个Region之间）基于“标记-复制”算法，运作期间不会产生内存空间碎片，利于程序长时间运行。</td><td>CMS基于“标记-清除”算法，产生空间碎片，导致Full GC ,用户线程挂起。</td></tr>
<tr><td>G1垃圾收集产生的内存占用（Footprint）和程序运行时的额外执行负载（Overload）。
    <br>【内存占用】：G1要维护堆中每个Region都有一份卡表。
    <br>【执行负载】：G1使用写前屏障来跟踪并发时的指针变化情况,实现原始快照搜索（SATB）算法;使用写后屏障来来更新维护结构更复杂的卡表，类似于消息队列的结构，是异步操作。</td><td>CMS的内存占用（Footprint）和执行负载（Overload）相对低些。
        <br>【内存占用】：CMS只维护新生代与老年代之间唯一的一份卡表。
        <br>【执行负载】：CMS用写后屏障来更新维护卡表，是同步操作。
<tr><td>G1相对适合大内存应用。</td><td>CMS相对适合小内存应用。临界（6G~8G）</td></tr>
<tr><td>相同</td> <td colspan="2">（1）都非常关注停顿时间的控制。<br>（2）都使用传统的分代理论。<br>（3）都使用卡表来处理跨代指针问题。</td></tr>
</table>




<h2 id="三-低延迟垃圾收集器"><a href="#三-低延迟垃圾收集器" class="headerlink" title="三 低延迟垃圾收集器"></a>三 低延迟垃圾收集器</h2><p><img src="/medias/loading-animated.gif" data-original="/images/jvm-images/jvm-gc-LLGC.jpg" alt="各款收集器的并发情况"></p>
<p>其中 <strong>Shenandoah</strong> 和 <strong>ZGC</strong> ，这两款目前仍处于实验状态的收集器，被官方命名为“低延迟垃圾收集器”（Low-Latency Garbage Collector或者Low-Pause-Time GarbageCollector）。</p>
<h3 id="1、Shenandoah-收集器"><a href="#1、Shenandoah-收集器" class="headerlink" title="1、Shenandoah 收集器"></a>1、Shenandoah 收集器</h3><h4 id="主要目标："><a href="#主要目标：" class="headerlink" title="主要目标："></a>主要目标：</h4><blockquote>
<p>实现一种能在任何堆内存大小下都可以把垃圾收集的停顿时间限制在十毫秒以内的垃圾收集器。</p>
</blockquote>
<p>特点：</p>
<p>（1）基于Region的堆内存布局</p>
<p>（2）回收策略优先处理回收价值最大的Region</p>
<p>（3）支持并发的整理算法。</p>
<h4 id="三个重要的并发阶段："><a href="#三个重要的并发阶段：" class="headerlink" title="三个重要的并发阶段："></a>三个重要的并发阶段：</h4><p>并发标记、并发回收、并发引用更新。</p>
<p>具体更详细的学习笔记：<a href="f8161112.html">《jvm垃圾收集器Shenandoah》</a></p>
<h3 id="2、ZGC-收集器"><a href="#2、ZGC-收集器" class="headerlink" title="2、ZGC 收集器"></a>2、ZGC 收集器</h3><h4 id="主要目标：-1"><a href="#主要目标：-1" class="headerlink" title="主要目标："></a>主要目标：</h4><blockquote>
<p>尽可能对吞吐量影响不太大的前提下，实现在任意堆内存大小下都可以把垃圾收集的停顿时间限制在十毫秒以内的低延迟。</p>
</blockquote>
<h4 id="ZGC主要特征："><a href="#ZGC主要特征：" class="headerlink" title="ZGC主要特征："></a>ZGC主要特征：</h4><p>（1）以低延迟为首要目标。</p>
<p>（2）暂不支持分代的。</p>
<p>（3）基于Region的堆内存布局。</p>
<p>（4）染色指针实现并发整理算法。Colored Pointer。</p>
<p>（5）内存多重映射技术。</p>
<p>（6）支持“NUMA-Aware”的内存分配。(NUMA非统一内存访问架构)</p>
<p>具体更详细的学习笔记：<a href="e3d9aed7.html">《jvm垃圾收集器ZGC》</a></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
        <tag>垃圾收集器</tag>
      </tags>
  </entry>
  <entry>
    <title>jvm监控调优工具</title>
    <url>/posts/ed0fd586.html</url>
    <content><![CDATA[<h2 id="JVM常用工具"><a href="#JVM常用工具" class="headerlink" title="JVM常用工具"></a>JVM常用工具</h2><p>之所以要使用JVM工具当然是为了定位系统问题。常见的可依赖的数据包括但不限于异常堆栈、虚拟机运行日志、垃圾收集日志、线程快照（threadump/javacore文件）、堆转储快照（heapdump/ hprof文件）等。</p>
<h3 id="一、基础故障处理工具"><a href="#一、基础故障处理工具" class="headerlink" title="一、基础故障处理工具"></a>一、基础故障处理工具</h3><p>主要分三类：</p>
<p>（a）商业授权工具。</p>
<blockquote>
<p>主要是JMC（Java Mission Control）及它要使用到的JFR（Java Flight Recorder）。</p>
</blockquote>
<p>（b）正式支持工具.</p>
<blockquote>
<p>这一类工具属于被长期支持的工具，不同平台、不同版本的JDK之间，这类工具可能会略有差异，但是不会出现某一个工具突然消失的情况。</p>
</blockquote>
<p>（c）实验性工具。</p>
<blockquote>
<p>这一类工具在它们的使用说明中被声明为”没有技术支持，并且是实验性质的”（Unsupported and Experimental）产品，日后可能会转正，也可能会在某个JDK版本中无声无息地消失。但事实上它们通常都非常稳定而且功能强大，也能在处理应用程序性能问题、定位故障时发挥很大的作用。</p>
</blockquote>
<p>JDK5需要手动开启JMX:”<code>-Dcom.sun.management.jmxremote</code>“开启JMX管理功能。</p>
<h4 id="1、jps"><a href="#1、jps" class="headerlink" title="1、jps"></a>1、jps</h4><p>jps（JVMProcess Status Tool）是虚拟机进程状况工具。</p>
<blockquote>
<p>可以列出正在运行的虚拟机进程，并显示虚拟机执行主类（Main Class，main()函数所在的类）名称以及这些进程的本地虚拟机唯一ID（LVMID，Local Virtual Machine Identifier）。</p>
<p>可以通过RMI协议查询开启了RMI服务的远程虚拟机进程状态，参数hostid为RMI注册表中注册的主机名。</p>
</blockquote>
<p>特点：功能单一，使用频率最高</p>
<p>命令格式：</p>
<pre><code>jps [ options ] [ hostid ]</code></pre><p>如：jsp -l</p>
<p>options主要有4个</p>
<table>
<thead>
<tr>
<th align="center">选项</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-q</td>
<td>只输出LVMID，省略主类名称</td>
</tr>
<tr>
<td align="center">-m</td>
<td>输出虚拟机进程启动时传递给主类main() 函数的参数</td>
</tr>
<tr>
<td align="center">-l</td>
<td>输出主类的全名，如果进程执行的jar包，则输出jar全路径</td>
</tr>
<tr>
<td align="center">-v</td>
<td>输出虚拟机进程启动时的JVM参数</td>
</tr>
</tbody></table>
<h4 id="2、jstat"><a href="#2、jstat" class="headerlink" title="2、jstat"></a>2、jstat</h4><p>jstat（JVM Statistics Monitoring Tool）是虚拟机统计信息监视工具。</p>
<blockquote>
<p>用于监视虚拟机各种运行状态信息的命令行工具。它可以显示本地或者远程[插图]虚拟机进程中的类加载、内存、垃圾收集、即时编译等运行时数据，在没有GUI图形界面、只提供了纯文本控制台环境的服务器上，它将是运行期定位虚拟机性能问题的常用工具。</p>
</blockquote>
<p>jstat命令格式为：</p>
<pre class=" language-bash"><code class="language-bash">jstat <span class="token punctuation">[</span> option vmid <span class="token punctuation">[</span> interval<span class="token punctuation">[</span>s<span class="token operator">|</span>ms<span class="token punctuation">]</span> <span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">]</span></code></pre>
<p>如果是本地虚拟机进程，VMID与LVMID是一致的；如果是远程虚拟机进程，那VMID的格式应当是：</p>
<pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>protocal:<span class="token punctuation">]</span><span class="token punctuation">[</span>//<span class="token punctuation">]</span>lvmid<span class="token punctuation">[</span>@hostname<span class="token punctuation">[</span>:port<span class="token punctuation">]</span>/servername<span class="token punctuation">]</span></code></pre>
<p>参数interval和count代表查询间隔和次数，如果省略这2个参数，说明只查询一次。</p>
<p>假设需要每250毫秒查询一次进程10164垃圾收集状况，一共查询20次，那命令应当是：</p>
<pre class=" language-bash"><code class="language-bash">jstat -gc 10164 250 20</code></pre>
<p>选项option代表用户希望查询的虚拟机信息，主要分为三类：类加载、垃圾收集、运行期编译状况。</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-tools/jvm-tools-options-jstat.jpg" alt="jstat主要选项"></p>
<p> jstat执行样例：</p>
<pre><code>jstat -gcutil 2764
S0      S1      E       O        P        YGC    YGCT     FGC    FGCT     GCT
0.00    0.00    6.20    41.42    47.20    16     0.105    3      0.472    0.577</code></pre><p>新生代Eden区（E，表示Eden）使用了6.2%的空间，2个Survivor区（S0、S1，表示Survivor0、Survivor1）里面都是空的，老年代（O，表示Old）和永久代（P，表示Permanent）则分别使用了41.42%和47.20%的空间。程序运行以来共发生MinorGC（YGC，表示Young GC）16次，总耗时0.105秒；发生FullGC（FGC，表示Full GC）3次，总耗时（FGCT，表示Full GC Time）为0.472秒；所有GC总耗时（GCT，表示GC Time）为0.577秒。</p>
<p>如果使用时遇到这样单个字母要认识。</p>
<h4 id="3、jinfo"><a href="#3、jinfo" class="headerlink" title="3、jinfo"></a>3、jinfo</h4><p>jinfo（Configuration Info for Java）的是Java配置信息工具。</p>
<p>作用是实时查看和调整虚拟机各项参数。</p>
<p><code>jps  -v</code>可以查看虚拟机启动时显式指定的参数列表。</p>
<p><code>jinfo  -flag</code>可以查看虚拟机未被显式指定的参数的系统默认值。若jdk6以上版本也可以使用<code>-XX：+PrintFlagsFinal</code>查看参数默认值。</p>
<p><code>jinfo  -sysprops</code>可以把虚拟机进程的System.getProperties()的内容打印出来。这个命令在JDK 5时期已经随着Linux版的JDK发布，当时只提供了信息查询的功能，JDK 6之后，jinfo在Windows和Linux平台都有提供，并且加入了在运行期修改部分参数值的能力（可以使用-flag[+|-]name或者-flag name=value在运行期修改一部分运行期可写的虚拟机参数值）。</p>
<p>在JDK 6中，jinfo对于Windows平台功能仍然有较大限制，只提供了最基本的-flag选项。</p>
<p>命令格式：</p>
<pre class=" language-bash"><code class="language-bash">jinfo  <span class="token punctuation">[</span> option <span class="token punctuation">]</span> pid</code></pre>
<p>执行样例：查询CMSInitiatingOccupancyFraction参数值:</p>
<pre class=" language-bash"><code class="language-bash">jinfo -flag CMSInitiatingOccupancyFraction 1444
-XX:CMSInitiatingOccupancyFraction<span class="token operator">=</span>85</code></pre>
<h4 id="4、jmap"><a href="#4、jmap" class="headerlink" title="4、jmap"></a>4、jmap</h4><p>jmap—Java内存映像工具。</p>
<p>jmap（Memory Map for Java）命令用于生成堆转储快照（一般称为heapdump或dump文件），还可以查询finalize执行队列、Java堆和方法区的详细信息，如空间使用率、当前用的是哪种收集器等。</p>
<p>如果不使用jmap命令呢?</p>
<p>（a）使用<code>-XX：+HeapDumpOnOutOfMemoryError</code>参，可以让虚拟机在内存溢出异常出现之后自动生成堆转储快照文件。</p>
<p>（b）通过-XX：+HeapDumpOnCtrlBreak参数则可以使用[Ctrl]+[Break]键让虚拟机生成堆转储快照文件。</p>
<p>（c）在Linux系统下通过<code>Kill  -3</code>命令发送进程退出信号”恐吓”一下虚拟机，也能顺利拿到堆转储快照。</p>
<blockquote>
<p>jmap有部分功能在Windows平台下是受限的，除了生成堆转储快照的-dump选项和用于查看每个类的实例、空间占用统计的-histo选项在所有操作系统中都可以使用之外，其余选项都只能在Linux/Solaris中使用。</p>
</blockquote>
<p>jmap命令格式：</p>
<pre class=" language-bash"><code class="language-bash">jmap <span class="token punctuation">[</span> option <span class="token punctuation">]</span> vmid</code></pre>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-tools/jvm-tools-options-jmap.jpg" alt="jmap主要选项"></p>
<p>使用jmap生成一个正在运行的Eclipse的堆转储快照文件，12109是通过jps命令查询到的LVMID。</p>
<pre class=" language-bash"><code class="language-bash">jmap -dump:format<span class="token operator">=</span>b,file<span class="token operator">=</span>eclipse.bin 12109
Dumping heap to D:\eclipse.bin <span class="token punctuation">..</span>.
Heap dump <span class="token function">file</span> created</code></pre>
<h4 id="5、jhat"><a href="#5、jhat" class="headerlink" title="5、jhat"></a>5、jhat</h4><p>jhat虚拟机堆转储快照分析工具。</p>
<p>JDK提供jhat（JVM Heap Analysis Tool）命令与jmap搭配使用，来分析jmap生成的堆转储快照。jhat内置了一个微型的HTTP/Web服务器，生成堆转储快照的分析结果后，可以在浏览器中查看。</p>
<blockquote>
<p>分析工作是一个耗时而且极为耗费硬件资源的过程，一般不直接在应用服务器上这么搞。</p>
<p>jhat的分析功能相对来说比较简陋，与VisualVM，以及专业用于分析堆转Eclipse Memory Analyzer、IBM HeapAnalyzer等相比。</p>
</blockquote>
<p>使用jhat分析dump文件：</p>
<pre class=" language-bash"><code class="language-bash">jhat eclipse.bin
Reading from eclipse.bin<span class="token punctuation">..</span>.
Dump <span class="token function">file</span> created Fri Nov 19 22:07:21 CST 2010
Snapshot read, resolving<span class="token punctuation">..</span>.
Resolving 1225951 objects<span class="token punctuation">..</span>.
Chasing references, <span class="token function">expect</span> 245 dots<span class="token punctuation">..</span><span class="token punctuation">..</span>
Eliminating duplicate references<span class="token punctuation">..</span>.
Snapshot resolved.
Started HTTP server on port 7000
Server is ready.</code></pre>
<p>分析结果默认以包为单位进行分组显示，分析内存泄漏问题主要会使用到其中的”Heap Histogram”（与<code>jmap -histo</code>功能一样）与OQL页签的功能，前者可以找到内存中总容量最大的对象，OQL是标准的对象查询语言，使用类似SQL的语法对内存中的对象进行查询统计。关于OQL<a href=""> 《JVM的对象查询OQL》</a></p>
<h4 id="6、jstack"><a href="#6、jstack" class="headerlink" title="6、jstack"></a>6、jstack</h4><p>jstack：Java堆栈跟踪工具。</p>
<p>jstack（Stack Trace for Java）命令用于生成虚拟机当前时刻的线程快照（一般称为threaddump或者javacore文件）。</p>
<p>线程快照就是当前虚拟机内每一条线程正在执行的方法堆栈的集合。</p>
<p>生成线程快照的目的通常是定位线程出现长时间停顿的原因，如线程间死锁、死循环、请求外部资源导致的长时间挂起等，都是导致线程长时间停顿的常见原因。线程出现停顿时通过jstack来查看各个线程的调用堆栈，就可以获知没有响应的线程到底在后台做些什么事情，或者等待着什么资源。</p>
<p>jstack命令格式：</p>
<pre><code>jstack  [ option ] vmid</code></pre><p> jstack工具主要选项:</p>
<table>
<thead>
<tr>
<th align="center">选项</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-F</td>
<td align="left">当正常输出的请求不被响应时，强制输出线程堆栈</td>
</tr>
<tr>
<td align="center">-l</td>
<td align="left">除堆栈外，显示关于锁的附加信息</td>
</tr>
<tr>
<td align="center">-m</td>
<td align="left">如果遇到本地方法的话，可以显示C/C++的堆栈</td>
</tr>
</tbody></table>
<blockquote>
<p>从JDK 5起，java.lang.Thread类新增了一个getAllStackTraces()方法用于获取虚拟机中所有线程的StackTraceElement对象。使用这个方法可以通过简单的几行代码完成jstack的大部分功能，在实际项目中不妨调用这个方法做个管理员页面，可以随时使用浏览器来查看线程堆栈。</p>
</blockquote>
<p>查看线程状况的JSP页面：</p>
<pre class=" language-html"><code class="language-html">&lt;%@ page import="java.util.Map"%>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>服务器线程信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span>
    <span class="token attr-name">for</span> <span class="token attr-name">(Map.Entry&lt;Thread,</span> <span class="token attr-name">StackTraceElement[]</span><span class="token punctuation">></span></span> stackTrace : Thread.getAllStack-Traces().entrySet()) {
        Thread thread = (Thread) stackTrace.getKey();
        StackTraceElement[] stack = (StackTraceElement[]) stackTrace.getValue();
        if (thread.equals(Thread.currentThread())) {
            continue;
        }
        out.print("\n线程：" + thread.getName() + "\n");
        for (StackTraceElement element : stack) {
            out.print("\t"+element+"\n");
        }
    }
%>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>
<h4 id="7、其他"><a href="#7、其他" class="headerlink" title="7、其他"></a>7、其他</h4><p> 基础工具：</p>
<p>用于支持基本的程序创建和运行。</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-tools/jvm-tools-list.jpg" alt="基础工具"></p>
<p>安全：</p>
<p>用于程序签名、设置安全测试等。</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-tools/jvm-tools-anquan.jpg" alt="安全工具"></p>
<p>国际化：</p>
<p>用于创建本地语言文件。</p>
<table>
<thead>
<tr>
<th align="center">名称</th>
<th>主要作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">native2ascii</td>
<td>本地编码到ASCII编码的转换器（Native-to-ASCII Converter）用于”任意受支持的字符编码”和与之对应的”ASCII编码和Unicode转义”之间的相互转换。</td>
</tr>
</tbody></table>
<p>远程方法调用：</p>
<p>用于跨Web或网络的服务交互。</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-tools/jvm-tools-rmi.jpg" alt="远程方法调用工具"></p>
<p>Java IDL与RMI-IIOP：在JDK 11中结束了十余年的CORBA支持，这些工具不再提供。</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-tools/jvm-tools-idl.jpg" alt="Java IDL与RMI-IIOP"></p>
<p>部署工具：用于程序打包、发布和部署。</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-tools/jvm-tools-deploy.jpg" alt="Java IDL与RMI-IIOP"></p>
<p>Java Web Start：</p>
<table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">主要作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">javaws</td>
<td align="center">启动Java Web Start并设置各种选项的工具。jdk11已移除。</td>
</tr>
</tbody></table>
<p>性能监控和故障处理：</p>
<p>用于监控分析Java虚拟机运行信息，排查问题。</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-tools/jvm-tools-contrl.jpg" alt="性能监控和故障处理"></p>
<p>WebService工具：</p>
<p>与CORBA一起在JDK 11中被移除。</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-tools/jvm-tools-webservice.jpg" alt="WebService工具"></p>
<p>REPL和脚本工具:</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-tools/jvm-tools-repl.jpg" alt="REPL和脚本工具"></p>
<h3 id="二、可视化故障处理工具"><a href="#二、可视化故障处理工具" class="headerlink" title="二、可视化故障处理工具"></a>二、可视化故障处理工具</h3><p>JDK中除了附带大量的命令行工具外，还提供了几个功能集成度更高的可视化工具，可以使用这些可视化工具以更加便捷的方式进行进程故障诊断和调试工作。</p>
<p>这类工具主要包括JConsole、JHSDB、VisualVM和JMC四个。</p>
<p>JConsole、JHSDB是jdk正式成员，无须独立下载，使用完全免费。</p>
<p>VisualVM 已不是JDK中的正式成员，但仍是可以免费下载、使用。</p>
<p>Java Mission Control ： JMC需要与HotSpot内部的”飞行记录仪”（Java Flight Recorder，JFR）配合才能工作，而在JDK 11以前，JFR的开启必须解锁OracleJDK的商业特性支持（使用JCMD的VM.unlock_commercial_features或启动时加入-XX：+UnlockCommercialFeatures参数），在生产环境中仍然是需要付费使用。</p>
<h4 id="1、JHSDB"><a href="#1、JHSDB" class="headerlink" title="1、JHSDB"></a>1、JHSDB</h4><p>JHSDB基于服务性代理的调试工具。</p>
<p>JDK中提供了JCMD和JHSDB两个集成式的多功能工具箱，整合基础处理工具，更强大。</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-tools/jvm-tools-compare.jpg" alt="JCMD、JHSDB和基础工具的对比"></p>
<p>工具的命令模式基本相似。使用时借助<code>help</code>选项使用。</p>
<p>JHSDB是一款基于服务性代理（Serviceability Agent，SA）实现的进程外调试工具。</p>
<p>原理：</p>
<blockquote>
<p>服务性代理是HotSpot虚拟机中一组用于映射Java虚拟机运行信息的、主要基于Java语言（含少量JNI代码）实现的API集合。服务性代理以HotSpot内部的数据结构为参照物进行设计，把这些C++的数据抽象出Java模型对象，相当于HotSpot的C++代码的一个镜像。通过服务性代理的API，可以在一个独立的Java虚拟机的进程里分析其他HotSpot虚拟机的内部数据，或者从HotSpot虚拟机进程内存中dump出来的转储快照里还原出它的运行状态细节。服务性代理的工作原理跟Linux上的GDB或者Windows上的Windbg是相似的。</p>
</blockquote>
<p>（JHSDB本身对压缩指针的支持存在很多缺陷，建议用64位系统的实验时禁用压缩指针）</p>
<pre><code>-Xmx10m -XX:+UseSerialGC 
-XX:-UseCompressedOops</code></pre><p>程序执行后通过jsp查询到测试查询进程ID：</p>
<pre><code>jps -l  //查看进程id
jhsdb hsdb --pid 10987 //打开图形化界面</code></pre><p>Tools-&gt;Heap Parameters 可以看到堆的相关参数。</p>
<p>Heap Parameters窗口中清楚列出了新生代的Eden、S1、S2和老年代的容量（单位为字节）以及它们的虚拟内存地址起止范围。</p>
<p>使用JDK默认的G1的话，得到的信息应该类似如下所示</p>
<pre><code>Heap Parameters:
garbage-first heap [0x00007f32c7800000, 0x00007f32c8200000] region size 1024K</code></pre><p>Windows-&gt;Console窗口，使用scanoops命令在Java堆的新生代（从Eden起始地址到To Survivor结束地址）范围内查找ObjectHolder的实例。</p>
<pre class=" language-txt"><code class="language-txt">hsdb>scanoops 0x00007f32c7800000 0x00007f32c7b50000 JHSDB_TestCase$ObjectHolder
0x00007f32c7a7c458 JHSDB_TestCase$ObjectHolder
0x00007f32c7a7c480 JHSDB_TestCase$ObjectHolder
0x00007f32c7a7c490 JHSDB_TestCase$ObjectHolder</code></pre>
<p>一般可以通过观察起始地址，判断实例对象分配在哪个区。</p>
<p>Tools-&gt;Inspector功能可以确认一下虚拟内存地址中存放的对象。</p>
<p>Inspector为我们展示了对象头和指向对象元数据的指针，里面包括了Java类型的名字、继承关系、实现接口关系，字段信息、方法信息、运行时常量池的指针、内嵌的虚方法表（vtable）以及接口方法表（itable）等。</p>
<p>Tools-&gt;Compute Reverse Ptrs 可以根据堆中对象实例地址找出引用它们的指针。</p>
<p>命令行也可以实现该功能：<code>revptrs 0x0007f32cdf785</code> </p>
<p>（revptrs命令并不支持查找栈上的指针引用）</p>
<blockquote>
<p>JDK 7及其以后版本的HotSpot虚拟机选择把静态变量与类型在Java语言一端的映射Class对象存放在一起，存储于Java堆之中。</p>
</blockquote>
<p>Java Thread窗口选中main线程后点击Stack Memory按钮查看该线程的栈内存。</p>
<p>线程信息、栈帧信息、以及JHSDB自动生成的注释信息。</p>
<h4 id="2、-JConsole"><a href="#2、-JConsole" class="headerlink" title="2、 JConsole"></a>2、 JConsole</h4><p> JConsole：Java监视与管理控制台。</p>
<p>JConsole（Java Monitoring and Management Console）是一款基于JMX（Java Manage-ment Extensions）的可视化监视、管理工具。它的主要功能是通过JMX的MBean（Managed Bean）对系统进行信息收集和参数动态调整。</p>
<blockquote>
<p>JMX是一种开放性的技术，不仅可以用在虚拟机本身的管理上，还可以运行于虚拟机之上的软件中，典型的如中间件大多也基于JMX来实现管理与监控。虚拟机对JMX MBean的访问也是完全开放的，可以使用代码调用API、支持JMX协议的管理控制台，或者其他符合JMX规范的软件进行访问。</p>
</blockquote>
<p>（1）启动JConsole</p>
<p>通过JDK/bin目录下的jconsole.exe启动JCon-sole后，会自动搜索出本机运行的所有虚拟机进程，而不需要用户自己使用jps来查询。图片就不放了。</p>
<p>双击选择其中一个进程便可进入主界面开始监控。JMX支持跨服务器的管理，也可以使用下面的”远程进程”功能来连接远程服务器，对远程虚拟机进行监控。</p>
<p>进入JConsole主界面，可以看到主界面里共包括”概述””内存””线程””类””VM摘要””MBean”六个页签，”概述”页签里显示的是整个虚拟机主要运行数据的概览信息，包括”堆内存使用情况””线程””类””CPU使用情况”四项信息的曲线图。</p>
<p>（2）内存监控</p>
<p>“内存”页签的作用相当于可视化的jstat命令，用于监视被收集器管理的虚拟机内存（被收集器直接管理的Java堆和被间接管理的方法区）的变化趋势。</p>
<p>运行测试可以设置一下虚拟机参数（也可以不设置）</p>
<p><code>-Xms100m  -Xmx100m -XX:+UseSerialGC</code></p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * 内存占位符对象，一个OOMObject大约占64KB
 */</span>
<span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">OOMObject</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> placeholder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">64</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">fillHeap</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>
    List<span class="token operator">&lt;</span>OOMObject<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>OOMObject<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 稍作延时，令监视曲线的变化更加明显</span>
        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OOMObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    System<span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
    <span class="token function">fillHeap</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>这段代码的作用是以64KB/50ms的速度向Java堆中填充数据，一共填充1000次，使用JConsole的”内存”页签进行监视，观察曲线和柱状指示图的变化。</p>
<p>程序运行后，在”内存”页签中应该可以看到内存池Eden区的运行趋势呈现折线状。</p>
<p>虚拟机启动参数只限制了Java堆为100MB，但没有明确使用-Xmn参数指定新生代大小，在没有设置-XX：SurvivorRadio参数时，Eden与Survivor空间比例的默认值为8∶1。</p>
<p>一般默认情况下，新生代约占堆内存的的1/3，老年代约占2/3。</p>
<p>可以从页签的信息上得到验证。</p>
<p>System.gc()；不保证一定进行回收。</p>
<h4 id="3、线程监控"><a href="#3、线程监控" class="headerlink" title="3、线程监控"></a>3、线程监控</h4><p>“线程”页签的功能就相当于可视化的jstack命令。</p>
<p>遇到线程停顿的时候可以使用这个页签的功能进行分析。。</p>
<pre><code>/**
 * 线程死循环演示
 */
public static void createBusyThread() {
Thread thread = new Thread(new Runnable() {
    @Override
    public void run() {
        while (true)   // 第41行
            ;
    }
}, &quot;testBusyThread&quot;);
thread.start();
}

/**
 * 线程锁等待演示
 */
public static void createLockThread(final Object lock) {
Thread thread = new Thread(new Runnable() {
    @Override
    public void run() {
        synchronized (lock) {
            try {
                lock.wait();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}, &quot;testLockThread&quot;);
thread.start();
}

public static void main(String[] args) throws Exception {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    br.readLine();
    createBusyThread();
    br.readLine();
    Object obj = new Object();
    createLockThread(obj);
}</code></pre><p>程序运行后，首先在”线程”页签中选择main线程。</p>
<blockquote>
<p>堆栈追踪显示BufferedReader的readBytes()方法正在等待System.in的键盘输入，这时候线程为Runnable状态，Runnable状态的线程仍会被分配运行时间，但readBytes()方法检查到流没有更新就会立刻归还执行令牌给操作系统，这种等待只消耗很小的处理器资源。</p>
</blockquote>
<p>监控testBusyThread线程。testBusyThread线程一直在执行空循环，从堆栈追踪中看到一直在MonitoringTest.java代码的41行停留，41行的代码为while(true)。这时候线程为Runnable状态，而且没有归还线程执行令牌的动作，所以会在空循环耗尽操作系统分配给它的执行时间，直到线程切换为止，这种等待会消耗大量的处理器资源。</p>
<p>未完。。。。</p>
<h4 id="4、VisualVM"><a href="#4、VisualVM" class="headerlink" title="4、VisualVM"></a>4、VisualVM</h4><p>VisualVM：多合-故障处理工具。</p>
<p>VisualVM（All-in-One Java Troubleshooting Tool）是功能最强大的运行监视和故障处理程序之一，曾经在很长一段时间内是Oracle官方主力发展的虚拟机故障处理工具。</p>
<p>它除了常规的运行监视、故障处理外，还将提供其他方面的能力，譬如性能分析（Profiling）。VisualVM的性能分析功能比起JProfiler、YourKit等专业且收费的Profiling工具都不遑多让。</p>
<p>它的通用性很强，对应用程序实际性能的影响也较小，使得它可以直接应用在生产环境中。</p>
<p>（1）VisualVM兼容范围与插件安装</p>
<p>VisualVM基于NetBeans平台开发工具，所以一开始它就具备了通过插件扩展功能的能力，有了插件扩展支持，VisualVM可以做到：</p>
<p>​    （a）显示虚拟机进程以及进程的配置、环境信息（jps、jinfo）。</p>
<p>​    （b）监视应用程序的处理器、垃圾收集、堆、方法区以及线程的信息（jstat、jstack）。</p>
<p>​    （c）dump以及分析堆转储快照（jmap、jhat）。</p>
<p>​    （d）方法级的程序运行性能分析，找出被调用最多、运行时间最长的方法。</p>
<p>​    （e）离线程序快照：收集程序的运行时配置、线程dump、内存dump等信息建立一个快照，可以将快照发送开发者处进行Bug反馈。</p>
<p>​    （f）其他插件带来的无限可能性。</p>
<p>VisualVM在JDK 6 Update 7中首次发布，但并不意味着它只能监控运行于JDK 6上的程序，它具备很优秀的向下兼容性，甚至能向下兼容至2003年发布的JDK 1.4.2版本。</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-tools/jvm-tools-jvisVM.jpg" alt="VisualVM主要功能兼容性列表"></p>
<p>VisualVM的插件安装：</p>
<p>（A）手工进行安装</p>
<p>VisualVM的插件可以手工进行安装，在网站[插图]上下载nbm包后，点击”工具-&gt;插件-&gt;已下载”菜单，然后在弹出对话框中指定nbm包路径便可完成安装。独立安装的插件存储在VisualVM的根目录，譬如JDK 9之前自带的VisulalVM，插件安装后是放在JDK_HOME/lib/visualvm中的。</p>
<p>（B）自动安装</p>
<p>VisualVM的自动安装功能已可找到大多数所需的插件，在有网络连接的环境下，点击”工具-&gt;插件菜单”，在页签的”可用插件”及”已安装”中列举了当前版本VisualVM可以使用的全部插件，选中插件后在右边窗口会显示这个插件的基本信息，如开发者、版本、功能描述等。</p>
<p>VisualVM中”概述””监视””线程””MBeans”的功能与Jconsole相似。</p>
<p>（2）生成、浏览堆转储快照</p>
<p>在VisualVM中生成堆转储快照文件有两种方式，</p>
<p>​    a）在”应用程序”窗口中右键单击应用程序节点，然后选择”堆Dump”。</p>
<p>​    b）在”应用程序”窗口中双击应用程序节点以打开应用程序标签，然后在”监视”标签中单击”堆Dump”。</p>
<p>生成堆转储快照文件之后，应用程序页签会在该堆的应用程序下增加一个以[heap-dump]开头的子节点，并且在主页签中打开该转储快照。</p>
<blockquote>
<p>如果需要把堆转储快照保存或发送出去，就应在heapdump节点上右键选择”另存为”菜单，否则当VisualVM关闭时，生成的堆转储快照文件会被当作临时文件自动清理掉。要打开一个由已经存在的堆转储快照文件，通过文件菜单中的”装入”功能，选择文件即可。</p>
</blockquote>
<p>堆页签中的”摘要”面板可以看到应用程序dump时的运行时参数、System.getPro-perties()的内容、线程堆栈等信息；</p>
<p>“类”面板则是以类为统计口径统计类的实例数量、容量信息；</p>
<p>“实例”面板不能直接使用，因为VisualVM在此时还无法确定用户想查看哪个类的实例，所以需要通过”类”面板进入，在”类”中选择一个需要查看的类，然后双击即可在”实例”里面看到此类的其中500个实例的具体属性信息；</p>
<p>“OQL控制台”面板则是运行OQL查询语句的，同jhat中介绍的OQL功能一样。</p>
<p>（3）分析程序性能</p>
<p>在Profiler页签中，VisualVM提供了程序运行期间方法级的处理器执行时间分析以及内存分析。做Profiling分析肯定会对程序运行性能有比较大的影响，所以一般不在生产环境使用这项功能，或者改用JMC来完成，JMC的Profiling能力更强，对应用的影响非常轻微。</p>
<p>要开始性能分析，先选择”CPU”和”内存”按钮中的一个，然后切换到应用程序中对程序进行操作，VisualVM会记录这段时间中应用程序执行过的所有方法。如果是进行处理器执行时间分析，将会统计每个方法的执行次数、执行耗时；如果是内存分析，则会统计每个方法关联的对象数以及这些对象所占的空间。等要分析的操作执行结束后，点击”停止”按钮结束监控过程。</p>
<blockquote>
<p>在JDK 5之后，在客户端模式下的虚拟机加入并且自动开启了类共享——这是一个在多虚拟机进程共享rt.jar中类数据以提高加载速度和节省内存的优化，而根据相关Bug报告的反映，VisualVM的Profiler功能会因为类共享而导致被监视的应用程序崩溃，所进行Profiling前，最好在被监视程序中使用-Xshare：off参数来关闭类共享优化。</p>
</blockquote>
<p>（4）BTrace动态日志跟踪</p>
<p>BTrace是一个很神奇的VisualVM插件，它本身也是一个可运行的独立程序。</p>
<p>BTrace的作用是在不中断目标程序运行的前提下，通过HotSpot虚拟机的Instrument功能[插图]动态加入原本并不存在的调试代码。这项功能对实际生产中的程序很有意义：如当程序出现问题时，排查错误的一些必要信息时（譬如方法参数、返回值等），在开发时并没有打印到日志之中以至于不得不停掉服务时，都可以通过调试增量来加入日志代码以解决问题。</p>
<p>在VisualVM中安装了BTrace插件后，在应用程序面板中右击要调试的程序，会出现”Trace Application…”菜单，点击将进入BTrace面板。</p>
<p>BTrace的功能演示：产生两个1000以内的随机整数，输出这两个数字相加的结果</p>
<pre class=" language-java"><code class="language-java">
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BTraceTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>
        BTraceTest test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BTraceTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        BufferedReader reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>这段程序已经上线运行，而我们现在又有了新的需求，想要知道程序中生成的两个随机数是什么，但程序并没有在执行过程中输出这一点。此时，在VisualVM中打开该程序的监视，在BTrace页签填充TracingScript的内容，输入调试代码，即可在不中断程序运行的情况下做到这一点。</p>
<pre><code>/* BTrace Script Template */
import com.sun.btrace.annotations.*;
import static com.sun.btrace.BTraceUtils.*;

@BTrace
public class TracingScript {
        @OnMethod(
    clazz=&quot;org.fenixsoft.monitoring.BTraceTest&quot;,
    method=&quot;add&quot;,
    location=@Location(Kind.RETURN)
)

public static void func(@Self org.fenixsoft.monitoring.BTraceTest instance,int a, int b,@Return int result) {
    println(&quot;调用堆栈:&quot;);
    jstack();
    println(strcat(&quot;方法参数A:&quot;,str(a)));
    println(strcat(&quot;方法参数B:&quot;,str(b)));
    println(strcat(&quot;方法结果:&quot;,str(result)));
}
}</code></pre><p>点击Start按钮后稍等片刻，编译完成后，Output面板中会出现”BTracecode successfuly deployed”的字样。当程序运行时将会在Output面板输出调试信息。</p>
<p>BTrace的用途很广泛，打印调用堆栈、参数、返回值只是它最基础的使用形式，使用BTrace进行性能监视、定位连接泄漏、内存泄漏、解决多线程竞争问题等。</p>
<p>BTrace能够实现动态修改程序行为，是因为它是基于Java虚拟机的Instrument开发的。Instrument是Java虚拟机工具接口（Java VirtualMachine Tool Interface，JVMTI）的重要组件，提供了一套代理（Agent）机制，使得第三方工具程序可以以代理的方式访问和修改Java虚拟机内部的数据。</p>
<blockquote>
<p>阿里巴巴开源的诊断工具Arthas也通过Instrument实现了与BTrace类似的功能。</p>
</blockquote>
<p>4、Java Mission Control</p>
<p>Java Mission Control：可持续在线的监控工具。</p>
<p>Oracle Java SE Advanced &amp; Suite[插图]与普通OracleJava SE在功能上的主要差别是前者包含了一系列的监控、管理工具，譬如用于企业JRE定制管理的AMC（Java Advanced ManagementConsole）控制台、JUT（Java Usage Tracker）跟踪系统，用于持续收集数据的JFR（Java Flight Recorder）飞行记录仪和用于监控Java虚拟机的JMC（Java Mission Control）。这些功能全部都是需要商业授权才能在生产环境中使用，但根据Oracle Binary Code协议，在个人开发环境中，允许免费使用JMC和JFR。</p>
<p>JFR特点：</p>
<p>（1）JFR是一套内建在HotSpot虚拟机里面的监控和基于事件的信息搜集框架，与其他的监控工具（如JProfiling）相比，它具有”可持续在线”（Always-On）的特性。</p>
<p>（2）JFR在生产环境中对吞吐量的影响一般不会高于1%（甚至号称是Zero Performance Overhead）。</p>
<p>（3）JFR监控过程的开始、停止都是完全可动态的，即不需要重启应用。</p>
<p>（4）JFR的监控对应用也是完全透明的，即不需要对应用程序的源码做任何修改，或者基于特定的代理来运行。</p>
<p>JMC：</p>
<p>（1）Eclipse RCP作为基础框架。</p>
<p>（2）可下载独立程序，也可以作为Eclipse插件安装。</p>
<p>（3）JMC与虚拟机之间同样采取JMX协议进行通信，作为JMX控制台显示来自虚拟机MBean提供的数据。</p>
<p>（4）JMC还可以作为JFR的分析工具，展示来自JFR的数据。</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-tools/jvm-tools-jmc.jpg" alt="JMC主界面"></p>
<p>打开界面之后，双击”飞行记录器”，将会出现”启动飞行记录”窗口。</p>
<p>飞行记录报告里包含以下几类信息：</p>
<p>（a）一般信息：关于虚拟机、操作系统和记录的一般信息。</p>
<p>（b）内存：关于内存管理和垃圾收集的信息。</p>
<p>（c）代码：关于方法、异常错误、编译和类加载的信息。</p>
<p>（d）线程：关于应用程序中线程和锁的信息。</p>
<p>（e）I/O：关于文件和套接字输入、输出的信息。</p>
<p>（f）系统：关于正在运行Java虚拟机的系统、进程和环境变量的信息。</p>
<p>（g）事件：关于记录中的事件类型的信息，可以根据线程或堆栈跟踪，按照日志或图形的格式查看。</p>
<p>JFR工作过程：</p>
<p>JFR开启一系列事件的录制动作，当某个事件发生时，这个事件的所有上下文数据将会以循环日志的形式被保存至内存或者指定的某个文件当中，循环日志相当于数据流被保留在一个环形缓存中，所以只有最近发生的事件的数据才是可用的。JMC从虚拟机内存或者文件中读取并展示这些事件数据，并通过这些数据进行性能分析。</p>
<blockquote>
<p>JFR提供的数据质量通常也要比其他工具通过代理形式采样获得或者从MBean中取得的数据高得多。以垃圾搜集为例，HotSpot的MBean中一般有各个分代大小、收集次数、时间、占用率等数据（根据收集器不同有所差别），这些都属于”结果”类的信息，而JFR中还可以看到内存中这段时间分配了哪些对象、哪些在TLAB中（或外部）分配、分配速率和压力大小如何、分配归属的线程、收集时对象分代晋升的情况等，这些就是属于”过程”类的信息，对排查问题的价值是难以估量的。</p>
</blockquote>
<h3 id="三、HotSpot虚拟机插件及工具"><a href="#三、HotSpot虚拟机插件及工具" class="headerlink" title="三、HotSpot虚拟机插件及工具"></a>三、HotSpot虚拟机插件及工具</h3><p>虚拟机的插件和辅助工具存放在HotSpot源码hotspot/src/share/tools目录下：</p>
<p>主要有：</p>
<p>（1）Ideal Graph Visualizer</p>
<p>用于可视化展示C2即时编译器是如何将字节码转化为理想图，然后转化为机器码的。</p>
<p>（2）Client Compiler Visualizer</p>
<p>用于查看C1即时编译器生成高级中间表示（HIR），转换成低级中间表示（LIR）和做物理寄存器分配的过程。</p>
<p>（3）MakeDeps</p>
<p>帮助处理HotSpot的编译依赖的工具。</p>
<p>（4）Project Creator</p>
<p>帮忙生成Visual Studio的.project文件的工具。</p>
<p>（5）LogCompilation</p>
<p>将-XX：+LogCompilation输出的日志整理成更容易阅读的格式的工具。</p>
<p>（6）HSDIS</p>
<p>即时编译器的反汇编插件。HSDIS可以用于JIT生成代码反汇编</p>
<p>HSDIS是一个被官方推荐的HotSpot虚拟机即时编译代码的反汇编插件，它包含在HotSpot虚拟机的源码当中，在OpenJDK的网站[插图]也可以找到单独的源码下载。</p>
<p>HSDIS插件的作用是让HotSpot的-XX：+PrintAssembly指令调用它来把即时编译器动态生成的本地代码还原为汇编代码输出，同时还会自动产生大量非常有价值的注释，这样可以通过输出的汇编代码来从最本质的角度分析问题。</p>
<blockquote>
<p>需要自己下载编译好的插件，直接放到JDK_HOME/jre/bin/server目录（JDK 9以下）或JDK_HOME/lib/amd64/server（JDK 9或以上）中即可使用。如果没有找到所采用操作系统的对应编译成品，那就自己用源码编译一遍（网上能找到各种操作系统下的编译教程）。</p>
<p>使用SlowDebug或者FastDebug版的HotSpot，可以直接通过-XX：+PrintAssembly指令使用的插件；</p>
<p>如果使用Product版的HotSpot，则还要额外加入一个-XX：+UnlockDiagnosticVMOptions参数才可以工作。</p>
</blockquote>
<p>相关示例涉及汇编语言，参考《深入理解Java虚拟机第三版》第四章4.4节。</p>
<p>JITWatch 是HSDIS经常搭配使用的可视化的编译日志分析工具，为便于在JITWatch中读取，可使用以下参数把日志输出到logfile文件。</p>
<pre class=" language-txt"><code class="language-txt">-XX:+UnlockDiagnosticVMOptions
-XX:+TraceClassLoading
-XX:+LogCompilation
-XX:LogFile=/tmp/logfile.log
-XX:+PrintAssembly
-XX:+TraceClassLoading</code></pre>
<p>在JITWatch中加载日志后，就可以看到执行期间使用过的各种对象类型和对应调用过的方法了，选择想要查看的类和方法，即可查看对应的Java源代码、字节码和即时编译器生成的汇编代码。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
        <tag>监控调优工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis(三)动态SQL</title>
    <url>/posts/d467df29.html</url>
    <content><![CDATA[<h2 id="Mybatis-三-动态SQL"><a href="#Mybatis-三-动态SQL" class="headerlink" title="Mybatis(三)动态SQL"></a>Mybatis(三)动态SQL</h2><p>动态 SQL 是 MyBatis 的强大特性之一。 </p>
<h4 id="1、主要的动态SQL元素"><a href="#1、主要的动态SQL元素" class="headerlink" title="1、主要的动态SQL元素"></a>1、主要的动态SQL元素</h4><table>
<thead>
<tr>
<th>元素</th>
<th>作用</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>if</td>
<td>判断语句</td>
<td>单条件分支判断</td>
</tr>
<tr>
<td>choose（when、otherwise）</td>
<td>选择语句，类似case when语句</td>
<td>多条件分支判断</td>
</tr>
<tr>
<td>trim（where、set）</td>
<td>辅助元素</td>
<td>处理SQL拼装问题</td>
</tr>
<tr>
<td>foreach</td>
<td>循环控制语句</td>
<td>在in语句等列举条件差用</td>
</tr>
</tbody></table>
<h4 id="2、if-元素"><a href="#2、if-元素" class="headerlink" title="2、if 元素"></a>2、if 元素</h4><p>使用动态 SQL 最常见情景是根据条件包含 where 子句的一部分。还是以 EmployeeMapper.xml文件为例：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token doctype">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.demo.dao.emp.EmployeeMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectByPrimaryKey<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.Integer<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.demo.entity.emp.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    select 
    emp_id as empId, emp_name as empName,email as email
    from tbl_emp
    where 1=1
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empName !<span class="token punctuation">=</span> null  and empName!<span class="token punctuation">=</span><span class="token punctuation">'</span><span class="token punctuation">'</span> <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      and emp_name like #{empName}
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre>
<p><code>test=&quot;empName != null  and empName!=&#39;&#39;</code>如果不传入 “empName”，那么所有Employee都会返回；如果传入了 “empName” 参数不为空且不等于空字符串，那么就会对 “empName” 一列进行模糊查找并返回对应的结果。</p>
<p>test属性比较常见的是判空，如要判固定值或字符串，则可以这样：</p>
<pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex <span class="token punctuation">=</span><span class="token punctuation">=</span> <span class="token punctuation">'</span>1<span class="token punctuation">'</span>  or sex <span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">'</span>MALE<span class="token punctuation">'</span> <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
     ...
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span></code></pre>
<p>你以为这样就可以了吗？看着可以，实际测试过程中还是不行的。</p>
<p>需要这样才可以：</p>
<pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex <span class="token punctuation">=</span><span class="token punctuation">=</span> <span class="token punctuation">'</span>1<span class="token punctuation">'</span>.toString()  or sex <span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">'</span>MALE<span class="token punctuation">'</span>.toString() <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
     ...
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span></code></pre>
<p>或者这样：</p>
<pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span> sex <span class="token punctuation">=</span><span class="token punctuation">=</span> <span class="token punctuation">"</span>1<span class="token punctuation">"</span>  or sex <span class="token punctuation">=</span><span class="token punctuation">=</span> <span class="token punctuation">"</span>MALE<span class="token punctuation">"</span> <span class="token punctuation">'</span></span> <span class="token punctuation">></span></span>
     ...
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span></code></pre>
<h4 id="2、choose-when-otherwise元素"><a href="#2、choose-when-otherwise元素" class="headerlink" title="2、choose-when-otherwise元素"></a>2、choose-when-otherwise元素</h4><p>示例如下：</p>
<pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectByPrimaryKey<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.Integer<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.demo.entity.emp.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    select 
    emp_id as empId, emp_name as empName,email as email
    from tbl_emp
    where 1=1
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>choose</span><span class="token punctuation">></span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empId !<span class="token punctuation">=</span> null  and empId!<span class="token punctuation">=</span><span class="token punctuation">'</span><span class="token punctuation">'</span> <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
          and empId = #{empId}
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empName !<span class="token punctuation">=</span> null  and empName!<span class="token punctuation">=</span><span class="token punctuation">'</span><span class="token punctuation">'</span> <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
          and emp_name like #{empName}
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>otherwise</span><span class="token punctuation">></span></span>
          AND emp_name is not null
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>otherwise</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>choose</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre>
<p>当编号不为空的时候使用编号查询，当编号为空，名称不为空就用名称查询，当编号和名称都为空，就默认查名称不为空的Employee的记录。</p>
<h4 id="3、trim、where、set-元素"><a href="#3、trim、where、set-元素" class="headerlink" title="3、trim、where、set 元素"></a>3、trim、where、set 元素</h4><p>上面要写<code>where  1=1</code>这种条件，使用where元素就可以去掉这种条件。示例如下：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectByPrimaryKey<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.Integer<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.demo.entity.emp.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    select emp_id as empId, emp_name as empName,email as email
    from tbl_emp
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>choose</span><span class="token punctuation">></span></span>
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empId !<span class="token punctuation">=</span> null  and empId!<span class="token punctuation">=</span><span class="token punctuation">'</span><span class="token punctuation">'</span> <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            and empId = #{empId}
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empName !<span class="token punctuation">=</span> null  and empName!<span class="token punctuation">=</span><span class="token punctuation">'</span><span class="token punctuation">'</span> <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            and emp_name like #{empName}
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>otherwise</span><span class="token punctuation">></span></span>
             AND emp_name is not null
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>otherwise</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>choose</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre>
<p>但是默认条件下 有个<code>where AND emp_name is not null</code>会多出一个<code>and</code>，那么使用trim就可以去掉这个多余的<code>and</code>，如：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectByPrimaryKey<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.Integer<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.demo.entity.emp.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    select emp_id as empId, emp_name as empName,email as email
    from tbl_emp
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>trim</span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>where<span class="token punctuation">"</span></span>  <span class="token attr-name">prefixOverrides</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>and<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>choose</span><span class="token punctuation">></span></span>
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empId !<span class="token punctuation">=</span> null  and empId!<span class="token punctuation">=</span><span class="token punctuation">'</span><span class="token punctuation">'</span> <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            and empId = #{empId}
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empName !<span class="token punctuation">=</span> null  and empName!<span class="token punctuation">=</span><span class="token punctuation">'</span><span class="token punctuation">'</span> <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            and emp_name like #{empName}
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>otherwise</span><span class="token punctuation">></span></span>
             AND emp_name is not null
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>otherwise</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>choose</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>trim</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre>
<p>trim元素表示要去掉一些特殊的字符串。prefix代表语句前缀，prefixOverrides代表的是需要去掉的那种字符串。与where写法等效。</p>
<p>Set元素：动态地在行首插入 SET 关键字，并会删掉额外的逗号。常常用于不确定字段更新，可以只更新需要变动的字段而不是全部字段。例如：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateByExampleSelective<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    update tbl_emp
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>record.empId !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        emp_id = #{record.empId,jdbcType=INTEGER},
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>record.empName !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        emp_name = #{record.empName,jdbcType=VARCHAR},
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>record.sex !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        sex = #{record.sex,jdbcType=CHAR},
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>record.email !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        email = #{record.email,jdbcType=VARCHAR},
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_parameter !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Update_By_Example_Where_Clause<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span></code></pre>
<p>也可以使用trim的写法：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>trim</span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>set<span class="token punctuation">"</span></span>  <span class="token attr-name">prefixOverrides</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    ...
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>trim</span><span class="token punctuation">></span></span></code></pre>
<h4 id="4、foreach"><a href="#4、foreach" class="headerlink" title="4、foreach"></a>4、foreach</h4><p>foreach是个循环语句，用于对集合进行遍历。</p>
<p>foreach允许指定一个集合，声明可以在元素体内使用的集合项（item）和索引（index）变量。它也允许你指定开头与结尾的字符串以及集合项迭代之间的分隔符。 </p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectByPrimaryKey<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.Integer<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.demo.entity.emp.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    select emp_id as empId, emp_name as empName,email as email
    from tbl_emp
    where emp_id in
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>idList<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(<span class="token punctuation">"</span></span>  <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>
        #{item}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre>
<p>属性说明：</p>
<p>collection 配置的是传进来的集合参数名称。可以是数组、List、Set、Map等集合。</p>
<p>item 配置的是循环中本次迭代的当期元素。如果是Map集合，item是Map的值value。</p>
<p>index 配置的是当前元素在集合的位置下标。如果是Map集合，index就是键，item是值。</p>
<p>open和close 配置以什么符号包装集合元素。</p>
<p>separator 配置的是各个元素的间隔符。</p>
<h4 id="5、bind-元素"><a href="#5、bind-元素" class="headerlink" title="5、bind 元素"></a>5、bind 元素</h4><p><code>bind</code> 元素允许你在 OGNL 表达式以外创建一个变量，并将其绑定到当前的上下文。</p>
<p><strong>实际应用场景1</strong></p>
<p>在实际应用中like查询，比如Mysql数据库，使用concat将参数和”%”拼接。但是Oracle和DB2数据库连接符是”||” ，SQL需要提供两种方式去实现。bind 元素可以很好的解决这种问题。比如以刚才的模糊查询为例：</p>
<pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectByPrimaryKey<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.Integer<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.demo.entity.emp.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bind</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pattern<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>%<span class="token punctuation">'</span> + empName + <span class="token punctuation">'</span>%<span class="token punctuation">'</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    select 
    emp_id as empId, emp_name as empName,email as email
    from tbl_emp
    where  emp_name like #{pattern}
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre>
<p>empName就是实际传过来的参数，与通配符“%”连接之后，赋值给了pattern，下面就可以直接使用pattern变量。绑定多个同理，注意name不要重复即可。</p>
<p><strong>实际应用场景2</strong></p>
<p>如果配置了 databaseIdProvider，可以在动态代码中使用名为 “_databaseId” 的变量来为不同的数据库构建特定的语句。比如：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>insert<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>selectKey</span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">order</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BEFORE<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_databaseId <span class="token punctuation">=</span><span class="token punctuation">=</span> <span class="token punctuation">'</span>oracle<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      select seq_users.nextval from dual
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_databaseId <span class="token punctuation">=</span><span class="token punctuation">=</span> <span class="token punctuation">'</span>db2<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      select nextval for seq_users from sysibm.sysdummy1"
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>selectKey</span><span class="token punctuation">></span></span>
  insert into tbl_emp values (#{id}, #{empName},#{sex},#{email})
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span></code></pre>
<h4 id="6、script"><a href="#6、script" class="headerlink" title="6、script"></a>6、script</h4><p>在带注解的映射器接口类中使用动态 SQL，可以使用 script元素。 </p>
<pre><code>@Update({&quot;&lt;script&gt;&quot;,
      &quot;update tbl_emp&quot;,
      &quot;  &lt;set&gt;&quot;,
      &quot;    &lt;if test=&#39;emp.empName != null&#39;&gt;emp_Name=#{emp.empName},&lt;/if&gt;&quot;,
      &quot;    &lt;if test=&#39;emp.email != null&#39;&gt;email=#{emp.email},&lt;/if&gt;&quot;,
      &quot;    &lt;if test=&#39;emp.sex != null&#39;&gt;sex=#{emp.sex}&lt;/if&gt;&quot;,
      &quot;  &lt;/set&gt;&quot;,
      &quot;where empId=#{empId}&quot;,
      &quot;&lt;/script&gt;&quot;})
    void updateEmployeeValues(Employee emp);</code></pre><h4 id="7、动态-SQL-中的插入脚本语言"><a href="#7、动态-SQL-中的插入脚本语言" class="headerlink" title="7、动态 SQL 中的插入脚本语言"></a>7、动态 SQL 中的插入脚本语言</h4><p>MyBatis 从 3.2 版本开始支持插入脚本语言，这允许你插入一种语言驱动，并基于这种语言来编写动态 SQL 查询语句。 </p>
<p>这种情况目前没有遇到，如有需要参考<a href="https://mybatis.org/mybatis-3/zh/dynamic-sql.html" target="_blank" rel="noopener">Mybatis官网</a>说明。</p>
<br/>

<p><strong>相关文章：</strong></p>
<table>
<thead>
<tr>
<th>文章名称</th>
</tr>
</thead>
<tbody><tr>
<td><a href="b802139a.html">《Mybatis(一)主要组件》</a></td>
</tr>
<tr>
<td><a href="5d11555a.html">《Mybatis(二)配置》</a></td>
</tr>
<tr>
<td><a href="d467df29.html">《Mybatis(三)动态SQL》</a></td>
</tr>
<tr>
<td><a href="3bfa75b5.html">《Mybtis(四)工作原理》</a></td>
</tr>
<tr>
<td><a href="ae8510ea.html">《Mybtis(五)Mapper映射器》</a></td>
</tr>
<tr>
<td><a href="44c4c800.html">《Mybtis(六)Mapper级联》</a></td>
</tr>
</tbody></table>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>Mybatis</tag>
        <tag>监控调优工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybtis(五)Mapper映射器</title>
    <url>/posts/ae8510ea.html</url>
    <content><![CDATA[<h2 id="Mybatis映射器"><a href="#Mybatis映射器" class="headerlink" title="Mybatis映射器"></a>Mybatis映射器</h2><p>Mybatis通过映射器构造的SQL，并且通过配置生成对应的JavaBean返回给调用者，这些配置主要是映射器。映射器的 XML 文件，通俗的说就是Mapper.xml文件就是属于XML映射器，注解的<code>@Select(&quot;sql&quot;)</code>配置方式则是注解映射器。学习以XML映射器记录为主。</p>
<h3 id="映射器的主要元素"><a href="#映射器的主要元素" class="headerlink" title="映射器的主要元素:"></a>映射器的主要元素:</h3><p>XML映射文件主要配置：</p>
<table>
<thead>
<tr>
<th>元素/标签</th>
<th>作用</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>select</td>
<td>映射查询语句，最常用的复杂的的元素之一</td>
<td>可以自定义参数，返回结果集等</td>
</tr>
<tr>
<td>insert</td>
<td>映射插入语句</td>
<td>执行后返回一个整数，代表插入的条数</td>
</tr>
<tr>
<td>update</td>
<td>映射更新语句</td>
<td>执行后返回一个整数，代表更新的条数</td>
</tr>
<tr>
<td>delete</td>
<td>映射删除语句</td>
<td>执行后返回一个整数，代表更新的条数</td>
</tr>
<tr>
<td>sql</td>
<td>允许定义的可重用SQL语句块</td>
<td>如表的列名，一次定义，多个SQL语句都可以使用</td>
</tr>
<tr>
<td>resultMap</td>
<td>描述从数据库结果集中来加载对象，是最复杂也是最强大的元素</td>
<td>提供映射规则</td>
</tr>
<tr>
<td>cache</td>
<td>指定命名空间的缓存配置。</td>
<td>-</td>
</tr>
<tr>
<td>cache-ref</td>
<td>引用其它命名空间的缓存配置。</td>
<td>-</td>
</tr>
</tbody></table>
<h3 id="一、SELECT-元素"><a href="#一、SELECT-元素" class="headerlink" title="一、SELECT 元素"></a>一、SELECT 元素</h3><p>select元素配置</p>
<p> select 元素允许你配置很多属性来配置每条语句的行为细节。</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span>
  <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectPerson<span class="token punctuation">"</span></span>
  <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span>
  <span class="token attr-name">parameterMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deprecated<span class="token punctuation">"</span></span>
  <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hashmap<span class="token punctuation">"</span></span>
  <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>personResultMap<span class="token punctuation">"</span></span>
  <span class="token attr-name">flushCache</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>
  <span class="token attr-name">useCache</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>
  <span class="token attr-name">timeout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span>
  <span class="token attr-name">fetchSize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>256<span class="token punctuation">"</span></span>
  <span class="token attr-name">statementType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>PREPARED<span class="token punctuation">"</span></span>
  <span class="token attr-name">resultSetType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>FORWARD_ONLY<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre>
<h4 id="SELECT主要属性："><a href="#SELECT主要属性：" class="headerlink" title="SELECT主要属性："></a>SELECT主要属性：</h4><table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>和Mapper的命名空间组合成唯一标识符，提供给Mybatis调用</td>
<td>如果命名空间和id组合之后存在重复，则抛出异常</td>
</tr>
<tr>
<td>parameterType</td>
<td>参数类型，可以是基本类型，可以Map，可以是类的全命名或别名，别名必须是内部定义或自定义的</td>
<td>如int,Map，JavaBean等复杂的参数类型</td>
</tr>
<tr>
<td>resultType</td>
<td>JavaBean的规范映射；可以是int,double等参数，也可以是类的全命名或符合规范的别名</td>
<td>不能和resultMap同时使用，如果返回集合，则值为集合里的类型。</td>
</tr>
<tr>
<td>resultMap</td>
<td>是映射集的引用，将执行强大的映射功能，可以让我们自定义映射规则</td>
<td>可以配置映射级联、类型转换器等</td>
</tr>
<tr>
<td>flushCache</td>
<td>将值设置为 true 后在调用SQL后，要求Mybatis清空之前的查询本地缓存和二级缓存</td>
<td>默认值为false，即不清空缓存</td>
</tr>
<tr>
<td>useCache</td>
<td>将其设置为 true 后，将会该条语句的结果被二级缓存缓存起来。</td>
<td>默认值：对 select 元素为 true。即开启二级缓存</td>
</tr>
<tr>
<td>timeout</td>
<td>设置等待数据库返回请求结果的超时秒数，超时后抛异常</td>
<td>默认值为未设置（unset）（依赖数据库驱动）</td>
</tr>
<tr>
<td>fetchSize</td>
<td>设置获取记录总条数</td>
<td>默认值为未设置（unset）（依赖驱动）</td>
</tr>
<tr>
<td>statementType</td>
<td>可选 STATEMENT，PREPARED 或 CALLABLE。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement</td>
<td>默认值：PREPARED</td>
</tr>
<tr>
<td>resultSetType</td>
<td>这是和JDBC的resultSet接口对应，值包括FORWARD_ONLY（游标允许向前访问），SCROLL_SENSITIVE（双向滚动，但不及时更新，即数据库里的数据修改之后不再resultSet中反应出来）, SCROLL_INSENSITIVE（双向滚动并及时同步数据库的更新以更改resultSet中的数据） 或 DEFAULT（等价于 unset）</td>
<td>默认值为 unset （依赖数据库驱动）</td>
</tr>
<tr>
<td>databaseId</td>
<td>配置了数据库厂商标识（databaseIdProvider）的规则</td>
<td>多数据库支持</td>
</tr>
<tr>
<td>resultOrdered</td>
<td>这个设置仅针对嵌套结果 select 语句：如果为 true，将会假设包含了嵌套结果集或是分组了，当返回一个主结果行时，就不会产生对前面结果集的引用。 这就使得在获取嵌套结果集的时候不至于内存不够用。</td>
<td>默认值：false</td>
</tr>
<tr>
<td>resultSets</td>
<td>这个设置仅适用于多结果集的情况。它将列出语句执行后返回的结果集并赋予每个结果集一个名称，多个名称之间以逗号分隔。</td>
<td>很少使用</td>
</tr>
</tbody></table>
<h4 id="selec自动映射"><a href="#selec自动映射" class="headerlink" title="selec自动映射"></a>selec自动映射</h4><p>在settings元素中配置autoMappingBehavior属性值设置其策略。有三个值：<br>(1)NONE - 表示取消自动映射<br>(2)PARTIAL - 简单映射，只会自动映射那些没有定义嵌套结果集映射的结果集。<br>(3)FULL - 完整映射，会自动映射任意复杂的结果集，不论是否嵌套。</p>
<p>默认值为PARTIAL，默认情况可以实现一般对象的映射，使用FULL嵌套映射，性能会下降。</p>
<p>当autoMappingBehavior设置不为NONE时，Mybatis提供自动映射功能。要求返回SQL列名和JavaBean的属性一致，或者开启采用驼峰命名方式。</p>
<p>如果数据库规范命名，每个单词都使用下划线分割，POJO采用驼峰式命名方法，可以设置mapUnderscoreToCamelCase为true，实现DB到POJO的自动映射。</p>
<h4 id="select多参数传递"><a href="#select多参数传递" class="headerlink" title="select多参数传递"></a>select多参数传递</h4><p>（1）使用Map传递参数<br>映射文件：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectByMap<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
select id, name,email from emplee
where name like concat('%',#{name},'%') 
and email like  concat('%',#{email},'%') 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre>
<p>Mapper接口：</p>
<pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>Employee<span class="token operator">></span> <span class="token function">selectByMap</span><span class="token punctuation">(</span>HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> params<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>调用：</p>
<pre class=" language-java"><code class="language-java">Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Obejct<span class="token operator">></span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Obejct<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"张"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">,</span><span class="token string">"@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
List<span class="token operator">&lt;</span>Employee<span class="token operator">></span>  empList <span class="token operator">=</span> employeeMapper<span class="token punctuation">.</span><span class="token function">selectByMap</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>使用Map传递优缺点：</p>
<table>
<thead>
<tr>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody><tr>
<td>可以自定义键，参数个数任意扩展</td>
<td>键值使用可能缺少业务关联性，代码可读性相对较差，不看调用地方，不知道Map里会有哪些业务数据</td>
</tr>
</tbody></table>
<p>（2）使用注解传递参数<br>使用参数注解<code>@Param</code>(org.apache.ibatis.annotations.Param)来实现参数传递。</p>
<p>Mapper接口：</p>
<pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>Employee<span class="token operator">></span> <span class="token function">selectByAnnotation</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span>String name<span class="token punctuation">,</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">)</span>String email<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>XML映射无须定义参数类型：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectByAnnotation<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
select id, name,email from emplee
where name like concat('%',#{name},'%') 
and email like  concat('%',#{email},'%') 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre>
<p>调用：</p>
<pre class=" language-java"><code class="language-java">Sring name <span class="token operator">=</span> <span class="token string">"张"</span><span class="token punctuation">;</span>
Sring email<span class="token operator">=</span> <span class="token string">"@qq.com"</span><span class="token punctuation">;</span>
List<span class="token operator">&lt;</span>Employee<span class="token operator">></span> empList <span class="token operator">=</span> employeeMapper<span class="token punctuation">.</span><span class="token function">selectByAnnotation</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>email<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>参数传递优缺点<br>|优点|缺点|<br>|@Param提供的名字知道传递参数的业务数据，可读性较好|参数较多时比较复杂，且不能扩展|</p>
<p>（3）使用JavaBean传递参数</p>
<p>定义个JavaBean，如果只做查询用可以叫xxxVO,xxxQuery之类</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>web<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>emp<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span><span class="token punctuation">{</span>

    <span class="token keyword">private</span> Integer empId<span class="token punctuation">;</span>

    <span class="token keyword">private</span> String empName<span class="token punctuation">;</span>

    <span class="token keyword">private</span> String email<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//getter setter ...</span>
<span class="token punctuation">}</span></code></pre>
<p>XML映射无须定义参数类型：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectByAnnotation<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.demo.entity.emp.Employee<span class="token punctuation">"</span></span>  <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
select id, name,email from emplee
where name like concat('%',#{empName},'%') 
and email like  concat('%',#{email},'%') 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre>
<p>Mapper接口：</p>
<pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>Employee<span class="token operator">></span> <span class="token function">selectByJavaBean</span><span class="token punctuation">(</span>Employee<span class="token punctuation">,</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>调用同理：</p>
<pre class=" language-java"><code class="language-java">Employee empQuery <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
empQuery<span class="token punctuation">.</span><span class="token function">setEmpName</span><span class="token punctuation">(</span><span class="token string">"张"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
empQuery<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
List<span class="token operator">&lt;</span>Employee<span class="token operator">></span> empList <span class="token operator">=</span> employeeMapper<span class="token punctuation">.</span><span class="token function">selectByJavaBean</span><span class="token punctuation">(</span>empQuery<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>总结：<br>（1）使用Map传递参数导致业务可读性较差，参数伸缩性适宜，对叫固定业务的业务可视情况使用。要求扩展性变动的业务视情况使用。<br>（2）使用@Param注解传递参数，受个数N影响，业务意义明确，可读性较好，参数较少（N&lt;=5）时最佳方式，参数变动时，需修改方法定义。<br>（3）使用JavaBean方式，参数较多时，优先使用JavaBean方式，业务性明显，伸缩可调。</p>
<h3 id="二、resultMap映射结果集"><a href="#二、resultMap映射结果集" class="headerlink" title="二、resultMap映射结果集"></a>二、resultMap映射结果集</h3><p>resultMap和select关联极强。</p>
<p>ResultMap 的设计思想是：对简单的语句做到零配置，对于复杂一点的语句，只需要描述语句之间的关系。<br>Mybatis提供了resultType属性指定领域模型，完成自动映射。常见的领域模型如：<code>HashMap</code>，<code>JavaBean</code>，<code>POJO</code>。</p>
<p>完整的结果映射：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>idArg</span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Arg</span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>discriminator</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>case</span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>discriminator</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span></code></pre>
<h4 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h4><p>其中<code>constructor</code>元素用于配置构造方法。通常是没有无参构造方法时，对应一个有参数的构造方法。如果配置了构造方法Mybatis就可以使用这个构造方法来构造POJO了。实际中使用较少，因为有些情况下需要使用不可变类，构造方法注入允许你在初始化时为类设置属性的值，而不用暴露出公有方法。 </p>
<blockquote>
<p>从版本 3.4.3 开始，可以在指定参数名称的前提下，以任意顺序编写 arg 元素。 </p>
</blockquote>
<h4 id="id和result"><a href="#id和result" class="headerlink" title="id和result"></a>id和result</h4><p>id元素：表示哪个列是竹剑，允许多个主键（即联合主键）。</p>
<p>result元素：配置POJO到SQL列名的映射关系。</p>
<h4 id="id和result元素属："><a href="#id和result元素属：" class="headerlink" title="id和result元素属："></a>id和result元素属：</h4><table>
<thead>
<tr>
<th>属性</th>
<th align="left">描述</th>
<th align="left">备注</th>
</tr>
</thead>
<tbody><tr>
<td><code>property</code></td>
<td align="left">映射到列结果的字段或属性。如果 JavaBean/POJO 有这个名字的属性（property），会先使用该属性。否则 MyBatis 将会寻找给定名称的字段（field）。</td>
<td align="left">可以使用点式分隔形式进行复杂属性导航。 比如，访问学生对象（Student）需要访问学生证(SelfCard)的发证日期（issueDate）可以写成：selfCard.issueDate</td>
</tr>
<tr>
<td><code>column</code></td>
<td align="left">数据库中的列名，或者是列的别名。</td>
<td align="left">一般情况下，这和传递给                 <code>resultSet.getString(columnName)</code> 方法的参数一样。</td>
</tr>
<tr>
<td><code>javaType</code></td>
<td align="left">一个 Java 类的全限定名，或一个类型别名（关于内置的类型别名，可以参考上面的表格）。</td>
<td align="left">如果你映射到一个 JavaBean，MyBatis 通常可以推断类型。然而，如果你映射到的是HashMap，那么你应该明确地指定 javaType 来保证行为与期望的相一致。</td>
</tr>
<tr>
<td><code>jdbcType</code></td>
<td align="left">JDBC 类型，所支持的 JDBC 类型参见这个表格之后的“支持的 JDBC 类型”。</td>
<td align="left">只需要在可能执行插入、更新和删除的且允许空值的列上指定 JDBC 类型。这是JDBC 的要求而非 MyBatis 的要求。如果你直接面向 JDBC                 编程，你需要对可以为空值的列指定这个类型。</td>
</tr>
<tr>
<td><code>typeHandler</code></td>
<td align="left">使用自定义类型处理器覆盖默认的类型处理器。</td>
<td align="left">这个属性值是一个类型处理器实现类的全限定名，或者是类型别名。用来定制jdbcType 和JavaType相互转化的规则。</td>
</tr>
</tbody></table>
<h4 id="支持的-JDBC-类型"><a href="#支持的-JDBC-类型" class="headerlink" title="支持的 JDBC 类型"></a>支持的 JDBC 类型</h4><p>MyBatis 通过内置的 jdbcType 枚举类型支持下面的 JDBC 类型。</p>
<table>
<thead>
<tr>
<th><code>BIT</code></th>
<th><code>FLOAT</code></th>
<th><code>CHAR</code></th>
<th><code>TIMESTAMP</code></th>
<th><code>OTHER</code></th>
<th><code>UNDEFINED</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>TINYINT</code></td>
<td><code>REAL</code></td>
<td><code>VARCHAR</code></td>
<td><code>BINARY</code></td>
<td><code>BLOB</code></td>
<td><code>NVARCHAR</code></td>
</tr>
<tr>
<td><code>SMALLINT</code></td>
<td><code>DOUBLE</code></td>
<td><code>LONGVARCHAR</code></td>
<td><code>VARBINARY</code></td>
<td><code>CLOB</code></td>
<td><code>NCHAR</code></td>
</tr>
<tr>
<td><code>INTEGER</code></td>
<td><code>NUMERIC</code></td>
<td><code>DATE</code></td>
<td><code>LONGVARBINARY</code></td>
<td><code>BOOLEAN</code></td>
<td><code>NCLOB</code></td>
</tr>
<tr>
<td><code>BIGINT</code></td>
<td><code>DECIMAL</code></td>
<td><code>TIME</code></td>
<td><code>NULL</code></td>
<td><code>CURSOR</code></td>
<td><code>ARRAY</code></td>
</tr>
</tbody></table>
<h4 id="resultMap结果映射集："><a href="#resultMap结果映射集：" class="headerlink" title="resultMap结果映射集："></a>resultMap结果映射集：</h4><p>（1）使用<code>Map</code>存储结果集。</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectEmps<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.demo.entity.emp.Employee<span class="token punctuation">"</span></span>  <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
select id, name,email from emplee
where name like concat('%',#{empName},'%') 
and email like  concat('%',#{email},'%') 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre>
<p>一般来说，所有的<code>select</code>语句都可以使用<code>Map</code>，是一种比较通用的方式。</p>
<p>（2）使用POJO存储结果集。</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.demo.entity.emp.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp_id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empId<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp_name<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empName<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>CHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept_id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>did<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectEmp<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.Integer<span class="token punctuation">"</span></span>  <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.demo.entity.emp.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    select emp_id, emp_name,sex,email,dept_id from tbl_emp
    where emp_id=#{empId}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre>
<p><code>resultMap</code>的id代表一个<code>resultMap</code>标识，<code>type</code>就是需要映射的POJO。可以使用Mybatis配置中定义别名，或者使用类的全限定名。映射关系中的id就是对象的主键，<code>property</code>对应POJO的属性名称，<code>column</code>对应的是数据库SQL的列名，这样结果就对应起来了。上面的例子列名和<code>column</code>是对应的，当然还可以配置类型转换器<code>typeHandler</code>、<code>javaType</code>、<code>jdbcType</code>。需要注意：配置了<code>resultMap</code>就不能配置<code>resultType</code>。</p>
<h4 id="Mybatis级联"><a href="#Mybatis级联" class="headerlink" title="Mybatis级联"></a>Mybatis级联</h4><p>Mybatis级联主要有3种：<code>association</code>(一对一)，<code>collection</code>（一对多）,<code>discriminator</code>（鉴别器）。</p>
<p>级联需要示例说明，因篇幅较长单作一篇：<a href="44c4c800.html">《Mybtis(五)Mapper级联》</a></p>
<h3 id="三、INSERT元素"><a href="#三、INSERT元素" class="headerlink" title="三、INSERT元素"></a>三、INSERT元素</h3><p>insert元素，Mybatis会在执行插入后返回一个整数，表示操作后插入的记录数。</p>
<p>insert、update、delete元素属性：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td><code>id</code></td>
<td>在命名空间中唯一的标识符，可以被用来引用这条语句。</td>
<td>不唯一时Mybatis抛出异常</td>
</tr>
<tr>
<td><code>parameterType</code></td>
<td>将会传入这条语句的参数的类全限定名或别名，使用别名必须是Mybatis内部定义或配置的自定义别名。这个属性是可选的，因为MyBatis 可以通过类型处理器（TypeHandler）推断出具体传入语句的参数，默认值为未设置（unset）。</td>
<td>如JavaBean、Map、JavaType等类型传递给SQL</td>
</tr>
<tr>
<td><code>parameterMap</code></td>
<td>用于引用外部 parameterMap 的属性，目前已被废弃。</td>
<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
</tr>
<tr>
<td><code>flushCache</code></td>
<td>将其设置为 true 后，只要语句被调用，都会导致本地缓存和二级缓存被清空，默认值：（对 insert、update 和 delete 语句）true。</td>
<td></td>
</tr>
<tr>
<td><code>timeout</code></td>
<td>设置超时参数，是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为未设置（unset）（依赖数据库驱动）。</td>
<td>默认值是数据库厂商提供的JDBC驱动所设置的秒数。</td>
</tr>
<tr>
<td><code>statementType</code></td>
<td>可选 STATEMENT，PREPARED 或 CALLABLE。这会让 MyBatis 分别使用Statement，PreparedStatement 或 CallableStatement，</td>
<td>默认值：PREPARED。</td>
</tr>
<tr>
<td><code>useGeneratedKeys</code></td>
<td>（<strong>仅适用于 insert 和 update</strong>）这会令 MyBatis 使用 JDBC 的 getGeneratedKeys 方法来取出由数据库内部生成的主键（比如：像 MySQL 和 SQL Server 这样的关系型数据库管理系统的自动递增字段）。</td>
<td>默认值：false。如果要使用需要设置成true</td>
</tr>
<tr>
<td><code>keyProperty</code></td>
<td>（<strong>仅适用于 insert 和 update</strong>）指定能够唯一识别对象的属性，MyBatis 会使用getGeneratedKeys 的返回值或 insert 语句的 selectKey 子元素设置它的值，默认值：未设置（<code>unset</code>）。如果生成列不止一个，可以用逗号分隔多个属性名称。</td>
<td>设置哪个列为主键，如果是联合主键可以用逗号隔开</td>
</tr>
<tr>
<td><code>keyColumn</code></td>
<td>（<strong>仅适用于 insert 和 update</strong>）设置生成键值在表中的列名，在某些数据库（像 PostgreSQL）中，当主键列不是表中的第一列的时候，是必须设置的。如果生成列不止一个，可以用逗号分隔多个属性名称。</td>
<td>如果是联合主键可以用逗号隔开</td>
</tr>
<tr>
<td><code>databaseId</code></td>
<td>如果配置了数据库厂商标识（databaseIdProvider），MyBatis 会加载所有不带databaseId 或匹配当前 databaseId 的语句；如果带和不带的语句都有，则不带的会被忽略。</td>
<td>多种数据库支持</td>
</tr>
</tbody></table>
<h4 id="INSERT回填主键"><a href="#INSERT回填主键" class="headerlink" title="INSERT回填主键"></a>INSERT回填主键</h4><p>如果你希望insert语句执行后返回记录的主键：</p>
<p>（1）数据库支持自动生成主键的字段（比如 MySQL 和 SQL Server）</p>
<p>直接设置 <code>useGeneratedKeys=&quot;true&quot;</code>，然后再把 keyProperty 设置为目标属性就可以了。 如：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>insertEmployee<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.demo.entity.emp.Employee<span class="token punctuation">"</span></span>  <span class="token attr-name">useGeneratedKeys</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empId<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  insert into tbl_emp (emp_name,sex,email,dept_id )
  values (#{empName},#{sex},#{email},#{dept_id})
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span></code></pre>
<p>这样传入的<code>employee</code>对象就不需要设置empId属性，Mybatis会用数据库设置进行处理。</p>
<p>如果数据库支持批量插入：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>insertManyEmployees<span class="token punctuation">"</span></span> <span class="token attr-name">useGeneratedKeys</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empId<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  insert into Author (username, password, email, bio) values
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    (#{empName},#{sex},#{email},#{dept_id})
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span></code></pre>
<p>（2）数据库不支持自动生成主键列，或者JDBC 驱动不支持生成主键。</p>
<p>对于不支持的情况，MyBatis 支持自定义主键生成</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>insertEmp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>selectKey</span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empId<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">order</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BEFORE<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    select if(max(id) is null, 1 , max(id)+2) as  newId a from tbl_emp
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>selectKey</span><span class="token punctuation">></span></span>
  insert into tbl_emp
   (emp_Id,emp_name,sex,email,dept_id )
  values
    (#{empId},#{empName},#{sex},#{email},#{dept_id})
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span></code></pre>
<p>示例中，首先会运行 selectKey 元素中的语句，并设置 <code>Employee</code>的 empId，然后才会调用插入语句。这样就实现了数据库自动生成主键类似的行为，同时保持了 Java 代码的简洁。 看一看的 MyBatis 处理主键生成的灵活性和宽容度 。</p>
<p>selectKey 元素描述如下：         </p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>selectKey</span>    <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">order</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BEFORE<span class="token punctuation">"</span></span> <span class="token attr-name">statementType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>PREPARED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    ...
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>selectKey</span><span class="token punctuation">></span></span></code></pre>
<p>selectKey 属性：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>keyProperty</code></td>
<td><code>selectKey</code> 语句结果应该被设置到的目标属性。如果生成列不止一个，可以用逗号分隔多个属性名称。</td>
</tr>
<tr>
<td><code>keyColumn</code></td>
<td>返回结果集中生成列属性的列名。如果生成列不止一个，可以用逗号分隔多个属性名称。</td>
</tr>
<tr>
<td><code>resultType</code></td>
<td>结果的类型。通常 MyBatis 可以推断出来，但是为了更加准确，写上也不会有什么问题。MyBatis                 允许将任何简单类型用作主键的类型，包括字符串。如果生成列不止一个，则可以使用包含期望属性的 Object 或 Map。</td>
</tr>
<tr>
<td><code>order</code></td>
<td>可设置为 <code>BEFORE</code> 或 <code>AFTER</code>。如果设置为<code>BEFORE</code>，那么它首先会生成主键，设置 <code>keyProperty</code>再执行插入语句。如果设置为<code>AFTER</code>，那么先执行插入语句，然后是 <code>selectKey</code> 中的语句 - 这和 Oracle  数据库的行为相似，在插入语句内部可能有嵌入索引调用。</td>
</tr>
<tr>
<td><code>statementType</code></td>
<td>和前面一样，MyBatis 支持 <code>STATEMENT</code>，<code>PREPARED</code> 和 <code>CALLABLE</code> 类型的映射语句，分别代表 <code>Statement</code>, <code>PreparedStatement</code> 和  <code>CallableStatement</code> 类型。</td>
</tr>
</tbody></table>
<h4 id="参数使用"><a href="#参数使用" class="headerlink" title="参数使用"></a>参数使用</h4><p>如果之前在配置里提到的类型转换器typeHandler</p>
<pre class=" language-xml"><code class="language-xml">#{sex,javaType=string, jdbcType=NUMERIC,typeHandler=org.apache.ibatis.type.EnumOrdinalTypeHandler}</code></pre>
<h4 id="存储过程支持"><a href="#存储过程支持" class="headerlink" title="存储过程支持"></a>存储过程支持</h4><p>存储过程存在3种参数：输入参数（IN）、输出参数（OUT）、输入输出参数（INOUT）。Mybatis的参数规则均提供支持。通过设置<code>mode</code>属性来确定参数类型，<code>mode</code>的值对应也有三种：IN、OUT、INOUT。</p>
<p>当<code>mode</code>参数设置OUT或INOUT时，Mybatis会将存储过程返回的结果社会组到指定的参数中。</p>
<p>如果返回的是一个游标（jdbcType=CURSOR）时，还需要设置resultMap，方便Mybatis将存储过程参数映射到对应的类型，这样Mybatis就可以通过设置的resultMap自动设置映射结果。</p>
<pre class=" language-xml"><code class="language-xml">#{employee, mode=OUT,jdbcType=CURSOR,javaType=ResultSet,resultMap=empResultMap}</code></pre>
<p>javaType可选，因为Mybatis可以自动检测它。</p>
<p>Mybatis还支持一下高级特性，如结构体，当注册参数时需要指定语句类型名称（jdbcTypeName）:</p>
<pre class=" language-xml"><code class="language-xml">#{emp,mode=OUT,jdbcType=STRUCT,jdbcTypeName=MY_TYPE,resultMap=dempResultMap}</code></pre>
<p>在大部分情况下，MyBatis都会自动推断返回数据类型，大部分情况都不需要配置参数类型和结果类型。需要设置的是容易返回为null的字段类型，null值Mybatis无法判断类型。如备注字段</p>
<pre class=" language-xml"><code class="language-xml">#{mark,jdbcType=VARCHAR}</code></pre>
<h4 id="特殊字符串替换处理（-和-）"><a href="#特殊字符串替换处理（-和-）" class="headerlink" title="特殊字符串替换处理（#和$）"></a>特殊字符串替换处理（#和$）</h4><p>设置参数常用<code>#{empName}</code>在大部分情况Mybatis都会进行预编译处理，然后再赋值。</p>
<p>如果需要传递是SQL语句本身，不是SQL参数，如动态表格，根据条件显示不同的列，传递SQL列名，根据某些列排序等使用场景，可以使用<code>$</code>符号，如传递变量<code>columns=&quot;col1,col2,col3&quot;</code>给SQL,组装SQL语句则可以使用：</p>
<pre class=" language-xml"><code class="language-xml">select ${columns} from t_table</code></pre>
<p>这样columns就不会被Mybatis进行预编译解析，而变为直接替换。只是这样存在SQL注入的风险问题。Mybatis给予足够的灵活性，需要自己保证SQL的正确性和安全性。</p>
<h3 id="四、UPDATE元素"><a href="#四、UPDATE元素" class="headerlink" title="四、UPDATE元素"></a>四、UPDATE元素</h3><p>参数见INSERT元素处。示例：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateByExample<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    update tbl_emp
    set emp_id = #{record.empId,jdbcType=INTEGER},
      emp_name = #{record.empName,jdbcType=VARCHAR},
      sex = #{record.sex,jdbcType=CHAR},
      email = #{record.email,jdbcType=VARCHAR}
    where emp_id = #{empId,jdbcType=INTEGER}
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateByPrimaryKeySelective<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.demo.entity.emp.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    update tbl_emp
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empName !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        emp_name = #{empName,jdbcType=VARCHAR},
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        sex = #{sex,jdbcType=CHAR},
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        email = #{email,jdbcType=VARCHAR},
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>
    where emp_id = #{empId,jdbcType=INTEGER}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span></code></pre>
<h3 id="五、DELETE元素"><a href="#五、DELETE元素" class="headerlink" title="五、DELETE元素"></a>五、DELETE元素</h3><p>参数见INSERT元素处。示例：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deleteByPrimaryKey<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.Integer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    delete from tbl_emp
    where emp_id = #{empId,jdbcType=INTEGER}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span></code></pre>
<h3 id="六、SQL元素"><a href="#六、SQL元素" class="headerlink" title="六、SQL元素"></a>六、SQL元素</h3><p>SQL元素用来定义一串SQL语句片段，使之可以在其他的语句通过引用来使用它。主要目的是为了SQL代码片段复用。</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp_columns<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    emp_id, emp_name, sex, email
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectEmployee<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hashMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  SELECT 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp_columns<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  FROM tbl_emp
  WHERE emp_id = #{empId}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre>
<p>也可以配合指定参数来使用：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp_columns<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    #{prefix}.emp_id, #{prefix}.emp_name, #{prefix}.sex, #{prefix}.email
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectEmployee<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hashMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  SELECT 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp_columns<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">vaule</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>e<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>
  FROM tbl_emp e
  WHERE e.emp_id = #{empId}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre>
<p>还可以给<code>refid</code>参数值由程序引入：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>someinclude<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    select * from <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${tableName}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span></code></pre>
<h3 id="七、Cache缓存"><a href="#七、Cache缓存" class="headerlink" title="七、Cache缓存"></a>七、Cache缓存</h3><p>缓存是互联网系统常常用到的，特点是讲数据保存在内存中。常见的流行缓存服务器有MongoDB、Redis、Ehcache等。缓存从计算机内存读取数据，无需从磁盘读入，具有快速读取使用的特点，如果缓存命中率高，可以极大提高系统性能。如果缓存命中率很低，缓存就不存在使用的意义了，所以使用缓存的关键是存储内容访问的命中率。</p>
<h4 id="系统缓存"><a href="#系统缓存" class="headerlink" title="系统缓存"></a>系统缓存</h4><p>MyBatis系统缓存分：一级缓存和二级缓存。</p>
<h5 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h5><p>MyBatis在没有配置的默认情况下，值开启一级缓存（一级缓存值相对于同一个SqlSession而言）。</p>
<p>在参数和SQL完全一样时，使用SqlSession第一次查询后，Mybatis会将其放入缓存中，后续查询时如没有声明需要刷新缓存，且缓存没有超时的情况下，SqlSession都只会取出当前缓存数据，不会发生SQL到数据库执行查询。</p>
<p>需要注意的是不同的 SqlSession都是相互隔离的，如果更换了新的SqlSession，即使是相同的Mapper、参数和方法，还是会发送SQL到数据库执行，返回结果。</p>
<h5 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h5><p>为了克服SqlSession相互隔离问题，需要配置二级缓存，使用在SqlSessionFactory层面上给各个SqlSession对象共享数据。SqlSessionFactory曾的二级缓存默认是不开启的，如果开启需要进行配置，并且实现二级缓存的时候，MyBatis要求返回的POJO必须是可序列化的（即实现Serializable接口），配置比较简单：</p>
<p>（1）第一步，在XML文件中配置即可：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span> <span class="token punctuation">/></span></span></code></pre>
<p>这样的配置，许多设置是默认的，其含义为：</p>
<p>（a）映射语句文件中的所有<code>select</code>语句将会被缓存。</p>
<p>（b）映射语句文件中的所有<code>insert</code>、<code>update</code>、<code>delete</code>语句将会被缓存。</p>
<p>（c）缓存会使用默认的<code>Least Recently Used（LRU，最近最少使用的）</code>算法来收回缓存。</p>
<p>（d）根据时间表，比如<code>No Flush Interval（CNFI，没有刷新间隔）</code>，缓存不会以任何时间顺序来刷新。</p>
<p>（e）缓存会存储列表集合或对象（无论查询方法返回什么）的1024个引用。</p>
<p>（f）缓存会被视为 <code>read/write(可读可写)</code>缓存，意味着对象检索不是共享的，而是可以安全地被调用者修改，不干扰其他调用者或线程所做的潜在修改。</p>
<p>（2）第二步，让你POJO对象实现<code>Serializable接口</code>：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>web<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>emp<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token keyword">implements</span> <span class="token class-name">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 6654960072154305288L<span class="token punctuation">;</span>

    <span class="token keyword">private</span> Integer empId<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String empName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String sex<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String email<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> did<span class="token punctuation">;</span>
    <span class="token keyword">private</span> Department department <span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//setter getter ...</span>
<span class="token punctuation">}</span></code></pre>
<p><strong>特别说明</strong>：</p>
<p>缓存只作用于 cache 标签所在的映射文件中的语句。如果你混合使用 Java API 和 XML 映射文件，在共用接口中的语句将不会被默认缓存。你需要使用 <code>@CacheNamespaceRef</code>注解指定缓存作用域。 </p>
<p>关于 <code>cache</code>元素的属性：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span>  <span class="token attr-name">eviction</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>FIFO<span class="token punctuation">"</span></span> <span class="token attr-name">flushInterval</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>60000<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>512<span class="token punctuation">"</span></span> <span class="token attr-name">readOnly</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre>
<p>这个配置创建了一个 FIFO 缓存，每隔 60 秒刷新，最多可以存储结果对象或列表的 512 个引用，而且返回的对象被认为是只读的，因此对它们进行修改可能会在不同线程中的调用者产生冲突。 </p>
<p>可用的清除策略有：         </p>
<ul>
<li><code>LRU</code> – 最近最少使用：移除最长时间不被使用的对象。</li>
<li><code>FIFO</code> – 先进先出：按对象进入缓存的顺序来移除它们。</li>
<li><code>SOFT</code> – 软引用：基于垃圾回收器状态和软引用规则移除对象。</li>
<li><code>WEAK</code> – 弱引用：更积极地基于垃圾收集器状态和弱引用规则移除对象。</li>
</ul>
<p>默认的清除策略是 <code>LRU : Least Recently Used（最近最少使用的）</code>。</p>
<p><code>flushInterval（刷新间隔）</code>属性可以被设置为任意的正整数，设置的值应该是一个以毫秒为单位的合理时间量。默认情况是不设置，也就是没有刷新间隔，缓存仅仅会在调用语句时刷新。 </p>
<p><code>size（引用数目）</code>属性可以被设置为任意正整数，要注意欲缓存对象的大小和运行环境中可用的内存资源。默认值是 1024。 </p>
<p>readOnly（只读）属性可以被设置为 true 或 false。只读的缓存会给所有调用者返回缓存对象的相同实例。因此这些对象不能被修改。这就提供了可观的性能提升。而可读写的缓存会（通过序列化）返回缓存对象的拷贝。速度上慢一些，但是更安全，因此默认值是 false。  </p>
<p><strong>特别提示：</strong>二级缓存是事务性的。这意味着，当 SqlSession 完成并提交时，或是完成并回滚，但没有执行 flushCache=true 的 insert/delete/update 语句时，缓存会获得更新。 </p>
<h4 id="自定义缓存"><a href="#自定义缓存" class="headerlink" title="自定义缓存"></a>自定义缓存</h4><p>上述Mybatis自带缓存的方式，是在应用部署机器上本地缓存。但是现在分布式、微服务、各类缓存服务器出现，之后可以进行自定义缓存。也可以通过实现自定义的缓存，或为其他第三方缓存方案创建适配器，来完全覆盖系统缓存行为。</p>
<p>比如：Redis缓存，要实现自定义缓存需要实现MyBatis提供的接口<code>org.apache.ibatis.cache.Cache</code> ，缓存接口：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>cache<span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Cache</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//获取缓存编号</span>
      String <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//获取缓存对象大小</span>
     <span class="token keyword">int</span> <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//保存Key值缓存对象</span>
      <span class="token keyword">void</span> <span class="token function">putObject</span><span class="token punctuation">(</span>Object key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//获取Key值缓存对象</span>
      Object <span class="token function">getObject</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//判断Key值缓存对象</span>
      <span class="token keyword">boolean</span> <span class="token function">hasKey</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//删除Key值缓存对象</span>
      Object <span class="token function">removeObject</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//清空缓存</span>
      <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//获取读写锁</span>
    ReadWriteLock <span class="token function">getReadWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>；
<span class="token punctuation">}</span></code></pre>
<p>如自定义缓存</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>web<span class="token punctuation">.</span>example<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>ReadWriteLock<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>Cache<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCustomCache</span> <span class="token keyword">implements</span> <span class="token class-name">Cache</span><span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span></code></pre>
<p>配置缓存：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.example.MyCustomCache<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>host<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>localhost<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cacheFile<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/tmp/my-custom-cache.tmp<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cache</span><span class="token punctuation">></span></span></code></pre>
<p>可以在缓存这添加公有的JavaBean属性，那么在自定义的<code>MyCustomCache</code>类中增加<code>setHost(String host)</code>和<code>setCachefile(String file)</code>方法，在<code>MyCustomCache</code>初始化的时候方法就会被调用，这样就可以设置自定义的参数。</p>
<p> 从版本 3.4.2 开始，MyBatis 已经支持在所有属性设置完毕之后，调用一个初始化方法。如果想要使用这个特性，请在你的自定义缓存类里实现 org.apache.ibatis.builder.InitializingObject` 接口：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">InitializingObject</span> <span class="token punctuation">{</span>
  <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p><strong>注意：</strong>上一节中对缓存的配置（如清除策略、可读或可读写等），不能应用于自定义缓存。  </p>
<p>缓存的配置和缓存实例会被绑定到 SQL 映射文件的命名空间中。因此，同一命名空间中的所有语句和缓存将通过命名空间绑定在一起。</p>
<p>增删查改的每条语句可以自定义与缓存交互的方式，或将它们完全排除于缓存之外，这可以通过在每条语句上使用两个简单属性来达成。默认情况下，语句会这样来配置：         </p>
<pre><code>&lt;select ... flushCache=&quot;false&quot; useCache=&quot;true&quot;/&gt;
&lt;insert ... flushCache=&quot;true&quot;/&gt;
&lt;update ... flushCache=&quot;true&quot;/&gt;
&lt;delete ... flushCache=&quot;true&quot;/&gt;</code></pre><p>鉴于这是默认行为，显然你永远不应该以这样的方式显式配置一条语句。但如果你想改变默认的行为，只需要设置 flushCache 和  useCache 属性。比如，某些情况下你可能希望特定 select 语句的结果排除于缓存之外，或希望一条 select  语句清空缓存。类似地，你可能希望某些 update 语句执行时不要刷新缓存。         </p>
<h4 id="cache-ref"><a href="#cache-ref" class="headerlink" title="cache-ref"></a>cache-ref</h4><p>对某一命名空间的语句，只会使用该命名空间的缓存进行缓存或刷新。如果想要在多个命名空间中共享相同的缓存配置和实例。要实现这种需求，可以使用<code>cache-ref</code>元素来引用另一个缓存。假如在<code>DepartmentMapper.xml</code>使用<code>EmployeeMapper.xml</code>里的缓存配置，则<code>cache-ref</code>的<code>namespace</code>属性指向<code>EmployeeMapper.xml</code>的命名空间即可。</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache-ref</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ssm.web.demo.dao.emp.EmployeeMapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre>
<br/>

<p><strong>相关文章：</strong></p>
<table>
<thead>
<tr>
<th>文章名称</th>
</tr>
</thead>
<tbody><tr>
<td><a href="b802139a.html">《Mybatis(一)主要组件》</a></td>
</tr>
<tr>
<td><a href="5d11555a.html">《Mybatis(二)配置》</a></td>
</tr>
<tr>
<td><a href="d467df29.html">《Mybatis(三)动态SQL》</a></td>
</tr>
<tr>
<td><a href="3bfa75b5.html">《Mybtis(四)工作原理》</a></td>
</tr>
<tr>
<td><a href="ae8510ea.html">《Mybtis(五)Mapper映射器》</a></td>
</tr>
<tr>
<td><a href="44c4c800.html">《Mybtis(六)Mapper级联》</a></td>
</tr>
</tbody></table>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>jvm之类文件结构</title>
    <url>/posts/6698cab3.html</url>
    <content><![CDATA[<h2 id="jvm类文件结构"><a href="#jvm类文件结构" class="headerlink" title="jvm类文件结构"></a>jvm类文件结构</h2><p>各种不同平台的Java虚拟机，以及所有平台都统一支持的程序存储格式——字节码（ByteCode）。</p>
<blockquote>
<p>Java虚拟机不与包括Java语言在内的任何程序语言绑定，它只与”Class文件”这种特定的二进制文件格式所关联，Class文件中包含了Java虚拟机指令集、符号表以及若干其他辅助信息。</p>
<p>Java语言中的各种语法、关键字、常量变量和运算符号的语义最终都会由多条字节码指令组合来表达，这决定了字节码指令所能提供的语言描述能力必须比Java语言本身更加强大才行。</p>
</blockquote>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-class/jvm-6-class.jpg" alt="java虚拟机的语言无关性"></p>
<h2 id="一、Class类文件的结构"><a href="#一、Class类文件的结构" class="headerlink" title="一、Class类文件的结构"></a>一、Class类文件的结构</h2><h4 id="1、class文件的主要结构"><a href="#1、class文件的主要结构" class="headerlink" title="1、class文件的主要结构"></a>1、class文件的主要结构</h4><p>通常来说，任何一个Class文件都对应着唯一的一个类或接口的定义信息。类或接口并不一定都得定义在文件里（比如类或接口也可以动态生成，直接送入类加载器中）。</p>
<blockquote>
<p>Class文件是一组以8个字节为基础单位的二进制流，各个数据项目严格按照顺序紧凑地排列在文件之中，中间没有添加任何分隔符，这使得整个Class文件中存储的内容几乎全部是程序运行的必要数据，没有空隙存在。当遇到需要占用8个字节以上空间的数据项时，则会按照高位在前[插图]的方式分割成若干个8个字节进行存储。</p>
</blockquote>
<p>《Java虚拟机规范》的规定，Class文件格式采用一种类似于C语言结构体的伪结构来存储数据，这种伪结构中只有两种数据类型：”无符号数”和”表”。</p>
<p>（1）无符号数：</p>
<p>无符号数属于基本的数据类型，以u1、u2、u4、u8来分别代表1个字节、2个字节、4个字节和8个字节的无符号数，无符号数可以用来描述数字、索引引用、数量值或者按照UTF-8编码构成字符串值。</p>
<p>（2）表</p>
<p>表是由多个无符号数或者其他表作为数据项构成的复合数据类型，所有表的命名都习惯性地以<code>&quot;_info&quot;</code>结尾。</p>
<p>表用于描述有层次关系的复合结构的数据，整个Class文件本质上也可以视作是一张表，表的数据项按严格顺序排列构成的。</p>
<p>class文件格式数据项如图：</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-class/jvm-6-class-2.jpg" alt="class文件格式"></p>
<p>无符号数或表中，当需要描述同一类型但数量不定的多个数据时，经常会使用一个前置的容量计数器加若干个连续的数据项的形式，这时候称这一系列连续的某一类型的数据为某一类型的”集合”。</p>
<p><strong>特别说明</strong></p>
<blockquote>
<p>Class的结构没有任何分隔符号，所以上图的数据项中，无论是顺序还是数量，甚至于数据存储的字节序（ByteOrdering，Class文件中字节序为Big-Endian）这样的细节，都是被严格限定的，哪个字节代表什么含义，长度是多少，先后顺序如何，全部都不允许改变。</p>
</blockquote>
<h4 id="2、魔数与Class文件的版本"><a href="#2、魔数与Class文件的版本" class="headerlink" title="2、魔数与Class文件的版本"></a>2、魔数与Class文件的版本</h4><p>每个Class文件的头4个字节被称为魔数（Magic Number），它的唯一作用是确定这个文件是否为一个能被虚拟机接受的Class文件。</p>
<p>java的Class文件的魔数值固定为<code>0xCAFEBABE</code>。</p>
<p>紧接着魔数的4个字节存储的是Class文件的版本号：第5和第6个字节是次版本号（MinorVersion），第7和第8个字节是主版本号（Major Version）。</p>
<blockquote>
<p>Java的版本号是从45开始的，JDK 1.1之后的每个JDK大版本发布主版本号向上加1（JDK 1.0～1.1使用了45.0～45.3的版本号），高版本的JDK能向下兼容以前版本的Class文件，但不能运行以后版本的Class文件，因为《Java虚拟机规范》在Class文件校验部分明确要求了即使文件格式并未发生任何变化，虚拟机也必须拒绝执行超过其版本号的Class文件。</p>
</blockquote>
<p>当我学到这里我算是明白以前在项目过程中，遇到用高版本编译，低版本运行报错的真正原因了。</p>
<p>如：JDK 1.1能支持版本号为45.0～45.65535的Class文件，无法执行版本号为46.0以上的Class文件，而JDK 1.2则能支持45.0～46.65535的Class文件。目前最新的JDK版本为13，可生成的Class文件主版本号最大值为57.0。</p>
<p>比如来个经典的HelloWorld文件，加个变量和方法：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> test<span class="token punctuation">.</span>com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>klass<span class="token punctuation">.</span>test<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>用WinHex打开HelloWorld.class文件：</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-class/jvm-6-class-demo1.png" alt="HelloWorld.class文件版本示例"></p>
<p>可以清楚地看见开头4个字节的十六进制表示是0xCAFEBABE，代表次版本号的第5个和第6个字节值为0x0000，而主版本号的值为0x0033，也即是十进制的51，对应的jdk7，可以被jdk7及以上版本虚拟机执行。</p>
<p>主流JDK版本编译器输出的默认的和可支持的Class文件版本号。</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-class/jvm-6-class-verson.jpg" alt="jdk与class文件版本对照"></p>
<p>注：从JDK 9开始，Javac编译器不再支持使用-source参数编译版本号小于1.5的源码。</p>
<p>次版本号，从JDK 1.2以后，直到JDK 12之前次版本号均未使用，全部固定为零。JDK 12开始，重新启用次版本号，将它用于标识”技术预览版”功能特性的支持。如果Class文件中使用了该版本JDK尚未列入正式特性清单中的预览功能，则必须把次版本号标识为65535，以便Java虚拟机在加载类文件时能够区分出来。</p>
<h4 id="3、常量池"><a href="#3、常量池" class="headerlink" title="3、常量池"></a>3、常量池</h4><p>紧接着主、次版本号之后的是常量池入口。常量池可以比喻为Class文件里的资源仓库，它是Class文件结构中与其他项目关联最多的数据，通常也是占用Class文件空间最大的数据项目之一，另外，它还是在Class文件中第一个出现的表类型数据项目。</p>
<p>常量池中常量的数量是不固定的，所以在常量池的入口需要放置一项u2类型的数据，代表常量池容量计数值（constant_pool_count）。这个容量计数是从1而不是0开始的，如图HelloWorld类文件截图：</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-class/jvm-6-class-demo2.png" alt="HelloWorld.class里的常量池"></p>
<p>常量池容量（偏移地址：0x00000008）为十六进制数0x0028，即十进制的40，这就代表常量池中有40项常量，索引值范围为1～40。</p>
<blockquote>
<p>索引值第0项常量空出来是有特殊考虑的，这样做的目的在于，如果后面某些指向常量池的索引值的数据在特定情况下需要表达”不引用任何一个常量池项目”的含义，可以把索引值设置为0来表示。Class文件结构中只有常量池的容量计数是从1开始，对于其他集合类型，包括接口索引集合、字段表集合、方法表集合等的容量计数都与一般习惯相同，是从0开始。</p>
</blockquote>
<p>常量池中主要存放两大类常量：字面量（Literal） 和 符号引用（Symbolic References） 。</p>
<p>（1）字面量（Literal）</p>
<p>如文本字符串、被声明为final的常量值等</p>
<p>（2）符号引用（Symbolic References） :</p>
<p>主要有以下几类：</p>
<p>​    （a）被模块导出或者开放的包（Package）</p>
<p>​    （b）类和接口的全限定名（Fully Qualified Name）</p>
<p>​    （c）字段的名称和描述符（Descriptor）</p>
<p>​    （d）方法的名称和描述符</p>
<p>​    （e）方法句柄和方法类型（Method Handle、Method Type、Invoke Dynamic）</p>
<p>​    （f）动态调用点和动态常量（Dynamically-Computed Call Site、Dynamically-ComputedConstant）</p>
<blockquote>
<p>虚拟机加载Class文件的时候进行动态连接，所以在Class文件中不会保存各个方法、字段最终在内存中的布局信息，这些字段、方法的符号引用不经过虚拟机在运行期转换的话是无法得到真正的内存入口地址，也就无法直接被虚拟机使用的。当虚拟机做类加载时，将会从常量池获得对应的符号引用，再在类创建时或运行时解析、翻译到具体的内存地址之中。</p>
</blockquote>
<p>常量池中每一项常量都是一个表，最初常量表中共有11种结构各不相同的表结构数据，后来为了更好地支持动态语言调用，额外增加了4种动态语言相关的常量[插图]，为了支持Java模块化系统（Jigsaw），又加入了CONSTANT_Module_info和CONSTANT_Package_info两个常量，所以截至JDK 13，常量表中分别有17种不同类型的常量。</p>
<p>17类表都有一个共同的特点，表结构起始的第一位是个u1类型的标志位（tag），代表着当前常量属于哪种常量类型。如图：</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-class/jvm-6-class-clc.jpg" alt="17种常量类型"></p>
<p>这17种常量类型各自有着完全独立的数据结构。</p>
<p>依旧以Helloworld.class为例：</p>
<p>标志位（偏移地址：0x0000000A）是0x07，查上表标志是7对应的常量类型是CONSTANT_Class_info，代表一个类或者接口的符号引用。</p>
<p>CONSTANT_Class_info的结构如下：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>名称</th>
<th>数量</th>
</tr>
</thead>
<tbody><tr>
<td>ul</td>
<td>tag</td>
<td>1</td>
</tr>
<tr>
<td>u2</td>
<td>name_index</td>
<td>1</td>
</tr>
</tbody></table>
<p>tag是标志位，它用于区分常量类型；</p>
<p>name_index是常量池的索引值，它指向常量池中一个CONSTANT_Utf8_info类型常量，此常量代表了这个类（或者接口）的全限定名。</p>
<p>依旧以Helloworld.class为例</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-class/jvm-6-class-demo3.png" alt="HelloWorld类常量池结构"></p>
<p>name_index值（偏移地址：0x0000000B）为0x0002，也就是指向了常量池中的第二项常量，图中第二项常量标志位（地址：0x0000000D）是0x01。查常量池表，可以确定是一个CONSTANT_Utf8_info类型的常量。</p>
<p>CONSTANT_Utf8_info型常量的结构:</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>名称</th>
<th>数量</th>
</tr>
</thead>
<tbody><tr>
<td>ul</td>
<td>tag</td>
<td>1</td>
</tr>
<tr>
<td>u2</td>
<td>length</td>
<td>1</td>
</tr>
<tr>
<td>u1</td>
<td>bytes</td>
<td>length</td>
</tr>
</tbody></table>
<blockquote>
<p>length值说明了这个UTF-8编码的字符串长度是多少字节，它后面紧跟着的长度为length字节的连续数据是一个使用UTF-8缩略编码表示的字符串。UTF-8缩略编码与普通UTF-8编码的区别是：从’\u0001’到’\u007f’之间的字符（相当于1～127的ASCII码）的缩略编码使用一个字节表示，从’\u0080’到’\u07ff’之间的所有字符的缩略编码用两个字节表示，从’\u0800’开始到’\uffff’之间的所有字符的缩略编码就按照普通UTF-8编码规则使用三个字节表示。</p>
</blockquote>
<p>由于Class文件中方法、字段等都需要引用CONSTANT_Utf8_info型常量来描述名称，所以CONSTANT_Utf8_info型常量的最大长度也就是Java中方法、字段名的最大长度。而这里的最大长度就是length的最大值，既u2类型能表达的最大值65535。Java程序中如果定义了超过64KB英文字符的变量或方法名，即使规则和全部字符都是合法的，也会无法编译。</p>
<p>在helloworld的例中</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-class/jvm-6-class-demo4.png" alt="常量池UTF-8字符串结构"></p>
<p>这个字符串的length值（偏移地址：0x0000000E）为0x0026，也就是长38个字节，往后38个字节正好都在1～127的ASCII码范围以内，内容为”test.com.xiaocai.klass.test.HelloWorld”，转换部分后续再补上。</p>
<p>//十六进制转换待补充</p>
<p>在JDK的bin目录中，Oracle公司已经为我们准备好一个专门用于分析Class文件字节码的工具：javap。</p>
<p>直接使用javap工具的-verbose参数输出的TestClass.class文件字节码内容。</p>
<p>命令如下：</p>
<pre><code>javap -verbose HelloWorld.class </code></pre><p>由于文件长我写到txt里，全部内容如下，暂且称之为字节码清单：</p>
<pre class=" language-txt"><code class="language-txt">Classfile /E:/ide-tools/apache-tomcat-7.0.90-eclispe-pmis/webapps/pmis/WEB-INF/classes/test/com/xiaocai/klass/test/HelloWorld.class
  Last modified 2020-6-9; size 691 bytes
  MD5 checksum 549d707e6692d2c884983e3ad0873405
  Compiled from "HelloWorld.java"
public class test.com.xiaocai.klass.test.HelloWorld
  SourceFile: "HelloWorld.java"
  minor version: 0
  major version: 51
  flags: ACC_PUBLIC, ACC_SUPER

Constant pool:
   #1 = Class              #2             //  test/com/xiaocai/klass/test/HelloWorld
   #2 = Utf8               test/com/xiaocai/klass/test/HelloWorld
   #3 = Class              #4             //  java/lang/Object
   #4 = Utf8               java/lang/Object
   #5 = Utf8               m
   #6 = Utf8               I
   #7 = Utf8               <init>
   #8 = Utf8               ()V
   #9 = Utf8               Code
  #10 = Methodref          #3.#11         //  java/lang/Object."<init>":()V
  #11 = NameAndType        #7:#8          //  "<init>":()V
  #12 = Utf8               LineNumberTable
  #13 = Utf8               LocalVariableTable
  #14 = Utf8               this
  #15 = Utf8               Ltest/com/xiaocai/klass/test/HelloWorld;
  #16 = Utf8               add
  #17 = Utf8               ()I
  #18 = Fieldref           #1.#19         //  test/com/xiaocai/klass/test/HelloWorld.m:I
  #19 = NameAndType        #5:#6          //  m:I
  #20 = Utf8               main
  #21 = Utf8               ([Ljava/lang/String;)V
  #22 = Fieldref           #23.#25        //  java/lang/System.out:Ljava/io/PrintStream;
  #23 = Class              #24            //  java/lang/System
  #24 = Utf8               java/lang/System
  #25 = NameAndType        #26:#27        //  out:Ljava/io/PrintStream;
  #26 = Utf8               out
  #27 = Utf8               Ljava/io/PrintStream;
  #28 = String             #29            //  Hello World!
  #29 = Utf8               Hello World!
  #30 = Methodref          #31.#33        //  java/io/PrintStream.println:(Ljava/lang/String;)V
  #31 = Class              #32            //  java/io/PrintStream
  #32 = Utf8               java/io/PrintStream
  #33 = NameAndType        #34:#35        //  println:(Ljava/lang/String;)V
  #34 = Utf8               println
  #35 = Utf8               (Ljava/lang/String;)V
  #36 = Utf8               args
  #37 = Utf8               [Ljava/lang/String;
  #38 = Utf8               SourceFile
  #39 = Utf8               HelloWorld.java
{
  public test.com.xiaocai.klass.test.HelloWorld();
    flags: ACC_PUBLIC

    Code:
      stack=1, locals=1, args_size=1
         0: aload_0       
         1: invokespecial #10                 // Method java/lang/Object."<init>":()V
         4: return        
      LineNumberTable:
        line 3: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
               0       5     0  this   Ltest/com/xiaocai/klass/test/HelloWorld;

  public int add();
    flags: ACC_PUBLIC

    Code:
      stack=2, locals=1, args_size=1
         0: aload_0       
         1: getfield      #18                 // Field m:I
         4: iconst_1      
         5: iadd          
         6: ireturn       
      LineNumberTable:
        line 8: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
               0       7     0  this   Ltest/com/xiaocai/klass/test/HelloWorld;

  public static void main(java.lang.String[]);
    flags: ACC_PUBLIC, ACC_STATIC

    Code:
      stack=2, locals=1, args_size=1
         0: getstatic     #22                 // Field java/lang/System.out:Ljava/io/PrintStream;
         3: ldc           #28                 // String Hello World!
         5: invokevirtual #30                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
         8: return        
      LineNumberTable:
        line 13: 0
        line 15: 8
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
               0       9     0  args   [Ljava/lang/String;
}</code></pre>
<p>根据清单可以看出常量池中有39项常量，索引值范围为1～39，对应着十六进制的0x0028，也就是十进制的40。</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-class/jvm-6-class-demo0.jpg" alt="常量池中的17种数据类型的结构总表1"></p>
<p>字节码清单中第1、2项常量的计算结果与我们手工计算的结果完全一致。</p>
<blockquote>
<p>还有一些常量如”I”、”V”、”<init>“、”LineNumberTable”、”LocalVariableTable”等都是 编译器自己生成的，会被字段表（field_info）、方法表（method_info）、属性表（attribute_info）所引用。它们将会被用来描述一些不方便使用”固定字节”进行表达的内容，譬如描述方法的返回值是什么，有几个参数，每个参数的类型是什么。</p>
</blockquote>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-class/jvm-6-class-changlangchi-1.jpg" alt="常量池中的17种数据类型的结构总表1"></p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-class/jvm-6-class-changlangchi-2.jpg" alt="常量池中的17种数据类型的结构总表2"></p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-class/jvm-6-class-changlangchi-3.jpg" alt="常量池中的17种数据类型的结构总表3"></p>
<h4 id="4、访问标志"><a href="#4、访问标志" class="headerlink" title="4、访问标志"></a>4、访问标志</h4><p>常量池结束之后，紧接着的2个字节代表访问标志（access_flags）。</p>
<p>访问标志用于识别一些类或者接口层次的访问信息。包括：这个Class是类还是接口；是否定义为public类型；是否定义为abstract类型；如果是类的话，是否被声明为final；等等。</p>
<p>访问标志相关说明如下表：</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-class/jvm-6-class-accessflag.jpg" alt="访问标志说明表"></p>
<p>access_flags中一共有16个标志位可以使用，当前只定义了其中9个，没有使用到的标志位要求一律为零。</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-class/jvm-6-class-demo5.png" alt="HelloWorld.class访问标志"></p>
<p>HelloWorld类是个普通类，不是接口、枚举、注解或者模块，被public关键字修饰但没有被声明为final和abstract，并且它使用了JDK 1.2之后的编译器进行编译，因此它的<code>ACC_PUBLIC</code>、<code>ACC_SUPER</code>标志应当为真，而<code>ACC_FINAL</code>、<code>ACC_INTERFACE</code>、<code>ACC_ABSTRACT</code>、<code>ACC_SYNTHETIC</code>、<code>ACC_ANNOTATION</code>、<code>ACC_ENUM</code>、<code>ACC_MODULE</code>这七个标志应当为假，因此它的access_flags的值应为：0x0001|0x0020=0x0021。</p>
<h4 id="5、类索引、父类索引与接口索引集合"><a href="#5、类索引、父类索引与接口索引集合" class="headerlink" title="5、类索引、父类索引与接口索引集合"></a>5、类索引、父类索引与接口索引集合</h4><p>类索引（this_class）和父类索引（super_class）都是一个u2类型的数据，而接口索引集合（interfaces）是一组u2类型的数据的集合，Class文件中由这三项数据来确定该类型的继承关系。</p>
<p>类索引用于确定这个类的全限定名。</p>
<p>父类索引用于确定这个类的父类的全限定名。</p>
<blockquote>
<p>由于Java语言不允许多重继承，所以父类索引只有一个，除了java.lang.Object之外，所有的Java类都有父类，因此除了java.lang.Object外，所有Java类的父类索引都不为0。</p>
</blockquote>
<p>接口索引集合就用来描述这个类实现了哪些接口，这些被实现的接口将按implements关键字（如果这个Class文件表示的是一个接口，则应当是extends关键字）后的接口顺序从左到右排列在接口索引集合中。</p>
<p>类索引、父类索引和接口索引集合都按顺序排列在访问标志之后，类索引和父类索引用两个u2类型的索引值表示，它们各自指向一个类型为CONSTANT_Class_info的类描述符常量，通过CONSTANT_Class_info类型的常量中的索引值可以找到定义在CONSTANT_Utf8_info类型的常量中的全限定名字符串。</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-class/jvm-6-class-ref-find.jpg" alt="类索引查找过程"></p>
<p>对于接口索引集合，入口的第一项u2类型的数据为接口计数器（interfaces_count），表示索引表的容量。如果该类没有实现任何接口，则该计数器值为0，后面接口的索引表不再占用任何字节。</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-class/jvm-6-class-demo6.png" alt="HelloWorld.class类索引、父类索引、接口索引集合"></p>
<p>从偏移地址0x000000D6开始的3个u2类型的值分别为0x0001、0x0003、0x0000，也就是类索引为1，父类索引为3，接口索引集合大小为0。</p>
<p>对于前面的字节码清单中：</p>
<pre class=" language-txt"><code class="language-txt">   #1 = Class              #2             //  test/com/xiaocai/klass/test/HelloWorld
   #2 = Utf8               test/com/xiaocai/klass/test/HelloWorld
   #3 = Class              #4             //  java/lang/Object
   #4 = Utf8               java/lang/Object</code></pre>
<h4 id="6、字段表集合"><a href="#6、字段表集合" class="headerlink" title="6、字段表集合"></a>6、字段表集合</h4><p>字段表（field_info）用于描述接口或者类中声明的变量。</p>
<p>Java语言中的”字段”（Field）包括类级变量以及实例级变量，但不包括在方法内部声明的局部变量。</p>
<blockquote>
<p>字段可以包括的修饰符有字段的作用域（public、private、protected修饰符）、是实例变量还是类变量（static修饰符）、可变性（final）、并发可见性（volatile修饰符，是否强制从主内存读写）、可否被序列化（transient修饰符）、字段数据类型（基本类型、对象、数组）、字段名称。</p>
<p>上述这些信息中，各个修饰符都是布尔值，要么有某个修饰符，要么没有，很适合使用标志位来表示。而字段叫做什么名字、字段被定义为什么数据类型，这些都是无法固定的，只能引用常量池中的常量来描述。</p>
</blockquote>
<p>字段表结构如下：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>名称</th>
<th>数量</th>
</tr>
</thead>
<tbody><tr>
<td>u2</td>
<td>access_flags</td>
<td>1</td>
</tr>
<tr>
<td>u2</td>
<td>name_index</td>
<td>1</td>
</tr>
<tr>
<td>u2</td>
<td>descriptor_index</td>
<td>1</td>
</tr>
<tr>
<td>u2</td>
<td>attribute_count</td>
<td>1</td>
</tr>
<tr>
<td>attribute_info</td>
<td>attributes</td>
<td>attribute_count</td>
</tr>
</tbody></table>
<p>字段修饰符放在access_flags项目中，它与类中的access_flags项目是非常类似的，都是一个u2的数据类型。</p>
<p>字段访问标志如下图：</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-class/jvm-6-class-field-accflag.jpg" alt="字段访问标志表"></p>
<p>语法规则的约束，</p>
<p>ACC_PUBLIC、ACC_PRIVATE、ACC_PROTECTED三个标志最多只能选择其一；</p>
<p>ACC_FINAL、ACC_VOLATILE不能同时选择。</p>
<p>接口之中的字段必须有ACC_PUBLIC、ACC_STATIC、ACC_FINAL标志。</p>
<p>字段表中跟随access_flags标志的是两项索引值：name_index和descriptor_index。它们都是对常量池项的引用，分别代表着字段的简单名称以及字段和方法的描述符。</p>
<p>相关概念：</p>
<blockquote>
<p><strong>全限定名</strong>：</p>
<p>如：test/com/xiaocai/klass/test/HelloWorld 就是HelloWorld的全限定名。把包路径的<code>&quot;.&quot;</code>换成<code>&quot;/&quot;</code>，使用时最后一般会加入一个”；”号表示全限定名结束。</p>
<p><strong>简单名称</strong>（name_index）：</p>
<p>就是指没有类型和参数修饰的方法或者字段名称，这个类中的add()方法和m字段的简单名称分别就是”add”和”m”。</p>
<p><strong>方法和字段的描述符</strong>（descriptor_index）：</p>
<p>描述符的作用是用来描述字段的数据类型、方法的参数列表（包括数量、类型以及顺序）和返回值。根据描述符规则，基本数据类型（byte、char、double、float、int、long、short、boolean）以及代表无返回值的void类型都用一个大写字符来表示，而对象类型则用字符L加对象的全限定名来表示。</p>
</blockquote>
<p>关于描述符标识字符含义如下图：</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-class/jvm-6-class-field-desc-index.jpg" alt="描述符标识字符含义"></p>
<p>对于数组类型，每一维度将使用一个前置的<code>&quot;[&quot;</code>字符来描述，如一个定义为<code>&quot;java.lang.String[][]&quot;</code>类型的二维数组将被记录成<code>&quot;[[Ljava/lang/String；&quot;</code>，一个整型数组<code>&quot;int[]&quot;</code>将被记录成<code>&quot;[I&quot;</code>。</p>
<blockquote>
<p>用描述符来描述方法时，按照先参数列表、后返回值的顺序描述，参数列表按照参数的严格顺序放在一组小括号<code>&quot;()&quot;</code>之内。如方法<code>void inc()</code>的描述符为<code>&quot;()V&quot;</code>，方法<code>java.lang.StringtoString()</code>的描述符为<code>&quot;()Ljava/lang/String；&quot;</code>，方法<code>int indexOf(char[]source，intsourceOffset，int sourceCount，char[]target，int targetOffset，int targetCount，intfromIndex)</code>的描述符为<code>&quot;([CII[CIII)I&quot;</code>。</p>
</blockquote>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-class/jvm-6-class-demo7.png" alt="HelloWorld.calss字段表"></p>
<p>字段表集合从地址0x000001DC开始，第一个u2类型的数据为容量计数器fields_count，如上图所示，其值为0x0001，说明这个类只有一个字段表数据。</p>
<p>接下来紧跟着容量计数器的是access_flags标志，值为0x0002，代表private修饰符的ACC_PRIVATE标志位为真（ACC_PRIVATE标志的值为0x0002），其他修饰符为假。代表字段名称的name_index的值为0x0005，从列出的字节码清单常量表中可查得第五项常量是一个CONSTANT_Utf8_info类型的字符串，其值为”m”，代表字段描述符的descriptor_index的值为0x0006，指向常量池的字符串”I”。根据这些信息，我们可以推断出原代码定义的字段为”private int m；”。</p>
<blockquote>
<p>字段表所包含的固定数据项目到descriptor_index为止就全部结束，在descrip-tor_index之后跟随着一个属性表集合，用于存储一些额外的信息，字段表可以在属性表中附加描述零至多项的额外信息。对于本例中的字段m，它的属性表计数器为0（也就是地址0x000001E4开始，值为0x0000），也就是没有需要额外描述的信息，但是，如果将字段m的声明改为”final static int m=123；”，那就可能会存在一项名称为ConstantValue的属性，其值指向常量123。</p>
</blockquote>
<h4 id="7、方法表集合"><a href="#7、方法表集合" class="headerlink" title="7、方法表集合"></a>7、方法表集合</h4><p>Class文件存储格式中对方法的描述与对字段的描述采用了几乎完全一致的方式，方法表的结构如同字段表一样，依次包括访问标志（access_flags）、名称索引（name_index）、描述符索引（descriptor_index）、属性表集合（attributes）几项。</p>
<p>方法表与字段表中的非常类似，仅在访问标志和属性表集合的可选项中有所区别。</p>
<p>方法表结构：</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-class/jvm-6-class-method-1.jpg" alt="方法表结构"></p>
<p>因为volatile关键字和transient关键字不能修饰方法，所以方法表的访问标志中没有了ACC_VOLATILE标志和ACC_TRANSIENT标志。与之相对，synchronized、native、strictfp和abstract关键字可以修饰方法，方法表的访问标志中也相应地增加了ACC_SYNCHRONIZED、ACC_NATIVE、ACC_STRICTFP和ACC_ABSTRACT标志。</p>
<p>方法访问标志及取值：</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-class/jvm-6-class-method-accflag.jpg" alt="方法访问标志及取值表"></p>
<p>在字节码清单中，add方法对应的字节码内容，存放在方法属性表集合中一个名为”Code”的属性里面，属性表作为Class文件格式中最具扩展性的一种数据项目。</p>
<p>Helloworld为例：</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-class/jvm-6-class-demo8.png" alt="HelloWorld.class方法表结构"></p>
<pre class=" language-txt"><code class="language-txt">0x0003 ----> methods_count
0x0001 ----> access_flags
0x0007 ----> name_index
0x0008 ----> descriptor_index
0x0001 ----> attributs_count
0x0009 ----> attribute_name_index</code></pre>
<p>方法表集合的入口地址为0x000001E6，第一个u2类型的数据（即计数器容量）的值为0x0003，代表集合中有3个方法，这3个方法为编译器添加的实例构造器<code>&lt;init&gt;</code>和源码中定义的方法add()、主方法main()。</p>
<p>第一个方法的访问标志值为0x0001，也就是只有ACC_PUBLIC标志为真，名称索引值为0x0007，查字节码清单的常量池得方法名为<code>&quot;&lt;init&gt;&quot;</code>，对应字节码清单片段如下<code>#7</code>（也可以看上面列出的字节码清单）：</p>
<pre><code>#7 = Utf8               &lt;init&gt;
#8 = Utf8               ()V
#9 = Utf8               Code</code></pre><p>描述符索引值为0x0008，对应常量为”()V”，属性表计数器attributes_count的值为0x0001，表示此方法的属性表集合有1项属性，属性名称的索引值为0x0009，对应常量为”Code”，说明此属性是方法的字节码描述。</p>
<blockquote>
<p>与字段表集合相对应地，如果父类方法在子类中没有被重写（Override），方法表集合中就不会出现来自父类的方法信息。但同样地，有可能会出现由编译器自动添加的方法，最常见的便是类构造器<code>&quot;&lt;clinit&gt;()&quot;</code>方法和实例构造器<code>&quot;&lt;init&gt;()&quot;</code>方法</p>
</blockquote>
<p>Java语言中，要重载（Overload）一个方法，除了要与原方法具有相同的简单名称之外，还要求必须拥有一个与原方法不同的特征签名。</p>
<blockquote>
<p>Java代码的方法特征签名只包括方法名称、参数顺序及参数类型。</p>
<p>字节码的特征签名除了包括方法名称、参数顺序及参数类型，还包括方法返回值以及受查异常表。</p>
</blockquote>
<p>特征签名是指一个方法中各个参数在常量池中的字段符号引用的集合，也正是因为返回值不会包含在特征签名之中，所以Java语言里面是无法仅仅依靠返回值的不同来对一个已有方法进行重载的。但是在Class文件格式之中，特征签名的范围明显要更大一些，只要描述符不是完全一致的两个方法就可以共存。也就是说，如果两个方法有相同的名称和特征签名，但返回值不同，那么也是可以合法共存于同一个Class文件中的。</p>
<h4 id="8、属性表集合"><a href="#8、属性表集合" class="headerlink" title="8、属性表集合"></a>8、属性表集合</h4><p>属性表（attribute_info）</p>
<p>Class文件、字段表、方法表都可以携带自己的属性表集合，以描述某些场景专有的信息。</p>
<p>特点：不要求严格的顺序，不能与已有属性名称重复</p>
<p>虚拟机规范预定义的属性：</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-class/jvm-6-class-attr1.jpg" alt="虚拟机规范预定义的属性"></p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-class/jvm-6-class-attr2.jpg" alt="虚拟机规范预定义的属性"></p>
<p>每一个属性，它的名称都要从常量池中引用一个CONSTANT_Utf8_info类型的常量来表示，而属性值的结构则是完全自定义的，只需要通过一个u4的长度属性去说明属性值所占用的位数即可。一个符合规则的属性表应该满足结j基本的属性表结构：</p>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th>名称</th>
<th>数量</th>
</tr>
</thead>
<tbody><tr>
<td align="center">u2</td>
<td>attribute_name_index</td>
<td>1</td>
</tr>
<tr>
<td align="center">u4</td>
<td>attribute_length</td>
<td>1</td>
</tr>
<tr>
<td align="center">u1</td>
<td>info</td>
<td>attribute_length</td>
</tr>
</tbody></table>
<h5 id="1）-Code属性"><a href="#1）-Code属性" class="headerlink" title="1） Code属性"></a>1） Code属性</h5><p>Java程序方法体中的代码经过Javac编译器处理之后，变为字节码指令存储在Code属性内。Code属性出现在方法表的属性集合之中，但并非所有的方法表都必须存在这个属性，譬如接口或者抽象类中的方法就不存在Code属性，如果方法表有Code属性存在，应该满足Code属性表基本结构：</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-class/jvm-6-class-attr-code.jpg" alt="Code属性表基本结构"></p>
<p>attribute_name_index是一项指向CONSTANT_Utf8_info型常量的索引，此常量值固定为”Code”，它代表了该属性的属性名称。</p>
<p>attribute_length指示了属性值的长度，由于属性名称索引与属性长度一共为6个字节，所以属性值的长度固定为整个属性表长度减去6个字节。</p>
<p>max_stack代表了操作数栈（Operand Stack）深度的最大值。在方法执行的任意时刻，操作数栈都不会超过这个深度。虚拟机运行的时候需要根据这个值来分配栈帧（Stack Frame）中的操作栈深度。</p>
<p>max_locals代表了局部变量表所需的存储空间。在这里，max_locals的单位是变量槽（Slot），变量槽是虚拟机为局部变量分配内存所使用的最小单位。</p>
<blockquote>
<p>对于byte、char、float、int、short、boolean和returnAddress等长度不超过32位的数据类型，每个局部变量占用一个变量槽，而double和long这两种64位的数据类型则需要两个变量槽来存放。方法参数（包括实例方法中的隐藏参数”this”）、显式异常处理程序的参数（Exception Handler Parameter，就是try-catch语句中catch块中所定义的异常）、方法体中定义的局部变量都需要依赖局部变量表来存放。注意，并不是在方法中用了多少个局部变量，就把这些局部变量所占变量槽数量之和作为max_locals的值，操作数栈和局部变量表直接决定一个该方法的栈帧所耗费的内存，不必要的操作数栈深度和变量槽数量会造成内存的浪费。Java虚拟机的做法是将局部变量表中的变量槽进行重用，当代码执行超出一个局部变量的作用域时，这个局部变量所占的变量槽可以被其他局部变量所使用，Javac编译器会根据变量的作用域来分配变量槽给各个变量使用，根据同时生存的最大局部变量数量和类型计算出max_locals的大小。</p>
</blockquote>
<p>code_length和code用来存储Java源程序编译后生成的字节码指令。code_length代表字节码长度，code是用于存储字节码指令的一系列字节流。</p>
<blockquote>
<p>字节码指令中，每个指令就是一个u1类型的单字节，当虚拟机读取到code中的一个字节码时，就可以对应找出这个字节码代表的是什么指令，并且可以知道这条指令后面是否需要跟随参数，以及后续的参数应当如何解析。我们知道一个u1数据类型的取值范围为0x00～0xFF，对应十进制的0～255，也就是一共可以表达256条指令。</p>
<p>目前，《Java虚拟机规范》已经定义了其中约200条编码值对应的指令含义，编码与指令之间的对应关系可查<a href="ee62cca5.html">《虚拟机字节码指令表》</a></p>
</blockquote>
<p>注意：</p>
<p>code_length，虽然它是一个u4类型的长度值，理论上最大值可以达到2的32次幂，但是《Java虚拟机规范》中明确限制了一个方法不允许超过65535条字节码指令，即它实际只使用了u2的长度，如果超过这个限制，Javac编译器就会拒绝编译。</p>
<p>Code属性是Class文件中最重要的一个属性。如果把一个Java程序中的信息分为代码（Code，方法体里面的Java代码）和元数据（Metadata，包括类、字段、方法定义及其他信息）两部分，那么在整个Class文件里，Code属性用于描述代码，所有的其他数据项目都用于描述元数据。</p>
<p>以HelloWorld.class为例：</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-class/jvm-6-class-demo9.png" alt="Code属性表基本结构"></p>
<pre class=" language-txt"><code class="language-txt">0x0001 ----->操作数栈  max_stack
0x0001 ----->本地变量表 max_lcoals
0x0005 ----> 字节码区域长度 code_lenth
2A B7 000A B1 </code></pre>
<p>操作数栈的最大深度和本地变量表的容量都为0x0001，字节码区域所占空间的长度为0x0005。</p>
<blockquote>
<p>虚拟机读取到字节码区域的长度后，按照顺序依次读入紧随的5个字节，并根据字节码指令表翻译出所对应的字节码指令。翻译”2A B7000A B1”的过程为：</p>
<p>（1）读入2A，查字节码指令表得0x2A对应的指令为aload_0，这个指令的含义是将第0个变量槽中为reference类型的本地变量推送到操作数栈顶。</p>
<p>（2）读入B7，查字节码指令表得0xB7对应的指令为invokespecial，这条指令的作用是以栈顶的reference类型的数据所指向的对象作为方法接收者，调用此对象的实例构造器方法、private方法或者它的父类的方法。这个方法有一个u2类型的参数说明具体调用哪一个方法，它指向常量池中的一个CONSTANT_Methodref_info类型常量，即此方法的符号引用。</p>
<p>（3）读入000A，这是invokespecial指令的参数，代表一个符号引用，查常量池得0x000A对应的常量为实例构造器<code>&quot;&lt;init&gt;()&quot;</code>方法的符号引用。</p>
<p>（4）读入B1，查字节码指令表得0xB1对应的指令为return，含义是从方法的返回，并且返回值为void。这条指令执行后，当前方法正常结束。</p>
</blockquote>
<p>在边看边印证过程中，我一开始没理解”查常量池得0x000A对应的常量”应该怎么查，突然发现0x000A对应的十进制是10，也就是常量池的第10个即：</p>
<p>#10 = Methodref          #3.#11         //  java/lang/Object.<code>&quot;&lt;init&gt;&quot;</code>:()V</p>
<p>仔细看这一行，其实就是实例构造器<code>&quot;&lt;init&gt;()&quot;</code>方法的符号引用。</p>
<p>字节码的执行过程中的数据交换、方法调用等操作都是基于栈（操作数栈）。</p>
<p>字节码清单中：</p>
<pre><code>//常量池省略....
{
  public test.com.xiaocai.klass.test.HelloWorld();
    flags: ACC_PUBLIC

    Code:
      stack=1, locals=1, args_size=1
         0: aload_0       
         1: invokespecial #10                 // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V
         4: return        
      LineNumberTable:
        line 3: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
               0       5     0  this   Ltest/com/xiaocai/klass/test/HelloWorld;

  public int add();
    flags: ACC_PUBLIC

    Code:
      stack=2, locals=1, args_size=1
         0: aload_0       
         1: getfield      #18                 // Field m:I
         4: iconst_1      
         5: iadd          
         6: ireturn       
      LineNumberTable:
        line 8: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
               0       7     0  this   Ltest/com/xiaocai/klass/test/HelloWorld;

  public static void main(java.lang.String[]);
    flags: ACC_PUBLIC, ACC_STATIC

    Code:
      stack=2, locals=1, args_size=1
         0: getstatic     #22                 // Field java/lang/System.out:Ljava/io/PrintStream;
         3: ldc           #28                 // String Hello World!
         5: invokevirtual #30                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
         8: return        
      LineNumberTable:
        line 13: 0
        line 15: 8
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
               0       9     0  args   [Ljava/lang/String;
}</code></pre><p>“Args_size”的值为1的原因是因为this 关键字的访问机制。</p>
<blockquote>
<p>在任何实例方法里面，都可以通过”this”关键字访问到此方法所属的对象。这个访问机制对Java程序的编写很重要，而它的实现非常简单，仅仅是通过在Javac编译器编译的时候把对this关键字的访问转变为对一个普通方法参数的访问，然后在虚拟机调用实例方法时自动传入此参数而已。因此在实例方法的局部变量表中至少会存在一个指向当前对象实例的局部变量，局部变量表中也会预留出第一个变量槽位来存放对象实例的引用，所以实例方法参数值从1开始计算。</p>
<p>这个处理只对实例方法有效，如果代码中的add()方法被声明为static，那Args_size就不会等于1而是等于0。</p>
</blockquote>
<p>在字节码指令之后的是这个方法的显式异常处理表（简称异常表）集合，异常表对于Code属性来说并不是必须存在的。</p>
<p>如果存在异常表，那它的格式应如表6-16所示，包含四个字段：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>名称</th>
<th>数量</th>
</tr>
</thead>
<tbody><tr>
<td>u2</td>
<td>start_pc</td>
<td>1</td>
</tr>
<tr>
<td>u2</td>
<td>end_pc</td>
<td>1</td>
</tr>
<tr>
<td>u2</td>
<td>handler_pc</td>
<td>1</td>
</tr>
<tr>
<td>u2</td>
<td>catch_typr</td>
<td>1</td>
</tr>
</tbody></table>
<p>这些字段的含义为：</p>
<p>如果当字节码从第start_pc行到第end_pc行之间（不含第end_pc行）出现了类型为catch_type或者其子类的异常（catch_type为指向一个CONSTANT_Class_info型常量的索引），则转到第handler_pc行继续处理。当catch_type的值为0时，代表任意异常情况都需要转到handler_pc处进行处理。</p>
<blockquote>
<p>异常表实际上是Java代码的一部分，尽管字节码中有最初为处理异常而设计的跳转指令，但《Java虚拟机规范》中明确要求Java语言的编译器应当选择使用异常表而不是通过跳转指令来实现Java异常及finally处理机制</p>
</blockquote>
<p>定义try-catch-finally的源文件长这样：</p>
<pre><code>package test.com.xiaocai.klass.test;

public class TestCp {

    public int getNumber() {
        int x;
        try {
            x = 1;
            return x;
        } catch (Exception e) {
            x = 2;
            return x;
        } finally {
            x = 3;
        }
    }
}</code></pre><p>异常字节码清单：</p>
<pre class=" language-txt"><code class="language-txt">// 头部信息省略
{
  public test.com.xiaocai.klass.test.TestCp();
    flags: ACC_PUBLIC

    Code:
      stack=1, locals=1, args_size=1
         0: aload_0       
         1: invokespecial #8                  // Method java/lang/Object."<init>":()V
         4: return        
      LineNumberTable:
        line 3: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
               0       5     0  this   Ltest/com/xiaocai/klass/test/TestCp;

  public int getNumber();
    flags: ACC_PUBLIC

    Code:
      stack=1, locals=5, args_size=1
         0: iconst_1      //try 里的x=1
         1: istore_1      
         2: iload_1       //保存x到returnValue x=1
         3: istore        4
         5: iconst_3      
         6: istore_1      
         7: iload         4 //将returnValue中的值放到栈顶，准备给 ireturn 返回
         9: ireturn       
        10: astore_2       //给catch中的定义的Exception e赋值，存储在变量槽2中
        11: iconst_2       //catch 里的x=2
        12: istore_1      
        13: iload_1       //保存x到returnValue中，此时x=2
        14: istore        4
        16: iconst_3       //finally 里的x=3
        17: istore_1      
        18: iload         4  //将returnValue中的值放到栈顶，准备给 ireturn 返回
        20: ireturn       
        21: astore_3      //如果出现了不属于java.lang.Exception及其子类的异常会走到这里
        22: iconst_3      //finaly快中的x=3
        23: istore_1      
        24: aload_3       //将异常放到栈顶
        25: athrow        //抛出异常
      Exception table:
         from    to  target type
             0     5    10   Class java/lang/Exception
             0     5    21   any
            10    16    21   any
     // 其他字节码省略
}</code></pre>
<p>完整字节码清单文件：<a href="/images/jvm-class/TestCp.TXT">TestCp.TXT</a></p>
<p>字节码清单中异常表<code>Exception table</code>对应三条可能出现的代码执行路径。</p>
<p>（a）如果try语句块中出现属于Exception或其子类的异常，转到catch语句块处理；</p>
<p>（b）如果try语句块中出现不属于Exception或其子类的异常，转到finally语句块处理；</p>
<p>（c）如果catch语句块中出现任何异常，转到finally语句块处理。</p>
<blockquote>
<p>字节码中第0～4行所做的操作就是将整数1赋值给变量x，并且将此时x的值复制一份副本到最后一个本地变量表的变量槽中。</p>
<p>这个变量槽里面的值在ireturn指令执行前将会被重新读到操作栈顶，作为方法返回值使用。假如给变量起个名字：returnValue。</p>
<p>如果这时候没有出现异常，则会继续走到第5～9行，将变量x赋值为3，然后将之前保存在returnValue中的整数1读入到操作栈顶，最后ireturn指令会以int形式返回操作栈顶中的值，方法结束。</p>
<p>如果出现了异常，PC寄存器指针转到第10行，第10～20行所做的事情是将2赋值给变量x，然后将变量x此时的值赋给returnValue，最后再将变量x的值改为3。方法返回前同样将returnValue中保留的整数2读到了操作栈顶。从第21行开始的代码，作用是将变量x的值赋为3，并将栈顶的异常抛出，方法结束。</p>
</blockquote>
<h5 id="2）-Exceptions属性"><a href="#2）-Exceptions属性" class="headerlink" title="2） Exceptions属性"></a>2） Exceptions属性</h5><p>Exceptions属性是在方法表中与Code属性平级的一项属性。</p>
<p>Exceptions属性的作用是列举出方法中可能抛出的受查异常（CheckedExcepitons），也就是方法描述时在throws关键字后面列举的异常。</p>
<p>Exceptions属性结构：</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-class/jvm-6-class-Exceptions.jpg" alt="Exceptions属性结构"></p>
<p>number_of_exceptions项表示方法可能抛出number_of_exceptions种受查异常，每一种受查异常使用一个exception_index_table项表示；exception_index_table是一个指向常量池中CONSTANT_Class_info型常量的索引，代表了该受查异常的类型。</p>
<h5 id="3）LineNumberTable属性"><a href="#3）LineNumberTable属性" class="headerlink" title="3）LineNumberTable属性"></a>3）LineNumberTable属性</h5><p>LineNumberTable属性用于描述Java源码行号与字节码行号（字节码的偏移量）之间的对应关系。它并不是运行时必需的属性，但默认会生成到Class文件之中，可以在Javac中使用-g：none或-g：lines选项来取消或要求生成这项信息。</p>
<p>如果选择不生成LineNumberTable属性，对程序运行产生的最主要影响就是当抛出异常时，堆栈中将不会显示出错的行号，并且在调试程序的时候，也无法按照源码行来设置断点。</p>
<p>LineNumberTable属性结构：</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-class/jvm-6-class-lineNumTable.jpg" alt="LineNumberTable属性结构"></p>
<p>line_number_table是一个数量为line_number_table_length、类型为line_number_info的集合，line_number_info表包含start_pc和line_number两个u2类型的数据项，前者是字节码行号，后者是Java源码行号。</p>
<h5 id="4）LocalVariableTable"><a href="#4）LocalVariableTable" class="headerlink" title="4）LocalVariableTable"></a>4）LocalVariableTable</h5><p>LocalVariableTable及LocalVariableTypeTable属性。</p>
<p>LocalVariableTable属性用于描述栈帧中局部变量表的变量与Java源码中定义的变量之间的关系，它也不是运行时必需的属性，但默认会生成到Class文件之中，可以在Javac中使用-g：none或-g：vars选项来取消或要求生成这项信息。</p>
<p>如果没有生成这项属性，最大的影响就是当其他人引用这个方法时，所有的参数名称都将会丢失，譬如IDE将会使用诸如arg0、arg1之类的占位符代替原有的参数名，这对程序运行没有影响，但是会对代码编写带来较大不便，而且在调试期间无法根据参数名称从上下文中获得参数值。</p>
<p>LocalVariableTable属性的结构：</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-class/jvm-6-class-LocalVarTable.jpg" alt="LocalVariableTable属性结构"></p>
<p>其中local_variable_info项目代表了一个栈帧与源码中的局部变量的关联，local_variable_info结构如下：</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-class/jvm-6-class-LocalVarInfo.jpg" alt="LocalVariableTable属性结构"></p>
<p>start_pc和length属性分别代表了这个局部变量的生命周期开始的字节码偏移量及其作用范围覆盖的长度，两者结合起来就是这个局部变量在字节码之中的作用域范围。</p>
<p>name_index和descriptor_index都是指向常量池中CONSTANT_Utf8_info型常量的索引，分别代表了局部变量的名称以及这个局部变量的描述符。</p>
<p>index是这个局部变量在栈帧的局部变量表中变量槽的位置。当这个变量数据类型是64位类型时（double和long），它占用的变量槽为index和index+1两个。</p>
<blockquote>
<p>在JDK 5引入泛型之后，LocalVariableTable属性增加了一个”姐妹属性”——LocalVariableTypeTable。这个新增的属性结构与LocalVariableTable非常相似，仅仅是把记录的字段描述符的descriptor_index替换成了字段的特征签名（Signature）。对于非泛型类型来说，描述符和特征签名能描述的信息是能吻合一致的，但是泛型引入之后，由于描述符中泛型的参数化类型被擦除掉[插图]，描述符就不能准确描述泛型类型了。因此出现了LocalVariableTypeTable属性，使用字段的特征签名来完成泛型的描述。</p>
</blockquote>
<h5 id="5）SourceFile"><a href="#5）SourceFile" class="headerlink" title="5）SourceFile"></a>5）SourceFile</h5><p>SourceFile及SourceDebugExtension属性。</p>
<p>SourceFile属性用于记录生成这个Class文件的源码文件名称。这个属性是一个定长的属性。</p>
<p>这个属性也是可选的，可以使用Javac的-g：none或-g：source选项来关闭或要求生成这项信息。在Java中，对于大多数的类来说，类名和文件名是一致的，但是有一些特殊情况（如内部类）例外。如果不生成这项属性，当抛出异常时，堆栈中将不会显示出错代码所属的文件名。</p>
<p>SourceFile属性结构：</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-class/jvm-6-class-sourceFile.jpg" alt="SourceFile属性结构"></p>
<p>sourcefile_index数据项是指向常量池中CONSTANT_Utf8_info型常量的索引，常量值是源码文件的文件名。</p>
<blockquote>
<p>在JDK 5时，新增了SourceDebugExtension属性用于存储额外的代码调试信息。典型的场景是在进行JSP文件调试时，无法通过Java堆栈来定位到JSP文件的行号。JSR 45提案为这些非Java语言编写，却需要编译成字节码并运行在Java虚拟机中的程序提供了一个进行调试的标准机制，使用SourceDebugExtension属性就可以用于存储这个标准所新加入的调试信息，譬如让程序员能够快速从异常堆栈中定位出原始JSP中出现问题的行号。</p>
</blockquote>
<p>SourceDebugExtension属性结构：</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-class/jvm-6-class-SourceDebugExtension.jpg" alt="SourceFile属性结构"></p>
<p>其中debug_extension存储的就是额外的调试信息，是一组通过变长UTF-8格式来表示的字符串。一个类中最多只允许存在一个SourceDebugExtension属性。</p>
<p>6）ConstantValue属性</p>
<p>ConstantValue属性的作用是通知虚拟机自动为静态变量赋值。只有被static关键字修饰的变量（类变量）才可以使用这项属性。</p>
<p>对非static类型的变量（也就是实例变量）的赋值是在实例构造器<code>&lt;init&gt;()</code>方法中进行的；而对于类变量，则有两种方式可以选择：在类构造器<code>&lt;clinit&gt;()</code>方法中或者使用ConstantValue属性。</p>
<blockquote>
<p>目前Oracle公司实现的Javac编译器的选择是，如果同时使用final和static来修饰一个变量（本质是”常量”），并且这个变量的数据类型是基本类型或者java.lang.String的话，就将会生成ConstantValue属性来进行初始化；如果这个变量没有被final修饰，或者并非基本类型及字符串，则将会选择在<code>&lt;clinit&gt;()</code>方法中进行初始化。</p>
</blockquote>
<p>《Java虚拟机规范》中并没有强制要求final修饰字段必须设置ACC_FINAL标志，要求有ConstantValue属性的字段必须设置ACC_STATIC标志而已，对final关键字的要求是Javac编译器自己加入的限制。</p>
<p>ConstantValue属性结构：</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-class/jvm-6-class-ConstantValue.jpg" alt="ConstantValue属性结构"></p>
<p>ConstantValue属性是一个定长属性，它的attribute_length数据项值必须固定为2。constantvalue_index数据项代表了常量池中一个字面量常量的引用，根据字段类型的不同，字面量可以是CONSTANT_Long_info、CONSTANT_Float_info、CONSTANT_Double_info、CONSTANT_Integer_info和CONSTANT_String_info常量中的一种。</p>
<h5 id="7）InnerClasses属性"><a href="#7）InnerClasses属性" class="headerlink" title="7）InnerClasses属性"></a>7）InnerClasses属性</h5><p>InnerClasses属性用于记录内部类与宿主类之间的关联。如果一个类中定义了内部类，那编译器将会为它以及它所包含的内部类生成InnerClasses属性。</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-class/jvm-6-class-InnerClasses.jpg" alt="InnerClasses属性结构"></p>
<p>数据项number_of_classes代表需要记录多少个内部类信息，每一个内部类的信息都由一个inner_classes_info表进行描述。</p>
<p> inner_classes_info表的结构：</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-class/jvm-6-class-inner_classes_info.jpg" alt="inner_classes_info表结构"></p>
<p>inner_class_info_index和outer_class_info_index都是指向常量池中CONSTANT_Class_info型常量的索引，分别代表了内部类和宿主类的符号引用。</p>
<p>inner_name_index是指向常量池中CONSTANT_Utf8_info型常量的索引，代表这个内部类的名称，如果是匿名内部类，这项值为0。</p>
<p>inner_class_access_flags是内部类的访问标志，类似于类的access_flags，它的取值范围如表：</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-class/jvm-6-inner_class_access_flags.jpg" alt="inner_class_access_flags表结构"></p>
<h5 id="8）Deprecated及Synthetic属性"><a href="#8）Deprecated及Synthetic属性" class="headerlink" title="8）Deprecated及Synthetic属性"></a>8）Deprecated及Synthetic属性</h5><p><code>Deprecated</code>和<code>Synthetic</code>两个属性都属于标志类型的布尔属性，只存在有和没有的区别，没有属性值的概念。<code>Deprecated</code>属性用于表示某个类、字段或者方法，已经被程序作者定为不再推荐使用，它可以通过代码中使用<code>&quot;@deprecated&quot;</code>注解进行设置。</p>
<p>Synthetic属性代表此字段或者方法并不是由Java源码直接产生的，而是由编译器自行添加的，在JDK 5之后，标识一个类、字段或者方法是编译器自动产生的，也可以设置它们访问标志中的<code>ACC_SYNTHETIC</code>标志位。编译器通过生成一些在源代码中不存在的<code>Synthetic</code>方法、字段甚至是整个类的方式，实现了越权访问（越过<code>private</code>修饰器）或其他绕开了语言限制的功能，这可以算是一种早期优化的技巧，其中最典型的例子就是枚举类中自动生成的枚举元素数组和嵌套类的桥接方法（Bridge Method）。</p>
<p>所有由不属于用户代码产生的类、方法及字段都应当至少设置Synthetic属性或者ACC_SYNTHETIC标志位中的一项，唯一的例外是实例构造器<code>&quot;&lt;init&gt;()&quot;</code>方法和类构造器<code>&quot;&lt;clinit&gt;()&quot;</code>方法。</p>
<p>Deprecated和Synthetic属性的结构:</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>名称</th>
<th>数量</th>
</tr>
</thead>
<tbody><tr>
<td>u2</td>
<td>attribute_name_index</td>
<td>1</td>
</tr>
<tr>
<td>u4</td>
<td>attribute_length</td>
<td>1</td>
</tr>
</tbody></table>
<p>其中attribute_length数据项的值必须为0x00000000，因为没有任何属性值需要设置。</p>
<h5 id="9-StackMapTable属性"><a href="#9-StackMapTable属性" class="headerlink" title="9)StackMapTable属性"></a>9)StackMapTable属性</h5><p>StackMapTable属性在JDK 6增加到Class文件规范之中，它是一个相当复杂的变长属性，位于Code属性的属性表中。</p>
<p>StackMapTable属性会在虚拟机类加载的字节码验证阶段被新类型检查验证器（Type Checker）使用，目的在于代替以前比较消耗性能的基于数据流分析的类型推导验证器。</p>
<p>StackMapTable属性中包含零至多个栈映射帧（Stack Map Frame），每个栈映射帧都显式或隐式地代表了一个字节码偏移量，用于表示执行到该字节码时局部变量表和操作数栈的验证类型。类型检查验证器会通过检查目标方法的局部变量和操作数栈所需要的类型来确定一段字节码指令是否符合逻辑约束。</p>
<p>StackMapTable属性结构:</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>名称</th>
<th>数量</th>
</tr>
</thead>
<tbody><tr>
<td>u2</td>
<td>attribute_name_index</td>
<td>1</td>
</tr>
<tr>
<td>u4</td>
<td>attribute_length</td>
<td>1</td>
</tr>
<tr>
<td>u2</td>
<td>number_of_entries</td>
<td>1</td>
</tr>
<tr>
<td>stack_map_frame</td>
<td>stack_map_frame_entries</td>
<td>number_of_entries</td>
</tr>
</tbody></table>
<blockquote>
<p>在Java SE 7版之后的《Java虚拟机规范》中，明确规定对于版本号大于或等于50.0的Class文件，如果方法的Code属性中没有附带StackMapTable属性，那就意味着它带有一个隐式的StackMap属性，这个StackMap属性的作用等同于number_of_entries值为0的StackMapTable属性。一个方法的Code属性最多只能有一个StackMapTable属性，否则将抛出ClassFormatError异常。</p>
</blockquote>
<h5 id="10-Signature属性"><a href="#10-Signature属性" class="headerlink" title="10)Signature属性"></a>10)Signature属性</h5><p>Signature属性在JDK 5增加到Class文件规范之中，它是一个可选的定长属性，可以出现于类、字段表和方法表结构的属性表中。之后，任何类、接口、初始化方法或成员的泛型签名如果包含了类型变量（Type Variable）或参数化类型（Parameterized Type），则Signature属性会为它记录泛型签名信息。</p>
<blockquote>
<p>因为Java语言的泛型采用的是擦除法实现的伪泛型，字节码（Code属性）中所有的泛型信息编译（类型变量、参数化类型）在编译之后都通通被擦除掉。使用擦除法的好处是实现简单（主要修改Javac编译器，虚拟机内部只做了很少的改动）、非常容易实现Backport，运行期也能够节省一些类型所占的内存空间。但坏处是运行期就无法像C#等有真泛型支持的语言那样，将泛型类型与用户定义的普通类型同等对待，例如运行期做反射时无法获得泛型信息。Signature属性就是为了弥补这个缺陷而增设的，现在Java的反射API能够获取的泛型类型，最终的数据来源也是这个属性。</p>
</blockquote>
<p>Signature属性结构：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>名称</th>
<th>数量</th>
</tr>
</thead>
<tbody><tr>
<td>u2</td>
<td>attribute_name_index</td>
<td>1</td>
</tr>
<tr>
<td>u4</td>
<td>attribute_length</td>
<td>1</td>
</tr>
<tr>
<td>u2</td>
<td>signature_index</td>
<td>1</td>
</tr>
</tbody></table>
<p>其中signature_index项的值必须是一个对常量池的有效索引。</p>
<p>常量池在该索引处的项必须是CONSTANT_Utf8_info结构，表示类签名或方法类型签名或字段类型签名。如果当前的Signature属性是类文件的属性，则这个结构表示类签名，如果当前的Signature属性是方法表的属性，则这个结构表示方法类型签名，如果当前Signature属性是字段表的属性，则这个结构表示字段类型签名。</p>
<h5 id="11-BootstrapMethods属性"><a href="#11-BootstrapMethods属性" class="headerlink" title="11)BootstrapMethods属性"></a>11)BootstrapMethods属性</h5><p>BootstrapMethods属性在JDK 7时增加到Class文件规范之中，它是一个复杂的变长属性，位于类文件的属性表中。这个属性用于保存invokedynamic指令引用的引导方法限定符。</p>
<blockquote>
<p>根据《Java虚拟机规范》（从Java SE 7版起）的规定，如果某个类文件结构的常量池中曾经出现过CONSTANT_InvokeDynamic_info类型的常量，那么这个类文件的属性表中必须存在一个明确的BootstrapMethods属性，另外，即使CONSTANT_InvokeDynamic_info类型的常量在常量池中出现过多次，类文件的属性表中最多也只能有一个BootstrapMethods属性。BootstrapMethods属性和JSR-292中的InvokeDynamic指令和java.lang.Invoke包关系非常密切</p>
</blockquote>
<p>JDK 8中Lambda表达式和接口默认方法的出现，InvokeDynamic指令有了使用发挥的环境。</p>
<p>BootstrapMethods属性结构：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>名称</th>
<th>数量</th>
</tr>
</thead>
<tbody><tr>
<td>u2</td>
<td>attribute_name_index</td>
<td>1</td>
</tr>
<tr>
<td>u4</td>
<td>attribute_length</td>
<td>1</td>
</tr>
<tr>
<td>u2</td>
<td>num_bootstrap_methods</td>
<td></td>
</tr>
<tr>
<td>bootstrap_method</td>
<td>bootstrap_methods</td>
<td>num_bootstrap_methods</td>
</tr>
</tbody></table>
<p>引用到的bootstrap_method结构：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>名称</th>
<th>数量</th>
</tr>
</thead>
<tbody><tr>
<td>u2</td>
<td>bootstrap_method_ref</td>
<td>1</td>
</tr>
<tr>
<td>u2</td>
<td>num_bootstrap_arguments</td>
<td>1</td>
</tr>
<tr>
<td>u2</td>
<td>bootstrap_arguments</td>
<td>num_bootstrap_arguments</td>
</tr>
</tbody></table>
<p>BootstrapMethods属性里，num_bootstrap_methods项的值给出了bootstrap_methods[]数组中的引导方法限定符的数量。而bootstrap_methods[]数组的每个成员包含了一个指向常量池CONSTANT_MethodHandle结构的索引值，它代表了一个引导方法。还包含了这个引导方法静态参数的序列（可能为空）。</p>
<p>bootstrap_methods[]数组的每个成员必须包含以下三项内容：</p>
<p>（a）bootstrap_method_ref：bootstrap_method_ref项的值必须是一个对常量池的有效索引。常量池在该索引处的值必须是一个CONSTANT_MethodHandle_info结构。</p>
<p>（b）num_bootstrap_arguments：num_bootstrap_arguments项的值给出了bootstrap_argu-ments[]数组成员的数量。</p>
<p>（c）bootstrap_arguments[]：bootstrap_arguments[]数组的每个成员必须是一个对常量池的有效索引。常量池在该索引出必须是下列结构之一：CONSTANT_String_info、CONSTANT_Class_info、CONSTANT_Integer_info、CONSTANT_Long_info、CONSTANT_Float_info、CONSTANT_Double_info、CONSTANT_MethodHandle_info或CONSTANT_MethodType_info。</p>
<h5 id="12-MethodParameters属性"><a href="#12-MethodParameters属性" class="headerlink" title="12)MethodParameters属性"></a>12)MethodParameters属性</h5><p>MethodParameters是在JDK 8时新加入到Class文件格式中的，它是一个用在方法表中的变长属性。MethodParameters的作用是记录方法的各个形参名称和信息。</p>
<p>JDK 8中新增的这个属性，使得编译器可以（编译时加上-parameters参数）将方法名称也写进Class文件中，而且MethodParameters是方法表的属性，与Code属性平级的，可以运行时通过反射API获取。</p>
<p>MethodParameters属性结构:</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>名称</th>
<th>数量</th>
</tr>
</thead>
<tbody><tr>
<td>u2</td>
<td>attribute_name_index</td>
<td>1</td>
</tr>
<tr>
<td>u4</td>
<td>attribute_length</td>
<td>1</td>
</tr>
<tr>
<td>u1</td>
<td>parameters_count</td>
<td>1</td>
</tr>
<tr>
<td>parameter</td>
<td>parameters</td>
<td>parameters_count</td>
</tr>
</tbody></table>
<p>引用到的parameter属性结构:</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>名称</th>
<th>数量</th>
</tr>
</thead>
<tbody><tr>
<td>u2</td>
<td>name_index</td>
<td>1</td>
</tr>
<tr>
<td>u2</td>
<td>access_flags</td>
<td>1</td>
</tr>
</tbody></table>
<p>name_index是一个指向常量池CONSTANT_Utf8_info常量的索引值，代表了该参数的名称。</p>
<p>access_flags是参数的状态指示器，它可以包含以下三种状态中的一种或多种：</p>
<p>（a）0x0010（ACC_FINAL）：表示该参数被final修饰。</p>
<p>（b）0x1000（ACC_SYNTHETIC）：表示该参数并未出现在源文件中，是编译器自动生成的。</p>
<p>（c）0x8000（ACC_MANDATED）：表示该参数是在源文件中隐式定义的。Java语言中的典型场景是this关键字。</p>
<h5 id="13-模块化相关属性"><a href="#13-模块化相关属性" class="headerlink" title="13)模块化相关属性"></a>13)模块化相关属性</h5><p>JDK 9的一个重量级功能是Java的模块化功能，因为模块描述文件（module-info.java）最终是要编译成一个独立的Class文件来存储的，所以，Class文件格式也扩展了Module、ModulePackages和ModuleMainClass三个属性用于支持Java模块化相关功能。</p>
<p>Module属性是一个非常复杂的变长属性，除了表示该模块的名称、版本、标志信息以外，还存储了这个模块requires、exports、opens、uses和provides定义的全部内容。</p>
<p>Module属性结构:</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-class/jvm-6-class-Module.jpg" alt="Module属性结构"></p>
<p>module_name_index是一个指向常量池CONSTANT_Utf8_info常量的索引值，代表了该模块的名称。</p>
<p>module_flags是模块的状态指示器，它可以包含以下三种状态中的一种或多种：</p>
<p>（a）0x0020（ACC_OPEN）：表示该模块是开放的。</p>
<p>（b）0x1000（ACC_SYNTHETIC）：表示该模块并未出现在源文件中，是编译器自动生成的。</p>
<p>（c）0x8000（ACC_MANDATED）：表示该模块是在源文件中隐式定义的。</p>
<p>module_version_index是一个指向常量池CONSTANT_Utf8_info常量的索引值，代表了该模块的版本号。</p>
<p>后面的几个属性分别记录了模块的requires、exports、opens、uses和provides定义，结构基本相似，如</p>
<p>exports属性结构：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>名称</th>
<th>数量</th>
</tr>
</thead>
<tbody><tr>
<td>u2</td>
<td>exports_index</td>
<td>1</td>
</tr>
<tr>
<td>u2</td>
<td>exports_flags</td>
<td>1</td>
</tr>
<tr>
<td>u2</td>
<td>exports_to_count</td>
<td>1</td>
</tr>
<tr>
<td>export</td>
<td>exports_to_index</td>
<td>exports_to_count</td>
</tr>
</tbody></table>
<p>exports属性的每一元素都代表一个被模块所导出的包。</p>
<p>exports_index是一个指向常量池CONSTANT_Package_info常量的索引值，代表了被该模块导出的包。</p>
<p>exports_flags是该导出包的状态指示器，它可以包含以下两种状态中的一种或多种：</p>
<p>（a）0x1000（ACC_SYNTHETIC）：表示该导出包并未出现在源文件中，是编译器自动生成的。</p>
<p>（b）0x8000（ACC_MANDATED）：表示该导出包是在源文件中隐式定义的。</p>
<p>exports_to_count是该导出包的限定计数器，如果这个计数器为零，这说明该导出包是无限定的（Unqualified），即完全开放的，任何其他模块都可以访问该包中所有内容。如果该计数器不为零，则后面的exports_to_index是以计数器值为长度的数组，每个数组元素都是一个指向常量池中CONSTANT_Module_info常量的索引值，代表着只有在这个数组范围内的模块才被允许访问该导出包的内容。</p>
<p>ModulePackages是另一个用于支持Java模块化的变长属性，它用于描述该模块中所有的包，不论是不是被export或者open的。</p>
<p>ModulePackages属性结构：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>名称</th>
<th>数量</th>
</tr>
</thead>
<tbody><tr>
<td>u2</td>
<td>attribute_name_index</td>
<td>1</td>
</tr>
<tr>
<td>u4</td>
<td>attribute_length</td>
<td>1</td>
</tr>
<tr>
<td>u2</td>
<td>package_count</td>
<td>1</td>
</tr>
<tr>
<td>u2</td>
<td>package_index</td>
<td>package_count</td>
</tr>
</tbody></table>
<p>package_count是package_index数组的计数器，package_index中每个元素都是指向常量池CONSTANT_Package_info常量的索引值，代表了当前模块中的一个包。</p>
<p>ModuleMainClass属性是一个定长属性，用于确定该模块的主类（Main Class）。</p>
<p>ModuleMainClass属性结构：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>名称</th>
<th>数量</th>
</tr>
</thead>
<tbody><tr>
<td>u2</td>
<td>attribute_name_index</td>
<td>1</td>
</tr>
<tr>
<td>u4</td>
<td>attribute_length</td>
<td>1</td>
</tr>
<tr>
<td>u2</td>
<td>main_class_index</td>
<td>1</td>
</tr>
</tbody></table>
<p>main_class_index是一个指向常量池CONSTANT_Class_info常量的索引值，代表了该模块的主类。</p>
<h5 id="14-运行时注解相关属性"><a href="#14-运行时注解相关属性" class="headerlink" title="14)运行时注解相关属性"></a>14)运行时注解相关属性</h5><p>JDK 5时提供了对注解（Annotation）的支持。</p>
<p>为了存储源码中注解信息，Class文件同步增加了<code>RuntimeVisibleAnnotations</code>、<code>RuntimeInvisibleAnnotations</code>、<code>RuntimeVisibleParameterAnnotations</code>和<code>RuntimeInvisibleParameter-Annotations</code>四个属性。到了JDK 8时期，进一步加强了Java语言的注解使用范围，又新增类型注解（JSR 308），所以Class文件中也同步增加了<code>RuntimeVisibleTypeAnnotations</code>和<code>RuntimeInvisibleTypeAnnotations</code>两个属性。</p>
<p>这6个属性结构功能都比较相似：</p>
<p>RuntimeVisibleAnnotations是一个变长属性，它记录了类、字段或方法的声明上记录运行时可见注解，当我们使用反射API来获取类、字段或方法上的注解时，返回值就是通过这个属性来取到的。</p>
<p>RuntimeVisibleAnnotations属性结构：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>名称</th>
<th>数量</th>
</tr>
</thead>
<tbody><tr>
<td>u2</td>
<td>attribute_name_index</td>
<td>1</td>
</tr>
<tr>
<td>u4</td>
<td>attribute_length</td>
<td>1</td>
</tr>
<tr>
<td>u2</td>
<td>num_annotations</td>
<td>1</td>
</tr>
<tr>
<td>annotation</td>
<td>annotations</td>
<td>num_annotations</td>
</tr>
</tbody></table>
<p>num_annotations是annotations数组的计数器，annotations中每个元素都代表了一个运行时可见的注解，注解在Class文件中以annotation结构来存储</p>
<p>annotation属性结构</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>名称</th>
<th>数量</th>
</tr>
</thead>
<tbody><tr>
<td>u2</td>
<td>type_index</td>
<td>1</td>
</tr>
<tr>
<td>u2</td>
<td>num_element_value_pairs</td>
<td>1</td>
</tr>
<tr>
<td>element_value_pair</td>
<td>element_value_pairs</td>
<td>num_element_value_pairs</td>
</tr>
</tbody></table>
<p>type_index是一个指向常量池CONSTANT_Utf8_info常量的索引值，该常量应以字段描述符的形式表示一个注解。num_element_value_pairs是element_value_pairs数组的计数器，element_value_pairs中每个元素都是一个键值对，代表该注解的参数和值。</p>
<h3 id="二、Class文件结构的发展"><a href="#二、Class文件结构的发展" class="headerlink" title="二、Class文件结构的发展"></a>二、Class文件结构的发展</h3><p>JDK的版本号已经从1.0提升到了13。相对于语言、API以及Java技术体系中其他方面的变化，Class文件结构一直处于一个相对比较稳定的状态，Class文件的主体结构、字节码指令的语义和数量几乎没有出现过变动[插图]，所有对Class文件格式的改进，都集中在访问标志、属性表这些设计上原本就是可扩展的数据结构中添加新内容。</p>
<blockquote>
<p>以《Java虚拟机规范（第2版）》（对应于JDK 1.4，是Java 2的奠基版本）为基准进行比较的话，在后续Class文件格式的发展过程中，访问标志新加入了ACC_SYNTHETIC、ACC_ANNOTATION、ACC_ENUM、ACC_BRIDGE、ACC_VARARGS共五个标志。属性表集合中，在JDK 5到JDK 12发展过程中一共增加了20项新属性，这些属性大部分是用于支持Java中许多新出现的语言特性，如枚举、变长参数、泛型、动态注解等。还有一些是为了支持性能改进和调试信息，譬如JDK 6的新类型校验器的StackMapTable属性和对非Java代码调试中用到的SourceDebugExtension属性。</p>
</blockquote>
<p>Class文件格式所具备的平台中立（不依赖于特定硬件及操作系统）、紧凑、稳定和可扩展的特点，是Java技术体系实现平台无关、语言无关两项特性的重要支柱。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
        <tag>class结构</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybtis(四)工作原理</title>
    <url>/posts/3bfa75b5.html</url>
    <content><![CDATA[<h2 id="Mybtis-四-工作原理"><a href="#Mybtis-四-工作原理" class="headerlink" title="Mybtis(四)工作原理"></a>Mybtis(四)工作原理</h2><h3 id="一、Mybatis涉及技术"><a href="#一、Mybatis涉及技术" class="headerlink" title="一、Mybatis涉及技术"></a>一、Mybatis涉及技术</h3><p>mybatis运行主要两部分：</p>
<p>（1）读取配置文件换乘到Configuration对象，用以创建SqlSessionFactory</p>
<p>（2）SqlSession执行过程。</p>
<p>SqlSession执行过程涉及技术：</p>
<p>反射技术、动态代理技术。</p>
<p>什么是代理模式？</p>
<p>代理模式就是在原有的服务上多加一个占位，通过占位去控制服务的访问。</p>
<p>为什么要使用代理模式？</p>
<p>通过代理一方面可以控制如何访问真正的服务对象，提供额外服务。另一方面有机会通过重写一些类来满足特定的需要。</p>
<p>一般动态代理分两种：</p>
<p>（A）JDK反射机制提供的代理。必须提供接口。</p>
<p>（B）CGLIB代理。不需要提供接口。 CGlib底层是动态的在内存中生成了目标对象的子类的字节码，并生成相应的对象 。</p>
<h4 id="1、反射简单的示例"><a href="#1、反射简单的示例" class="headerlink" title="1、反射简单的示例"></a>1、反射简单的示例</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>web<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>test<span class="token punctuation">.</span>reflect<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationTargetException<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SayService</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span>String someOne<span class="token punctuation">)</span><span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" hello ,"</span> <span class="token operator">+</span>someOne <span class="token operator">+</span><span class="token string">" !"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InstantiationException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> ClassNotFoundException<span class="token punctuation">,</span> NoSuchMethodException<span class="token punctuation">,</span> SecurityException<span class="token punctuation">,</span> IllegalArgumentException<span class="token punctuation">,</span> InvocationTargetException <span class="token punctuation">{</span>
             <span class="token comment" spellcheck="true">//通过反射创建SayService对象</span>
            Object service <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>SayService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token comment" spellcheck="true">//获取服务的方法</span>
            Method method <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"sayHello"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token comment" spellcheck="true">//反射调用服务的方法    </span>
            method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span> <span class="token string">"zhangxiaocai"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>运行输出：</p>
<pre><code> hello ,zhangxiaocai !</code></pre><p>反射的好出是配置性提高，springIOC容器也是使用反射机制实现。</p>
<h4 id="2、JDK动态代理"><a href="#2、JDK动态代理" class="headerlink" title="2、JDK动态代理"></a>2、JDK动态代理</h4><p>支持包：<code>java.lang.reflect.*</code></p>
<p>实现JDK动态代理步骤：</p>
<p>（1）编写服务类和接口，是真正的服务提供者，在JDK代理这接口是必须的。</p>
<p>（2）编写代理类，提供绑定和代理方法。</p>
<p>服务接口类：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>web<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>test<span class="token punctuation">.</span>jdktest<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SayServiceI</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span>String someOne<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>服务实现类：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>web<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>test<span class="token punctuation">.</span>jdktest<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SayServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">SayServiceI</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span>String someOne<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" hello ,"</span> <span class="token operator">+</span> someOne <span class="token operator">+</span> <span class="token string">" !"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>服务代理类：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>web<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>test<span class="token punctuation">.</span>jdktest<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationHandler<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Proxy<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SayServiceProxy</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>

    <span class="token comment" spellcheck="true">//需要持有真实的目标服务</span>
    <span class="token keyword">private</span> Object target<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">SayServiceProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//构造法绑定委托对象</span>
    <span class="token keyword">public</span> <span class="token function">SayServiceProxy</span><span class="token punctuation">(</span>Object object<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> object<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//绑定委托对象并返回代理类</span>
    <span class="token keyword">public</span> Object <span class="token function">bind</span><span class="token punctuation">(</span>Object object<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> object<span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//取得代理对象</span>
        Object proxy <span class="token operator">=</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span>  proxy<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token comment" spellcheck="true">/**
     * 通过代理对象调用方法首先会进入此方法
     * @param proxy -----代理对象
     * @param method ------调用方法
     * @param args ----方法参数
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>
        Object result <span class="token operator">=</span> null<span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//System.out.println("----proxy = " + proxy.toString());</span>
        <span class="token comment" spellcheck="true">//System.out.println("----proxy = " + proxy.hashCode());</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----proxy = "</span> <span class="token operator">+</span> proxy<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----method = "</span> <span class="token operator">+</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---反射方法执行前调用----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---反射方法执行前调用----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>调用测试：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>web<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>test<span class="token punctuation">.</span>jdktest<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationHandler<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Proxy<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SayServiceTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        SayServiceProxy proxyHandle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SayServiceProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//调用bind绑定的方式</span>
        SayServiceI service <span class="token operator">=</span> <span class="token punctuation">(</span>SayServiceI<span class="token punctuation">)</span> proxyHandle<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SayServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        service<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token string">"zhangxiaocai.cn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        SayServiceI mysay <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SayServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//调用构造方法</span>
        InvocationHandler handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SayServiceProxy</span><span class="token punctuation">(</span>mysay<span class="token punctuation">)</span><span class="token punctuation">;</span>
        SayServiceI proxyHello <span class="token operator">=</span> <span class="token punctuation">(</span>SayServiceI<span class="token punctuation">)</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>mysay<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mysay<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
        proxyHello<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token string">"zhangxiaocai.cn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>执行结果如下，两种写法的调用结果一致：</p>
<pre><code> ----proxy = com.sun.proxy.$Proxy0
----method = public abstract void com.ssm.web.demo.test.jdktest.SayServiceI.sayHello(java.lang.String)
---反射方法执行前调用----
 hello ,zhangxiaocai.cn !
---反射方法执行前调用----
----proxy = com.sun.proxy.$Proxy0
----method = public abstract void com.ssm.web.demo.test.jdktest.SayServiceI.sayHello(java.lang.String)
---反射方法执行前调用----
 hello ,zhangxiaocai.cn !
---反射方法执行前调用----</code></pre><p>执行过程中如果出现死循环导致栈溢出（SOF），注意下列写法会导致死循环。</p>
<pre class=" language-java"><code class="language-java">result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第一个参数写出proxy</span></code></pre>
<pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----proxy = "</span> <span class="token operator">+</span> proxy<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用了代理对象的方法</span></code></pre>
<pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----proxy = "</span> <span class="token operator">+</span> proxy<span class="token punctuation">.</span><span class="token function">hashcode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用了代理对象的方法</span></code></pre>
<p>代理对象是没有自己的方法的，它的所有方法都是基于被代理对象，<strong>而调用代理对象方法的时候，都会经过拦截器方法。因此，如果在拦截器中再调用代理对象的方法（如toString，hashcode，equals等），就会再次进入拦截器，这样就形成了死循环。</strong> </p>
<p>还可以</p>
<blockquote>
<p>在jvm启动时加上-Dsun.misc.ProxyGenerator.saveGeneratedFiles=true参数，保存生成的动态代理类字节码$Proxy0.class</p>
<p>然后再利用反编译工具查看代理类$Proxy0.class源码</p>
</blockquote>
<p>关于 <code>newProxyInstance</code>f方法：</p>
<pre class=" language-java"><code class="language-java">Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>mysay<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mysay<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>第一个参数mysay.getClass().getClassLoader()，是类加载器。</p>
<p>第二个参数mysay.getClass().getInterfaces()，是接口，代理对象挂在哪个接口下面。</p>
<p>第三个参数InvocationHandler实例，写在代理类中时直接使用this，表示当前代理类；写在非代理类中则是InvocationHandler子类指向InvocationHandler自己的引用。例子中使用了两种不同的写法。</p>
<h4 id="3、CGLIB动态代理"><a href="#3、CGLIB动态代理" class="headerlink" title="3、CGLIB动态代理"></a>3、CGLIB动态代理</h4><p>因JDK动态代理必须提供接口才可以使用，为了解决这个难题，CGLIB出现了。</p>
<p>CGLIB是开源框架，也是比较流行的动态代理。</p>
<p>CGLIB的代理类需要实现<code>org.springframework.cglib.proxy.MethodInterceptor</code>接口。</p>
<p>上例子中的服务接口类和服务实现类不变，添加CGLIB代理类：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>web<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>test<span class="token punctuation">.</span>jdktest<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>Enhancer<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>MethodInterceptor<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>MethodProxy<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SayServiceCglib</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span> <span class="token punctuation">{</span>

    <span class="token comment" spellcheck="true">//需要持有真实的目标服务</span>
    <span class="token keyword">private</span> Object target<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 创建代理对象</span>
    <span class="token keyword">public</span> Object <span class="token function">getInstance</span><span class="token punctuation">(</span>Object object<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> object<span class="token punctuation">;</span>
        Enhancer enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//设置回调方法</span>
        enhancer<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//创建代理对象并返回</span>
        <span class="token keyword">return</span> enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> Object <span class="token function">intercept</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> MethodProxy methodProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>
        Object result <span class="token operator">=</span> null<span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----proxy = "</span> <span class="token operator">+</span> proxy<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----method = "</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---反射方法执行前调用----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---反射方法执行前调用----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>测试运行类</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>web<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>test<span class="token punctuation">.</span>jdktest<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationHandler<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Proxy<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>MethodInterceptor<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SayServiceCglibTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        SayServiceI mysay <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SayServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        MethodInterceptor handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SayServiceCglib</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        SayServiceI proxyHello <span class="token operator">=</span><span class="token punctuation">(</span>SayServiceI<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>SayServiceCglib<span class="token punctuation">)</span> handler<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>mysay<span class="token punctuation">)</span><span class="token punctuation">;</span>
        proxyHello<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token string">"zhangxiaocai"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>执行结果</p>
<pre><code>----proxy = com.ssm.web.demo.test.jdktest.SayServiceImpl$$EnhancerByCGLIB$$71af915d
----method = public void com.ssm.web.demo.test.jdktest.SayServiceImpl.sayHello(java.lang.String)
---反射方法执行前调用----
 hello ,zhangxiaocai.cn !
---反射方法执行前调用----</code></pre><p>Mybatis中在延迟加载时会使用CGLIB动态代理。</p>
<h3 id="二、构建SqlSessionFactory过程"><a href="#二、构建SqlSessionFactory过程" class="headerlink" title="二、构建SqlSessionFactory过程"></a>二、构建SqlSessionFactory过程</h3><p>SqlSessionFactory 是Mybatis的核心类之一，它最重要的功能就是提供Mybatis核心接口SqlSession。</p>
<h4 id="1、构建步骤"><a href="#1、构建步骤" class="headerlink" title="1、构建步骤"></a>1、构建步骤</h4><p>Mybatis使用构造模式去创建SqlSessionFactory，大致过程分两步：</p>
<p>（1）通过<code>org.apache.ibatis.builder.xml.XMLConfigBuilder</code>解析配置XML文件读出配置参数，并将读得的数据存入<code>org.apache.ibatis.session.Configuration</code>类中。（几乎所有配置都在这个Configuration类中）</p>
<p>（2）使用Configuration对象创建SqlSessionFactory 。SqlSessionFactory是接口不能直接使用，一般使用它默认的实现类<code>org.apache.ibatis.session.defaults.DefaultSqlSessionFactory</code>。</p>
<pre class=" language-java"><code class="language-java">sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>这种创建方式就是一种Buidler模式。对于复杂的对象，直接使用构造方法构建比较困难的，这会导致大量的逻辑放在构造方法中，过程及其复杂。这种Builder模式值得我们学习。</p>
<p>构建SqlSessionFactory 过程中，Configuration最重要。</p>
<h4 id="2、Configuration的主要作用："><a href="#2、Configuration的主要作用：" class="headerlink" title="2、Configuration的主要作用："></a>2、Configuration的主要作用：</h4><p>（A）读入配置文件，包括基础配置XML和映射器XML文件。</p>
<p>（B）初始化基础配置，如别名、映射器、对象工厂、类型转换器等</p>
<p>（C）提供单例，为后续创建SessionFactory服务提供配置参数。</p>
<p>（D）执行重要的对象方法，初始化配置信息。</p>
<p>Configuration源码有八百多行，就不贴了。</p>
<p>具体相关配置可以参考<a href="#">《Mybatis配置大全》</a></p>
<h4 id="3、映射器组成"><a href="#3、映射器组成" class="headerlink" title="3、映射器组成"></a>3、映射器组成</h4><p>映射器主要由三个部分组成：</p>
<p>（1）MappedStatement - 保存映射器的一个节点（select | inset | delete | update）。包括配置的SQL、SQL的id、缓存信息、resultMap、parameterType、resultType、languageDriver等重要配置内容。</p>
<p>（2）SqlSource - 提供BoundSql 对象的地方，是MappedStatement 的一个属性。本质上一个接口，主要作用是根据参数和其他规则组装SQL。</p>
<p>（3）BoundSql - 建立SQL和参数的地方。常用属性有3个：SQL、parameterObject、parameterMapping。</p>
<p>​    （A）parameterObject 表示参数本身。传递基础类型对象时，Mybatis会把参数变成基础类型对应的包装类型对传递，如传int类型，参数会变成Integer类型。</p>
<p>​    （B）如果传递的是POJO或Map，那么parameterObject 就传入的POJO或Map。</p>
<p>​    （C）传递多个参数时，不使用<code>@Param</code>注解，Mybatis会把parameterObject变成Map&lt;String,Object&gt;对象，Map里的键值关系按照参数顺序存放：</p>
<pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"1"</span><span class="token operator">:</span>value1<span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">,</span>value2<span class="token punctuation">,</span><span class="token property">"3"</span><span class="token operator">:</span>value3......<span class="token punctuation">,</span><span class="token property">"param1"</span><span class="token operator">:</span>value1<span class="token punctuation">,</span><span class="token property">"param2"</span><span class="token operator">:</span>value2<span class="token punctuation">,</span><span class="token property">"param3"</span><span class="token operator">:</span>value3......<span class="token punctuation">}</span></code></pre>
<p>可以使用时可以通过<code>#{param1}</code> 或 <code>#{1}</code>取第一个参数。</p>
<p>举个例子如：</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//假设传入id的值为 10010, name的值为 zhangxiaocai</span>
List<span class="token operator">&lt;</span>T<span class="token operator">></span>  <span class="token function">selectList</span><span class="token punctuation">(</span><span class="token keyword">long</span> id<span class="token punctuation">,</span> String name<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>则parameterObject变成Map&lt;String,Object&gt;对象后内容为：</p>
<pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"1"</span><span class="token operator">:</span><span class="token number">10010</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"zhangxiaocai"</span><span class="token punctuation">,</span><span class="token property">"param1"</span><span class="token operator">:</span><span class="token number">10010</span><span class="token punctuation">,</span><span class="token property">"param2"</span><span class="token operator">:</span><span class="token string">"zhangxiaocai"</span><span class="token punctuation">}</span></code></pre>
<p>​    （D）传递多个参数时，使用<code>@Param</code>注解，Mybatis也会把parameterObject变成Map&lt;String,Object&gt;对象，Map里的键值关系按照参数顺序存放：</p>
<pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"key1"</span><span class="token operator">:</span>value1<span class="token punctuation">,</span><span class="token string">"key2"</span><span class="token punctuation">,</span>value2<span class="token punctuation">,</span><span class="token property">"3"</span><span class="token operator">:</span>value3......<span class="token punctuation">,</span><span class="token property">"param1"</span><span class="token operator">:</span>value1<span class="token punctuation">,</span><span class="token property">"param2"</span><span class="token operator">:</span>value2<span class="token punctuation">,</span><span class="token property">"param3"</span><span class="token operator">:</span>value3......<span class="token punctuation">}</span></code></pre>
<p>举个例子：</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//假设传入id的值为 10010, name的值为 zhangxiaocai</span>
List<span class="token operator">&lt;</span>T<span class="token operator">></span>  <span class="token function">selectList</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">long</span> id<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span>  String name<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>那么对于的parameterObject变成的Map&lt;String,Object&gt;对象为：</p>
<pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token number">10010</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"zhangxiaocai"</span><span class="token punctuation">,</span><span class="token property">"param1"</span><span class="token operator">:</span><span class="token number">10010</span><span class="token punctuation">,</span><span class="token property">"param2"</span><span class="token operator">:</span><span class="token string">"zhangxiaocai"</span><span class="token punctuation">}</span></code></pre>
<p>​    （E）parameterMappings是由元素为ParameterMapping对象组成的List集合。ParameterMapping对象描述的是参数，参数包括属性、名称、表达式、JavaType、jdbcType、typeHandler等信息。通过ParameterMapping对象实现参数和SQL的结合，方便PreparedStatement能通过ParameterMapping找到parameterObject对象的属性并设置参数。<br>​    （F）SQL就是映射器的一条SQL。</p>
<h3 id="三、SqlSession运行过程"><a href="#三、SqlSession运行过程" class="headerlink" title="三、SqlSession运行过程"></a>三、SqlSession运行过程</h3><p>有了SqlSessionFactory就可以直接拿到SqlSession。</p>
<pre class=" language-java"><code class="language-java">sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>SqlSession可以进行查询、写入、更新、删除等方法，新版Mybatis使用Mapper映射器进行操作。</p>
<h4 id="1、Mapper映射器动态代理"><a href="#1、Mapper映射器动态代理" class="headerlink" title="1、Mapper映射器动态代理"></a>1、Mapper映射器动态代理</h4><p>在Mybatis源码<code>org.apache.ibatis.binding.MapperProxy&lt;T&gt;</code>类中可以看出Mapper是通过动态代理来实现的：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>binding<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationHandler<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>reflection<span class="token punctuation">.</span>ExceptionUtil<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSession<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapperProxy</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">,</span> Serializable <span class="token punctuation">{</span>

  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span>6424540398559729838L<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">final</span> SqlSession sqlSession<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">final</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> mapperInterface<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>Method<span class="token punctuation">,</span> MapperMethod<span class="token operator">></span> methodCache<span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token function">MapperProxy</span><span class="token punctuation">(</span>SqlSession sqlSession<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> mapperInterface<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>Method<span class="token punctuation">,</span> MapperMethod<span class="token operator">></span> methodCache<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>sqlSession <span class="token operator">=</span> sqlSession<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>mapperInterface <span class="token operator">=</span> mapperInterface<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>methodCache <span class="token operator">=</span> methodCache<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> ExceptionUtil<span class="token punctuation">.</span><span class="token function">unwrapThrowable</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">final</span> MapperMethod mapperMethod <span class="token operator">=</span> <span class="token function">cachedMapperMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> mapperMethod<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">private</span> MapperMethod <span class="token function">cachedMapperMethod</span><span class="token punctuation">(</span>Method method<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    MapperMethod mapperMethod <span class="token operator">=</span> methodCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>mapperMethod <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      mapperMethod <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MapperMethod</span><span class="token punctuation">(</span>mapperInterface<span class="token punctuation">,</span> method<span class="token punctuation">,</span> sqlSession<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      methodCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> mapperMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> mapperMethod<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>但是动态代理的特点是：<br>（1）实现InvocationHandler的接口，重写invoke方法。<br>（2）使用绑定或构造方法建立与被代理对象的练习。<br>（3）Proxy.newProxyInstance(…)取得代理对象。<br>按以上三点来看，代理类里没有看到Proxy.newProxyInstance的调用，因为Mybatis使用MapperProxyFactory来实现代理类管理的,在这里找到了Proxy.newProxyInstance的调用。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>binding<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Proxy<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ConcurrentHashMap<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSession<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapperProxyFactory</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>

  <span class="token keyword">private</span> <span class="token keyword">final</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> mapperInterface<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>Method<span class="token punctuation">,</span> MapperMethod<span class="token operator">></span> methodCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span>Method<span class="token punctuation">,</span> MapperMethod<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token function">MapperProxyFactory</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> mapperInterface<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>mapperInterface <span class="token operator">=</span> mapperInterface<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">getMapperInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> mapperInterface<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>Method<span class="token punctuation">,</span> MapperMethod<span class="token operator">></span> <span class="token function">getMethodCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> methodCache<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>
  <span class="token keyword">protected</span> T <span class="token function">newInstance</span><span class="token punctuation">(</span>MapperProxy<span class="token operator">&lt;</span>T<span class="token operator">></span> mapperProxy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>mapperInterface<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> mapperInterface <span class="token punctuation">}</span><span class="token punctuation">,</span> mapperProxy<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> T <span class="token function">newInstance</span><span class="token punctuation">(</span>SqlSession sqlSession<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> MapperProxy<span class="token operator">&lt;</span>T<span class="token operator">></span> mapperProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MapperProxy</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> mapperInterface<span class="token punctuation">,</span> methodCache<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">newInstance</span><span class="token punctuation">(</span>mapperProxy<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>一旦Mapper接口调用SQL方法，那么就会运行到invoke方法中，invoke首先判断它是否是一个类，Mapper是接口不是类，所以会走到下面，生成MapperMethod对象，通过cachedMapperMethod方法对其进行初始化，然后执行execute方法，吧SQLSession和当前运行的参数传递进行。<br>MapperMethod的execute的方法，代码如下：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>binding<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//MapperMethod 类内容较多，只贴了execute的方法。</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapperMethod</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> Object <span class="token function">execute</span><span class="token punctuation">(</span>SqlSession sqlSession<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Object result<span class="token punctuation">;</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>command<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">case</span> INSERT<span class="token operator">:</span> <span class="token punctuation">{</span>
            Object param <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">convertArgsToSqlCommandParam</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
            result <span class="token operator">=</span> <span class="token function">rowCountResult</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>command<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          <span class="token keyword">case</span> UPDATE<span class="token operator">:</span> <span class="token punctuation">{</span>
            Object param <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">convertArgsToSqlCommandParam</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
            result <span class="token operator">=</span> <span class="token function">rowCountResult</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>command<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          <span class="token keyword">case</span> DELETE<span class="token operator">:</span> <span class="token punctuation">{</span>
            Object param <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">convertArgsToSqlCommandParam</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
            result <span class="token operator">=</span> <span class="token function">rowCountResult</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>command<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          <span class="token keyword">case</span> SELECT<span class="token operator">:</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">returnsVoid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> method<span class="token punctuation">.</span><span class="token function">hasResultHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token function">executeWithResultHandler</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
              result <span class="token operator">=</span> null<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">returnsMany</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              result <span class="token operator">=</span> <span class="token function">executeForMany</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">returnsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              result <span class="token operator">=</span> <span class="token function">executeForMap</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">returnsCursor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              result <span class="token operator">=</span> <span class="token function">executeForCursor</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
              Object param <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">convertArgsToSqlCommandParam</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
              result <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span>command<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
          <span class="token keyword">case</span> FLUSH<span class="token operator">:</span>
            result <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">flushStatements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
          <span class="token keyword">default</span><span class="token operator">:</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BindingException</span><span class="token punctuation">(</span><span class="token string">"Unknown execution method for: "</span> <span class="token operator">+</span> command<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isPrimitive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>method<span class="token punctuation">.</span><span class="token function">returnsVoid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BindingException</span><span class="token punctuation">(</span><span class="token string">"Mapper method '"</span> <span class="token operator">+</span> command<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
              <span class="token operator">+</span> <span class="token string">" attempted to return null from a method with a primitive return type ("</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token comment" spellcheck="true">//查询List的操作</span>
      <span class="token keyword">private</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> Object <span class="token function">executeForMany</span><span class="token punctuation">(</span>SqlSession sqlSession<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        List<span class="token operator">&lt;</span>E<span class="token operator">></span> result<span class="token punctuation">;</span>
        Object param <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">convertArgsToSqlCommandParam</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">hasRowBounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          RowBounds rowBounds <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">extractRowBounds</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
          result <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span>&lt;E<span class="token operator">></span><span class="token function">selectList</span><span class="token punctuation">(</span>command<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> param<span class="token punctuation">,</span> rowBounds<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          result <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span>&lt;E<span class="token operator">></span><span class="token function">selectList</span><span class="token punctuation">(</span>command<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">// issue #510 Collections &amp; arrays support</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">convertToArray</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">convertToDeclaredCollection</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>MapperMethod是采用命令模式运行，根据上下文跳转的。<br>execute里都是常见的<code>IUDS</code>操作,根据不同的SQL类型进行处理。<br>比如SELECT里有个 result = executeForMany(sqlSession, args); 就是一个典型的查询List结果的调用，从源代码里可以看到最后都是通过调用sqlSession去执行的对象的SQL。</p>
<p>Mapper接口能够执行SQL,就是因为映射器的XML文件命名空间对应的是这个接口的全路径，根据全路径和方法进行绑定，通过动态代理技术让这个接口运行起来。然后采用命令模式，根据SQL类型跳转不同方法，但最终还是使用SqlSession接口的方法使用执行对应SQL返回结果。</p>
<h4 id="2、-SqlSession的四大对象"><a href="#2、-SqlSession的四大对象" class="headerlink" title="2、 SqlSession的四大对象"></a>2、 SqlSession的四大对象</h4><p>Mapper执行的过程是通过<code>Excutor</code>、<code>StatementHandler</code>、<code>ParameterHandler</code>、<code>ResultHandler</code>来完成数据库操作和结果返回。<br>（1）<code>Excutor</code> 代表执行器，负责调度<code>StatementHandler</code>、<code>ParameterHandler</code>、<code>ResultHandler</code>等来执行对应SQL。<br>（2）<code>StatementHandler</code>作用是使用数据库的<code>Statement(PreparedStatement)</code>执行操作，是四大对象的核心，起到承上启下的作用。<br>（3）<code>ParameterHandler</code>用于SQL参数的处理。<br>（4）<code>ResultHandler</code>是进行最后数据集（ResultSet）的封装返回处理。</p>
<h5 id="1、Excutor执行器"><a href="#1、Excutor执行器" class="headerlink" title="1、Excutor执行器"></a>1、Excutor执行器</h5><p>执行器Excutor是真正执行Java和数据交互的东西，主要有三种执行器。可以在配置setting元素的属性defaultExcutorType来进行配置。<br>（A）SIMPLE - 简单执行器，不配做就是默认执行器。<br>（B）REUSE - 是一种执行器重用预处理语句。<br>（C）BATCH - 执行器重用语句和批量更新，是针对批量专用的执行器。</p>
<p>三者都提供了查询和更新的方法，事务方法。</p>
<p><code>Configuration</code>中可以看到创建执行器的过程：</p>
<pre class=" language-java"><code class="language-java">  <span class="token keyword">public</span> Executor <span class="token function">newExecutor</span><span class="token punctuation">(</span>Transaction transaction<span class="token punctuation">,</span> ExecutorType executorType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    executorType <span class="token operator">=</span> executorType <span class="token operator">==</span> null <span class="token operator">?</span> defaultExecutorType <span class="token operator">:</span> executorType<span class="token punctuation">;</span>
    executorType <span class="token operator">=</span> executorType <span class="token operator">==</span> null <span class="token operator">?</span> ExecutorType<span class="token punctuation">.</span>SIMPLE <span class="token operator">:</span> executorType<span class="token punctuation">;</span>
    Executor executor<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ExecutorType<span class="token punctuation">.</span>BATCH <span class="token operator">==</span> executorType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BatchExecutor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ExecutorType<span class="token punctuation">.</span>REUSE <span class="token operator">==</span> executorType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReuseExecutor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleExecutor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cacheEnabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CachingExecutor</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    executor <span class="token operator">=</span> <span class="token punctuation">(</span>Executor<span class="token punctuation">)</span> interceptorChain<span class="token punctuation">.</span><span class="token function">pluginAll</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> executor<span class="token punctuation">;</span>
  <span class="token punctuation">}</span></code></pre>
<p>其中<code>interceptorChain.pluginAll</code>是Mybatis插件，用来构建动态代理对象，在调度真正的Executor方法执行执行配置插件代码可以修改。</p>
<p>如SimpleExecutor代码：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>executor<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>cursor<span class="token punctuation">.</span>Cursor<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>executor<span class="token punctuation">.</span>statement<span class="token punctuation">.</span>StatementHandler<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>Log<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>mapping<span class="token punctuation">.</span>BoundSql<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>mapping<span class="token punctuation">.</span>MappedStatement<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>ResultHandler<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>RowBounds<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>Transaction<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLException<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Statement<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collections<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleExecutor</span> <span class="token keyword">extends</span> <span class="token class-name">BaseExecutor</span> <span class="token punctuation">{</span>

  <span class="token keyword">public</span> <span class="token function">SimpleExecutor</span><span class="token punctuation">(</span>Configuration configuration<span class="token punctuation">,</span> Transaction transaction<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span> transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">doUpdate</span><span class="token punctuation">(</span>MappedStatement ms<span class="token punctuation">,</span> Object parameter<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>
    Statement stmt <span class="token operator">=</span> null<span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      Configuration configuration <span class="token operator">=</span> ms<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      StatementHandler handler <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">newStatementHandler</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> ms<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> RowBounds<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>
      stmt <span class="token operator">=</span> <span class="token function">prepareStatement</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> ms<span class="token punctuation">.</span><span class="token function">getStatementLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> handler<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
      <span class="token function">closeStatement</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> List<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">doQuery</span><span class="token punctuation">(</span>MappedStatement ms<span class="token punctuation">,</span> Object parameter<span class="token punctuation">,</span> RowBounds rowBounds<span class="token punctuation">,</span> ResultHandler resultHandler<span class="token punctuation">,</span> BoundSql boundSql<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>
    Statement stmt <span class="token operator">=</span> null<span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      Configuration configuration <span class="token operator">=</span> ms<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      StatementHandler handler <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">newStatementHandler</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">,</span> ms<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>
      stmt <span class="token operator">=</span> <span class="token function">prepareStatement</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> ms<span class="token punctuation">.</span><span class="token function">getStatementLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> handler<span class="token punctuation">.</span>&lt;E<span class="token operator">></span><span class="token function">query</span><span class="token punctuation">(</span>stmt<span class="token punctuation">,</span> resultHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
      <span class="token function">closeStatement</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">protected</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> Cursor<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">doQueryCursor</span><span class="token punctuation">(</span>MappedStatement ms<span class="token punctuation">,</span> Object parameter<span class="token punctuation">,</span> RowBounds rowBounds<span class="token punctuation">,</span> BoundSql boundSql<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>
    Configuration configuration <span class="token operator">=</span> ms<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    StatementHandler handler <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">newStatementHandler</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">,</span> ms<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> null<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Statement stmt <span class="token operator">=</span> <span class="token function">prepareStatement</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> ms<span class="token punctuation">.</span><span class="token function">getStatementLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> handler<span class="token punctuation">.</span>&lt;E<span class="token operator">></span><span class="token function">queryCursor</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> List<span class="token operator">&lt;</span>BatchResult<span class="token operator">></span> <span class="token function">doFlushStatements</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> isRollback<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>
    <span class="token keyword">return</span> Collections<span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">private</span> Statement <span class="token function">prepareStatement</span><span class="token punctuation">(</span>StatementHandler handler<span class="token punctuation">,</span> Log statementLog<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>
    Statement stmt<span class="token punctuation">;</span>
    Connection connection <span class="token operator">=</span> <span class="token function">getConnection</span><span class="token punctuation">(</span>statementLog<span class="token punctuation">)</span><span class="token punctuation">;</span>
    stmt <span class="token operator">=</span> handler<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> transaction<span class="token punctuation">.</span><span class="token function">getTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    handler<span class="token punctuation">.</span><span class="token function">parameterize</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> stmt<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>从代码可以看到常见的doUpdate和doQuery操作。以doQuery为例，其过程大致如下:<br>根据Configuration来构建StatementHandler,然后使用prepareStatement方法对象SQL编译并对参数初始化，它的实现过程调用StatementHandler的prepare()进行预编译和基础设置，然后通过根据StatementHandler的parameterize()来设置参数并执行，ResultHandler再组装查询结果返回给调用者来完成查询。</p>
<h5 id="2、数据库会话器"><a href="#2、数据库会话器" class="headerlink" title="2、数据库会话器"></a>2、数据库会话器</h5><p>数据库会话器StatementHandler主要负责与数据库会话操作。<br>若要指定使用，可以在SQL上进行配置：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- statementType （可选配置，默认配置为PREPARED）
    STATEMENT，PREPARED 或 CALLABLE 的一个。
    分别对应使用 Statement，PreparedStatement 或 CallableStatement --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>save<span class="token punctuation">"</span></span>  <span class="token attr-name">statementType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>STATEMENT<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span></code></pre>
<p><code>Configuration</code>中可以看到创建数据库会话器的过程：</p>
<pre class=" language-java"><code class="language-java">  <span class="token keyword">public</span> StatementHandler <span class="token function">newStatementHandler</span><span class="token punctuation">(</span>Executor executor<span class="token punctuation">,</span> MappedStatement mappedStatement<span class="token punctuation">,</span> Object parameterObject<span class="token punctuation">,</span> RowBounds rowBounds<span class="token punctuation">,</span> ResultHandler resultHandler<span class="token punctuation">,</span> BoundSql boundSql<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    StatementHandler statementHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RoutingStatementHandler</span><span class="token punctuation">(</span>executor<span class="token punctuation">,</span> mappedStatement<span class="token punctuation">,</span> parameterObject<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>
    statementHandler <span class="token operator">=</span> <span class="token punctuation">(</span>StatementHandler<span class="token punctuation">)</span> interceptorChain<span class="token punctuation">.</span><span class="token function">pluginAll</span><span class="token punctuation">(</span>statementHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> statementHandler<span class="token punctuation">;</span>
  <span class="token punctuation">}</span></code></pre>
<p>可以看到创建statementHandler的动作是由RoutingStatementHandler来完成，它实现了statementHandler接口，和Executor类似用代理对象进行封装。</p>
<p>在<code>RoutingStatementHandler</code>的源代码中：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>executor<span class="token punctuation">.</span>statement<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLException<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Statement<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>cursor<span class="token punctuation">.</span>Cursor<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>executor<span class="token punctuation">.</span>Executor<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>executor<span class="token punctuation">.</span>ExecutorException<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>executor<span class="token punctuation">.</span>parameter<span class="token punctuation">.</span>ParameterHandler<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>mapping<span class="token punctuation">.</span>BoundSql<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>mapping<span class="token punctuation">.</span>MappedStatement<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>ResultHandler<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>RowBounds<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RoutingStatementHandler</span> <span class="token keyword">implements</span> <span class="token class-name">StatementHandler</span> <span class="token punctuation">{</span>

  <span class="token keyword">private</span> <span class="token keyword">final</span> StatementHandler delegate<span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token function">RoutingStatementHandler</span><span class="token punctuation">(</span>Executor executor<span class="token punctuation">,</span> MappedStatement ms<span class="token punctuation">,</span> Object parameter<span class="token punctuation">,</span> RowBounds rowBounds<span class="token punctuation">,</span> ResultHandler resultHandler<span class="token punctuation">,</span> BoundSql boundSql<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">switch</span> <span class="token punctuation">(</span>ms<span class="token punctuation">.</span><span class="token function">getStatementType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> STATEMENT<span class="token operator">:</span>
        delegate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleStatementHandler</span><span class="token punctuation">(</span>executor<span class="token punctuation">,</span> ms<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> PREPARED<span class="token operator">:</span>
        delegate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PreparedStatementHandler</span><span class="token punctuation">(</span>executor<span class="token punctuation">,</span> ms<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> CALLABLE<span class="token operator">:</span>
        delegate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CallableStatementHandler</span><span class="token punctuation">(</span>executor<span class="token punctuation">,</span> ms<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ExecutorException</span><span class="token punctuation">(</span><span class="token string">"Unknown statement type: "</span> <span class="token operator">+</span> ms<span class="token punctuation">.</span><span class="token function">getStatementType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//some code ...</span>
  <span class="token punctuation">}</span></code></pre>
<p>可以看出RoutingStatementHandler也不是真正服务对象，它是通过适配模式找到对应的StatementHandler来执行。Mybatis中StatementHandler和Executor一样也有三种：<br>（A）SimpleStatementHandler - 对应JDBC中Statement接口，执行普通SQL<br>（B）PreparedStatementHandler - 对应JDBC中的PreparedStatement，预编译SQL的接口；<br>（c）CallableStatementHandler - 对应JDBC中CallableStatement，用于执行存储过程相关的接口；</p>
<p>RoutingStatementHandler中定义了一个delegate，它是一个StatementHandler接口对象，构造方法根据配置来适配对应的StatementHandler对象。</p>
<p>RoutingStatementHandler的作用是给实现类对象的使用提供一个统一简易的使用适配器，这是对象的适配模式，可以让我们使用现有的类和方法对外提供服务，也可以根据实际需求对外屏蔽方法，加入新方法。</p>
<p>如PreparedSatementHandler执行Mybatis执行查询，有三个主要的方法：<br>prepare、parameterize、query</p>
<p>如下是BaseStatementHandler的prepare方法：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>executor<span class="token punctuation">.</span>statement<span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BaseStatementHandler</span> <span class="token keyword">implements</span> <span class="token class-name">StatementHandler</span> <span class="token punctuation">{</span>
      <span class="token annotation punctuation">@Override</span>
      <span class="token keyword">public</span> Statement <span class="token function">prepare</span><span class="token punctuation">(</span>Connection connection<span class="token punctuation">,</span> Integer transactionTimeout<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>
        ErrorContext<span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sql</span><span class="token punctuation">(</span>boundSql<span class="token punctuation">.</span><span class="token function">getSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Statement statement <span class="token operator">=</span> null<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
          statement <span class="token operator">=</span> <span class="token function">instantiateStatement</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">setStatementTimeout</span><span class="token punctuation">(</span>statement<span class="token punctuation">,</span> transactionTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">setFetchSize</span><span class="token punctuation">(</span>statement<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">return</span> statement<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">closeStatement</span><span class="token punctuation">(</span>statement<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">throw</span> e<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">closeStatement</span><span class="token punctuation">(</span>statement<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ExecutorException</span><span class="token punctuation">(</span><span class="token string">"Error preparing statement.  Cause: "</span> <span class="token operator">+</span> e<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>instantiateStatement()方法是对SQL进行预编译。<br>下面是PreparedSatementHandler里的instantiateStatement()和parameterize()方法:</p>
<pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">protected</span> Statement <span class="token function">instantiateStatement</span><span class="token punctuation">(</span>Connection connection<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>
    String sql <span class="token operator">=</span> boundSql<span class="token punctuation">.</span><span class="token function">getSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>mappedStatement<span class="token punctuation">.</span><span class="token function">getKeyGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Jdbc3KeyGenerator</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      String<span class="token punctuation">[</span><span class="token punctuation">]</span> keyColumnNames <span class="token operator">=</span> mappedStatement<span class="token punctuation">.</span><span class="token function">getKeyColumns</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>keyColumnNames <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> PreparedStatement<span class="token punctuation">.</span>RETURN_GENERATED_KEYS<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> keyColumnNames<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mappedStatement<span class="token punctuation">.</span><span class="token function">getResultSetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> mappedStatement<span class="token punctuation">.</span><span class="token function">getResultSetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ResultSet<span class="token punctuation">.</span>CONCUR_READ_ONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">parameterize</span><span class="token punctuation">(</span>Statement statement<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>
    parameterHandler<span class="token punctuation">.</span><span class="token function">setParameters</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PreparedStatement<span class="token punctuation">)</span> statement<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> List<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">query</span><span class="token punctuation">(</span>Statement statement<span class="token punctuation">,</span> ResultHandler resultHandler<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>
    PreparedStatement ps <span class="token operator">=</span> <span class="token punctuation">(</span>PreparedStatement<span class="token punctuation">)</span> statement<span class="token punctuation">;</span>
    ps<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> resultSetHandler<span class="token punctuation">.</span>&lt;E<span class="token operator">></span> <span class="token function">handleResultSets</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span></code></pre>
<p>prepare()方法首先进行一些基础配置，如超时、获取最大行数等设置。然后Executor会调用parameterize()方法设置参数。从代码可以看到设置参数是由ParameterHandler来完成的。</p>
<p>SatementHandler执行查询的方法里，由于执行前参数和SQL都被prepare()方法预编译，参数在parameterize()方法完成了设置，只要执行SQL返回结果即可。执行之后就是ResultHandler对结果的封装和返回。</p>
<p><strong>SQL执行过程总结</strong>：<br>Executor会先调用StatementHandler的prepare()方法预编译SQL语句，并设置基本运行参数。<br>然后使用parameterize()方法启用ParameterHandler设置成桉树，完成预编译，跟着就是执行SQL操作（query/update）<br>最后，如果有结果集就使用ResultHandler封装结果返回给调用者。</p>
<h5 id="3、参数处理器"><a href="#3、参数处理器" class="headerlink" title="3、参数处理器"></a>3、参数处理器</h5><p>参数处理器ParameterHandler主要作用就是完成对预编译参数的设置。<br>ParameterHandler源码：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>executor<span class="token punctuation">.</span>parameter<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>PreparedStatement<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLException<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ParameterHandler</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//返回参数对象</span>
    Object <span class="token function">getParameterObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//设置预编译SQL语句的参数</span>
    <span class="token keyword">void</span> <span class="token function">setParameters</span><span class="token punctuation">(</span>PreparedStatement ps<span class="token punctuation">)</span><span class="token keyword">throws</span> SQLException<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>ParameterHandler接口中，getParameterObject()方法的作用是返回参数对象，setParameters()方法的作用是设置预编译SQL语句的参数。<br>Mybatis为ParameterHandler提供了一个实现类DefaultParameterHandler，setParameters()方法源码：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>scripting<span class="token punctuation">.</span>defaults<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>PreparedStatement<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLException<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>executor<span class="token punctuation">.</span>ErrorContext<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>executor<span class="token punctuation">.</span>parameter<span class="token punctuation">.</span>ParameterHandler<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>mapping<span class="token punctuation">.</span>BoundSql<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>mapping<span class="token punctuation">.</span>MappedStatement<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>mapping<span class="token punctuation">.</span>ParameterMapping<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>mapping<span class="token punctuation">.</span>ParameterMode<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>reflection<span class="token punctuation">.</span>MetaObject<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>type<span class="token punctuation">.</span>JdbcType<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>type<span class="token punctuation">.</span>TypeException<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>type<span class="token punctuation">.</span>TypeHandler<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>type<span class="token punctuation">.</span>TypeHandlerRegistry<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultParameterHandler</span> <span class="token keyword">implements</span> <span class="token class-name">ParameterHandler</span> <span class="token punctuation">{</span>

  <span class="token keyword">private</span> <span class="token keyword">final</span> TypeHandlerRegistry typeHandlerRegistry<span class="token punctuation">;</span>

  <span class="token keyword">private</span> <span class="token keyword">final</span> MappedStatement mappedStatement<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">final</span> Object parameterObject<span class="token punctuation">;</span>
  <span class="token keyword">private</span> BoundSql boundSql<span class="token punctuation">;</span>
  <span class="token keyword">private</span> Configuration configuration<span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token function">DefaultParameterHandler</span><span class="token punctuation">(</span>MappedStatement mappedStatement<span class="token punctuation">,</span> Object parameterObject<span class="token punctuation">,</span> BoundSql boundSql<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>mappedStatement <span class="token operator">=</span> mappedStatement<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>configuration <span class="token operator">=</span> mappedStatement<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>typeHandlerRegistry <span class="token operator">=</span> mappedStatement<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTypeHandlerRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>parameterObject <span class="token operator">=</span> parameterObject<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>boundSql <span class="token operator">=</span> boundSql<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> Object <span class="token function">getParameterObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> parameterObject<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setParameters</span><span class="token punctuation">(</span>PreparedStatement ps<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ErrorContext<span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">activity</span><span class="token punctuation">(</span><span class="token string">"setting parameters"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span>mappedStatement<span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    List<span class="token operator">&lt;</span>ParameterMapping<span class="token operator">></span> parameterMappings <span class="token operator">=</span> boundSql<span class="token punctuation">.</span><span class="token function">getParameterMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>parameterMappings <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> parameterMappings<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ParameterMapping parameterMapping <span class="token operator">=</span> parameterMappings<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>parameterMapping<span class="token punctuation">.</span><span class="token function">getMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> ParameterMode<span class="token punctuation">.</span>OUT<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          Object value<span class="token punctuation">;</span>
          String propertyName <span class="token operator">=</span> parameterMapping<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>boundSql<span class="token punctuation">.</span><span class="token function">hasAdditionalParameter</span><span class="token punctuation">(</span>propertyName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// issue #448 ask first for additional params</span>
            value <span class="token operator">=</span> boundSql<span class="token punctuation">.</span><span class="token function">getAdditionalParameter</span><span class="token punctuation">(</span>propertyName<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>parameterObject <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            value <span class="token operator">=</span> null<span class="token punctuation">;</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>typeHandlerRegistry<span class="token punctuation">.</span><span class="token function">hasTypeHandler</span><span class="token punctuation">(</span>parameterObject<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            value <span class="token operator">=</span> parameterObject<span class="token punctuation">;</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            MetaObject metaObject <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">newMetaObject</span><span class="token punctuation">(</span>parameterObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
            value <span class="token operator">=</span> metaObject<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>propertyName<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          TypeHandler typeHandler <span class="token operator">=</span> parameterMapping<span class="token punctuation">.</span><span class="token function">getTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          JdbcType jdbcType <span class="token operator">=</span> parameterMapping<span class="token punctuation">.</span><span class="token function">getJdbcType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> jdbcType <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            jdbcType <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">getJdbcTypeForNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          <span class="token keyword">try</span> <span class="token punctuation">{</span>
            typeHandler<span class="token punctuation">.</span><span class="token function">setParameter</span><span class="token punctuation">(</span>ps<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> value<span class="token punctuation">,</span> jdbcType<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TypeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeException</span><span class="token punctuation">(</span><span class="token string">"Could not set parameters for mapping: "</span> <span class="token operator">+</span> parameterMapping <span class="token operator">+</span> <span class="token string">". Cause: "</span> <span class="token operator">+</span> e<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeException</span><span class="token punctuation">(</span><span class="token string">"Could not set parameters for mapping: "</span> <span class="token operator">+</span> parameterMapping <span class="token operator">+</span> <span class="token string">". Cause: "</span> <span class="token operator">+</span> e<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>从代码中可以看到从parameterObject对象获取参数，然后使用类型转换器typeHandler进行参数处理。如果自定义了类型转换器，就会根据签名注册typeHandler对参数进行处理。类型转换器也是在Mybatis初始化的时候注册在Configuration里面。</p>
<h5 id="4、结果处理器"><a href="#4、结果处理器" class="headerlink" title="4、结果处理器"></a>4、结果处理器</h5><p>ResultHandler是封装结果集的。<br>ResultHandler的源码：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>executor<span class="token punctuation">.</span>resultset<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>cursor<span class="token punctuation">.</span>Cursor<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>CallableStatement<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLException<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Statement<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ResultSetHandler</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//包装结果集</span>
    <span class="token operator">&lt;</span>E<span class="token operator">></span> List<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">handleResultSets</span><span class="token punctuation">(</span>Statement stmt<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException<span class="token punctuation">;</span>

    <span class="token operator">&lt;</span>E<span class="token operator">></span> Cursor<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">handleCursorResultSets</span><span class="token punctuation">(</span>Statement stmt<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//处理存储过程输出参数</span>
    <span class="token keyword">void</span> <span class="token function">handleOutputParameters</span><span class="token punctuation">(</span>CallableStatement cs<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>其中handleOutputParameters()方法是处理存储过程输出参数。handleResultSets()方法是包装结果集的。<br>Mybatis提供了一个实现类DefaultResultSetHandler类，默认情况下都是通过这个类进行处理。它的实现涉及JavaSSIST或CGLIB作为延迟加载的，然后通过typeHandler和ObjectFacorty进行组装结果再返回的。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultResultSetHandler</span> <span class="token keyword">implements</span> <span class="token class-name">ResultSetHandler</span> <span class="token punctuation">{</span> 
     <span class="token annotation punctuation">@Override</span>
      <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token function">handleResultSets</span><span class="token punctuation">(</span>Statement stmt<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>
        ErrorContext<span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">activity</span><span class="token punctuation">(</span><span class="token string">"handling results"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span>mappedStatement<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">final</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> multipleResults <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">int</span> resultSetCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        ResultSetWrapper rsw <span class="token operator">=</span> <span class="token function">getFirstResultSet</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">;</span>

        List<span class="token operator">&lt;</span>ResultMap<span class="token operator">></span> resultMaps <span class="token operator">=</span> mappedStatement<span class="token punctuation">.</span><span class="token function">getResultMaps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> resultMapCount <span class="token operator">=</span> resultMaps<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">validateResultMapsCount</span><span class="token punctuation">(</span>rsw<span class="token punctuation">,</span> resultMapCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>rsw <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> resultMapCount <span class="token operator">></span> resultSetCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          ResultMap resultMap <span class="token operator">=</span> resultMaps<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>resultSetCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">handleResultSet</span><span class="token punctuation">(</span>rsw<span class="token punctuation">,</span> resultMap<span class="token punctuation">,</span> multipleResults<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>
          rsw <span class="token operator">=</span> <span class="token function">getNextResultSet</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">cleanUpAfterHandlingResultSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          resultSetCount<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        String<span class="token punctuation">[</span><span class="token punctuation">]</span> resultSets <span class="token operator">=</span> mappedStatement<span class="token punctuation">.</span><span class="token function">getResultSets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>resultSets <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">while</span> <span class="token punctuation">(</span>rsw <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> resultSetCount <span class="token operator">&lt;</span> resultSets<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ResultMapping parentMapping <span class="token operator">=</span> nextResultMaps<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>resultSets<span class="token punctuation">[</span>resultSetCount<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>parentMapping <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              String nestedResultMapId <span class="token operator">=</span> parentMapping<span class="token punctuation">.</span><span class="token function">getNestedResultMapId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              ResultMap resultMap <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">getResultMap</span><span class="token punctuation">(</span>nestedResultMapId<span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token function">handleResultSet</span><span class="token punctuation">(</span>rsw<span class="token punctuation">,</span> resultMap<span class="token punctuation">,</span> null<span class="token punctuation">,</span> parentMapping<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            rsw <span class="token operator">=</span> <span class="token function">getNextResultSet</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">cleanUpAfterHandlingResultSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            resultSetCount<span class="token operator">++</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token function">collapseSingleResultList</span><span class="token punctuation">(</span>multipleResults<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="3、SqlSession运行总结："><a href="#3、SqlSession运行总结：" class="headerlink" title="3、SqlSession运行总结："></a>3、SqlSession运行总结：</h4><p><img src="/medias/loading-animated.gif" data-original="/images/mybatis-imgs/Mybatis-SqlSession-executing.png" alt="SqlSession内部允许图"></p>
<p>SqlSession是通过Executor调度StatementHandler来运行，StatementHandler要结果三步：<br>（A）prepared预编译SQL。<br>（B）parameterize设置参数<br>（C）query或update执行SQL<br>parameterize是调用ParameterHandler的方法去设置，参数是根据类型处理器typeHandler处理的。query或update方法通过ResultHandler进行处理结果的封装。update返回整数，query返回的结果集则是通过typeHandler处理结果类型，然后使用ObjectFactory提供的规则组装对象，返回给调用者。</p>
<br/>

<p><strong>相关文章：</strong></p>
<table>
<thead>
<tr>
<th>文章名称</th>
</tr>
</thead>
<tbody><tr>
<td><a href="b802139a.html">《Mybatis(一)主要组件》</a></td>
</tr>
<tr>
<td><a href="5d11555a.html">《Mybatis(二)配置》</a></td>
</tr>
<tr>
<td><a href="d467df29.html">《Mybatis(三)动态SQL》</a></td>
</tr>
<tr>
<td><a href="3bfa75b5.html">《Mybtis(四)工作原理》</a></td>
</tr>
<tr>
<td><a href="ae8510ea.html">《Mybtis(五)Mapper映射器》</a></td>
</tr>
<tr>
<td><a href="44c4c800.html">《Mybtis(六)Mapper级联》</a></td>
</tr>
</tbody></table>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>java 环境变量配置</title>
    <url>/posts/a8179eeb.html</url>
    <content><![CDATA[<p>##环境变量配置大全：</p>
<blockquote>
<p>path环境变量，主要作用是在运行一个程序/命令又没有指定程序/命令的完整路径时，系统除了在当前目录下面寻找此程序外，还会到配置的path中指定的路径去找，通过设置环境变量，来更好的运行进程。</p>
</blockquote>
<h3 id="JAVA环境变量"><a href="#JAVA环境变量" class="headerlink" title="JAVA环境变量"></a>JAVA环境变量</h3><p>1、新建系统环境变量</p>
<p>变量名：JAVA_HOME</p>
<p>变量值：<code>C:\Program Files\Java\jdk1.8.0_191</code></p>
<p>变量值就是jdk安装目录。</p>
<p>2、配置Path，</p>
<p>（1）有就在变量值处追加，以<code>“;”</code>分隔，</p>
<p>放末尾：<code>；%JAVA_HOME%\bin</code></p>
<p>放开头：<code>%JAVA_HOME%\bin；</code></p>
<p>（2）没有就新建系统环境变量</p>
<p>变量名：Path</p>
<p>变量值： %JAVA_HOME%\bin</p>
<p>3、配置CLASSPATH</p>
<p>变量名：CLASSPATH</p>
<p>变量值：<code>.;%JAVA_HOME%\lib;%JAVA_HOME%\lib\rt.jar%JAVA_HOME%\lib\tools.jar</code></p>
<blockquote>
<p>rt.jar：Java基础类库，也就是Java doc里面看到的所有的类的class文件。</p>
<p>tools.jar：是系统用来编译一个类的时候用到的，即执行javac的时候用到。</p>
</blockquote>
<p>4、配置验证</p>
<p>执行<code>java -version</code>， <code>javac</code> ,<code>java -verbose</code>等皆可。</p>
<h3 id="MAVEN环境变量"><a href="#MAVEN环境变量" class="headerlink" title="MAVEN环境变量"></a>MAVEN环境变量</h3><p>1、新建系统环境变量</p>
<p>变量名：MAVEN_HOME</p>
<p>变量值：<code>E:\apache-maven-3.3.9</code></p>
<p>变量值就是MAVEN安装目录。</p>
<p>可以参考 <a href="http://maven.apache.org/install.html" target="_blank" rel="noopener">MAVEN官网安装指南</a></p>
<p>2、配置setting.xml</p>
<p>配置文件一般在<code>...\apache-maven-3.3.9\conf</code>目录下。</p>
<p>（1）本地仓库路径修改：</p>
<p>直接放<code>&lt;settings&gt;</code>根节点下即可。</p>
<pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>localRepository</span><span class="token punctuation">></span></span>E:/server/MavenRepository/maven_jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>localRepository</span><span class="token punctuation">></span></span></code></pre>
<p>如果不配置，默认路径是：<code>C:/Users/${user.home}/.m2/repository</code></p>
<p>（2）修改源镜像仓库地址。默认去maven官方源仓库下载太慢了，修改为国内的源仓库。</p>
<p>在mirrors节点下：</p>
<pre class=" language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!-- 阿里云中央仓库 --></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>nexus-aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Nexus aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.aliyun.com/nexus/content/groups/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span></code></pre>
<p>3、在开发工具中配置。</p>
<p>一般是：window—Preferences—maven—User Settings 更换maven的setting.xml配置。</p>
<p>有些开发工具已经内嵌了maven，通常默认的<code>setting.xml</code>文件位置在：</p>
<p><code>C:/Users/${user.home}/.m2/setting.xml</code></p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>想到再补充。</p>
<br/><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 之Docker-Compose</title>
    <url>/posts/febc9253.html</url>
    <content><![CDATA[<h2 id="Docker-之-Docker-Compose"><a href="#Docker-之-Docker-Compose" class="headerlink" title="Docker 之 Docker-Compose"></a>Docker 之 Docker-Compose</h2><h2 id="一、产生背景"><a href="#一、产生背景" class="headerlink" title="一、产生背景"></a>一、产生背景</h2><p>运行一个镜像，需要添加大量的参数。如果要运行不同发镜像还需要不同的参数。</p>
<p>容器增加使得使用 <code>docker run</code> 启动命令变得多繁琐。</p>
<p>通过Docker-Compose 可以进行批量的管理容器，配置参数。</p>
<p>只需要一个 <code>docker-compose.yml</code> 文件去维护即可。</p>
<h2 id="二、下载、配置"><a href="#二、下载、配置" class="headerlink" title="二、下载、配置"></a>二、下载、配置</h2><h3 id="1-github官网下载"><a href="#1-github官网下载" class="headerlink" title="1. github官网下载"></a>1. github官网下载</h3><p><code>Dockrer-Compose</code> 的github发布地址：<a href="https://github.com/docker/compose" target="_blank" rel="noopener">https://github.com/docker/compose</a></p>
<p>releases 中选择比较稳定的发布版本。</p>
<h3 id="2、修改文件名"><a href="#2、修改文件名" class="headerlink" title="2、修改文件名"></a>2、修改文件名</h3><p>非必须，需要是为了使用命令方便。<code>Docker-Compose</code> 下载之后名称比较长，修改之后方便使用命令。</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">mv</span> docker-compose-Linux-x86_64  /usr/local
<span class="token function">cd</span> /usr/local
<span class="token function">mv</span> docker-compose-Linux-x86_64 docker-compose
<span class="token function">chmod</span> 777  docker-compose</code></pre>
<h3 id="3、配置环境变量"><a href="#3、配置环境变量" class="headerlink" title="3、配置环境变量"></a>3、配置环境变量</h3><p>非必须，需要是为了后续使用命令方便。为了可以在任意目录使用<code>docker-Compose</code> 命令，方便后续执行。</p>
<p>将 <code>docker-compose</code> 文件移动到 <code>/usr/local/bin</code>, 修改了 <code>/etc/profile</code> 文件，给<code>/usr/local/bin</code> 配置到 <code>PATH</code> 中。</p>
<pre class=" language-sh"><code class="language-sh">mv docker-compose /usr/lcoal/bin
vi /etc/profile</code></pre>
<pre class=" language-txt"><code class="language-txt">export PATH=$JAVA_HOME:/usr/local/bin:$PATH</code></pre>
<pre class=" language-bash"><code class="language-bash"><span class="token function">source</span> /etc/profile</code></pre>
<p>测试配置是否成功，在任意目录下执行 <code>docker-compose</code></p>
<h2 id="二-Docker-Compose-管理容器"><a href="#二-Docker-Compose-管理容器" class="headerlink" title="二 Docker-Compose 管理容器"></a>二 Docker-Compose 管理容器</h2><h3 id="1、YML文件"><a href="#1、YML文件" class="headerlink" title="1、YML文件"></a>1、YML文件</h3><p>文件名称：<code>docker-compose.yml</code> </p>
<p>文件遵循YAML文件格式要求：<code>key+&quot;:&quot;+空格+value</code></p>
<p>换行+缩进的方式写多组值。</p>
<p>文件不要使用制表符。</p>
<h3 id="2、示例"><a href="#2、示例" class="headerlink" title="2、示例"></a>2、示例</h3><p>示例：Docker-Compose 管理Mysql和Tomcat容器</p>
<pre class=" language-YAML"><code class="language-YAML">varsion: '3.1'
services: 
  mysql:             # 服务的名称
    restart: always  # 表示只要docker启动，这个服务就跟着一起启动
    image: daocloud.io/library/mysql:5.7.4   # 指定镜像来源路径
    container_name: mysql    # 指定容器名称
    ports:
      - 3306:3306  # 指定端口号映射
    environment:
      MYSQL_ROOT_PASSWORD: root    #指定Mysql的root用户登录密码
      TZ: Asia/Shanghai            #指定时区
    volumes:
      - /opt/docker_msql_tomcat/mysql_data:/var/lib/mysql  # 映射数据卷
  tomcat: 
    restart: always
    image: daocloud.io/library/tomcat:8.5.15-jre8    
    container_name: tomcat
    ports:
      - 8080:8080
    environment: 
      TZ: Asia/Shanghai
    volumes:
      - /opt/docker_msql_tomcat/tomcat_webapps:/var/local/tomcat/webapps
      - /opt/docker_msql_tomcat/tomcat_logs:/var/local/tomcat/logs</code></pre>
<h2 id="三-使用-docker-compose-命令管理"><a href="#三-使用-docker-compose-命令管理" class="headerlink" title="三.使用 docker-compose 命令管理"></a>三.使用 docker-compose 命令管理</h2><h3 id="1、注意事项"><a href="#1、注意事项" class="headerlink" title="1、注意事项"></a>1、注意事项</h3><p><strong>在使用docker-compose 命令时，默认会在当前目录下找 docker-compose.yml 文件。</strong></p>
<h3 id="2、常见命令"><a href="#2、常见命令" class="headerlink" title="2、常见命令"></a>2、常见命令</h3><p><strong>基于 docker-compose.yml 启动管理的容器</strong></p>
<pre class=" language-bash"><code class="language-bash">docker-compose up -d</code></pre>
<p><strong>关闭并删除容器</strong></p>
<pre class=" language-bash"><code class="language-bash">docker-compose down</code></pre>
<p><strong>开启|关闭|重启 已经存在的由docker-compose维护的容器</strong></p>
<pre class=" language-bash"><code class="language-bash">docker-compose start
docker-compose stop 
docker-compose restart</code></pre>
<p><strong>查看由docker-compose维护的容器</strong></p>
<pre class=" language-bash"><code class="language-bash">docker-compose  <span class="token function">ps</span></code></pre>
<p><strong>查看由docker-compose维护的容器的日志</strong></p>
<pre class=" language-bash"><code class="language-bash">docker-compose  logs  -f</code></pre>
<h2 id="四-Docker-compose配置Dockerfile-使用"><a href="#四-Docker-compose配置Dockerfile-使用" class="headerlink" title="四.Docker-compose配置Dockerfile 使用"></a>四.Docker-compose配置Dockerfile 使用</h2><p>使用 <code>docker-compose.yml</code> 文件以及  <code>Dockerfile</code> 文件再生产自定义的镜像的同时启动当前镜像，并且由Docker-compose去管理容器。</p>
<h3 id="1、yml文件"><a href="#1、yml文件" class="headerlink" title="1、yml文件"></a>1、yml文件</h3><pre class=" language-YAML"><code class="language-YAML">version: '3.1'
services:
  tomcat_dcdf: 
    restart: always
    build:             # 构建自定义镜像
      context: ../     # 指定Dockerfile文件所在路径，../表示上级目录
      dockerfile: Dockerfile   # 指定Dockerfile文件名称
    image: tomcat_dcdf:1.0.1    # 构建生成的镜像文件名称
    container_name: tomcat_dcdf
    ports:
      - 8081:8080
    environment: 
      TZ: Asia/Shanghai
</code></pre>
<h3 id="2、Dockerfile-文件"><a href="#2、Dockerfile-文件" class="headerlink" title="2、Dockerfile 文件"></a>2、Dockerfile 文件</h3><pre class=" language-txt"><code class="language-txt">FROM daocloud.io/library/tomcat:8.5.15-jre8  
CP  test.war /var/local/tomcat/webapps</code></pre>
<p>目录层级</p>
<ul>
<li>docker_tomcat_dcdf<br>|–+ docker-compose<br>|  |– docker-compose.yml<br>|– dockerfile<br>|– test.war</li>
</ul>
<p>注意，测试test.war，需要先用客户端连接mysql，创建test 数据库。</p>
<h3 id="3、执行构建-启动命令"><a href="#3、执行构建-启动命令" class="headerlink" title="3、执行构建/启动命令"></a>3、执行构建/启动命令</h3><p>一定要在 <code>docker-compse</code> 目录执行，<code>docker-compose.yml</code> 在这个目录。</p>
<pre class=" language-bash"><code class="language-bash">docker-compse up -d</code></pre>
<p>因为：<strong>在使用docker-compose 命令时，默认会在当前目录下找 docker-compose.yml 文件。</strong></p>
<p>注意：</p>
<p><code>docker-compse up -d</code> : 可以直接启动基于<code>docker-compose.yml</code> 文件以及  <code>Dockerfile</code> 文件构建的自定义镜像。 如果自定义镜像不存在， <code>docker-compose</code> 会自动构建出自定义镜像，如果自定义镜像已经存在， <code>docker-compose</code> 会直接运行这个自定义镜像。</p>
<p>如果需要重新构建自定义镜像，执行：</p>
<pre class=" language-bash"><code class="language-bash"> docker-compose build</code></pre>
<p>如果需要在运行之前，重新构建自定义镜像，执行：</p>
<pre class=" language-bash"><code class="language-bash"> docker-compose up  -d  --build</code></pre>
<h3 id="4、自建示例"><a href="#4、自建示例" class="headerlink" title="4、自建示例"></a>4、自建示例</h3><h4 id="示例一：Docker-compose-管理Nginx"><a href="#示例一：Docker-compose-管理Nginx" class="headerlink" title="示例一：Docker-compose 管理Nginx"></a>示例一：Docker-compose 管理Nginx</h4><p>yml文件：</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3.1'</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">nginx</span><span class="token punctuation">:</span> 
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">image</span><span class="token punctuation">:</span> daocloud.io/library/nginx<span class="token punctuation">:</span>latest
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> nginx
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token datetime number">80:80</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> /opt/docker_nginx/conf.d/<span class="token punctuation">:</span>etc/nginx/conf.d</code></pre>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>java 查漏补缺-jdk版本版本变化补充学习</title>
    <url>/posts/80dc9555.html</url>
    <content><![CDATA[<h2 id="JDK各个版本的变化补充学习"><a href="#JDK各个版本的变化补充学习" class="headerlink" title="JDK各个版本的变化补充学习"></a>JDK各个版本的变化补充学习</h2><h3 id="JDK1-5"><a href="#JDK1-5" class="headerlink" title="JDK1.5"></a>JDK1.5</h3><h4 id="1-类包装器"><a href="#1-类包装器" class="headerlink" title="1. 类包装器."></a>1. 类包装器.</h4><p>自动装箱与拆箱。实际操作中比较常见。</p>
<h4 id="2-枚举类型使用。"><a href="#2-枚举类型使用。" class="headerlink" title="2. 枚举类型使用。"></a>2. 枚举类型使用。</h4><p>实际中按需使用。我也在实际中使用过，需要注意的是使用枚举类型与扩展性的问题，比如性别永远只有”男”和”女”，不会增加扩展第三种，那么枚举是推荐使用的，如果枚举内容是扩展的，不建议使用枚举类型。</p>
<h4 id="3-静态方法倒入。"><a href="#3-静态方法倒入。" class="headerlink" title="3. 静态方法倒入。"></a>3. 静态方法倒入。</h4><p>说实话，这个我在实际中真没有用过。语法<code>import static</code><br>大致分两种：<br>   （1）导入指定类的某个静态成员变量、方法。<br>   （2）导入指定类的全部的静态成员变量、方法。</p>
<p>示例如下：</p>
<pre class=" language-JAVA"><code class="language-JAVA">/*
 * 使用import static,导入java.lang.System下的out这个静态成员变量
 */
import static java.lang.System.out;

public class ImptTest {

    public static void main(String[] args) {
        out.println("hello world");
    }
}</code></pre>
<p>导入静态方法示例：</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*
 * 使用import static,导入java.lang.Math这个类中的round方法
 */</span>
<span class="token keyword">import</span> <span class="token keyword">static</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Math<span class="token punctuation">.</span>round<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImptTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//out.println("hello world");</span>
        <span class="token function">round</span><span class="token punctuation">(</span><span class="token number">123.123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>导入全部静态成员、静态方法示例：</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*
 * 像这样使用.*,则表示类中所有的静态成员变量和静态方法都被导入了
 */</span>
<span class="token keyword">import</span> <span class="token keyword">static</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>System<span class="token punctuation">.</span>*<span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token keyword">static</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Math<span class="token punctuation">.</span>*<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImptTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="4-可变参数使用。"><a href="#4-可变参数使用。" class="headerlink" title="4. 可变参数使用。"></a>4. 可变参数使用。</h4><p>该特征在实际中使用过，实用性还是非常不错的。</p>
<p>主要特征：<br>（1）一个方法中只能指定一个可变参数，<br>（2）可变参数必须是方法的最后一个参数。<br>（3）可变参数类型必须一致.<br>（4）拥有可变参数的方法可以被重载，在调用方法的时，如果能够和固定参数的方法匹配，也能够与可变长参数的方法匹配，则会调用固定参数的方法。<br>（5）被调用的方法不允许和两个可变参数匹配，否则出现错误。</p>
<p>调用特点：<br>（1）可以不写参数，即传入空参。<br>（2）可以直接在里边写入参数，参数间用逗号隔开；<br>（3）可变参数兼容数组，数组不能兼容可变参数；<br>（4）注意参数里的null<br>如示例：</p>
<pre class=" language-JAVA"><code class="language-JAVA">public static void say(String...names) { 
    for(String name : names) {
        System.out.print(name + ",hello! "); 
    }
}</code></pre>
<p>调用示例：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    String<span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"tom"</span><span class="token punctuation">,</span> <span class="token string">"cat"</span><span class="token punctuation">,</span> <span class="token string">"dog"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不传递参数</span>
    <span class="token function">say</span><span class="token punctuation">(</span><span class="token string">"dog"</span><span class="token punctuation">,</span> <span class="token string">"cat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 传递多个参数</span>
    <span class="token function">say</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 可传递数组</span>
<span class="token punctuation">}</span></code></pre>
<p>反面定义示例：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>names<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">for</span><span class="token punctuation">(</span>String name <span class="token operator">:</span> names<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">",hello! "</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>names <span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>names<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token comment" spellcheck="true">//不允许出现多个可变参数</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span>String sex<span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>names<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
     <span class="token comment" spellcheck="true">//调用时与第一个say方法冲突，不会被调用</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>names<span class="token punctuation">,</span>Sring date<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
      <span class="token comment" spellcheck="true">//可变参数必须是最后一个参数</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="5-内省-Introspector"><a href="#5-内省-Introspector" class="headerlink" title="5. 内省(Introspector)"></a>5. 内省(Introspector)</h4><p>内省(Introspector) 是Java 语言对 JavaBean 类属性、事件的一种缺省处理方法。</p>
<p>JavaBean是一种特殊的类，主要用于传递数据信息，这种类中的方法主要用于访问私有的字段，且方法名符合某种命名规则。如果在两个模块之间传递信息，可以将信息封装进JavaBean中，这种对象称为“值对象”(Value Object)，或“VO”。方法比较少。这些信息储存在类的私有变量中，通过set()、get()获得。</p>
<p>实际使用引入apache的BeanUtils工具包：<br>　　 BeanUtils工具包：下载：<a href="http://commons.apache.org/beanutils/" target="_blank" rel="noopener">http://commons.apache.org/beanutils/</a>　<br>    (应用的时候还需要一个logging包 <a href="http://commons.apache.org/logging/" target="_blank" rel="noopener">http://commons.apache.org/logging/</a>)</p>
<h4 id="6-泛型-Generic"><a href="#6-泛型-Generic" class="headerlink" title="6.泛型(Generic)."></a>6.泛型(Generic).</h4><p>简单的说就是可以指定集合里元素的类型。</p>
<h4 id="7-for-each循环。"><a href="#7-for-each循环。" class="headerlink" title="7. for-each循环。"></a>7. for-each循环。</h4><p>比较常用。语法<code>for(类型 变量 ： 集合){}</code></p>
<p>示例：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zxc<span class="token punctuation">.</span>jdk8<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForEachTest</span> <span class="token punctuation">{</span>

     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> JAXBException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>
         String<span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"tom"</span><span class="token punctuation">,</span><span class="token string">"jerry"</span><span class="token punctuation">,</span><span class="token string">"mike"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
          <span class="token keyword">for</span><span class="token punctuation">(</span>String str <span class="token operator">:</span> names<span class="token punctuation">)</span><span class="token punctuation">{</span>
              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str:"</span><span class="token operator">+</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
     <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="JDK1-6"><a href="#JDK1-6" class="headerlink" title="JDK1.6"></a>JDK1.6</h3><h4 id="主要变化"><a href="#主要变化" class="headerlink" title="主要变化"></a>主要变化</h4><p>1、引入了一个支持脚本引擎的新框架Scripting for the Java Platform (JSR223脚本引擎)</p>
<p>2、UI的增强</p>
<p>3、对WebService支持的增强（JAX-WS2.0和JAXB2.0）</p>
<p>4、一系列新的安全相关的增强</p>
<p>5、JDBC4.0</p>
<p>6、Compiler API （JSR199）<br>支持动态编译。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavaCompilerAPICompiler</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">compile</span><span class="token punctuation">(</span>Path src<span class="token punctuation">,</span> Path output<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>
        JavaCompiler compiler <span class="token operator">=</span> ToolProvider<span class="token punctuation">.</span><span class="token function">getSystemJavaCompiler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span>StandardJavaFileManager fileManager <span class="token operator">=</span> compiler<span class="token punctuation">.</span><span class="token function">getStandardFileManager</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            Iterable<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">JavaFileObject</span><span class="token operator">></span> compilationUnits <span class="token operator">=</span> fileManager<span class="token punctuation">.</span><span class="token function">getJavaFileObjects</span><span class="token punctuation">(</span>src<span class="token punctuation">.</span><span class="token function">toFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Iterable<span class="token operator">&lt;</span>String<span class="token operator">></span> options <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"-d"</span><span class="token punctuation">,</span> output<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            JavaCompiler<span class="token punctuation">.</span>CompilationTask task <span class="token operator">=</span> compiler<span class="token punctuation">.</span><span class="token function">getTask</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> fileManager<span class="token punctuation">,</span> null<span class="token punctuation">,</span> options<span class="token punctuation">,</span> null<span class="token punctuation">,</span> compilationUnits<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">boolean</span> result <span class="token operator">=</span> task<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>7、通用的Annotations支持 （JSR269）<br>一部分是进行注解处理的javax.annotation.processing。<br>另一部分是对程序的静态结构进行建模的javax.lang.model。</p>
<h4 id="JAXB2来实现对象与XML之间的映射"><a href="#JAXB2来实现对象与XML之间的映射" class="headerlink" title="JAXB2来实现对象与XML之间的映射"></a>JAXB2来实现对象与XML之间的映射</h4><p>JAXB:<br>    是Java Architecture for XML Binding的缩写，可以将一个Java对象和XML格式对象相互转换。JAXB2在底层是用StAX(JSR 173)来处理XML文档。</p>
<p>StAX(JSR 173)是JDK6.0中除了DOM和SAX之外的又一种处理XML文档的API。</p>
<p>StAX 的来历 ：在JAXP1.3(JSR 206)有两种处理XML文档的方法:DOM(Document Object Model)和SAX(Simple API for XML).</p>
<p>由 于JDK6.0中的JAXB2(JSR 222)和JAX-WS 2.0(JSR 224)都会用到StAX，所以Sun决定把StAX加入到JAXP家族当中来，并将JAXP的版本升级到1.4(JAXP1.4是JAXP1.3的维护版本). JDK6里面JAXP的版本就是1.4. 。</p>
<p>StAX是The Streaming API for XML的缩写，一种利用拉模式解析(pull-parsing)XML文档的API.StAX通过提供一种基于事件迭代器(Iterator)的API让程序员去控制xml文档解析过程,程序遍历这个事件迭代器去处理每一个解析事件，解析事件可以看做是程序拉出来的，也就是程序促使解析器产生一个解析事件，然后处理该事件，之后又促使解析器产生下一个解析事件，如此循环直到碰到文档结束符；</p>
<p>SAX也是基于事件处理xml文档，但却是用推模式解析，解析器解析完整个xml文档后，才产生解析事件，然后推给程序去处理这些事件；DOM 采用的方式是将整个xml文档映射到一颗内存树，这样就可以很容易地得到父节点和子结点以及兄弟节点的数据，但如果文档很大，将会严重影响性能。<br>更多学习可以参考1：<a href="https://blog.csdn.net/visant/java/article/details/79778967" target="_blank" rel="noopener">https://blog.csdn.net/visant/java/article/details/79778967</a><br>更多学习可以参考2：<a href="http://www.blogjava.net/hsith/archive/2006/06/29/55817.html" target="_blank" rel="noopener">http://www.blogjava.net/hsith/archive/2006/06/29/55817.html</a></p>
<p>示例代码：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zxc<span class="token punctuation">.</span>jdk5<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileReader<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileWriter<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Calendar<span class="token punctuation">;</span>

<span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>JAXBContext<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>JAXBException<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>Marshaller<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>Unmarshaller<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Jaxb2Test</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> JAXBException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>
        JAXBContext context <span class="token operator">=</span> JAXBContext<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//下面代码演示将对象转变为xml</span>
        Marshaller m <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">createMarshaller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Address address <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token string">"China"</span><span class="token punctuation">,</span><span class="token string">"Shanghai"</span><span class="token punctuation">,</span><span class="token string">"Shanghai"</span><span class="token punctuation">,</span><span class="token string">" xuhui"</span><span class="token punctuation">,</span><span class="token string">"100080"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"小菜"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span>Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token punctuation">;</span>
        FileWriter fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"D:\\user.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        m<span class="token punctuation">.</span><span class="token function">marshal</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span>fw<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//下面代码演示将上面生成的xml转换为对象</span>
        FileReader fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"D:\user.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Unmarshaller um <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">createUnmarshaller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        User user2 <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span>um<span class="token punctuation">.</span><span class="token function">unmarshal</span><span class="token punctuation">(</span>fr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Country:"</span><span class="token operator">+</span>user2<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCountry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输入China</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>user类:</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zxc<span class="token punctuation">.</span>jdk5<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Calendar<span class="token punctuation">;</span>

<span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>XmlElement<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>XmlRootElement<span class="token punctuation">;</span>

<span class="token annotation punctuation">@XmlRootElement</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@XmlElement</span>
     String name<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@XmlElement</span>
     <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@XmlElement</span>
    Calendar birthDay<span class="token punctuation">;</span> 
    <span class="token annotation punctuation">@XmlElement</span>
     Address address<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> Calendar birthDay<span class="token punctuation">,</span> Address address<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>birthDay <span class="token operator">=</span> birthDay<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> Address <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> address<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>Address类</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zxc<span class="token punctuation">.</span>jdk5<span class="token punctuation">;</span>

<span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>XmlAttribute<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>XmlElement<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@XmlAttribute</span>
    String country<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@XmlElement</span>
    String province<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@XmlElement</span>
    String city<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@XmlElement</span>
    String street<span class="token punctuation">;</span>

    String houseNo<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 由于没有添加@XmlElement,所以该元素不会出现在输出的xml中</span>

    <span class="token keyword">public</span> <span class="token function">Address</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">Address</span><span class="token punctuation">(</span>String country<span class="token punctuation">,</span> String province<span class="token punctuation">,</span> String city<span class="token punctuation">,</span> String street<span class="token punctuation">,</span> String houseNo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>country <span class="token operator">=</span> country<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>province <span class="token operator">=</span> province<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>city <span class="token operator">=</span> city<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>street <span class="token operator">=</span> street<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>houseNo <span class="token operator">=</span> houseNo<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> String <span class="token function">getCountry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> country<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>转换的XML内容：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>小菜<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>age</span><span class="token punctuation">></span></span>18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>age</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>birthDay</span><span class="token punctuation">></span></span>2020-02-24T22:09:03.019+08:00<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>birthDay</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>address</span> <span class="token attr-name">country</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>China<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>province</span><span class="token punctuation">></span></span>Shanghai<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>province</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>city</span><span class="token punctuation">></span></span>Shanghai<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>city</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>street</span><span class="token punctuation">></span></span> xuhui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>street</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>address</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span></code></pre>
<p>注意@XmlAccessorType注解。<br>另Castor实现XML与Java的互转 <a href="http://www.castor.org/" target="_blank" rel="noopener">http://www.castor.org/</a></p>
<p>另外还有 Compiler API，Http Server API，插入式注解处理API(Pluggable Annotation Processing API)，对脚本语言的支持如: ruby, groovy, javascript，Common Annotations 涉及内容较多篇幅较长，后续单独学习。</p>
<h3 id="JDK1-7"><a href="#JDK1-7" class="headerlink" title="JDK1.7"></a>JDK1.7</h3><h4 id="1-switch中可以使用字符串。"><a href="#1-switch中可以使用字符串。" class="headerlink" title="1. switch中可以使用字符串。"></a>1. switch中可以使用字符串。</h4><pre><code>非常实用的。</code></pre><h4 id="2-泛型实例化类型自动推断。"><a href="#2-泛型实例化类型自动推断。" class="headerlink" title="2. 泛型实例化类型自动推断。"></a>2. 泛型实例化类型自动推断。</h4><p>指定类型:</p>
<pre class=" language-java"><code class="language-java">    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> myMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre>
<p>自动推断:</p>
<pre class=" language-java"><code class="language-java">    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> myMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre>
<h4 id="3-数值字面量改进"><a href="#3-数值字面量改进" class="headerlink" title="3. 数值字面量改进."></a>3. 数值字面量改进.</h4><p>数字前面加”0B”或”0b”表示二进制数。如：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> binary <span class="token operator">=</span> <span class="token number">0b10011001</span><span class="token punctuation">;</span></code></pre>
<p>数值中可以添加<code>&quot;_&quot;</code>。 如： </p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> one_million <span class="token operator">=</span> 1_000_000<span class="token punctuation">;</span></code></pre>
<h4 id="4-try-with-resources语句。"><a href="#4-try-with-resources语句。" class="headerlink" title="4. try-with-resources语句。"></a>4. try-with-resources语句。</h4><p>try-with-resources语句中会被自动调用，用于自动释放资源。自动关闭接口AutoCloseable。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">(</span>OutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"D:/file"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 不需要再次指明fos.close();</span>
<span class="token punctuation">}</span></code></pre>
<ol start="5">
<li>优化异常处理</li>
</ol>
<pre class=" language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>
   result <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> <span class="token operator">|</span> IllegalAccessException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="JDK1-8"><a href="#JDK1-8" class="headerlink" title="JDK1.8"></a>JDK1.8</h3><h4 id="1-Lambda-表达式"><a href="#1-Lambda-表达式" class="headerlink" title="1. Lambda 表达式"></a>1. Lambda 表达式</h4><p>Lambda表达式（也称为闭包）是整个Java 8发行版中最受期待的在Java语言层面上的改变，Lambda允许把函数作为一个方法的参数进行传递。</p>
<p>Lambda 表达式的标准格式：</p>
<pre><code>(参数类型 参数名) -&gt; {
    方法体;
    return 返回值;
}</code></pre><p>Lambda 表达式的省略规则：<br>    1. 小括号中的参数类型可以省略。<br>    2. 如果小括号中只有一个参数，那么可以省略小括号。<br>    3. 如果大括号中只有一条语句，那么可以省略大括号，return，分号。<br>其他注意：不允许声明一个与局部变量同名的参数或者局部变量。<br>四种方法引用类型<br>| 类型          | 示例                                      |<br>| 引用静态方法 |    ContainingClass::staticMethodName |<br>| 引用某个对象的实例方法     |containingObject::instanceMethodName |<br>| 引用某个类型的任意对象的实例方法 |    ContainingType::methodName |<br>| 引用构造方法 |    ClassName::new  |</p>
<pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">// 使用 java 7 排序</span>
   <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">sortJava7</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> names<span class="token punctuation">)</span><span class="token punctuation">{</span>   
      Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>names<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token annotation punctuation">@Override</span>
         <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>String s1<span class="token punctuation">,</span> String s2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> s1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

   <span class="token comment" spellcheck="true">// 使用 java 8 排序</span>
   <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">sortJava8</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> names<span class="token punctuation">)</span><span class="token punctuation">{</span>
      Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>names<span class="token punctuation">,</span> <span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> s1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span></code></pre>
<p>Lambda 使用条件</p>
<p>Lambda 表达式的使用前提:</p>
<pre><code>必须有接口（不能是抽象类），接口中有且仅有一个需要被重写的抽象方法。
必须支持上下文推导，要能够推导出来 Lambda 表达式表示的是哪个接口中的内容。 
可以使用接口当做参数，然后传递 Lambda 表达式(常用)，也可以将 Lambda 表达式赋值给一个接口类型的变量。</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zxc<span class="token punctuation">.</span>jdk8<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyInterface</span> <span class="token punctuation">{</span>

    <span class="token keyword">void</span> <span class="token function">printStr</span><span class="token punctuation">(</span>String string<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span></code></pre>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span>  <span class="token class-name">LambdaTest</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//使用接口当做参数</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span>MyInterface m<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//m = s -> System.out.println(s)</span>
        m<span class="token punctuation">.</span><span class="token function">printStr</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//使用接口当做参数，然后传递Lambda表达式。</span>
        <span class="token comment" spellcheck="true">//method(s -> System.out.println(s));</span>

        <span class="token comment" spellcheck="true">//使用匿名内部类方式创建对象</span>
        <span class="token comment" spellcheck="true">/*
        MyInterface m = new MyInterface() {
            @Override
            public void printStr(String str) {
                System.out.println(str);
            }
        };
        */</span>
        <span class="token comment" spellcheck="true">//Lambda 表达式赋值给接口类型变量</span>
        MyInterface m <span class="token operator">=</span> str <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        m<span class="token punctuation">.</span><span class="token function">printStr</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token comment" spellcheck="true">// 1.1使用匿名内部类  </span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
            <span class="token annotation punctuation">@Override</span>  
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello world !"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
            <span class="token punctuation">}</span>  
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  

        <span class="token comment" spellcheck="true">// 1.2使用 lambda expression  </span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello world !"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  

        <span class="token comment" spellcheck="true">// 2.1使用匿名内部类  </span>
        Runnable race1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
            <span class="token annotation punctuation">@Override</span>  
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello world !"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
            <span class="token punctuation">}</span>  
        <span class="token punctuation">}</span><span class="token punctuation">;</span>  

        <span class="token comment" spellcheck="true">// 2.2使用 lambda expression  </span>
        Runnable race2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello world !"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  

        <span class="token comment" spellcheck="true">// 直接调用 run 方法(没开新线程哦!)  </span>
        race1<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        race2<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="2-函数式接口"><a href="#2-函数式接口" class="headerlink" title="2. 函数式接口"></a>2. 函数式接口</h4><p>JDK 8之前就有的函数式接口（使用@FunctionalInterface定义 ）</p>
<pre class=" language-java"><code class="language-java">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Runnable

java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Callable

java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>PrivilegedAction

java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Comparator

java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileFilter

java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span>PathMatcher 

java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationHandler

java<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>PropertyChangeListener

java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ActionListener  

javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ChangeListener </code></pre>
<h4 id="3-接口默认方法与静态方法"><a href="#3-接口默认方法与静态方法" class="headerlink" title="3. 接口默认方法与静态方法"></a>3. 接口默认方法与静态方法</h4><p>接口默认方法，用<code>default</code>关键字。<br>接口静态方法，用<code>static</code>关键字：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zxc<span class="token punctuation">.</span>jdk8<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyInterface</span> <span class="token punctuation">{</span>

    <span class="token keyword">void</span> <span class="token function">printStr</span><span class="token punctuation">(</span>String string<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" this is default method"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isNull</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Interface Null Check"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token keyword">return</span> str <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span> 
<span class="token punctuation">}</span></code></pre>
<p>注意：类继承多个Interface接口同名方法(如show())时，必须在子类中@Override重写父类show()方法。</p>
<p>特性说明：</p>
<pre><code>1,函数式接口仅仅只有一个方法(非默认或静态方法)，用于显示转换成ladbma表达式。
2, java.lang.Runnable接口 java.util.concurrent.Callable接口是两个最典型的函数式接口。
3.如果一个函数式接口添加一个普通方法，就变成了非函数式接口（一般定义的接口）。
4.Jdk8 规范里添加了注解@FunctionalInterface来限制函数式接口不能修改为普通的接口.</code></pre><p>jdk8新增了四个重要的函数式接口：函数形接口 、供给形接口、消费型接口、判断型接口 </p>
<h4 id="4-日期时间的API"><a href="#4-日期时间的API" class="headerlink" title="4. 日期时间的API."></a>4. 日期时间的API.</h4><p>新的时间及日期API类在java.time包中，不可变且线程安全的。<br>Instant获取时间戳, LocalDate只处理日期、LocalTime只处理时间,LocalDateTime只处理日期时间，ZonedDateTime包含时区的日期时间<br>TemporalAdjusters 日期调整<br>DateTimeFormatter 替代之前版本的SimpleDateFormat类<br>YearMonth年月组合,MonthDay月日组合<br>Clockdeng</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zxc<span class="token punctuation">.</span>jdk8<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>Clock<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>LocalDate<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>LocalDateTime<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>LocalTime<span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token keyword">static</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>System<span class="token punctuation">.</span>out<span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DateTimeTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

         LocalDate date <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
         LocalTime time <span class="token operator">=</span> LocalTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span>Clock<span class="token punctuation">.</span><span class="token function">systemUTC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         LocalDateTime dttm <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" date = "</span> <span class="token operator">+</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>
         out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" time = "</span> <span class="token operator">+</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>
         out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" dttm = "</span> <span class="token operator">+</span>dttm<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>控制台输出：</p>
<pre><code> date = 2020-05-31
 time = 16:29:41.010
 dttm = 2020-05-31T00:29:41.010</code></pre><p>更多内容参考<a href="/post/d0e15f60.html">《java 查漏补缺-java8里的日期时间API》</a></p>
<h4 id="5-Optional-类"><a href="#5-Optional-类" class="headerlink" title="5. Optional 类"></a>5. Optional 类</h4><p>Optional 是个容器，它可以保存类型T的值，或者仅仅保存null。Optional提供很多有用的方法，这样我们就不用显式进行空值检测。比较友好的的解决空指针异常。Optional.of()或者Optional.ofNullable()：创建Optional对象，差别在于of不允许参数是null，而ofNullable则无限制。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zxc<span class="token punctuation">.</span>jdk8<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Optional<span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token keyword">static</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>System<span class="token punctuation">.</span>out<span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OptionalTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 参数不能是null</span>
        Optional<span class="token operator">&lt;</span>Integer<span class="token operator">></span> opt1 <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>opt1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 参数可以是null</span>
        Optional<span class="token operator">&lt;</span>Integer<span class="token operator">></span> opt2 <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>opt2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 参数可以是非null</span>
        Optional<span class="token operator">&lt;</span>Integer<span class="token operator">></span> opt3 <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Optional<span class="token operator">&lt;</span>String<span class="token operator">></span> opt4 <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>opt3<span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>opt4<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// orElse</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>opt1<span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// true</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>opt4<span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">"1000"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"1000"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// true</span>

        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>optional1<span class="token punctuation">.</span><span class="token function">orElseGet</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">1000</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="6-Nashorn-JavaScript引擎。"><a href="#6-Nashorn-JavaScript引擎。" class="headerlink" title="6. Nashorn, JavaScript引擎。"></a>6. Nashorn, JavaScript引擎。</h4><p>Java 8提供了一个新的Nashorn javascript引擎，它允许我们在JVM上运行特定的javascript应用。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zxc<span class="token punctuation">.</span>jdk8<span class="token punctuation">;</span>

<span class="token keyword">import</span> javax<span class="token punctuation">.</span>script<span class="token punctuation">.</span>ScriptEngine<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>script<span class="token punctuation">.</span>ScriptEngineManager<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>script<span class="token punctuation">.</span>ScriptException<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NashornTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ScriptException <span class="token punctuation">{</span>
        ScriptEngine engine <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScriptEngineManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getEngineByName</span><span class="token punctuation">(</span><span class="token string">"nashorn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        engine<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"print('Hello World!');"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span></code></pre>
<p>Nashorn JavaScript基于ECMAScript 5.1，但是它的后续版本会对ES6提供支持：<br>Nashorn的当前策略遵循ECMAScript规范。当我们在JDK8中发布它时，它将基于ECMAScript 5.1。Nashorn未来的主要发布基于ECMAScript 6。<br>Nashorn定义了大量对ECMAScript标准的语言和API扩展。但是首先让我们看一看Java和JavaScript代码如何交互。</p>
<p>注意：</p>
<p>该引擎在java11是被弃用。ECMAScript语言标准的快速发展，维护Nashorn引擎变得越发挑战，因此该引擎将在Java中废弃。<br>两个模块将会被最终弃用，被标注为@Deprecated(forRemoval=true)。</p>
<p>jdk.scripting.nashorn模块，包含dk.nashorn.api.scripting和jdk.nashorn.api.tree包。jdk.scripting.nashorn.shell模块，包含jjs工具，运行jjs将显示警告。</p>
<p>需要注意的是，java.scripting模块中javax.script包下的相关API不受影响。</p>
<h4 id="7-新工具"><a href="#7-新工具" class="headerlink" title="7. 新工具"></a>7. 新工具</h4><p>新的编译工具，如：Nashorn引擎 jjs、 类依赖分析器jdeps。<br>Nashorn引擎jjs：<br>jjs是一个基于标准Nashorn引擎的命令行工具，可以接受js源码并执行。<br>类依赖分析器jdeps：<br>jdeps是一个命令行工具，它可以展示包层级和类层级的Java类依赖关系，它以.class文件、目录或者Jar文件为输入，然后会把依赖关系输出到控制台。<br>JVM的新特性<br>使用Metaspace（JEP 122）代替持久代（PermGen space）。在JVM参数方面，使用<code>-XX:MetaSpaceSize</code>和<code>-XX:MaxMetaspaceSize</code>代替原来的<code>-XX:PermSize</code>和<code>-XX:MaxPermSize</code>。</p>
<h4 id="8-其他"><a href="#8-其他" class="headerlink" title="8. 其他"></a>8. 其他</h4><p>若遇到随时补充学习。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 之完整入门</title>
    <url>/posts/9e6e2be2.html</url>
    <content><![CDATA[<h2 id="Docker-一篇入门"><a href="#Docker-一篇入门" class="headerlink" title="Docker 一篇入门"></a>Docker 一篇入门</h2><h2 id="一、Docker-简介"><a href="#一、Docker-简介" class="headerlink" title="一、Docker 简介"></a>一、Docker 简介</h2><h3 id="1、基本概述"><a href="#1、基本概述" class="headerlink" title="1、基本概述"></a>1、基本概述</h3><p>Docker是世界领先的软件容器平台。 </p>
<p>Docker是基于Go语言实现的云开源项目。</p>
<p>Docker的主要目标是“Build，Ship and Run Any App,Anywhere”。</p>
<p>通过对应用组件的封装、分发、部署、运行等生命周期的管理，使用户的APP（可以是一个WEB应用或数据库应用等等）及其运行环境能够做到<strong>“一次封装，到处运行”</strong>。</p>
<p>因为虚拟机模拟的就是带操作系统和环境的，其资源占用多、冗余步骤多、启动慢等不足，Linux 发展出了另一种虚拟化技术：Linux 容器（Linux Containers，缩写为 LXC）。<strong>Linux 容器不是模拟一个完整的操作系统，而是对进程进行隔离。</strong>有了容器，就可以将软件运行所需的所有资源打包到一个隔离的容器中。容器与虚拟机不同，不需要捆绑一整套操作系统，只需要软件工作所需的库资源和设置。系统因此而变得高效轻量并保证部署在任何环境中的软件都能始终如一地运行。</p>
<p>Docker 在Linux 容器技术的基础上发展过来的。将应用运行在 Docker 容器上面，而 Docker 容器在任何操作系统上都是一致的，这就实现了跨平台、跨服务器。只需要一次配置好环境，换到不同的机器上就可以一键部署好，大大简化了操作。这样是顺应了 DevOps 开发运维理念。</p>
<p>针对集群环境，可以快速部署安装。</p>
<p><strong>意义或作用：</strong></p>
<p>Docker 解决了运行环境和配置问题软件容器，方便做持续集成并有助于整体发布的容器虚拟化技术。</p>
<h3 id="2、官网及仓库"><a href="#2、官网及仓库" class="headerlink" title="2、官网及仓库"></a>2、官网及仓库</h3><p>docker官网：<a href="http://www.docker.com" target="_blank" rel="noopener">http://www.docker.com</a></p>
<p>docker中文网站：<a href="https://www.docker-cn.com" target="_blank" rel="noopener">https://www.docker-cn.com</a></p>
<p>Docker Hub官网: <a href="https://hub.docker.com/" target="_blank" rel="noopener">https://hub.docker.com/</a></p>
<h2 id="二、Docker-安装"><a href="#二、Docker-安装" class="headerlink" title="二、Docker 安装"></a>二、Docker 安装</h2><h3 id="1、环境检查"><a href="#1、环境检查" class="headerlink" title="1、环境检查"></a>1、环境检查</h3><p>CentOS Docker 安装<br>Docker支持以下的CentOS版本：<br>    CentOS 7 (64-bit)<br>    CentOS 6.5 (64-bit) 或更高的版本</p>
<p>前提条件<br>目前，CentOS 仅发行版本中的内核支持 Docker。<br>Docker 运行在 CentOS 7 上，要求系统为64位、系统内核版本为 3.10 以上。<br>Docker 运行在 CentOS-6.5 或更高的版本的 CentOS 上，要求系统为64位、系统内核版本为 2.6.32-431 或者更高版本。</p>
<p>Linux 检查内核版本命令：</p>
<pre class=" language-bash"><code class="language-bash"> <span class="token function">uname</span> -a
 <span class="token function">cat</span> /proc/version
 lsb_release -a</code></pre>
<p>如果命令 <code>lsb_release -a</code>提示<code>command not found</code>则需要安装<code>yum install redhat-lsb -y</code>。</p>
<h3 id="2、基本组成"><a href="#2、基本组成" class="headerlink" title="2、基本组成"></a>2、基本组成</h3><p>docker主机(Host)：安装了Docker程序的机器，Docker直接安装在操作系统（windows / linux）上；<br>docker客户端(Client)：连接docker主机进行操作；<br><strong>docker仓库(Registry)：</strong>用来保存各种打包好的软件镜像；<br><strong>docker镜像(Images)：</strong>软件打包好的镜像；放在docker仓库中；<br><strong>docker容器(Container)：</strong>镜像启动后的实例称为一个容器；容器是独立运行的一个或一组应用。</p>
<p>架构图：</p>
<h3 id="3、安装步骤"><a href="#3、安装步骤" class="headerlink" title="3、安装步骤"></a>3、安装步骤</h3><p>官方文档也有安装步骤：<a href="https://docs.docker.com/install/linux/docker-ce/centos/" target="_blank" rel="noopener">https://docs.docker.com/install/linux/docker-ce/centos/</a></p>
<p><strong>Centos 6.8 安装Docker：</strong></p>
<p>（1）环境准备</p>
<p>Docker使用EPEL发布，RHEL系的OS首先要确保已经持有EPEL仓库，否则先检查OS的版本，然后安装相应的EPEL包。</p>
<pre class=" language-bash"><code class="language-bash">yum <span class="token function">install</span> -y epel-release</code></pre>
<p>（2）安装docker</p>
<pre class=" language-bash"><code class="language-bash">yum <span class="token function">install</span> -y docker-io</code></pre>
<p>（3）配置文件</p>
<p>安装后的配置文件：/etc/sysconfig/docker</p>
<p>（4）启停操作</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">service</span> docker start
<span class="token function">service</span> docker stop</code></pre>
<p>（5）验证</p>
<pre class=" language-bash"><code class="language-bash">docker version</code></pre>
<p><strong>Centos 7 安装Docker：</strong></p>
<p>（1）环境检查</p>
<p>版本确认：</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span> /etc/redhat-release</code></pre>
<p>联网检查</p>
<p>（2）gcc环境安装</p>
<pre class=" language-bash"><code class="language-bash">yum -y <span class="token function">install</span> gcc
yum -y <span class="token function">install</span> gcc-c++</code></pre>
<p>（3）旧版卸载</p>
<p>可参考官网操作，新机器可省略此操作。</p>
<pre class=" language-bash"><code class="language-bash">yum remove docker \
                  docker-client \
                  docker-client-latest \
                  docker-common \
                  docker-latest \
                  docker-latest-logrotate \
                  docker-logrotate \
                  docker-selinux \
                  docker-engine-selinux \
                  docker-engine
</code></pre>
<p>（4）安装依赖包</p>
<pre class=" language-bash"><code class="language-bash">yum <span class="token function">install</span> -y yum-utils device-mapper-persistent-data lvm2</code></pre>
<p>（5）修改镜像仓库</p>
<p>主要是为了优化下载速度</p>
<pre class=" language-bash"><code class="language-bash">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</code></pre>
<p>（6）更新yum包索引</p>
<pre class=" language-bash"><code class="language-bash">yum makecache fast</code></pre>
<p>（7）安装Docker CE</p>
<pre class=" language-bash"><code class="language-bash">yum -y <span class="token function">install</span> docker-ce</code></pre>
<p>（8）启停操作</p>
<pre class=" language-bash"><code class="language-bash">systemctl start docker
systemctl stop docker</code></pre>
<p>（9）测试验证</p>
<pre class=" language-bash"><code class="language-bash">docker version</code></pre>
<p>（10）配置镜像加速</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> -p /etc/docker
vim /etc/docker/daemon.json
systemctl daemon-reload  <span class="token comment" spellcheck="true"># 重新加载</span>
systemctl restart docker <span class="token comment" spellcheck="true"># 重启</span></code></pre>
<p><code>daemon.json</code> 内容：</p>
<pre class=" language-txt"><code class="language-txt">#网易云
{"registry-mirrors": ["http://hub-mirror.c.163.com"] }

或

 #阿里云
{
  "registry-mirrors": ["https://｛自已的编码｝.mirror.aliyuncs.com"]
}</code></pre>
<p>（11）卸载docker</p>
<pre class=" language-bahs"><code class="language-bahs">systemctl stop docker
yum -y remove docker-ce
rm -rf /var/lib/docker</code></pre>
<p>关于阿里云或网易云镜像加速</p>
<p>注册阿里云账户，登录阿里云开发者平台，获取加速器地址，配置参考第（10）步。</p>
<p>（12）更多命令</p>
<p>​ （A） ：<a href="https://docs.docker.com/engine/reference/commandline/docker/" target="_blank" rel="noopener">Docker 官方文档</a></p>
<p>​ （B）：参考每一个镜像的文档。</p>
<h2 id="三、Docker-原理"><a href="#三、Docker-原理" class="headerlink" title="三、Docker 原理"></a>三、Docker 原理</h2><p>Docker是一个Client-Server结构的系统，Docker守护进程运行在主机上， 然后通过Socket连接从客户端访问，守护进程从客户端接受命令并管理运行在主机上的容器。 </p>
<p>容器，是一个运行时环境，鲸鱼背上的一个个小集装箱。</p>
<p><strong>生命周期</strong></p>
<p>Docker 容器的生命周期里分为五种状态，其分别代表着：</p>
<ul>
<li>Created：容器已经被创建，容器所需的相关资源已经准备就绪，但容器中的程序还未处于运行状态。</li>
<li>Running：容器正在运行，也就是容器中的应用正在运行。</li>
<li>Paused：容器已暂停，表示容器中的所有程序都处于暂停 ( 不是停止 ) 状态。</li>
<li>Stopped：容器处于停止状态，占用的资源和沙盒环境都依然存在，只是容器中的应用程序均已停止。</li>
<li>Deleted：容器已删除，相关占用的资源及存储在 Docker 中的管理信息也都已释放和移除。</li>
</ul>
<h2 id="四、常用命令"><a href="#四、常用命令" class="headerlink" title="四、常用命令"></a>四、常用命令</h2><h3 id="1、帮助命令"><a href="#1、帮助命令" class="headerlink" title="1、帮助命令"></a>1、帮助命令</h3><pre><code>docker version
docker info
docker --help</code></pre><h3 id="2、镜像命令"><a href="#2、镜像命令" class="headerlink" title="2、镜像命令"></a>2、镜像命令</h3><p>（1）搜索镜像</p>
<p>可以直接在：<a href="https://hub.docker.com" target="_blank" rel="noopener">https://hub.docker.com</a> 搜索。</p>
<p>使用命令搜索镜像：</p>
<pre class=" language-bash"><code class="language-bash">docker search <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> images_name</code></pre>
<p>OPTIONS:</p>
<ul>
<li><strong>–no-trunc ：</strong>显示完整的镜像描述。</li>
<li><strong>-s ：</strong>列出收藏数不小于指定值的镜像。</li>
<li><strong>–automated：</strong>只列出automated build 类型的镜像。</li>
</ul>
<p>（2）下载镜像</p>
<pre class=" language-bash"><code class="language-bash">docker pull images_name<span class="token punctuation">[</span>:tag<span class="token punctuation">]</span></code></pre>
<p>（3）显示本地镜像</p>
<pre class=" language-bash"><code class="language-bash">docker images <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span></code></pre>
<p>OPTIONS：</p>
<ul>
<li><strong>-a ：</strong>列出本地所有镜像</li>
<li><strong>-q ：</strong>只显示镜像ID。</li>
<li><strong>–digests ：</strong>显示镜像的摘要信息</li>
<li><strong>–no-trunc ：</strong>显示完整的镜像信息</li>
</ul>
<p>（3）删除本地镜像</p>
<p>删除单个镜像：</p>
<pre><code>docker rmi -f images_id</code></pre><p>删除多个镜像：</p>
<pre class=" language-bash"><code class="language-bash">docker rmi -f images_name1:tag  images_name2:tag </code></pre>
<p>删除全部镜像：</p>
<pre><code>docker rmi -f $(docker images -qa)</code></pre><p>（4）提交镜像</p>
<p><code>docker commit</code> 提交容器副本使之成为一个新的镜像。</p>
<p>这个命令一般可以个性化好容器之后，制作成自己的镜像模板。</p>
<pre><code>docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</code></pre><p>OPTIONS说明：</p>
<ul>
<li><strong>-a ：</strong>提交的镜像作者；</li>
<li><strong>-c ：</strong>使用Dockerfile指令来创建镜像；</li>
<li><strong>-m ：</strong>提交时的说明文字；</li>
<li><strong>-p ：</strong>在commit时，将容器暂停。</li>
</ul>
<p>示例：</p>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 将容器a404c6c174a2 保存为新的镜像,并添加提交人信息和说明信息。</span>
docker commit -a <span class="token string">"xiaocai.com"</span> -m <span class="token string">"my mysql"</span> a404c6c174a2  mymysql:v1 </code></pre>
<p>（5）登录与提交</p>
<p>之所以要登录是因为要把本地镜像提交到镜像仓库，默认为官方仓库Docker Hub，也可以自己搭建自己的镜像仓库。</p>
<p>登录：</p>
<pre><code>docker login -u username -p password</code></pre><p>退出：</p>
<pre><code>docker logout</code></pre><p>本地镜像提交到镜像仓库</p>
<pre><code>docker push [OPTIONS] NAME[:TAG]</code></pre><p>OPTIONS说明：</p>
<ul>
<li><strong>–disable-content-trust ：</strong>忽略镜像的校验,默认开启</li>
</ul>
<h3 id="3、容器命令"><a href="#3、容器命令" class="headerlink" title="3、容器命令"></a>3、容器命令</h3><p>（1）新建并启动容器</p>
<pre class=" language-bash"><code class="language-bash">docker run <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> IMAGE <span class="token punctuation">[</span>COMMAND<span class="token punctuation">]</span> <span class="token punctuation">[</span>ARG<span class="token punctuation">..</span>.<span class="token punctuation">]</span></code></pre>
<p> OPTIONS说明（常用）：（有些是一个减号，有些是两个减号）</p>
<ul>
<li><p><strong>–name=”容器新名字”：</strong> 为容器指定一个名称；</p>
</li>
<li><p><strong>-d：</strong> 后台运行容器，并返回容器ID，也即启动守护式容器；</p>
</li>
<li><p><strong>-i：</strong>以交互模式运行容器，通常与 -t 同时使用；</p>
</li>
<li><p><strong>-t：</strong>为容器重新分配一个伪输入终端，通常与 -i 同时使用；</p>
</li>
<li><p><strong>-P：</strong>随机端口映射；</p>
</li>
<li><p><strong>-p：</strong>指定端口映射，有以下四种格式</p>
<p>​      ip:hostPort:containerPort</p>
<pre><code>  ip::containerPort
  hostPort:containerPort
  containerPort</code></pre></li>
<li><p><strong>–volume , -v：</strong> 绑定一个卷。</p>
<p>此处只列举常用参数，还有其他参数可参考官网命令参数说明。</p>
</li>
</ul>
<p>示例1：</p>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#使用镜像centos:latest以交互模式启动一个容器,在容器内执行/bin/bash命令。</span>
docker run -it centos /bin/bash </code></pre>
<p><strong>退出容器</strong></p>
<p>以交互模式启动一个容器之后，退出容器：</p>
<p><code>exit</code> ：容器停止并退出。</p>
<p><code>CTRL + P + Q</code> ：容器不停止并退出。</p>
<p>进入正在运行的容器</p>
<p>方式一：</p>
<pre class=" language-bash"><code class="language-bash">docker <span class="token function">exec</span> -it container-id  /bin/bash</code></pre>
<p>方式二：</p>
<pre><code>docker attach container-id </code></pre><p>二者区别：</p>
<p><strong>attach ：</strong> 直接进入容器启动命令的终端，不会启动新的进程。</p>
<p><strong>exec ：</strong>是在容器中打开新的终端，并且可以启动新的进程。</p>
<p>示例2：（常用）</p>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#使用镜像centos:latest以后台守护进程模式启动一个容器</span>
docker run -d centos</code></pre>
<p>（2）查看正在运行的容器</p>
<pre class=" language-bash"><code class="language-bash">docker <span class="token function">ps</span> <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span></code></pre>
<p>OPTIONS：</p>
<ul>
<li><strong>-a ：</strong>列出当前所有正在运行的容器+历史上运行过的</li>
<li><strong>-l ：</strong>显示最近创建的容器。</li>
<li><strong>-n：</strong>显示最近n个创建的容器。</li>
<li><strong>-q ：</strong>静默模式，只显示容器编号。</li>
<li><strong>–no-trunc ：</strong>不截断输出。</li>
</ul>
<p>（3）容器存在之后的启停删</p>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 启动容器</span>
docker start container-id <span class="token operator">|</span> container-name
<span class="token comment" spellcheck="true"># 重启容器</span>
docker restart container-id <span class="token operator">|</span> container-name
<span class="token comment" spellcheck="true"># 停止容器</span>
docker restart container-id <span class="token operator">|</span> container-name
<span class="token comment" spellcheck="true"># 暴力停止容器-拔电源</span>
docker <span class="token function">kill</span> container-id <span class="token operator">|</span> container-name
<span class="token comment" spellcheck="true"># 删除容器</span>
docker <span class="token function">rm</span> container-id 
<span class="token comment" spellcheck="true"># 强制删除多个容器</span>
docker <span class="token function">rm</span> -f <span class="token variable"><span class="token variable">$(</span>docker <span class="token function">ps</span> -a -q<span class="token variable">)</span></span>
docker  <span class="token function">ps</span> -a -q <span class="token operator">|</span> <span class="token function">xargs</span> docker <span class="token function">rm</span></code></pre>
<p>（4）查容器信息（重点）</p>
<p><strong>查看容器日志</strong></p>
<pre><code>docker logs -f -t --tail  container-id</code></pre><p><strong>-t ：</strong>加入时间戳</p>
<p><strong>-f ：</strong>跟随最新的日志打印</p>
<p><strong>–tail 300  ：</strong>显示最后300条日志</p>
<p><strong>查看容器内运行的进程</strong></p>
<pre class=" language-bash"><code class="language-bash">docker  <span class="token function">top</span> container-id</code></pre>
<p><strong>查看容器内部细节</strong></p>
<pre class=" language-bash"><code class="language-bash">docker  inspect container-id</code></pre>
<p><strong>从容器内拷贝文件到宿主机</strong></p>
<pre><code>docker cp container-id:容器内路径  目标主机路径</code></pre><p>示例：</p>
<pre class=" language-bash"><code class="language-bash">docker <span class="token function">cp</span> f1faf3c3c6c5:/usr/local/cptest/container_test.txt  /tmp/test.txt</code></pre>
<p><img src="/medias/loading-animated.gif" data-original="/images/docker/docker-commands-diagram.jpg" alt="Docker commands Diagram"></p>
<table>
<thead>
<tr>
<th>命令关键词</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>attach</td>
<td>Attach to a running container   # 当前 shell 下 attach 连接指定运行镜像</td>
</tr>
<tr>
<td>build</td>
<td>Build an image from a Dockerfile  # 通过 Dockerfile 定制镜像</td>
</tr>
<tr>
<td>commit</td>
<td>Create a new image from a container changes   # 提交当前容器为新的镜像</td>
</tr>
<tr>
<td>cp</td>
<td>Copy files/folders from the containers filesystem to the host path   #从容器中拷贝指定文件或者目录到宿主机中</td>
</tr>
<tr>
<td>create</td>
<td>Create a new container                        # 创建一个新的容器，同 run，但不启动容器</td>
</tr>
<tr>
<td>diff</td>
<td>Inspect changes on a container’s filesystem   # 查看 docker 容器变化</td>
</tr>
<tr>
<td>events</td>
<td>Get real time events from the server          # 从 docker 服务获取容器实时事件</td>
</tr>
<tr>
<td>exec</td>
<td>Run a command in an existing container        # 在已存在的容器上运行命令</td>
</tr>
<tr>
<td>export</td>
<td>Stream the contents of a container as a tar archive   # 导出容器的内容流作为一个 tar 归档文件[对应 import ]</td>
</tr>
<tr>
<td>history</td>
<td>Show the history of an image   # 展示一个镜像形成历史</td>
</tr>
<tr>
<td>images</td>
<td>List images  # 列出系统当前镜像</td>
</tr>
<tr>
<td>import</td>
<td>Create a new filesystem image from the contents of a tarball # 从tar包中的内容创建一个新的文件系统映像[对应export]</td>
</tr>
<tr>
<td>info</td>
<td>Display system-wide information               # 显示系统相关信息</td>
</tr>
<tr>
<td>inspect</td>
<td>Return low-level information on a container   # 查看容器详细信息</td>
</tr>
<tr>
<td>kill</td>
<td>Kill a running container                      # kill 指定 docker 容器</td>
</tr>
<tr>
<td>load</td>
<td>Load an image from a tar archive              # 从一个 tar 包中加载一个镜像[对应 save]</td>
</tr>
<tr>
<td>login</td>
<td>Register or Login to the docker registry server    # 注册或者登陆一个 docker 源服务器</td>
</tr>
<tr>
<td>logout</td>
<td>Log out from a Docker registry server          # 从当前 Docker registry 退出</td>
</tr>
<tr>
<td>logs</td>
<td>Fetch the logs of a container                 # 输出当前容器日志信息</td>
</tr>
<tr>
<td>port</td>
<td>Lookup the public-facing port which is NAT-ed to PRIVATE_PORT    # 查看映射端口对应的容器内部源端口</td>
</tr>
<tr>
<td>pause</td>
<td>Pause all processes within a container        # 暂停容器</td>
</tr>
<tr>
<td>ps</td>
<td>List containers                               # 列出容器列表</td>
</tr>
<tr>
<td>pull</td>
<td>Pull an image or a repository from the docker registry server   # 从docker镜像源服务器拉取指定镜像或者库镜像</td>
</tr>
<tr>
<td>push</td>
<td>Push an image or a repository to the docker registry server    # 推送指定镜像或者库镜像至docker源服务器</td>
</tr>
<tr>
<td>restart</td>
<td>Restart a running container                   # 重启运行的容器</td>
</tr>
<tr>
<td>rm</td>
<td>Remove one or more containers                 # 移除一个或者多个容器</td>
</tr>
<tr>
<td>rmi</td>
<td>Remove one or more images             # 移除一个或多个镜像[无容器使用该镜像才可删除，否则需删除相关容器才可继续或 -f 强制删除]</td>
</tr>
<tr>
<td>run</td>
<td>Run a command in a new container              # 创建一个新的容器并运行一个命令</td>
</tr>
<tr>
<td>save</td>
<td>Save an image to a tar archive                # 保存一个镜像为一个 tar 包[对应 load]</td>
</tr>
<tr>
<td>search</td>
<td>Search for an image on the Docker Hub         # 在 docker hub 中搜索镜像</td>
</tr>
<tr>
<td>start</td>
<td>Start a stopped containers                    # 启动容器</td>
</tr>
<tr>
<td>stop</td>
<td>Stop a running containers                     # 停止容器</td>
</tr>
<tr>
<td>tag</td>
<td>Tag an image into a repository                # 给源中镜像打标签</td>
</tr>
<tr>
<td>top</td>
<td>Lookup the running processes of a container   # 查看容器中运行的进程信息</td>
</tr>
<tr>
<td>unpause</td>
<td>Unpause a paused container                    # 取消暂停容器</td>
</tr>
<tr>
<td>version</td>
<td>Show the docker version information           # 查看 docker 版本号</td>
</tr>
<tr>
<td>wait</td>
<td>Block until a container stops, then print its exit code   # 截取容器停止时的退出状态值</td>
</tr>
</tbody></table>
<h2 id="五、Docker-镜像"><a href="#五、Docker-镜像" class="headerlink" title="五、Docker 镜像"></a>五、Docker 镜像</h2><h3 id="1、Docker-镜像是什么"><a href="#1、Docker-镜像是什么" class="headerlink" title="1、Docker 镜像是什么"></a>1、Docker 镜像是什么</h3><p>UnionFS（联合文件系统）：Union文件系统（UnionFS）是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下(unite several directories into a single virtual filesystem)。Union 文件系统是 Docker 镜像的基础。</p>
<p>镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。</p>
<p><strong>特点：</strong>一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录。</p>
<p>镜像（Images）可以看成是由多个镜像层叠加起来的一个文件系统（通过UnionFS与AUFS文件联合系统实现），镜像层（ Image Layer）也可以简单理解为一个基本的镜像，而每个镜像层之间通过指针的形式进行叠加。</p>
<p><strong>Docer镜像的特点：</strong></p>
<p>Docker镜像都是只读的，当容器启动时，一个新的可写层被加载到镜像的顶部。这一层通常被称作“容器层”，“容器层”之下的都叫“镜像层”。 </p>
<h3 id="2、Docker镜像加载原理"><a href="#2、Docker镜像加载原理" class="headerlink" title="2、Docker镜像加载原理"></a>2、Docker镜像加载原理</h3><p>docker的镜像实际上由一层一层的文件系统组成，这种层级的文件系统叫UnionFS。</p>
<p><code>bootfs(boot file system)</code>主要包含<code>bootloader</code>和<code>kernel</code>, <code>bootloader</code>主要是引导加载<code>kernel</code>, <code>Linux</code>刚启动时会加载<code>bootfs</code>文件系统，在Docker镜像的最底层是<code>bootfs</code>。这一层与我们典型的<code>Linux/Unix</code>系统是一样的，包含<code>boot</code>加载器和内核。当boot加载完成之后整个内核就都在内存中了，此时内存的使用权已由<code>bootfs</code>转交给内核，此时系统也会卸载<code>bootfs</code>。</p>
<p><code>rootfs (root file system)</code>，在bootfs之上。包含的就是典型 <code>Linux</code> 系统中的 /dev, /proc, /bin, /etc 等标准目录和文件。<code>rootfs</code>就是各种不同的操作系统发行版，比如<code>Ubuntu</code>，<code>Centos</code>等等。 </p>
<p><img src="/medias/loading-animated.gif" data-original="/images/docker/docker-kernel.jpg" alt="Docker 容器"></p>
<p>docker镜像里的centos 系统大小约 200M，对于一个精简的OS，rootfs可以很小，只需要包括最基本的命令、工具和程序库就可以了，因为底层直接用Host的kernel，自己只需要提供 rootfs 就行了。由此可见对于不同的linux发行版, bootfs基本是一致的, rootfs会有差别, 因此不同的发行版可以公用bootfs。</p>
<p>在执行pull 命令下载镜像的时候，可以看到docker的镜像好像是在一层一层的在下载。</p>
<p>为什么要使用分层呢？</p>
<p>最主要的是可以实现<strong>共享资源</strong></p>
<p>比如：有多个镜像都从相同的 base 镜像构建而来，那么宿主机只需在磁盘上保存一份base镜像，<br>同时内存中也只需加载一份 base 镜像，就可以为所有容器服务了。而且镜像的每一层都可以被共享。</p>
<h2 id="六、Docker-容器数据卷"><a href="#六、Docker-容器数据卷" class="headerlink" title="六、Docker 容器数据卷"></a>六、Docker 容器数据卷</h2><p>Docker 容器数据卷主要是为了容器的持久化，方便容器间继承和数据共享。</p>
<h3 id="数据卷命令"><a href="#数据卷命令" class="headerlink" title="数据卷命令"></a>数据卷命令</h3><h4 id="1-创建数据卷"><a href="#1-创建数据卷" class="headerlink" title="1.创建数据卷"></a>1.创建数据卷</h4><pre class=" language-bash"><code class="language-bash">docker volume  create  数据卷名称</code></pre>
<p>创建数据卷之后默认存放在：<code>/var/lib/docker/volumes/数据卷名称/_data</code></p>
<h4 id="2-查看全部数据卷"><a href="#2-查看全部数据卷" class="headerlink" title="2.查看全部数据卷"></a>2.查看全部数据卷</h4><pre class=" language-bash"><code class="language-bash">docker volume  <span class="token function">ls</span></code></pre>
<h4 id="3-查看数据卷详细信息"><a href="#3-查看数据卷详细信息" class="headerlink" title="3.查看数据卷详细信息"></a>3.查看数据卷详细信息</h4><pre class=" language-bash"><code class="language-bash">docker volume  inspect 数据卷名称</code></pre>
<h4 id="4-删除数据卷"><a href="#4-删除数据卷" class="headerlink" title="4.删除数据卷"></a>4.删除数据卷</h4><pre class=" language-bash"><code class="language-bash">docker volume  <span class="token function">rm</span> 数据卷名称</code></pre>
<h4 id="5-应用数据卷"><a href="#5-应用数据卷" class="headerlink" title="5.应用数据卷"></a>5.应用数据卷</h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 数据卷不存在时docker 自动创建。会将数据卷内部自带文件存储在默认的存放路径中</span>
docker run -v 数据卷名称:容器内部路径  镜像ID

<span class="token comment" spellcheck="true"># 直接指定一个路径作为容器卷的存放位置，路径是空的。（推荐）</span>
docker run -v  路径:容器内部路径</code></pre>
<h3 id="1、容器添加数据卷"><a href="#1、容器添加数据卷" class="headerlink" title="1、容器添加数据卷"></a>1、容器添加数据卷</h3><p>（1）直接命令添加</p>
<pre class=" language-bash"><code class="language-bash">docker run -it -v /宿主机绝对路径目录:/容器内目录      镜像名</code></pre>
<p>带权限的命令：</p>
<pre class=" language-bash"><code class="language-bash">docker run -it -v /宿主机绝对路径目录:/容器内目录:ro      镜像名</code></pre>
<p><code>rw</code> ：read  write 读写权限，默认</p>
<p><code>ro</code> ：read only 只读权限</p>
<p><code>wo</code> ：write only 只写权限</p>
<p>查看数据卷是否挂载成功</p>
<pre class=" language-bash"><code class="language-bash">docker inspect container-id</code></pre>
<p>如果测试容器和宿主机直接数据共享，可以尝试从宿主机修改文件，进入容器查看是否修改，再反过来操作一次。</p>
<p><strong>出错描述：</strong>Docker挂载主机目录Docker访问出现 <code>cannot open directory .: Permission denied</code><br><strong>解决办法：</strong>在挂载目录后多加一个–privileged=true参数即可。</p>
<p>（2）DockerFile添加</p>
<p>根目录新建一个 mydocker 文件夹进入，然后创建一个dockerfile文件，内容：</p>
<pre class=" language-txt"><code class="language-txt"># volume test
FROM centos
VOLUME ["/dataVolumeContainer1","/dataVolumeContainer2"]
CMD echo "finished,--------success1"
CMD /bin/bash</code></pre>
<p>这里在 Dockerfile 中使用VOLUME指令来给镜像添加一个或多个数据卷。</p>
<p><code>VOLUME[&quot;/dataVolumeContainer&quot;,&quot;/dataVolumeContainer2&quot;,&quot;/dataVolumeContainer3&quot;]</code></p>
<p>说明：出于可移植和分享的考虑，用<code>-v 主机目录:容器目录</code>这种方法不能够直接在Dockerfile中实现。由于宿主机目录是依赖于特定宿主机的，并不能够保证在所有的宿主机上都存在这样的特定目录。</p>
<p>使用 <code>build</code> 生成镜像</p>
<pre><code>docker build -f /mydocker/dockerfile -t xiaocai/centos</code></pre><p>如果生成成功则可以使用<code>docker images</code>查看</p>
<p>运行容器 <code>docker run  it centos-container-id /bin/bash</code></p>
<p>使用 <code>docker inspect centos-container-id</code> 查看容器内的卷目录地址对应的主机目录地址</p>
<p>一般是：<code>/var/lib/docker/volumes/container-id/_data</code></p>
<h3 id="2、容器数据卷"><a href="#2、容器数据卷" class="headerlink" title="2、容器数据卷"></a>2、容器数据卷</h3><p>命名的容器挂载数据卷，其它容器通过挂载这个(父容器)实现数据共享，挂载数据卷的容器，称之为数据卷容器</p>
<p>容器传递共享 <code>--volumes-from</code></p>
<p>比如：以上面的 <code>xiaocai/centos</code> 为模板启动容器 dk_centos_01/dk_centos_02/dk_centos_03</p>
<p>先启动父容器：<code>dk_centos_01</code>，然后在在<code>/dataVolumeContainer2</code> 目录新增内容</p>
<p>启动：<code>dk_centos_02</code>和<code>dk_centos_03</code></p>
<pre class=" language-bash"><code class="language-bash">docker run -it --name dk_centos_02 --volumes-from dk_centos_01 zzyy/centos
docker run -it --name dk_centos_03 --volumes-from dk_centos_01 zzyy/centos</code></pre>
<p>在<code>dk_centos_02</code>和<code>dk_centos_03</code>分别在<code>/dataVolumeContainer2</code>各自新增内容<code>test2.txt</code>、<code>test3.txt</code></p>
<p>回到<code>dk_centos_01</code>可以看到<code>dk_centos_02</code>和<code>dk_centos_03</code>各自添加的都能共享了。</p>
<p>删除<code>dk_centos_01</code>，<code>dk_centos_02</code>修改后<code>dk_centos_03</code>依然可以访问。</p>
<p>新建<code>dk_centos_04</code>继承<code>dk_centos_03</code>后再删除<code>dk_centos_03</code>，<code>dk_centos_04</code>也已经继续访问共享。</p>
<p>结论：<strong>容器之间配置信息的传递，数据卷的生命周期一直持续到没有容器使用它为止。</strong></p>
<h2 id="七、DockerFile解析"><a href="#七、DockerFile解析" class="headerlink" title="七、DockerFile解析"></a>七、DockerFile解析</h2><h3 id="1、DockerFile是什么"><a href="#1、DockerFile是什么" class="headerlink" title="1、DockerFile是什么"></a>1、DockerFile是什么</h3><p>Dockerfile是用来构建D1ocker镜像的构建文件，是由一系列命令和参数构成的脚本。</p>
<p>一般分三步骤：</p>
<p>（1）编写DockerFile文件</p>
<p>（2）执行 docker build 命令，从容器生成镜像</p>
<p>（3）运行docker run 命令，运行新的容器</p>
<p>比如centos的dockerfile 文件，在：<a href="https://github.com/CentOS/sig-cloud-instance-images/blob/f2788ce41161326a18420913b0195d1c6cfa1581/docker/Dockerfile" target="_blank" rel="noopener">https://github.com/CentOS/sig-cloud-instance-images/blob/f2788ce41161326a18420913b0195d1c6cfa1581/docker/Dockerfile</a></p>
<pre><code>FROM scratch
ADD centos-7-x86_64-docker.tar.xz /
LABEL \
org.label-schema.schema-version=&quot;1.0&quot; \
org.label-schema.name=&quot;CentOS Base Image&quot; \
org.label-schema.vendor=&quot;CentOS&quot; \
org.label-schema.license=&quot;GPLv2&quot; \
org.label-schema.build-date=&quot;20200809&quot; \
org.opencontainers.image.title=&quot;CentOS Base Image&quot; \
org.opencontainers.image.vendor=&quot;CentOS&quot; \
org.opencontainers.image.licenses=&quot;GPL-2.0-only&quot; \
org.opencontainers.image.created=&quot;2020-08-09 00:00:00+01:00&quot;

CMD [&quot;/bin/bash&quot;]</code></pre><h3 id="2、DockerFile构建过程"><a href="#2、DockerFile构建过程" class="headerlink" title="2、DockerFile构建过程"></a>2、DockerFile构建过程</h3><p>DockerFile 内容基本认识：</p>
<p>（1）每条保留字指令都必须为大写字母且后面要跟随至少一个参数</p>
<p>（2）指令按照从上到下的顺序执行。</p>
<p>（3）使用 <code>#</code> 表示注释</p>
<p>（4）每条指令都会创建一个新的镜像层，并对镜像进行提交。（参考Docker原理）</p>
<p>Docker执行DockerFile 主要基本流程：</p>
<p>（1）docker从基础镜像运行一个容器。</p>
<p>（2）执行一条指令并对容器作出修改。</p>
<p>（3）执行类似<code>docker commit</code>的操作提交一个新的镜像层</p>
<p>（4）docker再基于刚提交的镜像运行一个新容器</p>
<p>（5）执行dockerfile中的下一条指令直到所有指令都执行完成</p>
<blockquote>
<p>从应用软件的角度来看，Dockerfile、Docker镜像与Docker容器分别代表软件的三个不同阶段，</p>
<ul>
<li>Dockerfile是软件的原材料</li>
<li>Docker镜像是软件的交付品</li>
<li>Docker容器则可以认为是软件的运行态。<br>Dockerfile面向开发，Docker镜像成为交付标准，Docker容器则涉及部署与运维，三者缺一不可，合力充当Docker体系的基石。</li>
</ul>
<p>1 Dockerfile，需要定义一个Dockerfile，Dockerfile定义了进程需要的一切东西。Dockerfile涉及的内容包括执行代码或者是文件、环境变量、依赖包、运行时环境、动态链接库、操作系统的发行版、服务进程和内核进程(当应用进程需要和系统服务和内核进程打交道，这时需要考虑如何设计namespace的权限控制)等等;</p>
<p>2 Docker镜像，在用Dockerfile定义一个文件之后，docker build时会产生一个Docker镜像，当运行 Docker镜像时，会真正开始提供服务;</p>
<p>3 Docker容器，容器是直接提供服务的。</p>
</blockquote>
<h3 id="3、DockerFile-指令"><a href="#3、DockerFile-指令" class="headerlink" title="3、DockerFile 指令"></a>3、DockerFile 指令</h3><table>
<thead>
<tr>
<th>指令</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>FROM</td>
<td>基础镜像，当前镜像是基于哪个镜像的</td>
</tr>
<tr>
<td>MAINTAINER</td>
<td>镜像维护者的姓名和邮箱地址</td>
</tr>
<tr>
<td>RUN</td>
<td>容器构建时需要运行的命令</td>
</tr>
<tr>
<td>EXPOSE</td>
<td>当前容器对外暴露的端口</td>
</tr>
<tr>
<td>WORKDIR</td>
<td>指定在创建容器后，终端默认登录进入的工作目录</td>
</tr>
<tr>
<td>ENV</td>
<td>构建镜像过程中设置环境变量</td>
</tr>
<tr>
<td>ADD</td>
<td>将指定宿主机目录文件拷贝进镜像且ADD命令会自动处理URL和解压tar压缩包</td>
</tr>
<tr>
<td>COPY</td>
<td>类似ADD，拷贝文件到目录到镜像中。将构建上下文目录的文件复制到新的一层镜像内的目录路径。<code>COPY src  dest</code>, <code>COPY [&quot;src&quot;,&quot;dest&quot;]</code></td>
</tr>
<tr>
<td>VOLUME</td>
<td>容器数据卷，用于数据保存和持久化工作</td>
</tr>
<tr>
<td>CMD</td>
<td>指定一个容器启动时要运行的命令。<br/>Dockerfile 中可以有多个 CMD 指令，但只有最后一个生效，CMD 会被 docker run 之后的参数替换</td>
</tr>
<tr>
<td>ENTRYPOINT</td>
<td>指定一个容器启动时要运行的命令。<br/> ENTRYPOINT 的目的 和 CMD 命令 一样，都是指定容器启动程序及参数</td>
</tr>
<tr>
<td>ONBUILD</td>
<td>当构建一个被继承的DockerFile 时运行命令，父镜像在被子继承后父镜像的onbuild被触发</td>
</tr>
</tbody></table>
<p><code>FROM  scratch</code> ：大多数镜像都是通过base 镜像（<code>scratch</code>）中安装配置需要的软件构建出来。</p>
<p>CMD 指令的格式和 RUN 相似，也是两种格式：</p>
<p>（1）shell 格式：<code>CMD &lt;命令&gt;</code></p>
<p>（2）exec 格式：<code>CMD [&quot;可执行文件&quot;，&quot;参数1&quot;,&quot;参数2&quot;...]</code> </p>
<p>参数列表的格式：<code>CMD [&quot;参数1&quot;,&quot;参数2&quot;...]</code> 在指定了 ENTRYPOINT 指令后，用CMD 指定具体的参数。</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/docker/docker-dockerfile.jpg" alt="DockerFile"></p>
<p><strong>Dockerfile 指令分类</strong></p>
<table>
<thead>
<tr>
<th>BUILD</th>
<th>BOTH</th>
<th>RUN</th>
</tr>
</thead>
<tbody><tr>
<td>FROM</td>
<td>WORKDIR</td>
<td>CMD</td>
</tr>
<tr>
<td>MAINTAINER</td>
<td>USER</td>
<td>ENV</td>
</tr>
<tr>
<td>COPY</td>
<td></td>
<td>EXPOSE</td>
</tr>
<tr>
<td>ADD</td>
<td></td>
<td>VOLUME</td>
</tr>
<tr>
<td>RUN</td>
<td></td>
<td>ENTRYPOINT</td>
</tr>
<tr>
<td>ONBUILD</td>
<td></td>
<td></td>
</tr>
<tr>
<td>.dockerignore</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="4、DockerFile-学习示例"><a href="#4、DockerFile-学习示例" class="headerlink" title="4、DockerFile 学习示例"></a>4、DockerFile 学习示例</h3><h4 id="编写Dockerfile-示例一："><a href="#编写Dockerfile-示例一：" class="headerlink" title="编写Dockerfile 示例一："></a>编写Dockerfile 示例一：</h4><p>下载的centos镜像，新建并运行容器，默认的centos 是不能执行 <code>ifconfig</code> 、<code>vim</code>、 <code>rz</code> 、<code>sz</code> 等命令。现在编写一个dockerfile 用来构建一个自定义的centos 容器取名为 <code>xiaocai_centos</code></p>
<p>（1）下载centos 镜像</p>
<pre class=" language-bash"><code class="language-bash">docker pull centos</code></pre>
<p>（2）以centos为镜像模板启动容器并进入容器</p>
<pre class=" language-bash"><code class="language-bash">docker run -it centos</code></pre>
<p>可以尝试执行上述所说不能执行的命令，确认现在是否可以执行，其实是不能执行的。</p>
<p>（3）编写DockerFile 文件</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> -p xiaocai/dockerfiles
<span class="token function">cd</span> /xiaocai/dockerfiles
<span class="token function">vi</span> Dockerfile</code></pre>
<p>Dockerfile 内容如下：</p>
<pre class=" language-txt"><code class="language-txt">FROM centos
MAINTAINER xiaocai<smallrose@qq.com>

RUN yum -y install vim
RUN yum -y install net-tools
RUN yum -y install lrzsz

ENV MYPATH /usr/local
WORKDIR $MYPATH</code></pre>
<p>保存文件。</p>
<p>（4）构建出新的镜像</p>
<pre><code>docker build -t xiaocai_centos:1.1</code></pre><p>最初出现 <code>successfully build</code> 字样表示构建成功。</p>
<p>（5）运行新的镜像</p>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 可以先查看本地镜像</span>
docker images
<span class="token comment" spellcheck="true"># 以交互方式运行新的镜像</span>
docker run -it xiaocai_centos:1.1</code></pre>
<p>此时，如果正常可以执行<code>ifconfig</code>  <code>vim</code>命令，如果你在windows机器使用SSH链接工具，执行 <code>rz</code> 命令，会弹出选择文件的窗口。</p>
<p>（6）列出镜像的变更历史</p>
<pre><code>docker history centos</code></pre><h4 id="编写Dockerfile-示例二："><a href="#编写Dockerfile-示例二：" class="headerlink" title="编写Dockerfile 示例二："></a>编写Dockerfile 示例二：</h4><p><code>CMD / ENTRYPOINT</code> 都是指定一个容器启动时要运行的命令。</p>
<p><strong><code>CMD</code>：</strong></p>
<p>在Dockerfile 中可以有多个 CMD 指令，但只有最后一个生效，CMD 会被 docker run 之后的参数替换。</p>
<p>如在centos 镜像中，最后一个CMD 是 <code>CMD [&quot;/bin/bash&quot;]</code></p>
<p>现在以默认的centos为镜像模板运行一个centos 实例：</p>
<pre class=" language-bash"><code class="language-bash">docker run -it -p 8888:8080 tomcat <span class="token function">ls</span> -l</code></pre>
<p>这里<code>CMD [&quot;/bin/bash&quot;]</code> 不会执行，而是被 <code>-it -p 8888:8080 tomcat ls -l</code> 替换。</p>
<p><strong>ENTRYPOINT ：</strong></p>
<p>docker run 之后的参数会被当做参数传递给 ENTRYPOINT，之后形成新的命令组合。</p>
<p>制作CMD版可以查询IP信息的容器，使用<code>curl</code> 命令</p>
<blockquote>
<p>curl命令可以用来执行下载、发送各种HTTP请求，指定HTTP头部等操作。</p>
<p>如果系统没有curl可以使用<code>yum install curl</code>安装，也可以下载安装。<br>curl是将下载文件输出到<code>stdout</code></p>
<p>使用命令：<code>curl http://www.baidu.com</code><br>执行后，<a href="http://www.baidu.com的html就会显示在屏幕上了" target="_blank" rel="noopener">www.baidu.com的html就会显示在屏幕上了</a></p>
</blockquote>
<p>（1）新建一个用作构建的文件夹</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> -p xiaocai/ipselect01
<span class="token function">cd</span> xiaocai/ipselect01</code></pre>
<p>（2）编写Dockerfile 文件</p>
<pre><code>vi Dockerfile</code></pre><p>文件内容：</p>
<pre><code>FROM centos
RUN yum install -y curl
CMD [ &quot;curl&quot;, &quot;-s&quot;, &quot;http://ip.com&quot; ]</code></pre><p>（3）构建新镜像</p>
<pre><code>docker build -f Dockerfile -t ipselect01</code></pre><p>（4）运行新镜像的容器</p>
<pre class=" language-bash"><code class="language-bash">docker run  ipselect01</code></pre>
<p>直接运行则会默认执行Dockerfile 最后一条CMD，结果返回IP信息。</p>
<p>如果希望显示 HTTP 头信息，就需要加上<code>-i</code>参数，即：<code>docker run  ipselect01  -i</code></p>
<p>但是如果直接执行就会报错，因为 <strong>允许多个 CMD 指令，但只有最后一个生效，CMD 会被 docker run 之后的参数替换</strong>。</p>
<p>重新使用 ENTRYPOINT 重新构建新的镜像：</p>
<p>（1）新建一个用作构建的文件夹</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> -p xiaocai/ipselect02
<span class="token function">cd</span> xiaocai/ipselect02</code></pre>
<p>（2）编写Dockerfile 文件</p>
<pre><code>vi Dockerfile</code></pre><p>文件内容：</p>
<pre><code>FROM centos
RUN yum install -y curl
ENTRYPOINT  [ &quot;curl&quot;, &quot;-s&quot;, &quot;http://ip.com&quot; ]</code></pre><p>（3）构建新镜像</p>
<pre><code>docker build -f Dockerfile -t ipselect02</code></pre><p>（4）运行新镜像的容器</p>
<pre class=" language-bash"><code class="language-bash">docker run  ipselect02</code></pre>
<p>直接运行则会默认执行Dockerfile 最后一条CMD，结果返回IP信息。</p>
<p>（5）参数执行验证</p>
<p>带上参数运行：</p>
<pre class=" language-bash"><code class="language-bash">docker run  ipselect02 -i</code></pre>
<p>此时如果正常，可以看到显示 HTTP 头信息。</p>
<h4 id="编写Dockerfile-示例三："><a href="#编写Dockerfile-示例三：" class="headerlink" title="编写Dockerfile 示例三："></a>编写Dockerfile 示例三：</h4><p>自己构建一个tomcat的镜像，先下载好tomcat的tar包，和jdk的tar 包，centos环境。</p>
<p>（1）新建一个用作构建的文件夹</p>
<pre><code>mkdir -p xiaocai/tomcat9
cd xiaocai/tomcat9
touch test_copy.txt</code></pre><p>（2）将jdk 和 tomcat 安装的压缩包拷贝到 <code>/xiaocai/tomcat9</code> ，并在目录下新建Dockerfile 文件。</p>
<p>到此一步，那么<code>/xiaocai/tomcat9</code> 目录有四个文件：</p>
<ul>
<li>test_copy.txt</li>
<li>jdk的tar包 （jdk-8u171-linux-x64.tar.gz）</li>
<li>tomcat的tar包（apache-tomcat-9.0.8.tar.gz）</li>
<li>Dockerfile 文件</li>
</ul>
<p>（3）编写Dockerfile， 内容如下：</p>
<pre><code># 表示基于 centos 开始构建
FROM         centos
MAINTAINER    xiaocai&lt;smallrose@1qq.com&gt;
#把宿主机当前上下文的test_tomcat.txt拷贝到容器/usr/local/路径下
COPY test_copy.txt /usr/local/test_copy_container.txt
#把java与tomcat添加到容器中
ADD jdk-8u171-linux-x64.tar.gz /usr/local/
ADD apache-tomcat-9.0.8.tar.gz /usr/local/
#安装vim编辑器
RUN yum -y install vim
#安装网络工具
RUN yum -y install net-tools
#设置工作访问时候的WORKDIR路径，登录落脚点
ENV MYPATH /usr/local
WORKDIR $MYPATH
#配置java与tomcat环境变量
ENV JAVA_HOME /usr/local/jdk1.8.0_171
ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar
ENV CATALINA_HOME /usr/local/apache-tomcat-9.0.8
ENV CATALINA_BASE /usr/local/apache-tomcat-9.0.8
ENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/bin
#容器运行时监听的端口
EXPOSE  8080
#启动时运行tomcat
# ENTRYPOINT [&quot;/usr/local/apache-tomcat-9.0.8/bin/startup.sh&quot; ]
# CMD [&quot;/usr/local/apache-tomcat-9.0.8/bin/catalina.sh&quot;,&quot;run&quot;]
#启动值可以直接打印出tomcat日志
CMD /usr/local/apache-tomcat-9.0.8/bin/startup.sh &amp;&amp; tail -F /usr/local/apache-tomcat-9.0.8/bin/logs/catalina.out</code></pre><p>（4）构建新的镜像</p>
<pre class=" language-bash"><code class="language-bash">docker build -t xiaocai_tomcat:2.0
docker images</code></pre>
<p>（5）运行新的镜像</p>
<pre class=" language-bash"><code class="language-bash">docker run -d -p 9080:8080 --name xiaocai_tomcat9 -v /xiaocai/tomcat9/test:/usr/local/apache-tomcat-9.0.8/webapps/test -v /xiaocai/tomcat9/tomcat9logs/:/usr/local/apache-tomcat-9.0.8/logs --privileged<span class="token operator">=</span>true xiaocai_tomcat:2.0</code></pre>
<p>这里将宿主机的<code>/xiaocai/tomcat9/test</code> 目录与容器<code>/usr/local/apache-tomcat-9.0.8/webapps/test</code>项目部署目录映射就是为了方便部署项目。</p>
<p>（6）验证访问</p>
<p>在 <code>/xiaocai/tomcat9/test</code> 目录下新建一个html 或 jsp ，然后访问tomcat，不出错的话可以看到页面。</p>
<p>如果不想建页面也可以直接访问tomcat 的页面。</p>
<h2 id="八、Docker-常用安装"><a href="#八、Docker-常用安装" class="headerlink" title="八、Docker 常用安装"></a>八、Docker 常用安装</h2><p>常用的安装比如：mysql、tomcat、redis</p>
<p>基本安装步骤：</p>
<p>（1）搜索镜像</p>
<p>（2）拉取镜像</p>
<p>（3）查看镜像</p>
<p>（4）启动镜像实例</p>
<p>（5）停止容器</p>
<p>（6）删除容器</p>
<h3 id="1、安装tocmat"><a href="#1、安装tocmat" class="headerlink" title="1、安装tocmat"></a>1、安装tocmat</h3><p>（1）搜索tomcat </p>
<p>在docker hub 找到需要的tomcat及版本</p>
<pre class=" language-bash"><code class="language-bash">docker search tomcat</code></pre>
<p>（2）拉取tomcat 镜像</p>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 默认拉取最新版</span>
docker pull tomcat
<span class="token comment" spellcheck="true"># 拉取特点版本的</span>
docker pull tomcat:7.0</code></pre>
<p>（3）查看镜像</p>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查看镜像</span>
docker images </code></pre>
<p>（4）使用tomcat镜像创建容器实例</p>
<pre><code>docker run -it -p 8080:8080 tomcat</code></pre><ul>
<li><p><strong>-i</strong> ：交互</p>
</li>
<li><p><strong>-t</strong> ：终端</p>
</li>
<li><p><strong>-p</strong> ：端口映射，主机端口: 容器端口</p>
</li>
<li><p><strong>-P</strong> ：随机端口</p>
</li>
</ul>
<h3 id="2、安装mysql"><a href="#2、安装mysql" class="headerlink" title="2、安装mysql"></a>2、安装mysql</h3><p>（1）搜索mysql</p>
<p>在docker hub 找到需要的mysql及版本</p>
<pre class=" language-bash"><code class="language-bash">docker search mysql</code></pre>
<p>（2）拉取mysql镜像</p>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 默认拉取最新版</span>
docker pull mysql
<span class="token comment" spellcheck="true"># 拉取特点版本的</span>
docker pull mysql:5.7</code></pre>
<p>（3）查看镜像</p>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查看镜像</span>
docker images </code></pre>
<p>（4）使用mysql镜像创建容器实例</p>
<pre class=" language-bash"><code class="language-bash">docker run -p 3306:3306 --name mysql -v /xiaocai/mysql/conf:/etc/mysql/conf.d -v /xiaocai/mysql/logs:/logs -v /xiaocai/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD<span class="token operator">=</span>123456 -d mysql:5.7</code></pre>
<p>命令说明：<br><code>-p 3306:3306</code>：将主机的3306端口映射到docker容器的3306端口。<br><code>--name mysql</code>：运行服务名字<br><code>-v /xiaocai/mysql/conf:/etc/mysql/conf.d</code>：将主机<code>/xiaocai/mysql</code>录下的conf/my.cnf 挂载到容器的 <code>/etc/mysql/conf.d</code>目录<br><code>-v /xiaocai/mysql/logs:/logs</code>：将主机/xiaocai/mysql目录下的 logs 目录挂载到容器的 /logs。<br><code>-v /xiaocai/mysql/data:/var/lib/mysql</code> ：将主机/xiaocai/mysql目录下的data目录挂载到容器的 /var/lib/mysql<br><code>-e MYSQL_ROOT_PASSWORD=123456</code>：初始化 root 用户的密码。<br><code>-d mysql:5.7</code>: 后台程序运行mysql5.7</p>
<p>检查mysql容器运行</p>
<pre class=" language-bash"><code class="language-bash">docker <span class="token function">ps</span> -a</code></pre>
<p>如果使用命令行登录mysql，则首先进入容器：</p>
<pre class=" language-bash"><code class="language-bash">docker <span class="token function">exec</span> -it MySQL运行成功后的容器ID   /bin/bash</code></pre>
<p>进行容器之后可以使用 <code>mysql -u -p</code>的命令进行登录操作。</p>
<p>在宿主机直接执行命令进行数据备份：</p>
<pre class=" language-bash"><code class="language-bash">docker <span class="token function">exec</span> myql服务容器ID sh -c <span class="token string">' exec mysqldump --all-databases -uroot -p"123456" '</span> <span class="token operator">></span> /xiaocai/all-databases.sql</code></pre>
<p>也可以使用mysql客户端连接，注意宿主机端口。</p>
<h3 id="2、安装redis"><a href="#2、安装redis" class="headerlink" title="2、安装redis"></a>2、安装redis</h3><p>（1）搜索redis</p>
<p>在docker hub 找到需要的redis及版本</p>
<pre class=" language-bash"><code class="language-bash">docker search redis</code></pre>
<p>（2）拉取redis镜像</p>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 默认拉取最新版</span>
docker pull redis
<span class="token comment" spellcheck="true"># 拉取特点版本的</span>
docker pull redis:3.2</code></pre>
<p>（3）查看镜像</p>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查看镜像</span>
docker images </code></pre>
<p>（4）使用redis镜像创建容器实例</p>
<pre class=" language-bash"><code class="language-bash">docker run -p 6379:6379 -v /xiaocai/myredis/data:/data -v /xiaocai/myredis/conf/redis.conf:/usr/local/etc/redis/redis.conf  -d redis:3.2 redis-server /usr/local/etc/redis/redis.conf --appendonly <span class="token function">yes</span></code></pre>
<p>在主机/xiaocai/myredis/conf/redis.conf目录下新建redis.conf文件</p>
<pre class=" language-bash"><code class="language-bash">vim /xiaocai/myredis/conf/redis.conf/redis.conf</code></pre>
<p>文件内容：</p>
<p><a href="/images/docker/redis.conf">redis.conf</a></p>
<p>（5）测试连接</p>
<pre><code>docker exec -it 运行着Rediis服务的容器ID redis-cli</code></pre><p>执行redis 的<code>set/get</code>命令进行数据保存查询操作。</p>
<p>（6）持久化验证</p>
<p>执行<code>shutdown</code> 停止redis</p>
<p>进入<code>/xiaocai/myredis/data</code>目录查看持久化文件。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 快速上手</title>
    <url>/posts/66ee0bda.html</url>
    <content><![CDATA[<h2 id="Docker-快速上手"><a href="#Docker-快速上手" class="headerlink" title="Docker 快速上手"></a>Docker 快速上手</h2><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p><strong>Docker</strong>是一个开源的应用容器引擎；是一个轻量级容器技术；</p>
<p>Docker支持将软件编译成一个镜像；然后在镜像中各种软件做好配置，将镜像发布到镜像仓库，其他使用者可以直接使用这个镜像；</p>
<p>运行中的这个镜像称为容器，容器启动是非常快速的。</p>
<h2 id="二、基本概念"><a href="#二、基本概念" class="headerlink" title="二、基本概念"></a>二、基本概念</h2><p><strong>docker主机(Host)：</strong>安装了Docker程序的机器，Docker直接安装在操作系统（windows / linux）上；</p>
<p><strong>docker客户端(Client)：</strong>连接docker主机进行操作；</p>
<p><strong>docker仓库(Registry)：</strong>用来保存各种打包好的软件镜像；</p>
<p><strong>docker镜像(Images)：</strong>软件打包好的镜像；放在docker仓库中；</p>
<p><strong>docker容器(Container)：</strong>镜像启动后的实例称为一个容器；容器是独立运行的一个或一组应用。</p>
<pre class=" language-txt"><code class="language-txt">Client   ---------> Host  --------->  Registry</code></pre>
<p>使用Docker的基本步骤：</p>
<p>1）、安装Docker</p>
<p>2）、去Docker仓库找到这个软件对应的镜像；</p>
<p>3）、使用Docker运行这个镜像，这个镜像就会生成一个Docker容器；</p>
<p>4）、对容器的启动停止就是对软件应用的启动停止；</p>
<h2 id="三、Docker-安装"><a href="#三、Docker-安装" class="headerlink" title="三、Docker 安装"></a>三、Docker 安装</h2><p>1、环境准备</p>
<p>检查内核版本，Linux 必须是3.10及以上</p>
<p>检查命令：</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">uname</span> -r</code></pre>
<p>2、安装docker</p>
<pre class=" language-bash"><code class="language-bash">yum <span class="token function">install</span> docker</code></pre>
<p>3、查看版本</p>
<pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker -v</span>
Docker version 1.12.6, build 3e8e77d/1.12.6</code></pre>
<p>3、启动docker</p>
<pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl start docker</span></code></pre>
<p>4、开机启动</p>
<pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl enable docker</span>
Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.</code></pre>
<p>5、停止docker</p>
<pre class=" language-bash"><code class="language-bash">systemctl stop docker</code></pre>
<h2 id="四、Docker-常用命令-amp-操作"><a href="#四、Docker-常用命令-amp-操作" class="headerlink" title="四、Docker 常用命令&amp;操作"></a>四、Docker 常用命令&amp;操作</h2><h3 id="1、镜像操作"><a href="#1、镜像操作" class="headerlink" title="1、镜像操作"></a>1、镜像操作</h3><p>Docker Hub 地址： <a href="https://hub.docker.com/" target="_blank" rel="noopener">https://hub.docker.com/</a></p>
<p>镜像常用操作：</p>
<table>
<thead>
<tr>
<th>操作</th>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>检索</td>
<td><code>docker  search 关键字</code><br/>eg：docker  search redis</td>
<td>我们经常去docker  hub上检索镜像的详细信息，如镜像的TAG。</td>
</tr>
<tr>
<td>拉取</td>
<td><code>docker pull 镜像名:tag</code></td>
<td>:tag是可选的，tag表示标签，多为软件的版本，默认是latest</td>
</tr>
<tr>
<td>列表</td>
<td><code>docker images</code></td>
<td>查看所有本地镜像</td>
</tr>
<tr>
<td>删除</td>
<td><code>docker rmi image-id</code></td>
<td>删除指定的本地镜像</td>
</tr>
</tbody></table>
<h3 id="2、容器操作"><a href="#2、容器操作" class="headerlink" title="2、容器操作"></a>2、容器操作</h3><p>（1）搜索镜像命令：</p>
<pre class=" language-bash"><code class="language-bash">docker search 镜像名称</code></pre>
<p>示例：</p>
<pre class=" language-bash"><code class="language-bash">docker search tomcat</code></pre>
<p>也可以在 <a href="https://hub.docker.com/" target="_blank" rel="noopener">Docker Hub</a>直接搜索。</p>
<p>（2）拉取镜像：</p>
<pre class=" language-bash"><code class="language-bash">docker pull 镜像名称</code></pre>
<p>示例：</p>
<pre><code>docker pull mysql</code></pre><p>（3）查看本地镜像列表 </p>
<pre><code>docker images [OPTIONS] [REPOSITORY[:TAG]]</code></pre><p>OPTIONS说明：</p>
<ul>
<li><strong>-a ：</strong>列出本地所有的镜像（含中间映像层，默认情况下，过滤掉中间映像层）；</li>
<li><strong>–digests ：</strong>显示镜像的摘要信息；</li>
<li><strong>-f ：</strong>显示满足条件的镜像；</li>
<li><strong>–format ：</strong>指定返回值的模板文件；</li>
<li><strong>–no-trunc ：</strong>显示完整的镜像信息；</li>
<li><strong>-q ：</strong>只显示镜像ID。</li>
</ul>
<p>（4）根据镜像启动容器基本命令：</p>
<pre><code>docker run [OPTIONS] IMAGE [COMMAND] [ARG...]

docker run --name 容器名称 -d 镜像名称:latest</code></pre><p>OPTIONS说明：</p>
<ul>
<li><strong>-a stdin：</strong> 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；</li>
<li><strong>-d：</strong> 后台运行容器，并返回容器ID；</li>
<li><strong>-i：</strong> 以交互模式运行容器，通常与 -t 同时使用；</li>
<li><strong>-P：</strong> 随机端口映射，容器内部端口<strong>随机</strong>映射到主机的端口</li>
<li><strong>-p：</strong> 指定端口映射，格式为：主机(宿主)端口:容器端口 </li>
<li><strong>-t：</strong> 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</li>
<li><strong>–name=”nginx-lb”：</strong> 为容器指定一个名称；</li>
<li><strong>–dns 8.8.8.8：</strong> 指定容器使用的DNS服务器，默认和宿主一致；</li>
<li><strong>–dns-search example.com：</strong> 指定容器DNS搜索域名，默认和宿主一致；</li>
<li><strong>-h “mars”：</strong> 指定容器的hostname；</li>
<li><strong>-e username=”ritchie”：</strong> 设置环境变量；</li>
<li><strong>–env-file=[]：</strong> 从指定文件读入环境变量；</li>
<li><strong>–cpuset=”0-2” or –cpuset=”0,1,2”：</strong> 绑定容器到指定CPU运行；</li>
<li><strong>-m ：</strong>设置容器使用内存最大值；</li>
<li><strong>–net=”bridge”：</strong> 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型；</li>
<li><strong>–link=[]：</strong> 添加链接到另一个容器；</li>
<li><strong>–expose=[]：</strong> 开放一个端口或一组端口； </li>
<li><strong>–volume , -v：</strong>     绑定一个卷</li>
</ul>
<p>常用的操作是：</p>
<p>-d：后台运行<br>-p: 将主机的端口映射到容器的一个端口    主机端口:容器内部的端口</p>
<p>示例</p>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 启动tomcat 容器、映射端口、后台运行</span>
docker run -d -p 8888:8080 tomcat

<span class="token comment" spellcheck="true"># 能启动mysql 不能访问</span>
docker run --name mysql_01 -e MYSQL_ROOT_PASSWORD<span class="token operator">=</span>123456 -d mysql
<span class="token comment" spellcheck="true"># 能启动mysql 并且能访问</span>
docker run -p 3306:3306 --name mysql_02 -e MYSQL_ROOT_PASSWORD<span class="token operator">=</span>123456 -d mysql

<span class="token comment" spellcheck="true"># 把主机的/conf/mysql文件夹挂载到 mysqldocker容器的/etc/mysql/conf.d文件夹里面，改mysql的配置文件就只需要把mysql配置文件放在自定义的文件夹下（/conf/mysql）</span>
docker run --name mysql_03 -v /conf/mysql:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD<span class="token operator">=</span>my-secret-pw -d mysql:tag

<span class="token comment" spellcheck="true"># 指定mysql的一些配置参数</span>
docker run --name mysql_04 -e MYSQL_ROOT_PASSWORD<span class="token operator">=</span>my-secret-pw -d mysql:tag --character-set-server<span class="token operator">=</span>utf8mb4 --collation-server<span class="token operator">=</span>utf8mb4_unicode_ci
</code></pre>
<p>（5）查看所有的容器</p>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#查看容器(默认是已启动的 Up)</span>
docker <span class="token function">ps</span> 
<span class="token comment" spellcheck="true">#查看所有的容器（包含启动的和停止的）</span>
docker <span class="token function">ps</span> -a  </code></pre>
<p>示例：</p>
<pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker ps</span>
CONTAINER ID    IMAGE     COMMAND                   CREATED       STATUS              PORTS                     NAMES
ad10e4bc5c6a    mysql    <span class="token string">"docker-entrypoint.sh"</span>   4 seconds ago    Up 2 seconds        0.0.0.0:3306-<span class="token operator">></span>3306/tcp   mysql02</code></pre>
<p>（5）容器启停</p>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 启动容器</span>
docker start 容器id
<span class="token comment" spellcheck="true"># 删除一个容器</span>
docker <span class="token function">rm</span> 容器id</code></pre>
<p>（6）更多命令</p>
<p>​    （A） ：<a href="https://docs.docker.com/engine/reference/commandline/docker/" target="_blank" rel="noopener">Docker 官方文档</a></p>
<p>​    （B）：参考每一个镜像的文档。</p>
<p>示例：</p>
<pre class=" language-bash"><code class="language-bash">docker pull mysql

docker images

docker run -p 3306:3306 --name mysql_05 -e MYSQL_ROOT_PASSWORD<span class="token operator">=</span>123456 -d mysql

docker <span class="token function">ps</span> -a</code></pre>
<p>访问的话，关闭防护墙或者放行3306端口。</p>
<h2 id="五、其他"><a href="#五、其他" class="headerlink" title="五、其他"></a>五、其他</h2><p>其他后续遇到再补充。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8 Optional API</title>
    <url>/posts/e748f349.html</url>
    <content><![CDATA[<h2 id="Java8-中的-Optional"><a href="#Java8-中的-Optional" class="headerlink" title="Java8 中的 Optional"></a>Java8 中的 Optional</h2><h3 id="关于Optional"><a href="#关于Optional" class="headerlink" title="关于Optional"></a>关于Optional</h3><p>该类位于java.util下，属于final类，其实就是一个工具类。<br>主要是为了预防运行时抛出 <code>NullPointException</code></p>
<p>使用示例：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>cn<span class="token punctuation">.</span>optional<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Optional<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OptionalTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         Optional<span class="token operator">&lt;</span>String<span class="token operator">></span> optionalS <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"zhangxiaocai"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>optionalS<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token comment" spellcheck="true">//输出： zhangxiaocai</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span></code></pre>
<h3 id="Optional主要方法API"><a href="#Optional主要方法API" class="headerlink" title="Optional主要方法API"></a>Optional主要方法API</h3><table>
<thead>
<tr>
<th>方法API</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>of(T value)</td>
<td>把指定的值封装为Optional对象，如果指定的值为null，则抛出NullPointerException</td>
</tr>
<tr>
<td>ofNullable(T value)</td>
<td>把指定的值封装为Optional对象，如果指定的值为null，则创建一个空的Optional对象</td>
</tr>
<tr>
<td>get()</td>
<td>如果创建的Optional中有值存在，则返回此值，否则抛出NoSuchElementException</td>
</tr>
<tr>
<td>isPresent()</td>
<td>如果创建的Optional中的值存在，返回true，否则返回false</td>
</tr>
<tr>
<td>ifPresent(Consumerc)</td>
<td>如果创建的Optional中的值存在，则执行该方法的调用，否则什么也不做</td>
</tr>
<tr>
<td>orElse(T value)</td>
<td>如果创建的Optional中有值存在，则返回此值，否则返回一个默认值</td>
</tr>
<tr>
<td>orElseGet(Supplier s)</td>
<td>如果创建的Optional中有值存在，则返回此值，否则返回一个由Supplier接口生成的值</td>
</tr>
<tr>
<td>orElseThrow(Supplier s)</td>
<td>如果存在该值，返回包含的值，否则抛出由 Supplier 继承的异常</td>
</tr>
<tr>
<td>empty()</td>
<td>创建一个空的Optional对象</td>
</tr>
<tr>
<td>orElseThrow</td>
<td>如果创建的Optional中有值存在，则返回此值，否则抛出一个由指定的Supplier接口生成的异常</td>
</tr>
<tr>
<td>filter(Predicate p)</td>
<td>如果创建的Optional中的值满足filter中的条件，则返回包含该值的Optional对象，否则返回一个空的Optional对象</td>
</tr>
<tr>
<td>map(Function f)</td>
<td>如果创建的Optional中的值存在，对该值执行提供的Function函数调用</td>
</tr>
<tr>
<td>flagMap(Function f)</td>
<td>如果创建的Optional中的值存在，就对该值执行提供的Function函数调用，返回一个Optional类型的值，否则就返回一个空的Optional对象</td>
</tr>
</tbody></table>
<h3 id="普通思维实例演示"><a href="#普通思维实例演示" class="headerlink" title="普通思维实例演示"></a>普通思维实例演示</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>cn<span class="token punctuation">.</span>optional<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Optional<span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token keyword">static</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>System<span class="token punctuation">.</span>out<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OptionalTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         Optional<span class="token operator">&lt;</span>String<span class="token operator">></span> optionalS <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"zhangxiaocai"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>optionalS<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


         UserModel user <span class="token operator">=</span> null<span class="token punctuation">;</span>
         <span class="token comment" spellcheck="true">//Optional&lt;UserModel> userOption1 = Optional.of(user);//会抛异常</span>
         <span class="token comment" spellcheck="true">//out.println(userOption1.get());</span>
         Optional<span class="token operator">&lt;</span>UserModel<span class="token operator">></span> userOption2 <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不会抛异常</span>
         out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userOption2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//调用的时候会抛异常，因此调用需要先判断</span>


         user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"xiaocai"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"small-rose@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

         <span class="token comment" spellcheck="true">//即使使用了之前的变量名，依旧是一个新的对象</span>
         userOption2 <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
         out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userOption2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

         <span class="token keyword">if</span><span class="token punctuation">(</span>userOption2<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
             out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userOption2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
             Optional<span class="token operator">&lt;</span>Integer<span class="token operator">></span> uid <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>userOption2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token keyword">if</span><span class="token punctuation">(</span>uid<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                 out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user  id is "</span><span class="token operator">+</span>uid<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token punctuation">}</span>
             Optional<span class="token operator">&lt;</span>String<span class="token operator">></span> email <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>userOption2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token keyword">if</span><span class="token punctuation">(</span>email<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                 out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"you can send mail to "</span><span class="token operator">+</span>email<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token punctuation">}</span>

             <span class="token comment" spellcheck="true">//Optional.orElse - 如果值存在，返回它，否则返回提供的默认值</span>
             Optional<span class="token operator">&lt;</span>String<span class="token operator">></span> nameopt <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>userOption2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             String name <span class="token operator">=</span> nameopt<span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"zhangxiaocai"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user name is "</span><span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>

         <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
             out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user is null "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span></code></pre>
<h3 id="函数式编程演示"><a href="#函数式编程演示" class="headerlink" title="函数式编程演示"></a>函数式编程演示</h3><p>函数式编程注意方法API中传的参数。<br>留意带参数的几个API:<br><code>ifPresent(Consumer&lt;? super T&gt; consumer</code>、<br><code>orElseGet(Supplier&lt;? extends T&gt; other)</code><br><code>orElseThrow(Supplier&lt;? extends X&gt; exceptionSupplier)</code><br><code>map(Function&lt;? super T,? extends U&gt; mapper)</code><br><code>flagMap(Function&lt;? super T,Optional&lt;U&gt;&gt; mapper)</code></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>cn<span class="token punctuation">.</span>optional<span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token keyword">static</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>System<span class="token punctuation">.</span>out<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Optional<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span>Supplier<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OptionalFuncTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

         UserModel user1 <span class="token operator">=</span> null <span class="token punctuation">;</span>
         Optional<span class="token operator">&lt;</span>UserModel<span class="token operator">></span> userop1 <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span>

         <span class="token comment" spellcheck="true">//如果user1为null，就实例化一个</span>
         <span class="token comment" spellcheck="true">//orElse 与之前相同 写法1</span>
         UserModel defuser1 <span class="token operator">=</span>userop1<span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>defuser1<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token comment" spellcheck="true">//函数式 orElseGet 写法2</span>
         UserModel defuser2 <span class="token operator">=</span> userop1<span class="token punctuation">.</span><span class="token function">orElseGet</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token comment" spellcheck="true">//if(userop1.isPresent()){ defuser2 = userop1.get(); }else{ defuser2 = new UserModel(); }</span>

         out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>defuser2<span class="token punctuation">)</span><span class="token punctuation">;</span>

         UserModel user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"xiaocai"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"small-rose@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


         Optional<span class="token operator">&lt;</span>UserModel<span class="token operator">></span> userop2 <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token comment" spellcheck="true">//如果 userop 里的对象不为空，则取出名称并打印</span>
         <span class="token comment" spellcheck="true">//函数式ifPresent 是无返回值的 Consumer消费型接口</span>
         userop2<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>u <span class="token operator">-</span><span class="token operator">></span>  out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token comment" spellcheck="true">// if(userop2.isPresent()){ out.println(userop2.get().getName()); }</span>

         <span class="token comment" spellcheck="true">//user1如果是空的，就实例化一个，但是名称也是空的，为了测试orElseGet</span>
         Optional<span class="token operator">&lt;</span>String<span class="token operator">></span> nameop <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>userop1<span class="token punctuation">.</span><span class="token function">orElseGet</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

         <span class="token comment" spellcheck="true">//函数式orElseGet 是有返回值的 Supplier供给型接口</span>
         String userName <span class="token operator">=</span> nameop<span class="token punctuation">.</span><span class="token function">orElseGet</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"zhangxiaocai"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token comment" spellcheck="true">// if(nameop.isPresent()){ userName = nameop.get(); }else{ userName = "zhangxiaocai"; }</span>

         out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user name is "</span> <span class="token operator">+</span>userName<span class="token punctuation">)</span><span class="token punctuation">;</span>

         <span class="token comment" spellcheck="true">//如果要求不允许随便实例化怎么办呢？那就可以判断，是否为空，若为空抛出异常即可</span>
         userop1<span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span>IllegalArgumentException<span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// userop2.map(  uOptionalFuncTest::sendEmail (u));</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sendEmail</span><span class="token punctuation">(</span>UserModel u<span class="token punctuation">)</span><span class="token punctuation">{</span>

        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" send email to "</span> <span class="token operator">+</span> u<span class="token punctuation">.</span><span class="token function">getEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8 接口新特征</title>
    <url>/posts/1d9dd225.html</url>
    <content><![CDATA[<h2 id="Java8-接口新特征"><a href="#Java8-接口新特征" class="headerlink" title="Java8 接口新特征"></a>Java8 接口新特征</h2><h3 id="1-接口默认方法"><a href="#1-接口默认方法" class="headerlink" title="1. 接口默认方法"></a>1. 接口默认方法</h3><p>java 8 中允许接口中包含具有具体实现的方法，该方法使用<code>default</code>关键字修饰，称为”默认方法”。</p>
<h4 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h4><p>定义一个接口：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zhangxiaocai<span class="token punctuation">.</span>cn<span class="token punctuation">.</span>java8<span class="token punctuation">.</span>deft<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyInterface</span> <span class="token punctuation">{</span>

    <span class="token keyword">default</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"xiaocaiInterface"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre>
<p>定义一个子类：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zhangxiaocai<span class="token punctuation">.</span>cn<span class="token punctuation">.</span>java8<span class="token punctuation">.</span>deft<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SubClass</span>  <span class="token keyword">implements</span> <span class="token class-name">MyInterface</span><span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> MyInterface<span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span></code></pre>
<p>定义一个测试类：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zhangxiaocai<span class="token punctuation">.</span>cn<span class="token punctuation">.</span>java8<span class="token punctuation">.</span>deft<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultInterfaceTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        SubClass sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sc<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span></code></pre>
<p>输出结果：</p>
<pre class=" language-txt"><code class="language-txt">xiaocaiInterface
接口中的静态方法</code></pre>
<h4 id="同名方法调用原则"><a href="#同名方法调用原则" class="headerlink" title="同名方法调用原则"></a>同名方法调用原则</h4><p>接口默认方法的”类优先”原则：</p>
<p>若一个接口中定义了一个默认方法，另一个父类或接口中也定义了一个同名方法时：</p>
<p>（1）选择父类中的方法。如果一个父类提供了具体的实现，那么接口中具有相同名称和参数的默认方法会被忽略。</p>
<p>（2）接口冲突。如果父接口提供一个默认方法，另一个接口也提供了一个具有相同名称和参数列表的方法（不管方法是否默认），那么必须覆盖该方法来解决冲突。</p>
<p>如：<br>定义接口1：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyInterFace1</span><span class="token punctuation">{</span>

    <span class="token keyword">default</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"我是接口1"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>定义接口2：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyInterFace2</span><span class="token punctuation">{</span>

    <span class="token keyword">default</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"我是接口2"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>定义一个子类:</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestMyInf</span> <span class="token keyword">implements</span> <span class="token class-name">MyInterFace1</span><span class="token punctuation">,</span> MyInterFace2<span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> MyInterFace1<span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span></code></pre>
<p>在定义子类时，必须选择<code>getName()</code>方法进行覆盖，可以使用<code>MyInterFace1</code>或<code>MyInterFace2</code>均可。</p>
<h3 id="2-接口静态方法"><a href="#2-接口静态方法" class="headerlink" title="2. 接口静态方法"></a>2. 接口静态方法</h3><p>java 8 中接口允许添加静态方法。</p>
<p>如：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zhangxiaocai<span class="token punctuation">.</span>cn<span class="token punctuation">.</span>java8<span class="token punctuation">.</span>deft<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyInterface</span> <span class="token punctuation">{</span>

    <span class="token keyword">default</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"xiaocaiInterface"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接口中的静态方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span></code></pre>
<p>调用：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zhangxiaocai<span class="token punctuation">.</span>cn<span class="token punctuation">.</span>java8<span class="token punctuation">.</span>deft<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultInterfaceTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        MyInterface<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span></code></pre>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx 快速上手</title>
    <url>/posts/35e29c2a.html</url>
    <content><![CDATA[<h1 id="Nginx-快速上手"><a href="#Nginx-快速上手" class="headerlink" title="Nginx 快速上手"></a>Nginx 快速上手</h1><p>前言</p>
<blockquote>
<p>去年的时候使用 <code>SpringBoot</code> 开发了自己的博客，然部署到云服务器上，就是使用 <code>Nginx</code> 和 <code>Tomcat</code> 部署的， 相关的反向代理或者负载均衡虽然确实实操过，但是都是现找其他人的博客操作的，就是进行了快速的学习和了解，但是没有系统学习。之所以要整理就是为了系统性的学习一下并整理一下。也方便忘了时及时查阅温习。 </p>
</blockquote>
<h2 id="一、Nginx-快速熟悉"><a href="#一、Nginx-快速熟悉" class="headerlink" title="一、Nginx 快速熟悉"></a>一、Nginx 快速熟悉</h2><h3 id="1、了解"><a href="#1、了解" class="headerlink" title="1、了解"></a>1、了解</h3><p>Nginx 是一个高性能的 HTTP 和反向代理服务器。</p>
<p>Nginx 可以作为静态页面的 web 服务器，同时还支持 CGI 协议的动态语言，比如 perl、 php<br>等。但是不支持 java。 Java 程序只能通过与 tomcat 配合完成。</p>
<h3 id="2、特点"><a href="#2、特点" class="headerlink" title="2、特点"></a>2、特点</h3><p>（1）占有内存少，<br>（2）并发能力强（据说有报告表明能支持高达 50,000 个并发连接数  ）<br>（3）支持反向代理<br>（4）支持负载均衡<br>（5）支持动静分离</p>
<h3 id="3、反向代理"><a href="#3、反向代理" class="headerlink" title="3、反向代理"></a>3、反向代理</h3><p>在客户端访问页面时将请求发送到反向代理服务器，由反向代理服务器去选择目标服务器获取数据后，再返回给客户端，此时反向代理服务器和目标服务器对外就是一个服务器，暴露的是代理服务器地址，隐藏了真实服务器 IP 地址及端口。</p>
<h3 id="4、负载均衡"><a href="#4、负载均衡" class="headerlink" title="4、负载均衡"></a>4、负载均衡</h3><p>单个服务器或提升硬件比较难以解决访问量和数据量的增长导致请求缓慢或宕机的背景下，出现集群概念。增加服务器的数量，然后将请求分发到各个服务器上，将原先请求集中到单个服务器上的情况改为将请求分发到多个服务器上，将负载分发到不同的服务器，也就是所说的负载均衡。</p>
<h3 id="5、动静分离"><a href="#5、动静分离" class="headerlink" title="5、动静分离"></a>5、动静分离</h3><p>为了加快网站的解析速度，可以把动态页面和静态页面由不同的服务器来解析，加快解析速<br>度。降低原来单个服务器的压力。</p>
<p>动静分离的方式：</p>
<p>（1）统一部署，静态请求解析到指定静态资源目录。<br>（2）分开部署，静态请求转发到静态资源服务器。</p>
<h2 id="二、Nginx-安装"><a href="#二、Nginx-安装" class="headerlink" title="二、Nginx 安装"></a>二、Nginx 安装</h2><p>Nginx 安装分为两种方式。其实也不是官方的。</p>
<h3 id="1、通用方式"><a href="#1、通用方式" class="headerlink" title="1、通用方式"></a>1、通用方式</h3><p>第一步， 安装 pcre</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">wget</span> http://downloads.sourceforge.net/project/pcre/pcre/8.37/pcre-8.37.tar.gz</code></pre>
<p>PCRE(Perl Compatible Regular Expressions)是一个Perl库，包括 perl 兼容的正则表达式库。<br>nginx的http模块使用pcre来解析正则表达式，所以需要在linux上安装pcre库。</p>
<p>下载成功后解压文件</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">tar</span> -zxvf pcre-8.37.tar.gz</code></pre>
<p>进入目录执行</p>
<pre class=" language-bash"><code class="language-bash">./configure </code></pre>
<p>完成后，回到 pcre 目录下执行 </p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">make</span>
<span class="token function">make</span> <span class="token function">install</span></code></pre>
<p>第二步， 安装一些需要的依赖</p>
<p>安装 zlib，安装 gcc，安装 openssl</p>
<pre class=" language-bash"><code class="language-bash">yum -y <span class="token function">install</span> <span class="token function">make</span> zlib zlib-devel gcc-c++ libtool openssl openssl-devel</code></pre>
<p>第三步， 安装 nginx</p>
<p>官方网址：<a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">http://nginx.org/en/download.html</a></p>
<p><code>Nginx</code>官网提供了三个类型的版本<br><code>Mainline version</code>： <code>Mainline</code> 是 <code>Nginx</code> 目前主力在做的版本，可以说是开发版<br><code>Stable version</code>： 最新稳定版，生产环境上建议使用的版本<br><code>Legacy versions</code>： 遗留的老版本的稳定版。</p>
<p>建议选择稳定版。</p>
<p>可以直接下载到目录。<br>也可以下载之后再上传到服务器。</p>
<p>1、 解压缩 <code>nginx-xx.tar.gz</code> 包。</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">tar</span> -zxvf nginx-xx.tar.gz</code></pre>
<p>2、 进入解压缩目录， 执行<code>./configure</code>。</p>
<pre class=" language-bash"><code class="language-bash">./configure</code></pre>
<p>3、 执行编译安装</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span></code></pre>
<h3 id="2、YUM方式"><a href="#2、YUM方式" class="headerlink" title="2、YUM方式"></a>2、YUM方式</h3><p>1、添加源</p>
<p>　　默认情况Centos7中无Nginx的源，后面Nginx官网提供了Centos的源地址。因此可以如下执行命令添加源：</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</code></pre>
<p>2、安装<code>Nginx</code></p>
<p>可以使用 search 命令：</p>
<pre class=" language-bash"><code class="language-bash">yum search nginx</code></pre>
<p>看看是否已经添加源成功。如果成功则执行下列命令安装<code>Nginx</code>。</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> -y nginx</code></pre>
<h3 id="3、防火墙端口相关"><a href="#3、防火墙端口相关" class="headerlink" title="3、防火墙端口相关"></a>3、防火墙端口相关</h3><p>如果需要的话，可能用得上。如果是云服务器，自己登录控制台看看相关端口是否已经开放。</p>
<p>查看开放的端口号</p>
<pre class=" language-bash"><code class="language-bash">firewall-cmd --list-all</code></pre>
<p>设置开放的端口号</p>
<pre class=" language-bash"><code class="language-bash">firewall-cmd --add-service<span class="token operator">=</span>http –permanent
<span class="token function">sudo</span> firewall-cmd --add-port<span class="token operator">=</span>80/tcp --permanent</code></pre>
<p>重启防火墙</p>
<pre class=" language-bash"><code class="language-bash">firewall-cmd –reload</code></pre>
<h2 id="三、Nginx-常用命令"><a href="#三、Nginx-常用命令" class="headerlink" title="三、Nginx 常用命令"></a>三、Nginx 常用命令</h2><p>如果你不确定你的 <code>Nginx</code> 到底安装到哪里了,使用 <code>whereis</code> 命令查找一下。</p>
<pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># whereis nginx</span>
nginx: /usr/sbin/nginx /usr/lib64/nginx /etc/nginx /usr/share/nginx /usr/share/man/man8/nginx.8.gz</code></pre>
<h3 id="1、查看版本命令："><a href="#1、查看版本命令：" class="headerlink" title="1、查看版本命令："></a>1、查看版本命令：</h3><pre class=" language-bash"><code class="language-bash">nginx -v</code></pre>
<h3 id="2、启动命令："><a href="#2、启动命令：" class="headerlink" title="2、启动命令："></a>2、启动命令：</h3><p>（1）执行执行启动：</p>
<pre class=" language-bash"><code class="language-bash">start  nginx </code></pre>
<p>（2）到 <code>/usr/sbin/</code> 目录执行命令启动：</p>
<pre class=" language-bash"><code class="language-bash">./nginx</code></pre>
<p>（3）也可以使用Linux 方式</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> systemctl start nginx.service</code></pre>
<h3 id="3、关闭命令："><a href="#3、关闭命令：" class="headerlink" title="3、关闭命令："></a>3、关闭命令：</h3><p>（1）快速停止或关闭</p>
<pre class=" language-bash"><code class="language-bash">nginx stop</code></pre>
<p>或</p>
<pre class=" language-bash"><code class="language-bash">nginx -s stop</code></pre>
<p>（2）正常停止或关闭</p>
<pre class=" language-bash"><code class="language-bash">nginx -s quit</code></pre>
<p>（3）也可以使用 <code>Linux</code> 方式</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> systemctl start nginx.service</code></pre>
<h3 id="4、配置检查："><a href="#4、配置检查：" class="headerlink" title="4、配置检查："></a>4、配置检查：</h3><p>修改配置文件之后执行用来检查配置文件是否有错误的命令，如果有会给出提示。</p>
<pre class=" language-bash"><code class="language-bash">nginx -t</code></pre>
<h3 id="5、配置加载："><a href="#5、配置加载：" class="headerlink" title="5、配置加载："></a>5、配置加载：</h3><p>修改配置文件之后，不需要重启服务，检查配置文件正确之后，直接加载新的配置文件的命令。</p>
<pre class=" language-bash"><code class="language-bash">nginx -s reload</code></pre>
<h2 id="四、Nginx-配置文件"><a href="#四、Nginx-配置文件" class="headerlink" title="四、Nginx 配置文件"></a>四、Nginx 配置文件</h2><h3 id="1、nginx-配置文件目录"><a href="#1、nginx-配置文件目录" class="headerlink" title="1、nginx 配置文件目录"></a>1、nginx 配置文件目录</h3><p>一般在 <code>nginx/conf/</code> 目录下，具体目录使用 <code>whereis</code> 找一下。我使用<code>yum</code> 安装，配置文件目录在 <code>/etc/nginx/目录</code>下有个 <code>nginx.conf</code> 文件就是配置文件。</p>
<p>配置文件中有很多 <code>#</code> ， <code>#</code> 开头的表示注释内容</p>
<p>精简的配置文件内容如下：</p>
<pre class=" language-conf"><code class="language-conf">worker_processes  1;

events {
    worker_connections  1024;
}
http {
    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;

    keepalive_timeout  65;

    server {
        listen       80;
        server_name  localhost;

        location / {
            root   html;
            index  index.html index.htm;
        }
    }
}</code></pre>
<h3 id="2、配置文件细分"><a href="#2、配置文件细分" class="headerlink" title="2、配置文件细分"></a>2、配置文件细分</h3><p>nginx.conf 文件大致分三个部分。</p>
<p>（1）全局块<br>从配置文件开始到 <code>events</code> 块之间的内容，主要会设置一些影响 <code>nginx</code> 服务器整体运行的配置指令，主要包括配置运行 <code>Nginx</code>服务器的用户（组）、允许生成的 <code>worker process</code> 数， 进程 <code>PID</code> 存放路径、日志存放路径和类型以及配置文件的引入等。<br>比如第一行配置：</p>
<pre><code>worker_processes 1;</code></pre><p>这是 Nginx 服务器并发处理服务的关键配置， <code>worker_processes</code> 值越大，可以支持的并发处理量也越多，但是会受到硬件、软件等设备的制约。</p>
<p>（2）events 块</p>
<p>​    <code>events</code> 块涉及的指令主要影响 Nginx 服务器与用户的网络连接，常用的设置包括是否开启对多 <code>work process</code>下的网络连接进行序列化，是否允许同时接收多个网络连接，选取哪种事件驱动模型来处理连接请求，每个 <code>work  process</code> 可以同时支持的最大连接数等。</p>
<p>上述例子就表示每个 <code>work process</code> 支持的最大连接数为 1024。</p>
<p>这部分的配置对 Nginx 的性能影响较大，在实际中应该灵活配置。</p>
<p>（3）http 块</p>
<p>​    <code>Nginx</code> 服务器配置中最频繁的部分，代理、缓存和日志定义等绝大多数功能和第三方模块的配置都在这里。 需要注意的是： <code>http</code> 块也可以包括 <code>http</code> 全局块、 server 块。</p>
<p>A） http 全局块</p>
<p>​    <code>http</code> 全局块配置的指令包括文件引入、 <code>MIME-TYPE</code> 定义、日志自定义、连接超时时间、单链接请求数上限、404等等。    </p>
<p>B）  server 块</p>
<p>​    这块和虚拟主机有密切关系，虚拟主机从用户角度看，和一台独立的硬件主机是完全一样的，该技术的产生是为了 节省互联网服务器硬件成本。 </p>
<p>​    每个 http 块可以包括多个 <code>server</code>块，而每个 <code>server</code> 块就相当于一个虚拟主机。 而每个 <code>server</code> 块也分为全局 <code>server</code> 块，以及可以同时包含多个 <code>locaton</code> 块。 </p>
<p>​    1)、全局 server 块 </p>
<p>​    最常见的配置是本虚拟机主机的监听配置和本虚拟主机的名称或 IP 配置。 </p>
<p>​    2)、location 块 </p>
<p>​    一个 server 块可以配置多个 location 块。 </p>
<p>​    这块的主要作用是基于 Nginx 服务器接收到的请求字符串（例如 <code>server_name</code>/<code>uri-string</code>），对虚拟主机名称 （也可以是 IP 别名）之外的字符串（例如 前面的 /uri-string）进行匹配，对特定的请求进行处理。地址定向、数据缓 存和应答控制等功能，还有许多第三方模块的配置也在这里进行。    </p>
<h2 id="五、配置实例"><a href="#五、配置实例" class="headerlink" title="五、配置实例"></a>五、配置实例</h2><h3 id="1、反向代理配置实例1"><a href="#1、反向代理配置实例1" class="headerlink" title="1、反向代理配置实例1"></a>1、反向代理配置实例1</h3><p>准备工作：安装一个 <code>tomcat</code> 并配置端口为 <code>8081</code></p>
<p>nginx.conf 配置：</p>
<pre><code>server{
    listen 80;
    server_name www.zhangxiaocai.cn

    location / {
        proxy_pass http://127.0.0.1:8081 ;
        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504
        index index.html index.htm index.jsp;
    }
}</code></pre><p>如上配置，我们监听 80 端口，访问域名为 <code>www.zhangxiaocai.cn</code>，不加端口号时默认为 <code>80</code> 端口，所以在浏览器访问该域名时会跳转到 <code>127.0.0.1:8080</code>路径上。</p>
<p>本地测试需要修改<code>C:/Windows/System32/drivers/etc/hosts</code>文件，在文件末尾追加以下内容</p>
<pre><code>www.zhangxiaocai.cn   127.0.0.1</code></pre><h3 id="2、反向代理配置实例2"><a href="#2、反向代理配置实例2" class="headerlink" title="2、反向代理配置实例2"></a>2、反向代理配置实例2</h3><p>准备工作：安装2个 <code>tomcat</code> 并配置端口分别为 <code>8081</code> 和 <code>8082</code> ，为了区分也可以准备2个不同的 <code>index.html</code> 页面。</p>
<p>nginx.conf 配置：</p>
<pre><code>server{
    listen 80;
    server_name www.zhangxiaocai.cn

    location ~ /java/ {
        proxy_pass http://127.0.0.1:8081 ;
        index index.html index.htm index.jsp;
    }

    location ~ /spring/ {
        proxy_pass http://127.0.0.1:8082 ;
        index index.html index.htm index.jsp;
    }
}</code></pre><p>根据访问的路径跳转到不同端口的服务中 nginx 监听端口为 80， </p>
<p>访问 <code>http://www.zhangxiaocai.cn/java/</code> 直接跳转到 <code>127.0.0.1:8081</code></p>
<p>访问 <code>http://www.zhangxiaocai.cn/spring/</code> 直接跳转到 <code>127.0.0.1:8082</code></p>
<h3 id="3、location-指令说明"><a href="#3、location-指令说明" class="headerlink" title="3、location 指令说明"></a>3、location 指令说明</h3><p>location 指令用于匹配 URL。 </p>
<p>语法如下： </p>
<pre><code>location [ = | ~ | ~* |^~] uri {

}</code></pre><p>语法规则大致分两种：</p>
<p>（1）普通规则 Location</p>
<p>无前缀：普通匹配</p>
<p><code>=</code> : 表示精准匹配；</p>
<p><code>^~</code> :  <code>^</code>表示取反，正则取反，就是表示不用正则；</p>
<p>无前缀匹配示例：</p>
<pre><code>location ~* /xxx {
     # 匹配任何含有xxxd的请求。
}
location ~* \.(gif|jpg|jpeg)$ {
     # 匹配任何以 gif、jpg 或 jpeg 结尾的请求。
}</code></pre><p>精准匹配示例：</p>
<pre><code>location = / {
    # 精准匹配，主机名后不带任何字符串
}</code></pre><p>正则取反匹配示例：</p>
<pre><code>location ^~ /images/ {
 # 不使用正则，匹配任何以 /images/ 开头的任何查询并且停止搜索。
}</code></pre><p>（2）正则规则 Location</p>
<p><code>~</code> :  区分大小写；</p>
<p><code>~*</code> :  不区分大小写；</p>
<p><strong>语法规则优先级</strong>（由高到底）</p>
<p>（1）有精准匹配的优先匹配</p>
<p>（2）无精准匹配的执行普通匹配，普通匹配中优先最全/最长匹配</p>
<p>示例一：</p>
<pre class=" language-conf"><code class="language-conf">location /xxx {

}</code></pre>
<p>此时普通匹配，匹配所有以 /xxx 开头的路径。</p>
<p>示例二：</p>
<p>访问地址：/uri/a/b/c/d</p>
<p>规则1： /a</p>
<p>规则2： /a/b</p>
<p>规则3：/a/b/c</p>
<p>规则3是与访问地址最长匹配</p>
<p>示例三：</p>
<p>访问地址：/uri/a/b/c/d</p>
<p>规则1：~ /a</p>
<p>规则2：~ /a/b</p>
<p>规则3：~ /a/b/c</p>
<p>规则3是与访问地址最长匹配，但是此时规则中如果有正则匹配，则会再次进行正则匹配，规则1会被命中执行 。</p>
<p>（3）无精准匹配，无普通匹配，执行正则取反的匹配，也是普通匹配的一种</p>
<p>（4）执行正则匹配</p>
<p>示例一：</p>
<pre><code>location ~ /xxx {

}</code></pre><p>此时正则匹配，匹配所有包含 /xxx 的路径，区分大小写。</p>
<p>（5）匹配起始路径</p>
<pre><code>location  /xxx {
    #此时正则匹配，匹配所有以 /xxx 开头的路径，区分大小写。
}

location ~* \.(gif|jpg|jpeg)$ {
     # 匹配任何以 gif、jpg 或 jpeg 结尾的请求。
}</code></pre><p>（6）匹配所有</p>
<pre><code>location / {

}</code></pre><hr>
<p><code>=</code> ：用于不含正则表达式的 uri 前，要求请求字符串与 uri 严格匹配，如果匹配 成功，就停止继续向下搜索并立即处理该请求。<br><code>~</code>：用于表示 uri 包含正则表达式，并且区分大小写。<br><code>~*</code>：用于表示 uri 包含正则表达式，并且不区分大小写。<br><code>^~</code>：用于不含正则表达式的 uri 前，要求 Nginx 服务器找到标识 uri 和请求字 符串匹配度最高的 location 后，立即使用此 location 处理请求，而不再使用 location 块中的正则 uri 和请求字符串做匹配。 </p>
<p>注意：如果 uri 包含正则表达式，则必须要有 <code>~</code> 或者 <code>~*</code> 标识。    </p>
<h3 id="4、负载均衡配置实例"><a href="#4、负载均衡配置实例" class="headerlink" title="4、负载均衡配置实例"></a>4、负载均衡配置实例</h3><p>负载均衡即是将负载分摊到不同的服务单元，既保证服务的可用性，又保证响应 足够快，给用户很好的体验。</p>
<p>快速增长的访问量和数据流量催生了各式各样的负载均衡产品， 很多专业的负载均衡硬件提供了很好的功能，但却价格不菲，这使得负载均衡软件大受欢迎， nginx 就是其中的一个，在 linux 下有 Nginx、 LVS、 Haproxy 等等服务可以提供负载均衡服务 。</p>
<p>准备工作：安装2个 <code>tomcat</code> 并配置端口分别为 <code>8081</code> 和 <code>8082</code> ，为了区分也可以准备2个不同的 <code>index.html</code> 页面。</p>
<p>nginx.conf 配置：</p>
<pre><code>http {
    ...
    upstream my_server{
        ip_hash;
        server 127.0.0.1:8081 weight=1;
        server 127.0.0.1:8082 weight=1;
    }
    ...
    server{

        location / {
            proxy_pass http://myserver;
            proxy_connect_timeout 10;
            ...
        }
    }
}</code></pre><h3 id="5、nginx-服务均衡策略"><a href="#5、nginx-服务均衡策略" class="headerlink" title="5、nginx 服务均衡策略"></a>5、nginx 服务均衡策略</h3><p>Nginx 提供了几种分配方式(策略)： </p>
<p>1、轮询（默认） </p>
<p>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器 down 掉，能自动剔除。 </p>
<p>2、 weight </p>
<p>weight 代表权,重默认为 1,权重越高被分配的客户端越多 指定轮询几率， weight 和访问比率成正比，用于后端服务器性能不均的情况。 例如：</p>
<pre><code>upstream my_server_pool{
    server 192.168.0.121 weight=10;
    server 192.168.0.122 weight=10;
}</code></pre><p>3 、 ip_hash </p>
<p>每个请求按访问 ip 的 hash 结果分配，这样每个访客固定访问一个后端服务器，可以解决 session 的问题。 例如： </p>
<pre><code>upstream my_server_pool{ 
    ip_hash; 
    server 192.168.0.121:80; 
    server 192.168.0.122:80; 
} </code></pre><p>4 、 fair（第三方） 按后端服务器的响应时间来分配请求，响应时间短的优先分配。 </p>
<pre><code>upstream my_server_pool{ 
    server 192.168.5.21:80; 
    server 192.168.5.22:80; 
    fair; 
}    </code></pre><h3 id="6、动静分离配置实例"><a href="#6、动静分离配置实例" class="headerlink" title="6、动静分离配置实例"></a>6、动静分离配置实例</h3><p>Nginx 动静分离简单来说就是把动态跟静态请求分开，不能理解成只是单纯的把动态页面和静态页面物理分离。</p>
<p>严格意义上说应该是动态请求跟静态请求分开，可以理解成使用 Nginx 处理静态页面， Tomcat 处理动态页面。</p>
<p>动静分离从目前实现角度来讲大致分为两种：</p>
<p>（1） 一种是纯粹把静态文件独立成单独的域名，放在独立的服务器上，也是目前主流推崇的方案；</p>
<p>（2） 另外一种方法就是动态跟静态文件混合在一起发布，通过 nginx 来分开。 通过 location 指定不同的后缀名实现不同的请求转发。通过 expires 参数设置，可以使 浏览器缓存过期时间，减少与服务器之前的请求和流量。</p>
<p>​    具体 Expires 定义：是给一个资 源设定一个过期时间，也就是说无需去服务端验证，直接通过浏览器自身确认是否过期即可， 所以不会产生额外的流量。此种方法非常适合不经常变动的资源。（如果经常更新的文件， 不建议使用 Expires 来缓存），假如设置为 3d，表示在这 3 天之内访问这个 URL，发送一个请求，比对服务器该文件最后更新时间没有变化，则不会从服务器抓取，返回状态码 304，如果有修改，则直接从服务器重新下载，返回状态码 200。    </p>
<p><strong>动态资源代理配置</strong>：</p>
<pre><code>location / {

    proxy_pass 路径
}</code></pre><p><strong>静态资源代理配置</strong>：</p>
<pre><code>location / {

    root 静态资源路径
    index  默认访问路径下的什么资源
    autoindex on; # 代表展示静态资源的全部内容，以列表的形式展开。
}</code></pre><p>配置文件实例：</p>
<pre><code>server{
    listen 80;
    server_name www.zhangxiaocai.cn

    location /js/ {
        root /home/tomcat/webapps/test/js/;
        autoindex on;
    }
    location /image/ {
        root /home/tomcat/webapps/test/images/;
        autoindex on;
    }
}</code></pre><p>测试访问ok之后可以删除静态文件再试试，看看访问走的 <code>nginx</code> 还是 <code>tomcat</code>。</p>
<h2 id="六、Nginx-原理"><a href="#六、Nginx-原理" class="headerlink" title="六、Nginx 原理"></a>六、Nginx 原理</h2><h3 id="1、nginx基本原理："><a href="#1、nginx基本原理：" class="headerlink" title="1、nginx基本原理："></a>1、nginx基本原理：</h3><p>​    使用 <code>master-workers</code> 的机制，通过一个 <code>master</code> 主进程管理其他 <code>worker</code> 进行来处理客户端的请求和响应。</p>
<p><strong>特点：</strong></p>
<p>（1）每个 <code>worker</code> 进程都是独立的进程，不需要加锁。</p>
<p>（2）采用独立进程，相互之间不会影响，一个进程结束，不影响其他进程，服务不会中断，<code>master</code> 进程会启动新的 worker 进程。</p>
<p>（3）<code>worker</code> 进程 异常退出，只会导致当前进程 <code>worker</code> 上的请求失败，不会影响所有请求，降低运行风险。</p>
<h3 id="2、相关设置"><a href="#2、相关设置" class="headerlink" title="2、相关设置"></a>2、相关设置</h3><p><strong>worker 设置</strong></p>
<p>​    nginx 同 redis 类似都采用了 io 多路复用机制，每个 <code>worker</code> 都是一个独立的进程，但每个进 程里只有一个主线程，通过异步非阻塞的方式来处理请求， 即使是千上万个请求也不在话 下。每个 worker 的线程可以把一个 cpu 的性能发挥到极致。所以 <code>worker</code> 数和服务器的 cpu 数相等是最为适宜的。设少了会浪费 cpu，设多了会造成 cpu 频繁切换上下文带来的损耗。</p>
<p><strong>连接数 worker_connection</strong></p>
<p>这个值是表示每个 <code>worker</code> 进程所能建立连接的最大值，所以，一个 <code>nginx</code> 能建立的最大连接 数，应该是 <code>worker_connections * worker_processes</code> 。当然，这里说的是最大连接数，对于 <code>HTTP</code> 请求本地资源来说 ， 能 够支持的最大并发数量是 <code>worker_connections * worker_processes</code>，</p>
<p>如果是支持 <code>http1.1</code> 的浏览器每次访问要占两个连接，所以<strong>普通的静态访问最大并发数</strong>是： <code>worker_connections * worker_processes /2</code>，</p>
<p>如果是 <code>HTTP</code> 作为反向代理来说，<strong>动态资源最大并发数量</strong>应该是 <code>worker_connections * worker_processes /4</code>。因为作为反向代理服务器，每个并发会建立与客户端的连接和与后端服 务的连接，会占用两个连接。    </p>
<h3 id="3、配置文件结构"><a href="#3、配置文件结构" class="headerlink" title="3、配置文件结构"></a>3、配置文件结构</h3><blockquote class="pullquote mindmap mindmap-md"><!-- build time:Wed Oct 07 2020 14:01:19 GMT+0800 (中国标准时间) --><ul><li>Nginx.conf 结构<ul><li>work_processes</li><li>events<ul><li>worker_connection</li></ul></li><li>http<ul><li>server<ul><li>listen</li><li>server_name</li><li>location<ul><li>root</li><li>index</li></ul></li></ul></li></ul></li></ul></li></ul><!-- rebuild by neat --></blockquote>



<h2 id="七、其他"><a href="#七、其他" class="headerlink" title="七、其他"></a>七、其他</h2><p>https 已经在使用了，暂时还没加上。</p>
<p>遇到再补充吧~</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8 中的Stream API</title>
    <url>/posts/2da068d9.html</url>
    <content><![CDATA[<h2 id="Java8-中的Stream-API"><a href="#Java8-中的Stream-API" class="headerlink" title="Java8 中的Stream API"></a>Java8 中的Stream API</h2><p>Stream 是 Java8 中处理集合的关键抽象概念。可以对集合进行操作，执行复杂的查找、过滤、映射数据等相关操作。使用Stream API 对集合操作类似于SQL查询。</p>
<h2 id="一-、Stream-（流）是什么"><a href="#一-、Stream-（流）是什么" class="headerlink" title="一 、Stream （流）是什么"></a>一 、Stream （流）是什么</h2><p>stream 是一种数据渠道，用来操作数据源并生成新的元素序列的过程。是一个来自数据源的元素队列并支持查找过滤映射等聚合操作。</p>
<p>需要注意点：<br>（1）Stream 自己不会存存储元素。（所以不是集合）<br>（2）Stream 的来源可以是集合、数组、IO推导、产生器generator等。<br>（3）Stream 不会改变源对象，在 Stream 结束操作之后会返回一个持有操作结果的新 Stream 。<br>（4）Stream 的聚合操作类似SQL语句，如：filter、map、reduce、find、match、sorted等<br>（4）Stream 操作是一种 Pipelining （流水线技术），中间操作返回流对象本身，这样可以将多个操作串联成一个管道，如<code>fluent style(流式风格)</code>，可以实现延迟执行（Laziness）和短路（Short-Circuiting）的优化。<br>（5）Stream 通过访问者模式(Visitor)实现内部迭代方式，无须通过Iterator或For进行外部显示迭代。</p>
<h2 id="二、Stream-操作步骤"><a href="#二、Stream-操作步骤" class="headerlink" title="二、Stream 操作步骤"></a>二、Stream 操作步骤</h2><p>Stream 操作分三步：</p>
<p>（1）创建 Stream </p>
<p>利用数据源（集合、数组、IO推导、产生器generator等）获取流。</p>
<p>（2）中间操作 </p>
<p>中间操作（intermediate operation） 可以是一个中间链，对数据源的数据进行处理</p>
<p>（3）最终操作(terminal operation) </p>
<p>最终操作，也可以叫终止操作、终端操作。最终操作执行中间操作链，并生成结果。</p>
<p>流程大概如图：</p>
<pre class=" language-txt"><code class="language-txt">+--------------------+       +------+   +------+   +---+   +-------+       +--------+
| stream of elements +-----> |filter+-> |sorted+-> |map+-> |flatMap|-----> |collect +
+--------------------+       +------+   +------+   +---+   +-------+       +--------+</code></pre>
<h3 id="1、创建流"><a href="#1、创建流" class="headerlink" title="1、创建流"></a>1、创建流</h3><h4 id="（1）Collection接口获取流"><a href="#（1）Collection接口获取流" class="headerlink" title="（1）Collection接口获取流"></a>（1）Collection接口获取流</h4><p>java8 的<code>Collection</code>接口被扩展，提供了两个获取流的方法：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">default</span> Stream<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//返回一个串行流</span>
<span class="token keyword">default</span> Stream<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//返回一个并行流</span></code></pre>
<p>如：</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Collection 提供了两个方法  stream() 与 parallelStream()</span>
List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Stream<span class="token operator">&lt;</span>String<span class="token operator">></span> stream <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取一个顺序流</span>
Stream<span class="token operator">&lt;</span>String<span class="token operator">></span> parallelStream <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取一个并行流</span></code></pre>
<h4 id="（2）数组获取数组流"><a href="#（2）数组获取数组流" class="headerlink" title="（2）数组获取数组流"></a>（2）数组获取数组流</h4><p>java8 中的<code>Arrays</code>的静态方法<code>stream()</code>获取数组流</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Stream<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">stream</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//返回数组流</span></code></pre>
<p>还重载形式：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> IntStream <span class="token function">stream</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> LongStream <span class="token function">stream</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> DoubleStream <span class="token function">stream</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span></code></pre>
<p>如：</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//通过 Arrays 中的 stream() 获取一个数组流</span>
Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
Stream<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stream1 <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h4 id="（3）根据值获取流"><a href="#（3）根据值获取流" class="headerlink" title="（3）根据值获取流"></a>（3）根据值获取流</h4><p>可以使用静态方法<code>Stream.of()</code>利用显示值创建流，它可以接受任意数量的参数。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span><span class="token operator">&lt;</span>T<span class="token operator">></span> Stream<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">stream</span><span class="token punctuation">(</span>T<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span></code></pre>
<p>如：</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 通过 Stream 类中静态方法 of()</span>
Stream<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stream2 <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h4 id="（4）创建无限流"><a href="#（4）创建无限流" class="headerlink" title="（4）创建无限流"></a>（4）创建无限流</h4><p>可以使用静态方法<code>Stream.iterate()</code>和<code>Stream.generate()</code>创建无限流。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span><span class="token operator">&lt;</span>T<span class="token operator">></span> Stream<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">iterate</span><span class="token punctuation">(</span><span class="token keyword">final</span> T seed<span class="token punctuation">,</span> <span class="token keyword">final</span> UnaryOperator<span class="token operator">&lt;</span>T<span class="token operator">></span> f<span class="token punctuation">)</span>
 <span class="token keyword">public</span> <span class="token keyword">static</span><span class="token operator">&lt;</span>T<span class="token operator">></span> Stream<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">generate</span><span class="token punctuation">(</span>Supplier<span class="token operator">&lt;</span>T<span class="token operator">></span> s<span class="token punctuation">)</span></code></pre>
<p>如：</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//迭代</span>
Stream<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stream3 <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">iterate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> x <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
stream3<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//生成</span>
Stream<span class="token operator">&lt;</span>Double<span class="token operator">></span> stream4 <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span>Math<span class="token operator">:</span><span class="token operator">:</span>random<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
stream4<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h3 id="2、中间操作"><a href="#2、中间操作" class="headerlink" title="2、中间操作"></a>2、中间操作</h3><p>中间操作是对数据源进行处理的操作，<font color=“red”>多个中间操作连接起来形成中间链/流水线，除非中间链上触发终止操作，否则中间操作不会执行任何处理，而是在终止操作时一次性全部处理，这个过程称为”延迟加载”或“惰性求值”。</font></p>
<h4 id="（1）筛选和切片"><a href="#（1）筛选和切片" class="headerlink" title="（1）筛选和切片"></a>（1）筛选和切片</h4><table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>filter(Predicate p)</td>
<td>接收Lamba，从流中排除某些元素</td>
</tr>
<tr>
<td>distinct()</td>
<td>筛选，通过流所生成元素的hashCode()和equals()去除重复元素</td>
</tr>
<tr>
<td>limit(long maxsize)</td>
<td>截断流，使其元素不超过给定数量</td>
</tr>
<tr>
<td>skip(long n)</td>
<td>跳过元素，返回一个扔掉了前n个元素的流。<br/>若流中元素不足n个，则返回一个空流。与limit(n)互补。</td>
</tr>
</tbody></table>
<p>如：</p>
<pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>
            <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">102</span><span class="token punctuation">,</span> <span class="token string">"李四"</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">6666.66</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">9999.99</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">103</span><span class="token punctuation">,</span> <span class="token string">"王五"</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">3333.33</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">104</span><span class="token punctuation">,</span> <span class="token string">"赵六"</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7777.77</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">104</span><span class="token punctuation">,</span> <span class="token string">"赵六"</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7777.77</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">104</span><span class="token punctuation">,</span> <span class="token string">"赵六"</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7777.77</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">105</span><span class="token punctuation">,</span> <span class="token string">"田七"</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">5555.55</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//所有的中间操作不会做任何的处理</span>
Stream<span class="token operator">&lt;</span>User<span class="token operator">></span> stream <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"测试中间操作执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> e<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">30</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//只有当做终止操作时，所有的中间操作会一次性的全部执行，称为“惰性求值”</span>
stream<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//去重复</span>
users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>

users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"短路！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// &amp;&amp;  ||</span>
                <span class="token keyword">return</span> e<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">5000</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>

users<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> e<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">5000</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h4 id="（2）映射"><a href="#（2）映射" class="headerlink" title="（2）映射"></a>（2）映射</h4><table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>map(Function f)</td>
<td>接收一个函数作为参数，该函数会被应用到每个元素上，<br/>并将其映射成一个新的元素。</td>
</tr>
<tr>
<td>mapToDouble(ToDoubleFunction df)</td>
<td>接收一个函数作为参数，该函数会被应用到每个元素上，<br/>产生一个新的DoubleStream。</td>
</tr>
<tr>
<td>mapToInt(ToIntFunction f)</td>
<td>接收一个函数作为参数，该函数会被应用到每个元素上，<br/>产生一个新的IntStream。</td>
</tr>
<tr>
<td>mapToLong(ToLongFunction f)</td>
<td>接收一个函数作为参数，该函数会被应用到每个元素上，<br/>产生一个新的LongStream。</td>
</tr>
<tr>
<td>flatMap(Function f)</td>
<td>接收一个函数作为参数，将流中的每个值都换成另一个流，<br/>然后把所有的流连接成一个新的流。</td>
</tr>
</tbody></table>
<p><code>map(Function f)</code>和<code>flatMap(Function f)</code>的区别关于有点类似于<code>List</code>的<code>add(Object o)</code>和<code>addAll(Collection&lt;?&gt; c)</code>的关系区别；类似于<code>Map</code>的 <code>put(K key, V value)</code>和<code>putAll(Map&lt;?&gt; m)</code>的关系区别。</p>
<p>如：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zhangxiaocai<span class="token punctuation">.</span>cn<span class="token punctuation">.</span>java8<span class="token punctuation">.</span>stream<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>Stream<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StreamAPITest1</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mapTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        Stream<span class="token operator">&lt;</span>String<span class="token operator">></span> str <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> e<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        List<span class="token operator">&lt;</span>String<span class="token operator">></span> strList <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"stream"</span><span class="token punctuation">,</span> <span class="token string">"API"</span><span class="token punctuation">,</span> <span class="token string">"small"</span><span class="token punctuation">,</span> <span class="token string">"rose"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        Stream<span class="token operator">&lt;</span>String<span class="token operator">></span> stream <span class="token operator">=</span> strList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>String<span class="token operator">:</span><span class="token operator">:</span>toUpperCase<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//打印结果</span>
        stream<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>

        Stream<span class="token operator">&lt;</span>Stream<span class="token operator">&lt;</span>Character<span class="token operator">>></span> stream2 <span class="token operator">=</span> strList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>TestStreamAPI1<span class="token operator">:</span><span class="token operator">:</span>filterCharacter<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//显示迭代，打印结果</span>
        stream2<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>sm<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>
                    sm<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//扁平化的连接流</span>
        Stream<span class="token operator">&lt;</span>Character<span class="token operator">></span> stream3 <span class="token operator">=</span> strList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>TestStreamAPI1<span class="token operator">:</span><span class="token operator">:</span>filterCharacter<span class="token punctuation">)</span><span class="token punctuation">;</span>

        stream3<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> Stream<span class="token operator">&lt;</span>Character<span class="token operator">></span> <span class="token function">filterCharacter</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span><span class="token punctuation">{</span>
        List<span class="token operator">&lt;</span>Character<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>Character ch <span class="token operator">:</span> str<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="（3）排序"><a href="#（3）排序" class="headerlink" title="（3）排序"></a>（3）排序</h4><table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>sorted()</td>
<td>产生一个新流，其中按自然顺序排序</td>
</tr>
<tr>
<td>sorted(Comparator comp)</td>
<td>产生一个新流，其中按自定义比较器顺序排序</td>
</tr>
</tbody></table>
<p>如：</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//自然排序</span>
users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>User<span class="token operator">:</span><span class="token operator">:</span>getName<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//比较器排序</span>
users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> y<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token keyword">return</span> x<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>y<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                    <span class="token keyword">return</span> Integer<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h3 id="3、终止操作"><a href="#3、终止操作" class="headerlink" title="3、终止操作"></a>3、终止操作</h3><p>终端操作是让流的中间链生成结果。它的结果可以是任何不是流的值，比如：<code>List</code>、<code>Integer</code>、<code>Map</code>，也可以是<code>void</code>。</p>
<h4 id="（1）查找匹配"><a href="#（1）查找匹配" class="headerlink" title="（1）查找匹配"></a>（1）查找匹配</h4><table>
<thead>
<tr>
<th>方法</th>
<th>返回类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>allMatch(Predicate p)</td>
<td><code>Boolean</code></td>
<td>检查是否匹配所有元素</td>
</tr>
<tr>
<td>anyMatch(Predicate p)</td>
<td><code>Boolean</code></td>
<td>检查是否至少匹配一个元素</td>
</tr>
<tr>
<td>noneMatch(Predicate p)</td>
<td><code>Boolean</code></td>
<td>检查是否没有匹配所有元素</td>
</tr>
<tr>
<td>findFirst()</td>
<td><code>Optional&lt;T&gt;</code></td>
<td>返回第一个元素</td>
</tr>
<tr>
<td>findAny()</td>
<td><code>Optional&lt;T&gt;</code></td>
<td>返回当前流中的任意元素</td>
</tr>
</tbody></table>
<p>使用示例：</p>
<pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>
            <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">102</span><span class="token punctuation">,</span> <span class="token string">"李四"</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">6666.66</span><span class="token punctuation">,</span> Status<span class="token punctuation">.</span>BUSY<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">9999.99</span><span class="token punctuation">,</span> Status<span class="token punctuation">.</span>FREE<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">103</span><span class="token punctuation">,</span> <span class="token string">"王五"</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">3333.33</span><span class="token punctuation">,</span> Status<span class="token punctuation">.</span>VOCATION<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">104</span><span class="token punctuation">,</span> <span class="token string">"赵六"</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7777.77</span><span class="token punctuation">,</span> Status<span class="token punctuation">.</span>BUSY<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">104</span><span class="token punctuation">,</span> <span class="token string">"赵六"</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7777.77</span><span class="token punctuation">,</span> Status<span class="token punctuation">.</span>FREE<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">104</span><span class="token punctuation">,</span> <span class="token string">"赵六"</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7777.77</span><span class="token punctuation">,</span> Status<span class="token punctuation">.</span>FREE<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">105</span><span class="token punctuation">,</span> <span class="token string">"田七"</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">5555.55</span><span class="token punctuation">,</span> Status<span class="token punctuation">.</span>BUSY<span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">boolean</span> bl <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">allMatch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> e<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>Status<span class="token punctuation">.</span>BUSY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bl<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false</span>

<span class="token keyword">boolean</span> bl1 <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> e<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>Status<span class="token punctuation">.</span>BUSY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bl1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span>

<span class="token keyword">boolean</span> bl2 <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">noneMatch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> e<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>Status<span class="token punctuation">.</span>BUSY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bl2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false</span>

Optional<span class="token operator">&lt;</span>User<span class="token operator">></span> op <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Double<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>e1<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e2<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>op<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Optional<span class="token operator">&lt;</span>User<span class="token operator">></span> op2 <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> e<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>Status<span class="token punctuation">.</span>FREE<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">findAny</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>op2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h4 id="（2）聚合"><a href="#（2）聚合" class="headerlink" title="（2）聚合"></a>（2）聚合</h4><table>
<thead>
<tr>
<th>方法</th>
<th>返回类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>count()</td>
<td><code>Long</code></td>
<td>返回流中元素总数</td>
</tr>
<tr>
<td>max(Comparator c)</td>
<td><code>Optional&lt;T&gt;</code></td>
<td>返回流中最大值</td>
</tr>
<tr>
<td>min(Comparator c)</td>
<td><code>Optional&lt;T&gt;</code></td>
<td>返回流中最小值</td>
</tr>
<tr>
<td>forEach(Consumer c)</td>
<td></td>
<td>Stream API的内部迭代</td>
</tr>
</tbody></table>
<p>使用示例：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">long</span> count <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> e<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>Status<span class="token punctuation">.</span>FREE<span class="token punctuation">)</span><span class="token punctuation">)</span>
                         <span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>

Optional<span class="token operator">&lt;</span>Double<span class="token operator">></span> op <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>User<span class="token operator">:</span><span class="token operator">:</span>getSalary<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>Double<span class="token operator">:</span><span class="token operator">:</span>compare<span class="token punctuation">)</span><span class="token punctuation">;</span>

System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>op<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Optional<span class="token operator">&lt;</span>User<span class="token operator">></span> op2 <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Double<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>e1<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e2<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>op2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


Stream<span class="token operator">&lt;</span>User<span class="token operator">></span> stream <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
         <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> e<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>Status<span class="token punctuation">.</span>FREE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">long</span> count <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//流进行了终止操作后，不能再次使用</span>
stream<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>User<span class="token operator">:</span><span class="token operator">:</span>getSalary<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>Double<span class="token operator">:</span><span class="token operator">:</span>compare<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h4 id="（3）归约"><a href="#（3）归约" class="headerlink" title="（3）归约"></a>（3）归约</h4><table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>reduce(T iden, BinaryOperator b)</td>
<td>可以将流中元素反复结合起来，得到一个值，返回T</td>
</tr>
<tr>
<td>reduce(BinaryOperator b)</td>
<td>可以将流中元素反复结合起来，得到一个值，返回<code>Optional&lt;T&gt;</code></td>
</tr>
</tbody></table>
<p><code>map</code>和<code>reduce</code>的连接通常称为<code>map-reduce</code>模式，因Google用它来进行网络搜索而出名。</p>
<p>使用示例：</p>
<pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Integer sum <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>

System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Optional<span class="token operator">&lt;</span>Double<span class="token operator">></span> op <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>User<span class="token operator">:</span><span class="token operator">:</span>getSalary<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>Double<span class="token operator">:</span><span class="token operator">:</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>

System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>op<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//查名字里出现"六"的次数</span>
Optional<span class="token operator">&lt;</span>Integer<span class="token operator">></span> sum <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>User<span class="token operator">:</span><span class="token operator">:</span>getName<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>TestStreamAPI1<span class="token operator">:</span><span class="token operator">:</span>filterCharacter<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">'六'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token keyword">else</span> 
                    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>Integer<span class="token operator">:</span><span class="token operator">:</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h4 id="（4）收集"><a href="#（4）收集" class="headerlink" title="（4）收集"></a>（4）收集</h4><table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>collect(Collector c)</td>
<td>将流转换为其他形式。接受一个<code>Collector</code>接口的实现，用于给Stream中元素做汇总的方法。</td>
</tr>
</tbody></table>
<p><code>Collector</code>接口中方法的实现决定了如何对流执行收集操作（如何收集到<code>List</code>、<code>Set</code>、<code>Map</code>）。但是<code>Collectors</code>实用类提供了很多静态方法，可以方便创建常见收集器实例，具体方法如下：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>返回类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>toList</td>
<td><code>List&lt;T&gt;</code></td>
<td>把流中元素收集到<code>List</code>集合</td>
</tr>
<tr>
<td>toSet</td>
<td><code>Set&lt;T&gt;</code></td>
<td>把流中元素收集到<code>Set</code>集合</td>
</tr>
<tr>
<td>toCollection</td>
<td><code>Collection&lt;T&gt;</code></td>
<td>把流中元素收集到创建的集合</td>
</tr>
<tr>
<td>counting</td>
<td><code>Long</code></td>
<td>计算流中元素的个数</td>
</tr>
<tr>
<td>summingInt</td>
<td><code>Integer</code></td>
<td>对流中元素的整数属性求和</td>
</tr>
<tr>
<td>averagingInt</td>
<td><code>Double</code></td>
<td>计算流中元素<code>Intger</code>属性的平均值</td>
</tr>
<tr>
<td>sunmarizingInt</td>
<td><code>IntSummaryStatistics</code></td>
<td>收集流中<code>Intger</code>属性的统计值。如：平均值</td>
</tr>
<tr>
<td>joining</td>
<td><code>String</code></td>
<td>连接流中每个字符串</td>
</tr>
<tr>
<td>maxBy</td>
<td><code>Optional&lt;T&gt;</code></td>
<td>根据比较器选择最大值</td>
</tr>
<tr>
<td>minBy</td>
<td><code>Optional&lt;T&gt;</code></td>
<td>根据比较器选择最小值</td>
</tr>
<tr>
<td>reducing</td>
<td>归约产生的类型</td>
<td>从一个作为累加器的初始值开始，利用<code>BinaryOperator</code>与流中元素逐个结合，从而归约成单个值</td>
</tr>
<tr>
<td>CollectingAndThen</td>
<td>转换函数返回的类型</td>
<td>包裹另一个收集器，对其结果转换函数</td>
</tr>
<tr>
<td>groupingBy</td>
<td><code>Map&lt;K,List&lt;T&gt;&gt;</code></td>
<td>根据某属性值对流分组，属性为K，结果为V</td>
</tr>
<tr>
<td>partitioningBy</td>
<td><code>Map&lt;Boolean,List&lt;T&gt;&gt;</code></td>
<td>根据<code>true</code>或<code>false</code>进行分区</td>
</tr>
</tbody></table>
<p>方式使用示例：</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// toList</span>
List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>User<span class="token operator">:</span><span class="token operator">:</span>getName<span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// toSet</span>
Set<span class="token operator">&lt;</span>String<span class="token operator">></span> set <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>User<span class="token operator">:</span><span class="token operator">:</span>getName<span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
set<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// toCollection</span>
HashSet<span class="token operator">&lt;</span>String<span class="token operator">></span> hs <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>User<span class="token operator">:</span><span class="token operator">:</span>getName<span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toCollection</span><span class="token punctuation">(</span>HashSet<span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
hs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// maxBy 最大值</span>
Optional<span class="token operator">&lt;</span>Double<span class="token operator">></span> max <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>User<span class="token operator">:</span><span class="token operator">:</span>getSalary<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">maxBy</span><span class="token punctuation">(</span>Double<span class="token operator">:</span><span class="token operator">:</span>compare<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>max<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// minBy 最小值</span>
Optional<span class="token operator">&lt;</span>User<span class="token operator">></span> op <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">minBy</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Double<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>e1<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e2<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>op<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// summingDouble</span>
Double sum <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">summingDouble</span><span class="token punctuation">(</span>User<span class="token operator">:</span><span class="token operator">:</span>getSalary<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// averagingDouble  平均值</span>
Double avg <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">averagingDouble</span><span class="token punctuation">(</span>User<span class="token operator">:</span><span class="token operator">:</span>getSalary<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>avg<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// counting 总数</span>
Long count <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">counting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// summarizingDouble  总和</span>
DoubleSummaryStatistics dss <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">summarizingDouble</span><span class="token punctuation">(</span>User<span class="token operator">:</span><span class="token operator">:</span>getSalary<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dss<span class="token punctuation">.</span><span class="token function">getMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dss<span class="token punctuation">.</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dss<span class="token punctuation">.</span><span class="token function">getAverage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// groupingBy 分组</span>
Map<span class="token operator">&lt;</span>Status<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>User<span class="token operator">>></span> map <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span>User<span class="token operator">:</span><span class="token operator">:</span>getStatus<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//多级分组</span>
Map<span class="token operator">&lt;</span>Status<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>User<span class="token operator">>>></span> map <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span>User<span class="token operator">:</span><span class="token operator">:</span>getStatus<span class="token punctuation">,</span> Collectors<span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">60</span><span class="token punctuation">)</span>
                    <span class="token keyword">return</span> <span class="token string">"老年"</span><span class="token punctuation">;</span>
                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">35</span><span class="token punctuation">)</span>
                    <span class="token keyword">return</span> <span class="token string">"中年"</span><span class="token punctuation">;</span>
                <span class="token keyword">else</span>
                    <span class="token keyword">return</span> <span class="token string">"成年"</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// partitioningBy 分区</span>
Map<span class="token operator">&lt;</span>Boolean<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>User<span class="token operator">>></span> map <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">partitioningBy</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> e<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// joining 连接</span>
String str <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>User<span class="token operator">:</span><span class="token operator">:</span>getName<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">","</span> <span class="token punctuation">,</span> <span class="token string">"----"</span><span class="token punctuation">,</span> <span class="token string">"----"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//以逗号分隔，前后加 ------</span>

<span class="token comment" spellcheck="true">// reducing 归约</span>
Optional<span class="token operator">&lt;</span>Double<span class="token operator">></span> sum <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>User<span class="token operator">:</span><span class="token operator">:</span>getSalary<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">reducing</span><span class="token punctuation">(</span>Double<span class="token operator">:</span><span class="token operator">:</span>sum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2 id="三、并行流与串行流"><a href="#三、并行流与串行流" class="headerlink" title="三、并行流与串行流"></a>三、并行流与串行流</h2><p><strong>并行流</strong> 就是把一个内容分成多个数据库，并用不同的线程分别处理每个数据块的流。</p>
<p>java8 中将并行进行优化，可以很容易对数据进行并行操作。Stream API 可以声明性地通过<code>parallel()</code>和<code>sequential()</code>在并行流和串行流之间进行切换。</p>
<p>一个整数累加的示例：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">paralleltTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        Long sum <span class="token operator">=</span> LongStream<span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span>0L<span class="token punctuation">,</span> 10000000000L<span class="token punctuation">)</span>
                             <span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                             <span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"耗费的时间为: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span></code></pre>
<h2 id="四、ForK-Join-框架简介"><a href="#四、ForK-Join-框架简介" class="headerlink" title="四、ForK /Join 框架简介"></a>四、ForK /Join 框架简介</h2><p>ForK /Join 框架： 就是在比要时，可以将一个大任务，进行拆分（<code>fork</code>）成若干个小任务（拆到不可再拆时），再将一个个的小任务运算的结果进行<code>Join</code>汇总。</p>
<p>ForK / Join 框架和传统线程池区别：</p>
<p>ForK / Join 框架采用的是<code>“Working-Stealing（工作窃取）”</code>模式：当执行新的任务时它可以将其拆分成更小颗粒的任务执行，并将小任务添加到线程队列中，然后再从一个随机线程的队列中偷一个并把它放在自己队列中。</p>
<p>相比于一般线程池实现，ForK / Join 的优势是在对其中包含的任务的处理方式上，在一般的线程池中，如果一个线程正在执行的任务有余某些原因无法继续执行，那么该线程会处于等待状态。而ForK / Join 框架实现中，如果某个子问题由于等待另一个子问题的完成而无法继续执行时，处理该子问题的线程会主动寻找其他尚未运行的子问题来执行。这种方式减少了线程的等待时间，可以有效的提高性能。</p>
<p>Fork/Join框架主要类</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>ForkJoinPool</td>
<td>用来执行Task，或生成新的ForkJoinWorkerThread，执行 ForkJoinWorkerThread 间的 work-stealing 逻辑。ForkJoinPool 不是为了替代 ExecutorService，而是它的补充，在某些应用场景下性能比 ExecutorService 更好。</td>
</tr>
<tr>
<td>ForkJoinTask</td>
<td>执行具体的分支逻辑，声明以同步/异步方式进行执行</td>
</tr>
<tr>
<td>ForkJoinWorkerThread</td>
<td>是 ForkJoinPool 内的 worker thread，执行ForkJoinTask, 内部有 ForkJoinPool.WorkQueue来保存要执行的ForkJoinTask。</td>
</tr>
<tr>
<td>ForkJoinPool.WorkQueue</td>
<td>保存要执行的ForkJoinTask。</td>
</tr>
</tbody></table>
<p>Fork/Join框架主要逻辑：</p>
<p>ForkJoinPool 的每个工作线程都维护着一个工作队列（WorkQueue），这是一个双端队列（Deque），里面存放的对象是任务（ForkJoinTask）。</p>
<p>每个工作线程在运行中产生新的任务（通常是因为调用了<br><code>fork()</code>）时，会放入工作队列的队尾，并且工作线程在处理自己的工作队列时，使用的是<code>LIFO</code>方式，也就是说每次从队尾取出任务来执行。</p>
<p>每个工作线程在处理自己的工作队列同时，会尝试窃取一个任务（或是来自于刚刚提交到 pool 的任务，或是来自于其他工作线程的工作队列），窃取的任务位于其他线程的工作队列的队首，也就是说工作线程在窃取其他工作线程的任务时，使用的是 FIFO 方式。</p>
<p>在遇到 join() 时，如果需要 join 的任务尚未完成，则会先处理其他任务，并等待其完成。</p>
<p>在既没有自己的任务，也没有可以窃取的任务时，进入休眠。</p>
<p>一个整数累加的示例：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java8<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>RecursiveTask<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForkJoinHandle</span> <span class="token keyword">extends</span> <span class="token class-name">RecursiveTask</span><span class="token operator">&lt;</span>Long<span class="token operator">></span><span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 13475679780L<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">long</span> start<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> end<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> THRESHOLD <span class="token operator">=</span> 10000L<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//临界值</span>

    <span class="token keyword">public</span> <span class="token function">ForkJoinHandle</span><span class="token punctuation">(</span><span class="token keyword">long</span> start<span class="token punctuation">,</span> <span class="token keyword">long</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">=</span> start<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>end <span class="token operator">=</span> end<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> Long <span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> length <span class="token operator">=</span> end <span class="token operator">-</span> start<span class="token punctuation">;</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span>length <span class="token operator">&lt;=</span> THRESHOLD<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">long</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token keyword">long</span> middle <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>

            ForkJoinHandle left <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ForkJoinHandle</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> middle<span class="token punctuation">)</span><span class="token punctuation">;</span>
            left<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//拆分，并将该子任务压入线程队列</span>

            ForkJoinHandle right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ForkJoinHandle</span><span class="token punctuation">(</span>middle<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>
            right<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">return</span> left<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> right<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

<span class="token punctuation">}</span></code></pre>
<p>测试类：</p>
<pre class=" language-java"><code class="language-java">
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">forkJoinTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        ForkJoinPool pool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ForkJoinPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ForkJoinTask<span class="token operator">&lt;</span>Long<span class="token operator">></span> task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ForkJoinHandle</span><span class="token punctuation">(</span>0L<span class="token punctuation">,</span> 20000000000L<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">long</span> sum <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"耗费的时间为: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">forkJoinTest2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

        ForkJoinPool forkjoinPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ForkJoinPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        ForkJoinHandle task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ForkJoinHandle</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//执行一个任务</span>
        Future<span class="token operator">&lt;</span>Integer<span class="token operator">></span> result <span class="token operator">=</span> forkjoinPool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"result"</span> <span class="token operator">+</span> result<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printstacktrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

</code></pre>
<p>注意事宜：<br>（1）ForkJoinPool 使用submit 或 invoke 提交的区别：invoke是同步执行，调用之后需要等待任务完成，才能执行后面的代码；submit是异步执行，只有在Future调用get的时候会阻塞。</p>
<p>（2）这里继承的是RecursiveTask，还可以继承RecursiveAction。前者适用于有返回值的场景，而后者适合于没有返回值的场景</p>
<p>（3）这里执行子任务调用fork方法并不是最佳的选择，最佳的选择是invokeAll方法。</p>
<pre class=" language-java"><code class="language-java">left<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
right<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>替换为</p>
<pre class=" language-java"><code class="language-java"><span class="token function">invokeAll</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>参考文章：<br><a href="https://www.imooc.com/article/24822" target="_blank" rel="noopener">《并发之Fork/Join框架使用及注意点》</a></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot 日志学习</title>
    <url>/posts/c74d2d29.html</url>
    <content><![CDATA[<h2 id="SpringBoot-日志学习"><a href="#SpringBoot-日志学习" class="headerlink" title="SpringBoot 日志学习"></a>SpringBoot 日志学习</h2><h3 id="一、-日志框架了解"><a href="#一、-日志框架了解" class="headerlink" title="一、 日志框架了解"></a>一、 日志框架了解</h3><p>Log4j、Log4j2<br>Logback<br>Slf4j<br>JCL (Jakarta Commons Logging)，也叫 Apache Common logging<br>JUL (java.util.logging)</p>
<p>其中，JCL（Commons Logging） 和 Slf4j 是属于日志门面。日志门面是一种软件设计模式，也叫正面模式或外观模式。门面对外提供统一的抽象层接口，真正的日志实现子系统只要实现抽象接口即可。调用者可以使用统一的调用API，不需要的关心子系统是如何实现，实现解耦。如果真正的实现子系统可以根据需要进行更换或升级，而不修改原有调用代码。</p>
<p>整理表格1：</p>
<table>
<thead>
<tr>
<th>日志门面（抽象层，本身无日志实现）</th>
<th>日志实现</th>
</tr>
</thead>
<tbody><tr>
<td>Jakarta Commons Logging， Slf4j</td>
<td>log4j，logback，log4j2，Jul（Java Util Logging）</td>
</tr>
</tbody></table>
<p>在实际使用时：门面 + 实现 。</p>
<p>整理表格2：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Jakarta Commons Logging / Commons Logging</td>
<td>Apache项目，提供一套日志接口，属于日志门面。</td>
</tr>
<tr>
<td>Slf4j</td>
<td>类似Commons Logging 也是日志接口，属于日志门面。较优于前者。</td>
</tr>
<tr>
<td>Logback</td>
<td>日志记录组件的实现。与Slf4j是同一作者，高兼容，必须配合Slf4j使用。</td>
</tr>
<tr>
<td>Log4j</td>
<td>日志记录组件工具实现，日志实现框架之一。</td>
</tr>
<tr>
<td>Log4j2</td>
<td>Log4j的升级版，且不兼容前者。</td>
</tr>
<tr>
<td>Jul（Java Util Logging）</td>
<td>java1.4 之后的官方日志实现。</td>
</tr>
<tr>
<td>jboss-logging</td>
<td>日志的抽象层。</td>
</tr>
</tbody></table>
<h3 id="二、常见-Commons-Logging-集成"><a href="#二、常见-Commons-Logging-集成" class="headerlink" title="二、常见 Commons Logging 集成"></a>二、常见 Commons Logging 集成</h3><p>现在slf4j的优势出来之后，相对的就会逐渐代替旧的 <code>Commons Logging</code> 的集成方式，但是学习了解不可少，万一你遇到了项目里就是用了呢，你能否看得懂项目里的配置日志集成吗？</p>
<table>
<thead>
<tr>
<th>集成组合</th>
<th>所需Jar包</th>
</tr>
</thead>
<tbody><tr>
<td>commons-logging 与 jdk-logging</td>
<td>commons-logging.jar</td>
</tr>
<tr>
<td>commons-logging 与 Log4j</td>
<td>commons-logging.jar <br/>log4j 基本包</td>
</tr>
<tr>
<td>commons-logging 与 Log4j2</td>
<td>commons-logging.jar <br/>log4j-api<br/>log4j-core<br/>log4j-jcl (集成转换适配)</td>
</tr>
<tr>
<td>commons-logging 与 logback</td>
<td>logback-core <br/>logback-classic <br/>slf4j-api <br/></td>
</tr>
</tbody></table>
<p>对于 <code>commons-logging</code> 与 <code>logback</code> 的组合，我表示存疑，logback 属于slf4j阵营，这个组合待考…</p>
<h3 id="三、Slf4j-使用与集成"><a href="#三、Slf4j-使用与集成" class="headerlink" title="三、Slf4j 使用与集成"></a>三、Slf4j 使用与集成</h3><h4 id="1、基本使用"><a href="#1、基本使用" class="headerlink" title="1、基本使用"></a>1、基本使用</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>LoggerFactory<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>HelloWorld<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="2、Slf4j-集成关系图"><a href="#2、Slf4j-集成关系图" class="headerlink" title="2、Slf4j 集成关系图"></a>2、Slf4j 集成关系图</h4><p>Slf4j 官网</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/springboot-images/concrete-bindings.png" alt="Slf4g集成关系图"></p>
<p>将写成表格：</p>
<table>
<thead>
<tr>
<th>Slf4j 集成</th>
<th>集成所需jar</th>
</tr>
</thead>
<tbody><tr>
<td>Slf4j 与 logback</td>
<td>slf4j-api.jar<br/>logback-core.jar <br/>logback-classic.jar</td>
</tr>
<tr>
<td>Slf4j 与 log4j</td>
<td>slf4j-api.jar<br/>log4j.jar<br/>slf4j-log4j12.jar （slf4j 和 log4j 的桥接）</td>
</tr>
<tr>
<td>Slf4j 与 jdk logging</td>
<td>slf4j-api.jar<br/>slf4j-jdkxxx.jar（slf4j 和 jdk logging 的桥接）</td>
</tr>
<tr>
<td>Slf4j 与 Simple</td>
<td>slf4j-api.jar<br/>slf4j-simple.jar</td>
</tr>
<tr>
<td>Slf4j 与 Nop</td>
<td>slf4j-api.jar<br/>slf4j-nop.jar （slf4j 和 NOP 的桥接）</td>
</tr>
</tbody></table>
<p>使用 Slf4j 之后，每个日志实现框架，需要自己本身的配置文件。</p>
<h4 id="3、Slf4j-桥接遗留API"><a href="#3、Slf4j-桥接遗留API" class="headerlink" title="3、Slf4j 桥接遗留API"></a>3、Slf4j 桥接遗留API</h4><p>在实际使用中，引入不同的组件，组件自身会携带日志组件，如果需要统一使用某个日志门面如 Slf4j ，就需要把其他的日志组件重定向到我们想使用的日志门面Slf4j管理。然后 Slf4j 会根据绑定器，使用具体的日志实现框架。</p>
<p>官方桥接策略图：</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/springboot-images/legacy.png" alt=" Slf4j 桥接遗留适配图"></p>
<p>Slf4j 自带了几个桥接模板，可以使Log4j，JCL和Java.util.logging的API重定向 Slf4j。</p>
<table>
<thead>
<tr>
<th>桥接适配包</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>log4j-over-slf4j-xxx.jar</td>
<td>将 Log4j c重定向到 Slf4j</td>
</tr>
<tr>
<td>jcl-over-slf4j-xxx.jar</td>
<td>将 Commons Logging 里 Simple Logger 重定向到 Slf4j</td>
</tr>
<tr>
<td>jul-to-slf4j-xxx.jar</td>
<td>将 Java Uitl Logging 重定向到 Slf4j</td>
</tr>
</tbody></table>
<p><strong>使用 Slf4j 桥接时注意避免冲突和死循环问题：</strong></p>
<p>（1）log4j-over-slf4j-xxx.jar 和 slf4j-log4j.jar 同时存在，slf4j-log4j12.jar 的存在会将所有日志调用委托给log4j。但由于同时由于log4j-over-slf4j.jar的存在，会将所有对log4j api的调用委托给相应等值的slf4j,所以log4j-over-slf4j.jar和slf4j-log4j12.jar同时存在会形成死循环。</p>
<p>（2）jul-to-slf4j-xxx.jar 和 slf4j-jdkxxx.jar 同时存在，slf4j-jdk14.jar的存在会将所有日志调用委托给jdk的log。但由于同时jul-to-slf4j.jar的存在，会将所有对jul api的调用委托给相应等值的slf4j，所以jul-to-slf4j.jar和slf4j-jdk14.jar同时存在会形成死循环。</p>
<p><strong>如何让系统中所有的日志都统一到 Slf4j ？</strong></p>
<ul>
<li>1、将系统中其他日志框架先排除出去；</li>
<li>2、用中间包来替换原有的日志框架；</li>
<li>3、导入slf4j其他的实现</li>
</ul>
<p>更多内容参考 <a href="https://www.slf4j.org" target="_blank" rel="noopener">Slf4j 官网</a></p>
<h3 id="四、SpringBoot-日志使用"><a href="#四、SpringBoot-日志使用" class="headerlink" title="四、SpringBoot 日志使用"></a>四、SpringBoot 日志使用</h3><h4 id="1、SpringBoot-日志"><a href="#1、SpringBoot-日志" class="headerlink" title="1、SpringBoot 日志"></a>1、SpringBoot 日志</h4><p>（1）基本依赖</p>
<p>SpringBoot的启动器</p>
<pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>
<p>SpringBoot移动器的依赖中使用 日志功能；</p>
<pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>
<p>SpringBoot 底层依赖关系：</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/springboot-images/springboot-log.png" alt="Slf4g集成关系图"></p>
<p>SpringBoot底层也是使用 <code>slf4j</code> + <code>logback</code> 的方式进行日志记录。</p>
<p>SpringBoot也把其他的日志都替换成了slf4j，使用了桥接中间包替换了原来框架的日志。</p>
<p>如果要引入其他框架，一定要把这个框架的默认日志依赖移除掉，比如：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>
<p>SpringBoot能自动适配所有的日志，而且底层使用 slf4j + logback 的方式记录日志，引入其他框架的时候，只需要把这个框架依赖的日志框架排除掉即可。</p>
<p>（2）logback</p>
<p>logback 主要有三个模块：</p>
<ul>
<li>logback-core：基础日志功能。</li>
<li>logback-classic：log4j的升级，对日志门面 Slf4j API 进行具体实现。</li>
<li>logback-access：用于Servlet 容器进行基础、提供网络访问日志功能。</li>
</ul>
<p>logback 主要包含三个组成部分：</p>
<ul>
<li>Logger - 日志记录器</li>
<li>Appenders - 输出控制器</li>
<li>Layouts - 日志输出格式管理</li>
</ul>
<h4 id="2、SpringBoot-日志配置"><a href="#2、SpringBoot-日志配置" class="headerlink" title="2、SpringBoot 日志配置"></a>2、SpringBoot 日志配置</h4><h5 id="（1）默认日志"><a href="#（1）默认日志" class="headerlink" title="（1）默认日志"></a>（1）默认日志</h5><p>SpringBoot默认帮配置好了日志，默认的日志级别是 <code>info</code></p>
<p>日志的级别由低到高：  <strong>trace &lt; debug &lt; info &lt; warn &lt; error</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//记录器</span>
    Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//System.out.println();</span>

        <span class="token comment" spellcheck="true">//可以调整输出的日志级别；日志就只会在这个级别以以后的高级别生效</span>
        logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"这是trace日志..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"这是debug日志..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//SpringBoot默认给我们使用的是info级别的，没有指定级别的就用SpringBoot默认规定的级别；root级别</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"这是info日志..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"这是warn日志..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"这是error日志..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p>日志输出格式：</p>
<p><code>%d</code> 表示日期时间，<br><code>%thread</code> - 表示线程名，<br><code>%-5level</code> - 级别从左显示5个字符宽度<br><code>%logger{50}</code> - 表示logger名字最长50个字符，否则按照句点分割。<br><code>%msg</code> -  日志消息，<br><code>%n</code> - 是换行符</p>
<p>如：</p>
<pre class=" language-txt"><code class="language-txt">%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</code></pre>
<p>SpringBoot修改日志的默认配置</p>
<pre class=" language-properties"><code class="language-properties"><span class="token attr-name">logging.level.com.smallrose</span><span class="token punctuation">=</span><span class="token attr-value">trace</span>


<span class="token comment" spellcheck="true">#logging.path=</span>
<span class="token comment" spellcheck="true"># 不指定路径在当前项目下生成springboot.log日志</span>
<span class="token comment" spellcheck="true"># 可以指定完整的路径；</span>
<span class="token comment" spellcheck="true">#logging.file=G:/springboot.log</span>

<span class="token comment" spellcheck="true"># 在当前磁盘的根路径下创建spring文件夹和里面的log文件夹；使用 spring.log 作为默认文件</span>
<span class="token attr-name">logging.path</span><span class="token punctuation">=</span><span class="token attr-value">/spring/log</span>

<span class="token comment" spellcheck="true">#  在控制台输出的日志的格式</span>
<span class="token attr-name">logging.pattern.console</span><span class="token punctuation">=</span><span class="token attr-value">%d{yyyy-MM-dd} [%thread] %-5level %logger{50} - %msg%n</span>
<span class="token comment" spellcheck="true"># 指定文件中日志输出的格式</span>
<span class="token attr-name">logging.pattern.file</span><span class="token punctuation">=</span><span class="token attr-value">%d{yyyy-MM-dd} === [%thread] === %-5level === %logger{50} ==== %msg%n</span></code></pre>
<p><strong>logging.file 和 logging.path :</strong></p>
<table>
<thead>
<tr>
<th>logging.file</th>
<th>logging.path</th>
<th>Example</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>(none)</td>
<td>(none)</td>
<td></td>
<td>只在控制台输出</td>
</tr>
<tr>
<td>指定文件名</td>
<td>(none)</td>
<td>my.log</td>
<td>输出日志到my.log文件</td>
</tr>
<tr>
<td>(none)</td>
<td>指定目录</td>
<td>/var/log</td>
<td>输出到指定目录的 spring.log 文件中</td>
</tr>
</tbody></table>
<p><code>logging.file</code> 和  <code>logging.path</code> 二者选其一即可。如果都配置了，<code>logging.file</code> 会生效。</p>
<h5 id="（2）指定配置"><a href="#（2）指定配置" class="headerlink" title="（2）指定配置"></a>（2）指定配置</h5><p>类路径下放上每个日志框架自己的配置文件即可；SpringBoot就不使用他默认配置的了</p>
<table>
<thead>
<tr>
<th>Logging System</th>
<th>Customization</th>
</tr>
</thead>
<tbody><tr>
<td>Logback</td>
<td><code>logback-spring.xml</code>, <code>logback-spring.groovy</code>, <code>logback.xml</code> or <code>logback.groovy</code></td>
</tr>
<tr>
<td>Log4j2</td>
<td><code>log4j2-spring.xml</code> or <code>log4j2.xml</code></td>
</tr>
<tr>
<td>JDK (Java Util Logging)</td>
<td><code>logging.properties</code></td>
</tr>
</tbody></table>
<p>logback.xml：直接就被日志框架识别了；</p>
<p><strong>logback-spring.xml</strong>：日志框架就不直接加载日志的配置项，由SpringBoot解析日志配置，可以使用SpringBoot的高级Profile功能，也是官方推荐的方式。</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProfile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>staging<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- configuration to be enabled when the "staging" profile is active --></span>
      可以指定某段配置只在某个环境下生效
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springProfile</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProfile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dev, staging<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- configuration to be enabled when the "dev" or "staging" profiles are active --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springProfile</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProfile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>!production<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- configuration to be enabled when the "production" profile is not active --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springProfile</span><span class="token punctuation">></span></span></code></pre>
<p>使用示例如：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stdout<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.PatternLayout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProfile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dev<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>%d{yyyy-MM-dd HH:mm:ss.SSS} ----> [%thread] ---> %-5level %logger{50} - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springProfile</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProfile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>!dev<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>%d{yyyy-MM-dd HH:mm:ss.SSS} ==== [%thread] ==== %-5level %logger{50} - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springProfile</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span></code></pre>
<p>如果使用logback.xml作为日志配置文件，还要使用profile功能，会报错 ：<code>no applicable action for [springProfile]</code></p>
<h4 id="3、日志框架切换"><a href="#3、日志框架切换" class="headerlink" title="3、日志框架切换"></a>3、日志框架切换</h4><p>可以按照 Slf4j 桥接遗留适配图 ，进行相关的切换；</p>
<p>(1) <code>slf4j+log4j</code>的方式 :</p>
<p>使用 <code>slf4j+log4j</code> 的方式需要排除 <code>logback</code> 和 自身携带的 log4j到slf4j 的桥接包 <code>log4j-over-slf4j</code>，同时要引入</p>
<p>观察 slf4j 集成整理的表格里 Slf4j 与 log4j 集成，需要 slf4j-api.jar 、log4j.jar 以及slf4j 和 log4j 的桥接包 slf4j-log4j12.jar ，springboot 默认已有前者两者，需要引入桥接包 <code>slf4j-log4j12</code></p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>logback-classic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>ch.qos.logback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j-over-slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>
<p>切换为log4j2 ：</p>
<p>springboot 支持的日志框架:<code>spring-boot-starter-log4j2</code> 和 <code>spring-boot-starter-logging</code> ，后者为默认，若要使用前者则，直接排除后者即可。 <a href="https://docs.spring.io/spring-boot/docs/2.2.8.RELEASE/reference/html/using-spring-boot.html#using-boot" target="_blank" rel="noopener">官网说明</a> 。</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-log4j2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>
<p>参考文章：</p>
<p><a href="https://segmentfault.com/a/1190000017909301" target="_blank" rel="noopener">https://segmentfault.com/a/1190000017909301</a> </p>
<p>硅谷springboot 日志相关视频教程</p>
<p><a href="https://docs.spring.io/spring-boot/docs/2.2.8.RELEASE/reference/html/using-spring-boot.html#using-boot" target="_blank" rel="noopener">springboot 官网</a> </p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>Loging</tag>
      </tags>
  </entry>
  <entry>
    <title>keepalived</title>
    <url>/posts/719b76b0.html</url>
    <content><![CDATA[<h1 id="keepalived-配合Nginx-搭建高可用"><a href="#keepalived-配合Nginx-搭建高可用" class="headerlink" title="keepalived 配合Nginx 搭建高可用"></a>keepalived 配合Nginx 搭建高可用</h1><p>Nginx 解决了负载均衡。</p>
<p>产生背景：一台Nginx可能会出现单点故障，导致程序不可用</p>
<h2 id="一、准备"><a href="#一、准备" class="headerlink" title="一、准备"></a>一、准备</h2><p>多台 <code>nginx</code></p>
<p><code>keepalived</code>： 监听nginx健康。</p>
<p><code>haproxy</code>： 提供一个单独的虚拟IP和端口，统一接收客户端请求。</p>
<p>架构图：</p>
<pre><code>+------------------------------------------------------------------------------------------+
+                                                                                          +
+                                     +--------------------+            +------------+     +
+                                     +                    +            +            +     +
+                                   + + Nginx + keepalived +  ++++++&gt;   +  server1   +     +
+  +--------+      +-------+       /  +                    +   \   /    +            +     +
+  +        +      +       +      /   +--------------------+    \ /     +------------+     +
+  + client + ---&gt; +  VIP  + ---&gt;                                X                         +  
+  +        +      +       +      \   +--------------------+    / \     +------------+     +
+  +--------+      +-------+       \  +                    +   /   \    +            +     +
+                                   + + Nginx + keepalived +  +++++++&gt;  +  server2   +     +
+                                     +                    +            +            +     +
+                                     +--------------------+            +------------+     +
+                                                                                          +
+------------------------------------------------------------------------------------------+</code></pre><p>相关补充</p>
<p>keepalived 三个模块：</p>
<p>core模块：为keepalived的核心组件，负责主进程的启动、维护以及全局配置文件的加载和解析；<br>check：负责健康检查，包括常见的各种检查方式；<br>VRRP模块：是来实现VRRP协议的。</p>
<p>keepalived 工作原理</p>
<p>VRRP 虚拟路由器冗余协议：</p>
<p>（1）为看解决静态路由的单点故障而产生。<br>（2）通过竞选协议机制将路由的任务交给某台VRRP路由器。<br>（3）主机通过IP多播包的方式相同通讯，告知备机存活<br>（4）主机发包，备机接包，挡备机接不到包时，启动接管程序接管主机资源。<br>（5）备机可以有多台，可以通过优先级竞选。<br>（6）VRRP 使用加密协议保证安全。</p>
<p>keepalived 高可用对之间通过VRRP 协议进行通讯，确定主备，主的优先级高于备。工作运行时主机会获得所有资源，备机处于等待状态，当主节点宕机时，备节点接管主节点的资源，代替主节点提供服务。</p>
<p>在keepalived 之间，只有作为主节点的的服务器会一直发送VRRP 广播包，告诉备节点，自己是存活的，此时备节点不会抢占主节点。当主节点不可用，即备节点接收不到主节点发送的广播包，就会启动相关服务接管资源，接管速度可以小于1秒。 </p>
<h2 id="二、安装-keepalived"><a href="#二、安装-keepalived" class="headerlink" title="二、安装 keepalived"></a>二、安装 keepalived</h2><h3 id="1、安装-keepalived"><a href="#1、安装-keepalived" class="headerlink" title="1、安装 keepalived"></a>1、安装 keepalived</h3><pre class=" language-bash"><code class="language-bash">yum <span class="token function">install</span> -y openssl-devel
yum  -y <span class="token function">install</span>  keepalived</code></pre>
<h3 id="2、keepalived-常用命令"><a href="#2、keepalived-常用命令" class="headerlink" title="2、keepalived 常用命令"></a>2、keepalived 常用命令</h3><pre class=" language-bash"><code class="language-bash">keepalived -v  <span class="token comment" spellcheck="true"># 查看版本</span>

keepalived  start <span class="token comment" spellcheck="true"># 启动</span>

keepalived stop <span class="token comment" spellcheck="true"># 停止</span></code></pre>
<h3 id="2、配置"><a href="#2、配置" class="headerlink" title="2、配置"></a>2、配置</h3><p>Keepalived默认的配置文件路径在 <code>/etc/keepalived/keepalived.conf</code></p>
<p>Keepalived默认的日志文件保存在 <code>/var/log/messages</code></p>
<p>主节点 <code>keepalived.conf</code> ：</p>
<pre><code>
! Configuration File for keepalived

global_defs {
   smtp_connect_timeout 30    #连接超时时间
   router_id 192.168.100.123  #路由ID，可以通过hosts取别名
}

vrrp_instance VI_1 {           # VRRP 实例VI_1的配置
    state MASTER               # 指定instance初始状态，实际根据优先级决定.backup节点不一样
    interface ens33            # 容器中虚拟IP所在网卡名称
    virtual_router_id 51       # VRID，相同VRID为一个组，决定多播MAC地址
    priority 100               # 优先级，另一台改为90.backup节点不一样，数字越大优先级越高
    advert_int 1               # 检查间隔
    authentication {
        auth_type PASS         # 认证方式，可以是pass或ha
        auth_pass 1111         # 认证密码
    }
    virtual_ipaddress {
        192.168.100.101         #VIP地址，对外统一地址
    }
}</code></pre><p>备节点 <code>keepalived.conf</code> ：</p>
<pre><code>! Configuration File for keepalived

global_defs {
   smtp_connect_timeout 30   
   router_id 192.168.100.124
}

vrrp_instance VI_1 {
    state BACKUP         
    interface eth33        
    virtual_router_id 51  
    priority 90          
    advert_int 1         
    authentication {
        auth_type PASS    
        auth_pass 1111    
    }
    virtual_ipaddress {
        192.168.100.101         #VIP地址，对外统一地址
    }
}</code></pre><h2 id="三、安装-haproxy"><a href="#三、安装-haproxy" class="headerlink" title="三、安装 haproxy"></a>三、安装 haproxy</h2><p>haproxy 官网应该被墙了，看github的：<a href="https://github.com/haproxy/haproxy" target="_blank" rel="noopener">https://github.com/haproxy/haproxy</a></p>
<h3 id="1、安装-haproxy"><a href="#1、安装-haproxy" class="headerlink" title="1、安装 haproxy"></a>1、安装 haproxy</h3><pre class=" language-bash"><code class="language-bash">yum <span class="token function">install</span> -y gcc gcc-c++
yum  -y <span class="token function">install</span>  haproxy</code></pre>
<h3 id="2、keepalived-常用命令-1"><a href="#2、keepalived-常用命令-1" class="headerlink" title="2、keepalived 常用命令"></a>2、keepalived 常用命令</h3><p>#启动 | #停止 | #查看状态</p>
<pre class=" language-bash"><code class="language-bash">
systemctl start haproxy.service 

systemctl stop haproxy.service 

systemctl status haproxy.service 
</code></pre>
<h3 id="3、haproxy-配置"><a href="#3、haproxy-配置" class="headerlink" title="3、haproxy 配置"></a>3、haproxy 配置</h3><p>haproxy 配置文件需要自己创建 <code>/etc/haproxy/haproxy.cfg</code></p>
<pre><code>global
    log 127.0.0.1 local3 info  # 用127.0.0.1上的rsyslog服务中的local3设备记录日志，日志级别为info
    user haproxy     #用户
    group haproxy    #组
    daemon     # 以守护进程的方式运行
    maxconn 4000   # 最大并发连接数
defaults
    log global   #表示用global模块中定义的日志配置
    mode http    # 模式  使用http模式
    option httplog       # 默认haproxy日志，不记录http请求，开启记录http请求
    option dontlognull   # 保证HAProxy不记录上级负载均衡发送过来的用于检测状态没有数据的心跳包。
    timeout connect 5000  # 成功连接一台服务器最长等待时间 单位毫秒
    timeout client 50000  # 连接客户端最长等待时间 单位毫秒
    timeout server 50000  # 服务器回应客户端最长等待时间 单位毫秒
frontend http_front
    bind 192.168.100.123:80   # 监听本服务器 192.168.100.123的ip 80端口
    stats uri /haproxy?stats   # haproxy的状态管理页面，通过/haproxy?stats来访问
    default_backend http_back  # 定义一个服务器组 http_back
backend web_server
    balance roundrobin  # 轮询
    option httpchk GET /index.html  # 启动http的健康检查
    option forwardfor header X-Forwarded-For   # 设置后端服务器可以看到客户端ip 访问日志中
    server node1 192.168.100.101:80 check inter 2000 rise 3 fall 3  
    # 后端服务器昵称node1    ip和端口  | check 关键字  | inter 健康检查间隔  2000毫秒| rise 检测 3次 认为正常| fall 检测3次认为失败 | weight 权重 30</code></pre><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>测试访问haproxy <a href="http://192.168.100.101" target="_blank" rel="noopener">http://192.168.100.101</a> </p>
<p>模拟主节点宕机，关闭nginx,再次访问haproxy。</p>
<p>文章不完整，后续再补充。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>keepalived</category>
      </categories>
      <tags>
        <tag>keepalived</tag>
      </tags>
  </entry>
  <entry>
    <title>YAML 语法学习</title>
    <url>/posts/bb845937.html</url>
    <content><![CDATA[<h2 id="YAML语法学习"><a href="#YAML语法学习" class="headerlink" title="YAML语法学习"></a>YAML语法学习</h2><p>其实 <code>YAML</code> 并不是springboot 特有语法，比如 Hexo 的配置文件都是这种格式，只是一时又不好归类，就先放到springboot 里了。</p>
<h3 id="一、基本语法"><a href="#一、基本语法" class="headerlink" title="一、基本语法"></a>一、基本语法</h3><p> <code>YAML</code> 是以键值对的方式书写代码块的，支持多层级，对象数组等集合元素。</p>
<p>基本格式：</p>
<pre class=" language-yml"><code class="language-yml">key: value
key:
    key2: value2
    key2：
        key3: value3</code></pre>
<p><code>key:  value</code>：表示一对键值对（冒号后面必须有空格）；属性键和对应的值是大小写敏感的。</p>
<p>上述写法等价于 <code>properties</code> 格式：</p>
<pre class=" language-properties"><code class="language-properties"><span class="token attr-name">key</span><span class="token punctuation">=</span><span class="token attr-value">value</span>
<span class="token attr-name">key.key2</span><span class="token punctuation">=</span><span class="token attr-value">value2</span>
<span class="token attr-name">key.key2.key3</span><span class="token punctuation">=</span><span class="token attr-value">value3</span></code></pre>
<p><code>YAML</code> 以空格的缩进来控制层级关系；只要是左对齐的一列数据，都是同一个层级的，比如</p>
<pre class=" language-yml"><code class="language-yml">server:
    port: 8080
    servlet:
        context-path: /dbcm
        session:
            timeout: 1800s</code></pre>
<h3 id="二、特殊的值"><a href="#二、特殊的值" class="headerlink" title="二、特殊的值"></a>二、特殊的值</h3><h4 id="1、单引号和双引号"><a href="#1、单引号和双引号" class="headerlink" title="1、单引号和双引号"></a>1、单引号和双引号</h4><p>一般的键和值都是字面量和普通的值（数字，字符串，布尔）组成。字符串默认不带单引号<code>&#39; &#39;</code>或双引号 <code>&quot; &quot;</code>。</p>
<ul>
<li><code>&#39;&#39;</code> : 单引号，会转义特殊字符，特殊字符会解析成普通的字符串数据。</li>
<li><code>&quot; &quot;</code> ：双引号，不会转义字符串里面的特殊字符。特殊字符表达解析成原本的含义。</li>
</ul>
<p>如单引号示例：</p>
<pre class=" language-yml"><code class="language-yml">xiaocai:
    name: 'small \n rose' </code></pre>
<p>解析之后得到的 name 值就是：</p>
<pre class=" language-txt"><code class="language-txt"> small \n rose </code></pre>
<p>双引号示例：</p>
<pre class=" language-yml"><code class="language-yml">xiaocai:
    name: "small \n rose" </code></pre>
<p>解析之后得到的 name 值就是：</p>
<pre class=" language-txt"><code class="language-txt">small
rose</code></pre>
<h4 id="2、数组与集合"><a href="#2、数组与集合" class="headerlink" title="2、数组与集合"></a>2、数组与集合</h4><p>（1）对象</p>
<p>对象依然是键值对的方式:</p>
<pre class=" language-yml"><code class="language-yml">user:
    name: smale-rose
    email: small-rose@qq.com</code></pre>
<p>也可以使用类似 map 的行间方式书写：</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">user</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> smale<span class="token punctuation">-</span>rose<span class="token punctuation">,</span> <span class="token key atrule">email</span><span class="token punctuation">:</span> small<span class="token punctuation">-</span>rose@qq.com<span class="token punctuation">}</span></code></pre>
<p>注意冒号后面的空格。</p>
<p>（2）数组或集合</p>
<p>用 <code>-</code> 值表示数组中的一个元素。</p>
<p>如：</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">fruits</span><span class="token punctuation">:</span>
  ‐ apple
  ‐ pear
  ‐ banana
  ‐ watermelon</code></pre>
<p>也可以使用类似 list 的行间方式书写：</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">fruits</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>apple<span class="token punctuation">,</span> pear<span class="token punctuation">,</span> banana<span class="token punctuation">,</span> watermelon<span class="token punctuation">]</span></code></pre>
<h3 id="三、文档块特征"><a href="#三、文档块特征" class="headerlink" title="三、文档块特征"></a>三、文档块特征</h3><p>YAML 的文档块的特征，可以很好的配合 SpringBoot 的 <code>Profile</code> 特征。</p>
<p>YAML 文档使用  <code>---</code> 进行分割文档块。</p>
<p>比如：</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>
    <span class="token key atrule">active</span><span class="token punctuation">:</span> dev    
<span class="token punctuation">---</span>

<span class="token key atrule">server</span><span class="token punctuation">:</span>
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8081</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>
    <span class="token key atrule">active</span><span class="token punctuation">:</span> dev
<span class="token punctuation">---</span>
<span class="token key atrule">server</span><span class="token punctuation">:</span>
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9090</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>
    <span class="token key atrule">active</span><span class="token punctuation">:</span> prod</code></pre>
<p>示例中在第一个文档块激活了 <code>dev</code> 环境，应用启动之后使用端口是 8081。</p>
<h3 id="四：占位符"><a href="#四：占位符" class="headerlink" title="四：占位符"></a>四：占位符</h3><h4 id="1、随机数"><a href="#1、随机数" class="headerlink" title="1、随机数"></a>1、随机数</h4><pre class=" language-yaml"><code class="language-yaml">$<span class="token punctuation">{</span>random.value<span class="token punctuation">}</span>、
$<span class="token punctuation">{</span>random.uuid<span class="token punctuation">}</span>、
$<span class="token punctuation">{</span>random.int<span class="token punctuation">}</span>、
$<span class="token punctuation">{</span>random.long<span class="token punctuation">}</span>
$<span class="token punctuation">{</span>random.int(10)<span class="token punctuation">}</span>、
$<span class="token punctuation">{</span>random.int<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">,</span><span class="token number">65536</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre>
<h4 id="2、占位符取值"><a href="#2、占位符取值" class="headerlink" title="2、占位符取值"></a>2、占位符取值</h4><p>占位符获取之前配置的值，如果没有可以是用 <code>:</code> 指定默认值。</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">user</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> smale<span class="token punctuation">-</span>rose
    <span class="token key atrule">email</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>random.value<span class="token punctuation">}</span>_small<span class="token punctuation">-</span>rose@qq.com
    <span class="token key atrule">age</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>random.int<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">}</span>
    <span class="token key atrule">addr</span><span class="token punctuation">:</span> Address_$<span class="token punctuation">{</span><span class="token key atrule">user.name</span><span class="token punctuation">:</span> no_user<span class="token punctuation">}</span>
    <span class="token key atrule">last_name</span><span class="token punctuation">:</span> LastName_$<span class="token punctuation">{</span><span class="token key atrule">user.lastName</span><span class="token punctuation">:</span> no_user<span class="token punctuation">}</span></code></pre>
<h3 id="五、配置与JavaBean-绑定"><a href="#五、配置与JavaBean-绑定" class="headerlink" title="五、配置与JavaBean 绑定"></a>五、配置与JavaBean 绑定</h3><h4 id="1、绑定示例"><a href="#1、绑定示例" class="headerlink" title="1、绑定示例"></a>1、绑定示例</h4><p>（1）可以引入配置文件处理</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!‐‐导入配置文件处理器，配置文件进行绑定就会有提示‐‐</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring‐boot‐configuration‐processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span> </code></pre>
<p>（2）对应 <code>application.yaml</code>  的 配置</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">initvalue</span><span class="token punctuation">:</span>
    <span class="token key atrule">evn</span><span class="token punctuation">:</span> prod
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span>
    <span class="token key atrule">flag</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
    <span class="token key atrule">dbTypeIdList</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> <span class="token number">1</span>
            <span class="token punctuation">-</span> <span class="token number">2</span>
            <span class="token punctuation">-</span> <span class="token number">3</span></code></pre>
<p>（3）使用注解 <code>@ConfigurationProperties</code> 进行绑定</p>
<p>比如我这个示例是实际项目有一些初始化配置值，字段特别多，作为示例，选几个：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"initvalue"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InitValueConfig</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> String evn <span class="token punctuation">;</span>

    <span class="token keyword">private</span> String port <span class="token punctuation">;</span>

    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Long<span class="token operator">></span> dbTypeIdList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Long<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
     <span class="token keyword">private</span> <span class="token keyword">boolean</span> flag<span class="token punctuation">;</span>
     <span class="token comment" spellcheck="true">// setter getter ...</span>
<span class="token punctuation">}</span></code></pre>
<p>注意： <strong>@ConfigurationProperties(prefix = “initvalue”) ** 表示默认从全局配置文件中获取值；如果 initvalue 前缀的配置放在另外的 <code>initvalue.yml</code> 文件中，则需要添加  *<em><code>@PropertySource(&quot;classpath:initvalue.yml&quot;)</code> *</em> 表示从指定的配置中查找对应的前缀，可以指定多个配置文件  **<code>@PropertySource({&quot;classpath:initvalue.yml&quot;,&quot;classpath:initvalue2.yml&quot;})</code></strong> </p>
<p>如果是properties文件，同理：</p>
<pre class=" language-properties"><code class="language-properties"><span class="token attr-name">initvalue.evn</span><span class="token punctuation">=</span><span class="token attr-value">prod</span>
<span class="token attr-name">initvalue.port</span><span class="token punctuation">:</span> <span class="token attr-value">8080</span>
<span class="token attr-name">initvalue.dbTypeIdList[0]</span><span class="token punctuation">=</span><span class="token attr-value">1</span>
<span class="token attr-name">initvalue.dbTypeIdList[1]</span><span class="token punctuation">=</span><span class="token attr-value">2</span>
<span class="token attr-name">initvalue.dbTypeIdList[2]</span><span class="token punctuation">=</span><span class="token attr-value">3</span>
<span class="token attr-name">initvalue.flag</span><span class="token punctuation">=</span><span class="token attr-value">false</span></code></pre>
<p>也可以进行绑定：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token string">"classpath:initvalue.properties"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"initvalue"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InitValueConfig</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> String evn <span class="token punctuation">;</span>

    <span class="token keyword">private</span> String port <span class="token punctuation">;</span>

    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Long<span class="token operator">></span> dbTypeIdList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Long<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> flag<span class="token punctuation">;</span>
     <span class="token comment" spellcheck="true">// setter getter ...</span>
<span class="token punctuation">}</span></code></pre>
<p><strong>@ConfigurationProperties(prefix = “initvalue”)</strong> ：默认从全局配置文件中获取值；</p>
<p><strong>@PropertySource</strong> ：表示加载指定的配置文件来映射绑定；</p>
<p><strong>@ImportResource</strong>：导入Spring的配置文件，让配置文件里面的内容生效；</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ImportResource</span><span class="token punctuation">(</span>locations <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"classpath:beans.xml"</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<p>当然 springboot  推荐使用注解<code>@Configuration</code> 和 <code>@Bean</code> ：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> Filter <span class="token function">validatorFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> FileNotFoundException<span class="token punctuation">{</span> 
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------load validatorFilter---------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ValidatorFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="2、取值方式"><a href="#2、取值方式" class="headerlink" title="2、取值方式"></a>2、取值方式</h4><p>获取值除了<code>@ConﬁgurationProperties</code> 还可以使用<code>@Value</code> 获取。</p>
<p>比如：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InitValueConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${initvalue.evn}"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> String evn <span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${initvalue.port}"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> String port <span class="token punctuation">;</span>

     <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"#{'${initvalue.list}'.split(',')}"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Long<span class="token operator">></span> dbTypeIdList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Long<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"#{${initvalue.maps}}"</span><span class="token punctuation">)</span>  
    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> maps<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${initvalue.flag}"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> flag<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"#{${webServiceMap}}"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> webServiceMap<span class="token punctuation">;</span>
     <span class="token comment" spellcheck="true">// setter getter ...</span>
<span class="token punctuation">}</span></code></pre>
<p>对应的 <code>YAML</code> 为</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">initvalue</span><span class="token punctuation">:</span>
    <span class="token key atrule">evn</span><span class="token punctuation">:</span> prod
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span>
    <span class="token key atrule">flag</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
    <span class="token key atrule">list</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span>
    <span class="token key atrule">maps</span><span class="token punctuation">:</span> "<span class="token punctuation">{</span><span class="token key atrule">key1</span><span class="token punctuation">:</span> <span class="token string">'value1'</span><span class="token punctuation">,</span> <span class="token key atrule">key2</span><span class="token punctuation">:</span> <span class="token string">'value2'</span><span class="token punctuation">}</span>"
    <span class="token key atrule">webServiceMap</span><span class="token punctuation">:</span> "<span class="token punctuation">{</span><span class="token key atrule">webServiceURL</span><span class="token punctuation">:</span> <span class="token string">'http://web.com.server/xxx'</span><span class="token punctuation">,</span> <span class="token key atrule">success</span><span class="token punctuation">:</span> <span class="token string">'0000'</span><span class="token punctuation">,</span><span class="token key atrule">filePath</span><span class="token punctuation">:</span> <span class="token string">'/home/file/'</span><span class="token punctuation">}</span>"</code></pre>
<p>取值方式比较</p>
<table>
<thead>
<tr>
<th></th>
<th>@value</th>
<th>@ConfigurationProperties</th>
</tr>
</thead>
<tbody><tr>
<td>功能</td>
<td>批量注入配置文件中的属性</td>
<td>一个个指定</td>
</tr>
<tr>
<td>松散绑定（松散语法）</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>SpEL</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>JSR303数据校验</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>复杂类型封装</td>
<td>支持</td>
<td>不支持</td>
</tr>
</tbody></table>
<p>配置文件<code>yml</code> 或者 <code>properties</code> 二者都能获取到值；只获取一下配置文件中的某项值，使用@Value；参数较多时使用JavaBean来和配置文件进行绑定映射，可以直接使用<code>@ConﬁgurationProperties</code> 省去了一个个配置的麻烦。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>YAML</tag>
      </tags>
  </entry>
  <entry>
    <title>Thymeleaf 语法学习</title>
    <url>/posts/9e1a85cd.html</url>
    <content><![CDATA[<h2 id="SpringBoot-Thymeleaf-语法学习"><a href="#SpringBoot-Thymeleaf-语法学习" class="headerlink" title="SpringBoot Thymeleaf  语法学习"></a>SpringBoot Thymeleaf  语法学习</h2><h2 id="一、基本使用"><a href="#一、基本使用" class="headerlink" title="一、基本使用"></a>一、基本使用</h2><p>常见的模板引擎有JSP、Velocity、Freemarker、Thymeleaf等</p>
<p>SpringBoot 官方推荐的是 <strong>Thymeleaf</strong> </p>
<p>Thtmeleaf 在 SpringBoot 中使用只要引入</p>
<pre class=" language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
              2.1.6
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>
<p>也可以自己指定切换thymeleaf版本：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thymeleaf.version</span><span class="token punctuation">></span></span>3.0.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thymeleaf.version</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- 布局功能的支持程序  thymeleaf3主程序  layout2以上版本 --></span>
        <span class="token comment" spellcheck="true">&lt;!-- thymeleaf2   layout1--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thymeleaf-layout-dialect.version</span><span class="token punctuation">></span></span>2.2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thymeleaf-layout-dialect.version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span></code></pre>
<p>Thymeleaf 配置类是</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.thymeleaf"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThymeleafProperties</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Charset DEFAULT_ENCODING <span class="token operator">=</span> Charset<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> MimeType DEFAULT_CONTENT_TYPE <span class="token operator">=</span> MimeType<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">"text/html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEFAULT_PREFIX <span class="token operator">=</span> <span class="token string">"classpath:/templates/"</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEFAULT_SUFFIX <span class="token operator">=</span> <span class="token string">".html"</span><span class="token punctuation">;</span>
      <span class="token comment" spellcheck="true">//</span></code></pre>
<p>可以自定义的配置：</p>
<pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.thymeleaf.prefix</span><span class="token punctuation">=</span><span class="token attr-value">classpath:/views/</span>
<span class="token attr-name">spring.thymeleaf.suffix</span><span class="token punctuation">=</span><span class="token attr-value">.html</span>
<span class="token attr-name">spring.thymeleaf.mode</span><span class="token punctuation">=</span><span class="token attr-value">HTML5</span>
<span class="token attr-name">spring.thymeleaf.encoding</span><span class="token punctuation">=</span><span class="token attr-value">UTF-8</span>
<span class="token attr-name">spring.thymeleaf.servlet.content-type</span><span class="token punctuation">=</span><span class="token attr-value">text/html  </span>
<span class="token attr-name">spring.thymeleaf.cache</span><span class="token punctuation">=</span><span class="token attr-value">false</span></code></pre>
<p>缓存在开发阶段可以设置 <code>false</code>。idea 中可以使用 Ctrl + F9 快速编译 thymeleaf 语法页面。</p>
<p>当然也使用使用 Java 方式配置：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GTVGApplication</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> TemplateEngine templateEngine<span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">public</span> <span class="token function">GTVGApplication</span><span class="token punctuation">(</span><span class="token keyword">final</span> ServletContext servletContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ServletContextTemplateResolver templateResolver <span class="token operator">=</span>
        <span class="token keyword">new</span> <span class="token class-name">ServletContextTemplateResolver</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// HTML is the default mode, but we set it anyway for better understanding of code</span>
        templateResolver<span class="token punctuation">.</span><span class="token function">setTemplateMode</span><span class="token punctuation">(</span>TemplateMode<span class="token punctuation">.</span>HTML<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// This will convert "home" to "/WEB-INF/templates/home.html"</span>
        templateResolver<span class="token punctuation">.</span><span class="token function">setPrefix</span><span class="token punctuation">(</span><span class="token string">"/WEB-INF/templates/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        templateResolver<span class="token punctuation">.</span><span class="token function">setSuffix</span><span class="token punctuation">(</span><span class="token string">".html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// Template cache TTL=1h. If not set, entries would be cached until expelled</span>
        templateResolver<span class="token punctuation">.</span><span class="token function">setCacheTTLMs</span><span class="token punctuation">(</span>Long<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>3600000L<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// Cache is set to true by default. Set to false if you want templates to</span>
        <span class="token comment" spellcheck="true">// be automatically updated when modified.</span>
        templateResolver<span class="token punctuation">.</span><span class="token function">setCacheable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>templateEngine <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplateEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>templateEngine<span class="token punctuation">.</span><span class="token function">setTemplateResolver</span><span class="token punctuation">(</span>templateResolver<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>默认只要把HTML页面放在classpath:/templates/，thymeleaf就能自动渲染。</p>
<h2 id="二、基本语法"><a href="#二、基本语法" class="headerlink" title="二、基本语法"></a>二、基本语法</h2><p>Thymeleaf 支持6种常见模板模式：</p>
<p>2种标记模板模式：HTML和XML;</p>
<p>3种文本模板模式：TEXT、JAVASCRIPT和CSS</p>
<p>1种无操作模板模式：RAW</p>
<p>1、命名空间</p>
<p>导入thymeleaf的名称空间，在编写的时候会有提示。</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre>
<p>2、基本使用示例</p>
<pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>This is my Page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!--th:text 将div里面的文本内容设置为取到的值 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${hello}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>
<p>3、基本语法规则</p>
<p><code>th:*</code>，可以来替换原生属性的值，其中 <code>&quot;*&quot;</code> 表示任意html属性。</p>
<p>如常用的 <code>th:text</code> 改变或替换当前元素里面的文本内容。</p>
<h2 id="三、语法规则与优先级"><a href="#三、语法规则与优先级" class="headerlink" title="三、语法规则与优先级"></a>三、语法规则与优先级</h2><p>语法优先级数字越小，优先级越高。</p>
<table>
<thead>
<tr>
<th align="center">优先级</th>
<th>基本特征</th>
<th>常见属性</th>
<th>类似语法 JSP/JSTL/JS等</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td>片段包含</td>
<td><code>th:insert</code><br/><code>th:replace</code></td>
<td><code>jsp:include</code></td>
</tr>
<tr>
<td align="center">2</td>
<td>片段遍历</td>
<td><code>th:each</code></td>
<td><code>c:forEach</code></td>
</tr>
<tr>
<td align="center">3</td>
<td>条件判断</td>
<td><code>th:if</code><br/><code>th:unless</code><br/><code>th:switch</code><br/><code>th:case</code></td>
<td><code>c:if</code></td>
</tr>
<tr>
<td align="center">4</td>
<td>变量声明</td>
<td><code>th:object</code><br/><code>th:with</code></td>
<td><code>c:set</code></td>
</tr>
<tr>
<td align="center">5</td>
<td>一般属性修改</td>
<td><code>th:attr</code><br/><code>th:attrprepend</code> <br/><code>th:attrappend</code></td>
<td><code>类似js的中attr()</code><br/> <code>append()</code>、<code>appendTo()</code></td>
</tr>
<tr>
<td align="center">a</td>
<td>特定属性修改</td>
<td><code>th:value</code> <br/><code>th:href</code> <br/><code>th:src</code></td>
<td><code>类似js的中attr()</code><br/><code>val()</code></td>
</tr>
<tr>
<td align="center">7</td>
<td>修改标签体内容</td>
<td><code>th:text</code> <br/><code>th:utext</code></td>
<td>c:out</td>
</tr>
<tr>
<td align="center">8</td>
<td>片段声明</td>
<td><code>th:fragment</code></td>
<td>-</td>
</tr>
<tr>
<td align="center">9</td>
<td>片段移除</td>
<td><code>th:remove</code></td>
<td>-</td>
</tr>
</tbody></table>
<p>简单示例：</p>
<pre class=" language-java"><code class="language-java">model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token string">"&lt;h2>Hello Thyneleaf ! &lt;/h2>"</span><span class="token punctuation">)</span></code></pre>
<p>页面使用：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${hello}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>utext</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${hello}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<p>最终展示效果区别：</p>
<p><code>th:text</code> ：转义特殊字符，内容是什么原样输出什么，浏览器不进行解析。</p>
<p><code>th:utext</code> ：不转义特殊字符，有标签时，浏览器会识别解析 html 标签。</p>
<h2 id="四、标准的表达式语法"><a href="#四、标准的表达式语法" class="headerlink" title="四、标准的表达式语法"></a>四、标准的表达式语法</h2><p>常见或常用表达式学习。</p>
<h3 id="1-简单表达式"><a href="#1-简单表达式" class="headerlink" title="1. 简单表达式"></a>1. 简单表达式</h3><ul>
<li><p>Variable Expressions： 获取变量值的表达式：<code>${...}</code></p>
</li>
<li><p>Selection Variable Expressions：选择表达式： <code>*{...}</code></p>
</li>
<li><p>Message Expressions： 获取国际化的表达式： <code>#{...}</code></p>
</li>
<li><p>Link URL Expressions: 定义URL的表达式：<code>@{...}</code></p>
</li>
<li><p>Fragment Expressions: 引用代码片段表达式：<code>~{...}</code></p>
</li>
</ul>
<h4 id="1）-获取变量值的表达式"><a href="#1）-获取变量值的表达式" class="headerlink" title="1） 获取变量值的表达式"></a>1） 获取变量值的表达式</h4><ul>
<li><p>获取对象的属性、调用方法；</p>
</li>
<li><p>也可以使用内置的基本对象；</p>
</li>
</ul>
<p>简单示例如：</p>
<pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>This is my Page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${hello}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- 实际等价于  ctx.getVariable("today"); --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${session.user.userName}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- 实际等价于  ctx.getVariable("session").get("user")).getUserName(); --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>
<h5 id="a-常见取变量的写法"><a href="#a-常见取变量的写法" class="headerlink" title="(a) 常见取变量的写法"></a>(a) 常见取变量的写法</h5><p>访问属性可以使用 <code>.</code> 点号</p>
<pre><code>${person.father.name}
${user.department.departmenrName}</code></pre><p>访问属性可以使用 <code>[ ]</code> 号</p>
<pre><code>${person[&#39;father&#39;][&#39;name&#39;]}
${user[&#39;department&#39;][&#39;departmenrName&#39;]}</code></pre><p>对象是 Map 类型，可以使用 <code>[ ]</code> 和 <code>.</code> 混用</p>
<pre><code>${countriesByCode.ES}
${personsByName[&#39;Stephen Zucchini&#39;].age}</code></pre><p>带索引的数组或集合可以使用下标索引访问：</p>
<pre><code>${personsArray[0].name}</code></pre><p>也可以调用方法，允许带参数：</p>
<pre><code>${person.createCompleteName()}
${person.createCompleteNameWithSeparator(&#39;-&#39;)}</code></pre><h5 id="b-常见内置基本对象："><a href="#b-常见内置基本对象：" class="headerlink" title="(b) 常见内置基本对象："></a>(b) 常见内置基本对象：</h5><table>
<thead>
<tr>
<th>内置对象</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>#ctx</td>
<td>容器对象/上下文对象，也可 <code>#root</code> ,<code>#vars</code>,推荐<code>#ctx</code></td>
</tr>
<tr>
<td>#vars</td>
<td>容器里的变量</td>
</tr>
<tr>
<td>#locale</td>
<td>容器理的区域对象</td>
</tr>
<tr>
<td>#request</td>
<td>Web容器里的HttpServletRequest对象</td>
</tr>
<tr>
<td>#response</td>
<td>Web容器里的HttpServletResponse对象</td>
</tr>
<tr>
<td>#session</td>
<td>Web容器里的HttpSession对象</td>
</tr>
<tr>
<td>#servletContext</td>
<td>Web容器里的ServletContext对象</td>
</tr>
</tbody></table>
<p>内置对象的详细内容比较多一次整理不完，会单独整理一篇内置对象。</p>
<p>内置对象参考<a href="44478111.html">《Thymeleaf 内置对象》</a></p>
<h4 id="（c）内置的工具对象"><a href="#（c）内置的工具对象" class="headerlink" title="（c）内置的工具对象"></a>（c）内置的工具对象</h4><p><code>#execInfo</code> : 有关模板运行时的一些信息<br><code>#messages</code> : 在变量表达式中获取国际化信息的方法，也可以使用<code>#{…}</code>语法.<br><code>#uris</code> : 对URI或URL进行转义相关的方法<br><code>#conversions</code> : 如果有写相关的转换，用来执行配置的转换服务的方法.<br><code>#dates</code> : java.util.Date 日期对象格式化，组件提取的方法<br><code>#calendars</code> : 类似于 #dates , 但是是 java.util.Calendar 对象的.<br><code>#numbers</code> : 数字格式化相关的方法.<br><code>#strings</code> : 字符串相关方法: 包含, 以什么开始/结尾, 追加, 去空格等等.<br><code>#objects</code> : 对象通用方法.<br><code>#bools</code> : boolean 运算方法<br><code>#arrays</code> : 数组相关方法.<br><code>#lists</code> : list集合相关的方法.<br><code>#sets</code> :  set集合相关的方法.<br><code>#maps</code> : map集合相关的方法.<br><code>#aggregates</code> : 在数组或集合上创建聚合的方法.<br><code>#ids</code> : 处理可能重复的id属性的方法.例如，作为迭代的结果.</p>
<p>内置对象的详细内容比较多一次整理不完，会单独整理一篇内置对象。</p>
<p>内置对象参考<a href="44478111.html">《Thymeleaf 内置对象》</a></p>
<h4 id="2）选择变量表达式"><a href="#2）选择变量表达式" class="headerlink" title="2）选择变量表达式"></a>2）选择变量表达式</h4><p>选择表达式语法：<code>*{...}</code> 和 <code>*{...}</code></p>
<p> <code>*{...}</code> 一般配合 <code>th:object</code> 使用</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>object</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${session.user}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Name: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*{firstName}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Sebastian<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Surname: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*{lastName}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Pepper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Email: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*{email}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Saturn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<p>等价于：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Name: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${session.user.firstName}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Sebastian<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Surname: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${session.user.lastName}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Pepper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Email: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${session.user.email}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Saturn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<p>也支持混合使用:</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>object</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${session.user}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Name: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*{firstName}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Sebastian<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Surname: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${session.user.lastName}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Pepper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Email: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*{email}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Saturn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<p>也可以使用 <code>#object</code> 表达式取值: </p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>object</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${session.user}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Name: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#object.firstName}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Sebastian<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span> 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Surname: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${session.user.lastName}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Pepper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span> 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Email: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*{email}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Saturn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span> 
&lt;/div    </code></pre>
<p>如果没有执行对象选择，<code>$</code> 和 <code>*</code> 语法是等价的:</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Name: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*{session.user.name}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Sebastian<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Surname: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*{session.user.surname}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Pepper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Email: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*{session.user.email}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Saturn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<h4 id="3）获取国际化的表达式"><a href="#3）获取国际化的表达式" class="headerlink" title="3）获取国际化的表达式"></a>3）获取国际化的表达式</h4><p>获取国际化的表达式语法： <code>#{...}</code></p>
<p>比如在国际化里配置好<br>配置英文</p>
<pre><code>home.welcome=Welcome</code></pre><p>或者中文</p>
<pre><code>home.welcome=欢迎登录</code></pre><p>使用则使用表达式获取即可</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>utext</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{home.welcome}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Welcome to our site!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre>
<p>也可以添加占位符参数进行动态支持：</p>
<p><code>java.text.MessageFormat</code> 参数支持。</p>
<p><code>java.text.*</code> 动态消息格式化类可以格式化数字或日期。</p>
<pre><code>home.welcome=Welcome, {0}!</code></pre><p>使用时直接传入参数即可</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>utext</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{home.welcome(${session.user.name})}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    Welcome to our site, guest!
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre>
<p>参数也可以从变量获取</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>utext</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{${welcomeMsgKey}(${session.user.name})}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    Welcome to our site, guest!
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre>
<h4 id="4）定义URL的表达式："><a href="#4）定义URL的表达式：" class="headerlink" title="4）定义URL的表达式："></a>4）定义URL的表达式：</h4><p>定义URL的表达式语法：<code>@{...}</code></p>
<p>支持绝对路径或相对路径。<br>相对路径包括：</p>
<ul>
<li>页面相对路径：user/login.html</li>
<li>上下文相对路径：/emps?id=2</li>
<li>服务相对路径：~、billing/processInvoice</li>
<li>相对URL： //code.jquery.com/jquery-2.0.3.min.js    </li>
</ul>
<blockquote>
<p>表达式的语法真正处理及其到将要输出的url的转换由实现 <code>org.thymeleaf.linkbuilder</code>注册到正在使用 <code>ITemplateEngine</code> 对象。默认情况下，该接口的一个实现是类的注册<code>org.thymeleaf.linkbuilder.StandardLinkBuilder</code>，对于脱机（非web）和web场景都可以支持基于Servlet API。其他场景（如与非ServletAPI web框架的集成）可能需要特定的链接生成器接口的实现。</p>
</blockquote>
<p>使用：<code>th:href</code></p>
<pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- Will produce 'http://localhost:8080/gtvg/order/details?orderId=3' (plus rewriting) --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>details.html<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{http://localhost:8080/gtvg/order/details(orderId<span class="token punctuation">=</span>${o.id})}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>view<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
<span class="token comment" spellcheck="true">&lt;!-- Will produce '/gtvg/order/details?orderId=3' (plus rewriting) --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>details.html<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/order/details(orderId<span class="token punctuation">=</span>${o.id})}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>view<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
<span class="token comment" spellcheck="true">&lt;!-- Will produce '/gtvg/order/3/details' (plus rewriting) --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>details.html<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/order/{orderId}/details(orderId<span class="token punctuation">=</span>${o.id})}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>view<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre>
<p>注意事项：</p>
<p>这里需要注意的是：</p>
<ul>
<li><p><code>th:href</code> 是一个修饰符属性：一旦处理，它将计算要使用的链接URL并将该值设置为<code>&lt;a&gt;</code> 标记的href属性。</p>
</li>
<li><p>我们可以对URL参数使用表达式（如orderId=${o.id}）。所需的URLparameter编码操作也将自动执行。</p>
</li>
<li><p>如果需要多个参数，这些参数将用逗号隔开：<code>@{/order/process(execId=${execId}, execType=&#39;FAST&#39;)}</code></p>
</li>
<li><p>URL路径中也允许变量模板：<code>@{/order/{orderId}/details(orderId=${orderId})}</code></p>
</li>
<li><p>以 <code>/</code> 开头的相对URL将自动以应用程序上下文名称作为前缀。例如：<code>/order/details</code> 是页面查看源代码可以看到是 <code>http://localhost:8080/thymeleaf/order/details</code></p>
</li>
<li><p>如果 cookies 未启用或尚不知道，则可能会在相对URL中添加“；jsessionid=…”后缀，以便会话被保留。这叫做URL重写，Thymeleaf允许使用 <code>response.encodeURL(...)</code> 的机制对每个URL的Servlet API 进行自定义重写。</p>
</li>
<li><p><code>th:href</code> 属性允许我们（可选地）在模板中有一个工作的静态 <code>href</code>属性，以便当直接打开模板链接以进行原型设计时，浏览器仍然可以导航模板链接。默认<code>href</code> 和 <code>th:href</code> 可以同时存在，即可以设置默认值。</p>
</li>
</ul>
<p>允许URL通过运算获得：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{${url}(orderId<span class="token punctuation">=</span>${o.id})}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>view<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{<span class="token punctuation">'</span>/details/<span class="token punctuation">'</span>+${user.login}(orderId<span class="token punctuation">=</span>${o.id})}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>view<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre>
<p>简单示例：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Please select an option<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>product/list.html<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/product/list}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Product List<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>order/list.html<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/order/list}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Order List<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>subscribe.html<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/subscribe}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Subscribe to our Newsletter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userprofile.html<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/userprofile}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>See User Profile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span></code></pre>
<p> 服务器根相对URL</p>
<p>还可以使用其他语法来创建相对于服务器根目录（而不是相对于上下文根目录）的url，以便进行链接同一服务器中的不同上下文。这些url将被指定为 <code>@{~/path/to/something}</code></p>
<h4 id="5）片段表达式"><a href="#5）片段表达式" class="headerlink" title="5）片段表达式"></a>5）片段表达式</h4><p>引用代码片段的片段引用表达式语法：<code>~{...}</code></p>
<p>片段表达式是表示标记片段并在模板中移动它们的一种简单方法。这允许我们重复使用相同的代码片段，将它们作为参数传递给其他模板。</p>
<p>代码片段一般配合布局使用，比如头部，菜单，脚部等可以公共使用的代码片段。</p>
<h5 id="a-小示例"><a href="#a-小示例" class="headerlink" title="(a) 小示例"></a>(a) 小示例</h5><p>如：在 <code>/template/footer.html</code> 定义一个片段</p>
<pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>fragment</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>copy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token entity" title="&copy;">&amp;copy;</span> 2020  Small-Rose 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>
<p>可以在  <code>home.html</code> 使用 <code>th:insert</code> 或 <code>th:replace</code> 或 <code>th:include</code> 引用片段：</p>
<p>使用  <code>th:insert</code> :</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
...
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>insert</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>~{footer :: copy}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre>
<p>对于非复杂的表达式等价于</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
...
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>insert</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer :: copy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre>
<h5 id="b-片段规范语法"><a href="#b-片段规范语法" class="headerlink" title="(b) 片段规范语法"></a>(b) 片段规范语法</h5><p>规范语法有三种：</p>
<ul>
<li><code>&quot;~{templatename::selector}&quot;</code> 引入名为 <code>templatename</code> ，指定标记选择器的模板片段。注意可以是一个片段名，标记选择器可以指定一些内容。</li>
<li><code>&quot;~{templatename::selector}&quot;</code> 引入名为 <code>templatename</code> 的模板片段。</li>
<li><code>~{::selector}&quot;</code> 或 <code>&quot;~{this::selector}&quot;</code> 引入匹配选择器的同一模板中的片段，如果找不到则会遍历整个模板目录，直到选择器找到匹配。</li>
</ul>
<p>引入方式都是全功能的，支持选择表达式。</p>
<p>比如定义多个：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>fragment</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>adminFooter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token entity" title="&copy;">&amp;copy;</span> 2020 Welcome to site , Admin ~
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>fragment</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>normaluser<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token entity" title="&copy;">&amp;copy;</span> 2020  Welcome to Site 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<p>对应的使用：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>insert</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer :: (${user.isAdmin}? #{footer.admin} : #{footer.normaluser})<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<p>判断用户是否是Admin用户，如果是admin，则引入 footer 模板页面中取到的国际化值( <code>#{footer.admin}</code>)对应的代码片段。</p>
<p>如不使用<code>th:fragment</code> 定义示例：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>copy-section<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token entity" title="&copy;">&amp;copy;</span> 2020 Small-Rose
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<p>对应的引入为：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
...
&lt;    div th:insert="~{footer :: #copy-section}"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre>
<p>其实就是使用了css 选择器，这里使用的 id 选择器</p>
<h5 id="c-三种片段规范区别"><a href="#c-三种片段规范区别" class="headerlink" title="(c) 三种片段规范区别"></a>(c) 三种片段规范区别</h5><p><code>th:insert</code> 和 <code>th:replace</code>和 <code>th:include</code>(从3.0开始不推荐）之间有什么区别？</p>
<ul>
<li><code>th:insert</code> 最简单的使用，直接将引入的代码片段插入引用处的标签。</li>
<li><code>th:replace</code> 直接将引入的代码片段替换引用处的标签。</li>
<li><code>th:include</code> 有点类似 <code>th:insert</code> ，但只是插入引用代码片段的内容部分。     </li>
</ul>
<p>来个示例：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span> <span class="token attr-name"><span class="token namespace">th:</span>fragment</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>copy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token entity" title="&copy;">&amp;copy;</span> 2020 Small-Rose
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span></code></pre>
<p>不同的引入方式，假如使用 <code>&lt;div&gt;</code> 引入：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
...
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>insert</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer :: copy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>replace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer :: copy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>include</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer :: copy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre>
<p>最终效果：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
...

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span>
            <span class="token entity" title="&copy;">&amp;copy;</span> 2020 Small-Rose
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span>
        <span class="token entity" title="&copy;">&amp;copy;</span> 2020 Small-Rose
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
        <span class="token entity" title="&copy;">&amp;copy;</span> 2020 Small-Rose
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre>
<h5 id="d）可参数化片段签名"><a href="#d）可参数化片段签名" class="headerlink" title="(d）可参数化片段签名"></a>(d）可参数化片段签名</h5><p>参数化签名可以使模板片段创建一个类似函数的机制，用<code>th:fragment</code>定义的片段可以指定一组参数。</p>
<pre><code>&lt;div th:fragment=&quot;frag (onevar,twovar)&quot;&gt;
    &lt;p th:text=&quot;${onevar} + &#39; - &#39; + ${twovar}&quot;&gt;...&lt;/p&gt;
&lt;/div</code></pre><p>在引入代码片段的地方传入参数 <code>th:insert</code> 或 <code>th:replace</code> 皆可：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>replace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>::frag (${value1},${value2})<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<p>该种方式需要注意参数顺序，如果不想为参数顺序烦恼，可以使用第一种方式：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>replace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>::frag (onevar<span class="token punctuation">=</span>${value1},twovar<span class="token punctuation">=</span>${value2})<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<p><strong>特别注意</strong></p>
<p>如果在定义的时候不指定模板，则只能使用第二种方式传入参数。</p>
<p>定义片段：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>fragment</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>frag<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
...
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<p>引入使用只能第二种方式：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>replace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>::frag (onevar<span class="token punctuation">=</span>${value1},twovar<span class="token punctuation">=</span>${value2})<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre>
<p>等价于<code>th:replace</code> 和 <code>th:with</code> 的组合：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>replace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>::frag<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>with</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onevar<span class="token punctuation">=</span>${value1},twovar<span class="token punctuation">=</span>${value2}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre>
<h5 id="e）模板内断言"><a href="#e）模板内断言" class="headerlink" title="(e）模板内断言"></a>(e）模板内断言</h5><p><code>th:assert</code> 对于模板内断言 <code>th:assert</code> 属性可以指定一个逗号分隔的表达式列表，只有当每个表达式的值都是true的时候，对应的代码片段将会被激活，否则会引发异常。</p>
<p>片段签名添加参数验证：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span> <span class="token attr-name"><span class="token namespace">th:</span>fragment</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>contentheader(title)<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>assert</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${!#strings.isEmpty(title)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span></code></pre>
<h5 id="f）灵活布局"><a href="#f）灵活布局" class="headerlink" title="(f）灵活布局"></a>(f）灵活布局</h5><p>片段中title和links变量的用法，在<code>/template/base.html</code> ：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span> <span class="token attr-name"><span class="token namespace">th:</span>fragment</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>common_header(title,links)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span> <span class="token attr-name"><span class="token namespace">th:</span>replace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${title}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>The awesome application<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- Common styles and scripts --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>all<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/css/awesomeapp.css}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>shortcut icon<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/images/favicon.ico}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/sh/scripts/codebase.js}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!--/* Per-page placeholder for additional links */--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">th:</span>block</span> <span class="token attr-name"><span class="token namespace">th:</span>replace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${links}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></code></pre>
<p>使用</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span> <span class="token attr-name"><span class="token namespace">th:</span>replace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>base :: common_header(~{::title},~{::link})<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Awesome - Main<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/css/bootstrap.min.css}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/themes/smoothness/jquery-ui.css}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></code></pre>
<p>这里的引入是使用的选择器方式引入，结果将使用调用模板中的实际 <code>&lt;title&gt;</code> 和 <code>&lt;link&gt;</code> 标记作为<code>title</code>和链接变量，使我们的片段在插入过程中被自定义：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Awesome - Main<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- Common styles and scripts --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>all<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/awe/css/awesomeapp.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>shortcut icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/awe/images/favicon.ico<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/awe/sh/scripts/codebase.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/awe/css/bootstrap.min.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/awe/themes/smoothness/jquery-ui.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></code></pre>
<p>还有一些空片段使用、无操作片段使用参考<a href="https://www.thymeleaf.org/documentation.html" target="_blank" rel="noopener">Thymeleaf 官方文档</a>。</p>
<h3 id="2-字面量表达式"><a href="#2-字面量表达式" class="headerlink" title="2. 字面量表达式"></a>2. 字面量表达式</h3><p>1）文本字面量</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>
Now you are looking at a <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>working web application<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>template file<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>.
&lt;/p</code></pre>
<p>2）数字字面量</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>The year is <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2013<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1492<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>In two years, it will be <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2013 + 2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1494<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre>
<p>3）布尔字面量</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user.isAdmin()} <span class="token punctuation">=</span><span class="token punctuation">=</span> false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre>
<p>4）null字面量</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${variable.something} <span class="token punctuation">=</span><span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre>
<p>3）文字标记</p>
<p>数字、布尔和空文字实际上是文字标记的一种特殊情况。</p>
<p>文字标记允许在标准表达式中进行一点简化。它们的工作原理与文本字面量完全相同，但它们只允许字母<code>A-Z</code> 和 <code>A-Z</code>、数字 <code>0-9</code>、方括号<code>[ ]</code>、点 <code>.</code>，连字符<code>-</code> 和下划线<code>_</code> 。<strong>没有空格，没有逗号等</strong>。</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<p>代替</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>content<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<h3 id="3-文本操作"><a href="#3-文本操作" class="headerlink" title="3. 文本操作"></a>3. 文本操作</h3><p><code>+</code> 使用：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>The name of the user is <span class="token punctuation">'</span> + ${user.name}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&lt;/p</code></pre>
<p><code>|</code> 使用：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>|Welcome to our application, ${user.name}!|<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>Welcome to our application, <span class="token punctuation">'</span> + ${user.name} + <span class="token punctuation">'</span>!<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre>
<p>组合使用</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${onevar} + <span class="token punctuation">'</span> <span class="token punctuation">'</span> + |${twovar}, ${threevar}|<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre>
<p><strong>注意：</strong>在 <code>|  |</code> 文本替换中只允许变量/消息表达式（<code>${…}</code>，<code>*{…}</code>，<code>#{…}</code>）。不允许其他文字标记（<code>&quot;…&quot;</code>）、布尔/数字标记、条件表达式等。</p>
<h3 id="4-数学运算"><a href="#4-数学运算" class="headerlink" title="4. 数学运算"></a>4. 数学运算</h3><p>常见的：<strong><code>+</code> , <code>-</code> , <code>*</code> , <code>/</code> 和 <code>%</code></strong></p>
<p>文本别名运算符：<code>div</code>（<code>/</code>），  <code>mod</code>（<code>%</code>）</p>
<h3 id="5-逻辑运算"><a href="#5-逻辑运算" class="headerlink" title="5.逻辑运算"></a>5.逻辑运算</h3><p>常见的运算符：<code>and</code> ，<code>or</code> , <code>|</code> ，<code>not</code></p>
<h3 id="6-比较运算"><a href="#6-比较运算" class="headerlink" title="6. 比较运算"></a>6. 比较运算</h3><p>gt ( &gt; ), lt ( &lt; ), ge ( &gt;= ), le ( &lt;= ), not ( ! ). Also eq ( == ), neq / ne ( != ).    </p>
<table>
<thead>
<tr>
<th>比较运算</th>
<th>符号</th>
</tr>
</thead>
<tbody><tr>
<td>大于</td>
<td><code>gt</code> ， <code>&gt;</code></td>
</tr>
<tr>
<td>小于</td>
<td><code>lt</code> ， <code>&lt;</code></td>
</tr>
<tr>
<td>大于或等于</td>
<td><code>ge</code> ，<code>&gt;=</code></td>
</tr>
<tr>
<td>小于或等于</td>
<td><code>le</code> ， <code>&lt;=</code></td>
</tr>
<tr>
<td>非</td>
<td><code>not</code> ， <code>!</code></td>
</tr>
<tr>
<td>等于</td>
<td><code>eq</code> ， <code>==</code></td>
</tr>
<tr>
<td>不等于</td>
<td><code>neq</code> ，<code>!=</code></td>
</tr>
</tbody></table>
<h3 id="6-条件表达式"><a href="#6-条件表达式" class="headerlink" title="6. 条件表达式"></a>6. 条件表达式</h3><p>常见的条件表达式基本格式：</p>
<ul>
<li><code>condition ? then : else</code></li>
<li><code>condition ? then</code></li>
<li><code>condition ? ( condition2 ? then2 : else2 ): else</code></li>
</ul>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name"><span class="token namespace">th:</span>class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${row.even}? <span class="token punctuation">'</span>even<span class="token punctuation">'</span> : <span class="token punctuation">'</span>odd<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
...
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span></code></pre>
<p>条件表达式的三个部分都可以使用：</p>
<ul>
<li>变量表达式 <code>${ }</code>， <code>*{ }</code> ，</li>
<li>消息表达式 <code>#{ }</code> ，</li>
<li>链接表达式 <code>@{ }</code> ，</li>
<li>字面量表达式 <code>&#39; &#39;</code>。</li>
</ul>
<h3 id="7-默认表达式"><a href="#7-默认表达式" class="headerlink" title="7. 默认表达式"></a>7. 默认表达式</h3><p>默认表达式是条件表达式没有 <code>then</code> 部分。</p>
<p>基本语法：<code>condition ?: else</code></p>
<p>嵌套语法：<code>condition ?: ( condition ? then : else )</code></p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>object</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${session.user}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
...
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Age: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*{age}?: <span class="token punctuation">'</span>(no age specified)<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>27<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<p>等价于：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Age: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*{age !<span class="token punctuation">=</span> null}? *{age} : <span class="token punctuation">'</span>(no age specified)<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>27<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre>
<p>嵌套示例：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>
Name:
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*{firstName}?: (*{admin}? <span class="token punctuation">'</span>Admin<span class="token punctuation">'</span> : #{default.username})<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Sebastian<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre>
<h3 id="8-无操作标记"><a href="#8-无操作标记" class="headerlink" title="8. 无操作标记"></a>8. 无操作标记</h3><p>无操作标记使用下划线符号 <code>_</code> </p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user.name} ?: _<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>no user authenticated<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre>
<h2 id="五、属性设置"><a href="#五、属性设置" class="headerlink" title="五、属性设置"></a>五、属性设置</h2><h3 id="1、通用属性设置"><a href="#1、通用属性设置" class="headerlink" title="1、通用属性设置"></a>1、通用属性设置</h3><p>基本语法：<code>th:attr</code></p>
<p>如，动态设置表单的 <code>action</code> 值、根据国际化的值显示按钮文字：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>subscribe.html<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>attr</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>action<span class="token punctuation">=</span>@{/subscribe}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fieldset</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Subscribe!<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>attr</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>value<span class="token punctuation">=</span>#{subscribe.submit}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fieldset</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre>
<p>也可以设置标签没有的自定义属性:</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>input<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>someone<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>attr</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>love<span class="token punctuation">=</span>you<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre>
<p>还可以设置多个属性：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../../images/gtvglogo.png<span class="token punctuation">"</span></span>
<span class="token attr-name"><span class="token namespace">th:</span>attr</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>src<span class="token punctuation">=</span>@{/images/gtvglogo.png},title<span class="token punctuation">=</span>#{logo},alt<span class="token punctuation">=</span>#{logo}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre>
<h3 id="2、特殊属性设置"><a href="#2、特殊属性设置" class="headerlink" title="2、特殊属性设置"></a>2、特殊属性设置</h3><p>比如上面使用 <code>th:attr</code> 设置 <code>action</code> 属性和 <code>value</code> 属性：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Subscribe!<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>attr</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>value<span class="token punctuation">=</span>#{subscribe.submit}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre>
<p>也可以使用<code>th:action</code>  和 <code>th:value</code> 设置 ：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>subscribe.html<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/subscribe}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fieldset</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Subscribe!<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{subscribe.submit}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fieldset</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre>
<p>HTML5 常见特殊属性：</p>
<table>
<thead>
<tr>
<th align="left">th:abbr</th>
<th align="left">th:accesskey</th>
<th align="left">th:alt</th>
</tr>
</thead>
<tbody><tr>
<td align="left">th:autocomplete</td>
<td align="left">th:accept</td>
<td align="left">th:action</td>
</tr>
<tr>
<td align="left">th:archive</td>
<td align="left">th:axis</td>
<td align="left">th:accept-charset</td>
</tr>
<tr>
<td align="left">th:align</td>
<td align="left">th:audio</td>
<td align="left">th:background</td>
</tr>
<tr>
<td align="left">th:bgcolor</td>
<td align="left">th:cellspacing</td>
<td align="left">th:cite</td>
</tr>
<tr>
<td align="left">th:codebase</td>
<td align="left">th:colspan</td>
<td align="left">th:contenteditable</td>
</tr>
<tr>
<td align="left">th:border</td>
<td align="left">th:challenge</td>
<td align="left">th:class</td>
</tr>
<tr>
<td align="left">th:codetype</td>
<td align="left">th:compact</td>
<td align="left">th:contextmenu</td>
</tr>
<tr>
<td align="left">th:cellpadding</td>
<td align="left">th:charset</td>
<td align="left">th:classid</td>
</tr>
<tr>
<td align="left">th:cols</td>
<td align="left">th:content</td>
<td align="left">th:data</td>
</tr>
<tr>
<td align="left">th:datetime</td>
<td align="left">th:dropzone</td>
<td align="left">th:form</td>
</tr>
<tr>
<td align="left">th:formmethod</td>
<td align="left">th:frame</td>
<td align="left">th:dir</td>
</tr>
<tr>
<td align="left">th:enctype</td>
<td align="left">th:formaction</td>
<td align="left">th:formtarget</td>
</tr>
<tr>
<td align="left">th:frameborder</td>
<td align="left">th:draggable</td>
<td align="left">th:for</td>
</tr>
<tr>
<td align="left">th:formenctype</td>
<td align="left">th:fragment</td>
<td align="left">th:headers</td>
</tr>
<tr>
<td align="left">th:height</td>
<td align="left">th:hreflang</td>
<td align="left">th:icon</td>
</tr>
<tr>
<td align="left">th:keytype</td>
<td align="left">th:lang</td>
<td align="left">th:low</td>
</tr>
<tr>
<td align="left">th:high</td>
<td align="left">th:hspace</td>
<td align="left">th:id</td>
</tr>
<tr>
<td align="left">th:kind</td>
<td align="left">th:list</td>
<td align="left">th:manifest</td>
</tr>
<tr>
<td align="left">th:href</td>
<td align="left">th:http-equiv</td>
<td align="left">th:inline</td>
</tr>
<tr>
<td align="left">th:label</td>
<td align="left">th:longdesc</td>
<td align="left">th:marginheight</td>
</tr>
<tr>
<td align="left">th:low</td>
<td align="left">th:manifest</td>
<td align="left">th:marginheight</td>
</tr>
<tr>
<td align="left">th:marginwidth</td>
<td align="left">th:media</td>
<td align="left">th:name</td>
</tr>
<tr>
<td align="left">th:onbeforeprint</td>
<td align="left">th:oncanplay</td>
<td align="left">th:max</td>
</tr>
<tr>
<td align="left">th:method</td>
<td align="left">th:onabort</td>
<td align="left">th:onbeforeunload</td>
</tr>
<tr>
<td align="left">th:oncanplaythrough</td>
<td align="left">th:maxlength</td>
<td align="left">th:min</td>
</tr>
<tr>
<td align="left">th:onafterprint</td>
<td align="left">th:onblur</td>
<td align="left">th:onchange</td>
</tr>
<tr>
<td align="left">th:onclick</td>
<td align="left">th:ondrag</td>
<td align="left">th:ondragleave</td>
</tr>
<tr>
<td align="left">th:ondrop</td>
<td align="left">th:onended</td>
<td align="left">th:onformchange</td>
</tr>
<tr>
<td align="left">th:oncontextmenu</td>
<td align="left">th:ondragend</td>
<td align="left">th:ondragover</td>
</tr>
<tr>
<td align="left">th:ondurationchange</td>
<td align="left">th:onerror</td>
<td align="left">th:onforminput</td>
</tr>
<tr>
<td align="left">th:ondblclick</td>
<td align="left">th:ondragenter</td>
<td align="left">th:ondragstart</td>
</tr>
<tr>
<td align="left">th:onemptied</td>
<td align="left">th:onfocus</td>
<td align="left">th:onhashchange</td>
</tr>
<tr>
<td align="left">th:oninput</td>
<td align="left">th:onkeypress</td>
<td align="left">th:onloadeddata</td>
</tr>
<tr>
<td align="left">th:onmessage</td>
<td align="left">th:onmouseout</td>
<td align="left">th:oninvalid</td>
</tr>
<tr>
<td align="left">th:onkeyup</td>
<td align="left">th:onloadedmetadata</td>
<td align="left">th:onmousedown</td>
</tr>
<tr>
<td align="left">th:onmouseover</td>
<td align="left">th:onkeydown</td>
<td align="left">th:onload</td>
</tr>
<tr>
<td align="left">th:onloadstart</td>
<td align="left">th:onmousemove</td>
<td align="left">th:onmouseup</td>
</tr>
<tr>
<td align="left">th:onmousewheel</td>
<td align="left">th:onpause</td>
<td align="left">th:onpopstate</td>
</tr>
<tr>
<td align="left">th:onreadystatechange</td>
<td align="left">th:onresize</td>
<td align="left">th:onoffline</td>
</tr>
<tr>
<td align="left">th:onplay</td>
<td align="left">th:onprogress</td>
<td align="left">th:onredo</td>
</tr>
<tr>
<td align="left">th:onscroll</td>
<td align="left">th:ononline</td>
<td align="left">th:onplaying</td>
</tr>
<tr>
<td align="left">th:onratechange</td>
<td align="left">th:onreset</td>
<td align="left">th:onseeked</td>
</tr>
<tr>
<td align="left">th:onseeking</td>
<td align="left">th:onstalled</td>
<td align="left">th:onsuspend</td>
</tr>
<tr>
<td align="left">th:onunload</td>
<td align="left">th:optimum</td>
<td align="left">th:poster</td>
</tr>
<tr>
<td align="left">th:onselect</td>
<td align="left">th:onstorage</td>
<td align="left">th:ontimeupdate</td>
</tr>
<tr>
<td align="left">th:onvolumechange</td>
<td align="left">th:pattern</td>
<td align="left">th:preload</td>
</tr>
<tr>
<td align="left">th:onshow</td>
<td align="left">th:onsubmit</td>
<td align="left">th:onundo</td>
</tr>
<tr>
<td align="left">th:onwaiting</td>
<td align="left">th:placeholder</td>
<td align="left">th:radiogroup</td>
</tr>
<tr>
<td align="left">th:rel</td>
<td align="left">th:rowspan</td>
<td align="left">th:scheme</td>
</tr>
<tr>
<td align="left">th:size</td>
<td align="left">th:spellcheck</td>
<td align="left">th:rev</td>
</tr>
<tr>
<td align="left">th:rules</td>
<td align="left">th:scope</td>
<td align="left">th:sizes</td>
</tr>
<tr>
<td align="left">th:src</td>
<td align="left">th:rows</td>
<td align="left">th:sandbox</td>
</tr>
<tr>
<td align="left">th:scrolling</td>
<td align="left">th:span</td>
<td align="left">th:srclang</td>
</tr>
<tr>
<td align="left">th:standby</td>
<td align="left">th:style</td>
<td align="left">th:target</td>
</tr>
<tr>
<td align="left">th:usemap</td>
<td align="left">th:vspace</td>
<td align="left">th:xmlbase</td>
</tr>
<tr>
<td align="left">th:start</td>
<td align="left">th:summary</td>
<td align="left">th:title</td>
</tr>
<tr>
<td align="left">th:value</td>
<td align="left">th:width</td>
<td align="left">th:xmllang</td>
</tr>
<tr>
<td align="left">th:step</td>
<td align="left">th:tabindex</td>
<td align="left">th:type</td>
</tr>
<tr>
<td align="left">th:valuetype</td>
<td align="left">th:wrap</td>
<td align="left">th:xmlspace</td>
</tr>
</tbody></table>
<h3 id="3、一次设置多个属性值"><a href="#3、一次设置多个属性值" class="headerlink" title="3、一次设置多个属性值"></a>3、一次设置多个属性值</h3><p>有两个相当特殊的属性称为 <code>th:alt-title</code> 和 <code>th:lang-xmllang</code> ，可用于设置两个属性：</p>
<ul>
<li><code>th:alt-title</code> 可以设置 <code>alt</code> 和 <code>title</code> 属性 . </li>
<li><code>th:lang-xmllang</code> 可以设置  <code>lang</code>  和  <code>xml:lang</code> 属性 . </li>
</ul>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../../images/gtvglogo.png<span class="token punctuation">"</span></span>
<span class="token attr-name"><span class="token namespace">th:</span>attr</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>src<span class="token punctuation">=</span>@{/images/gtvglogo.png},title<span class="token punctuation">=</span>#{logo},alt<span class="token punctuation">=</span>#{logo}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre>
<p>等价于</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../../images/gtvglogo.png<span class="token punctuation">"</span></span>
<span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/images/gtvglogo.png}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{logo}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{logo}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre>
<p>等价于</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../../images/gtvglogo.png<span class="token punctuation">"</span></span>
<span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/images/gtvglogo.png}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>alt-title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{logo}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre>
<h3 id="4、追加属性"><a href="#4、追加属性" class="headerlink" title="4、追加属性"></a>4、追加属性</h3><p><code>th:attrappend</code> ：表示在后面追加 。</p>
<p><code>th:attrprepend</code> ：表示在前面追加 。  </p>
<p>比较常见的是修改 <code>CSS</code> 样式：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Do it!<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>attrappend</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>class<span class="token punctuation">=</span>${<span class="token punctuation">'</span> <span class="token punctuation">'</span> + cssStyle}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre>
<p>假如 cssStyle 的值是 success ，最终效果如下：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Do it!<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn success<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre>
<p>标准方言中还有两个特定的附加属性：<code>th:classappend</code> 和 <code>th:styleappend</code> 属性，用于向元素添加 <code>CSS</code> 类或样式片段，而不覆盖现已经有的代码。</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prod : ${prods}<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>classappend</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${prodStat.odd}? <span class="token punctuation">'</span>odd<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre>
<p>满足条件之后就会变成：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prod : ${prods}<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row odd<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span></code></pre>
<h3 id="5、固定值布尔属性"><a href="#5、固定值布尔属性" class="headerlink" title="5、固定值布尔属性"></a>5、固定值布尔属性</h3><p>比如 <code>checked</code> 属性:</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>option2<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span> <span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!-- HTML --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>option1<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checked<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!-- XHTML --></span></code></pre>
<p>标准方言包含允许您通过计算条件来设置这些属性的属性，这样如果表达式求值为true，则属性将设置为其固定值，如果求值为false，则不会设置该属性。如：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>active<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>checked</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user.active}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre>
<p> 标准方言中存在以下固定值布尔属性：</p>
<table>
<thead>
<tr>
<th>th:async</th>
<th>th:autofocus</th>
<th>th:autoplay</th>
</tr>
</thead>
<tbody><tr>
<td>th:checked</td>
<td>th:default</td>
<td>th:formnovalidate</td>
</tr>
<tr>
<td>th:loop</td>
<td>th:nowrap</td>
<td>th:controls</td>
</tr>
<tr>
<td>th:defer</td>
<td>th:hidden</td>
<td>th:multiple</td>
</tr>
<tr>
<td>th:open</td>
<td>th:declare</td>
<td>th:disabled</td>
</tr>
<tr>
<td>th:ismap</td>
<td>th:novalidate</td>
<td>th:pubdate</td>
</tr>
<tr>
<td>th:readonly</td>
<td>th:scoped</td>
<td>th:required</td>
</tr>
<tr>
<td>th:seamless</td>
<td>th:reversed</td>
<td>th:selected</td>
</tr>
</tbody></table>
<h3 id="6、任意属性设置"><a href="#6、任意属性设置" class="headerlink" title="6、任意属性设置"></a>6、任意属性设置</h3><p>Thymeleaf提供了一个默认的属性处理器，允许我们设置任何属性的值，即使没有特定的 <code>th：*</code> 处理器是用标准方言定义的。如：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>whatever</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user.name}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre>
<p>解析后：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">whatever</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>John Apricot<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre>
<h3 id="7、H5属性元素支持"><a href="#7、H5属性元素支持" class="headerlink" title="7、H5属性元素支持"></a>7、H5属性元素支持</h3><p><code>data-{prefix}-{name}</code> 语法是在HTML5中编写自定义属性的标准方法，无需开发人员可以使用任何名称空间的名称，有些类似 <code>th:*</code> 的用法。</p>
<p>比如：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">data-th-each</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user : ${users}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">data-th-text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user.login}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">data-th-text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user.name}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre>
<h2 id="六、迭代"><a href="#六、迭代" class="headerlink" title="六、迭代"></a>六、迭代</h2><h3 id="1、基本迭代"><a href="#1、基本迭代" class="headerlink" title="1、基本迭代"></a>1、基本迭代</h3><p>基本语法：<code>th:each</code> </p>
<p>示例：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Product list<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>NAME<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>PRICE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>IN STOCK<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prod : ${prods}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${prod.name}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Onions<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${prod.price}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2.41<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${prod.inStock}? #{true} : #{false}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>yes<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../home.html<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Return to home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre>
<ul>
<li>将 <code>${prods}</code> 称为迭代表达式或被迭代变量。</li>
<li>将 <code>prod</code> 称为迭代变量或简称iter变量。</li>
<li>注意 <code>prod</code> 迭代变量的作用域是<code>&lt;tr&gt;</code>元素，这意味着它可用于内部标记，如 <code>&lt;td&gt;</code> ，同时也将意味着迭代会产生多个 <code>&lt;tr&gt;</code> 元素。</li>
<li>可以用于迭代的对象不止<code>List</code>, 还有：<ul>
<li>（ A ）任何实现了<code>java.util.Iterable</code> 或 <code>java.util.Enumeration</code> 或  <code>java.util.Iterator</code>(值将在迭代器返回时使用，不需要在内存中缓存所有值) 或 <code>java.util.Map</code>（ Map中迭代变量会是 <code>java.util.Map.Entry</code> 类）。</li>
<li>（ B ）可以是数组。</li>
<li>（ C ）任何其他对象都将被视为包含对象本身的单值列表</li>
</ul>
</li>
</ul>
<h3 id="2、迭代时状态"><a href="#2、迭代时状态" class="headerlink" title="2、迭代时状态"></a>2、迭代时状态</h3><p>当使用 <code>th:each</code> 时，Thymeleaf 提供了一种用于跟踪迭代状态的机制：状态变量。</p>
<p>状态变量在th:each属性中定义，并包含以下数据：</p>
<ul>
<li><p>当前迭代索引，从0开始。<code>index</code> 属性。 </p>
</li>
<li><p>当前迭代索引，从1开始。<code>count</code> 属性。 </p>
</li>
<li><p>迭代变量中元素的总数。<code>size</code> 属性。 </p>
</li>
<li><p>每次迭代的iter变量。<code>current</code> 属性。 </p>
</li>
<li><p>当前迭代是偶数还是奇数。这些是 even /odd 布尔属性。 </p>
</li>
<li><p>当前迭代是否是第一个迭代。first 布尔属性。 </p>
</li>
<li><p>当前迭代是否是最后一个迭代。last 布尔属性。</p>
</li>
</ul>
<p>示例：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>NAME<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>PRICE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>IN STOCK<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prod,iterStat : ${prods}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${iterStat.odd}? <span class="token punctuation">'</span>odd<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${prod.name}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Onions<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${prod.price}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2.41<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${prod.inStock}? #{true} : #{false}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>yes<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre>
<p>​    状态变量（在本例中是 <code>iterStat</code>）是通过在 <code>iter</code>后面写入其名称在th:each属性中定义的变量本身，用逗号分隔。与iter变量一样，status变量的作用域也是由包含 <code>th:each</code> 属性的标记定义的代码。 如果我们不写也可以，Thymeleaf 也能识别：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>NAME<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>PRICE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>IN STOCK<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prod : ${prods}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${prodStat.odd}? <span class="token punctuation">'</span>odd<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${prod.name}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Onions<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${prod.price}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2.41<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${prod.inStock}? #{true} : #{false}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>yes<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre>
<h3 id="3、延迟加载"><a href="#3、延迟加载" class="headerlink" title="3、延迟加载"></a>3、延迟加载</h3><p>有时，我们可能希望优化数据集合的检索（例如从数据库），以便只有当集合真的要被使用时才会被检索。实际上，这是一种可以应用于任何数据块的东西，但是可能指定了内存集合的大小，检索要迭代的集合是这种情况下最常见的情况。</p>
<p>为了支持这一点，Thymeleaf 提供了一种延迟加载上下文变量的机制。上下文变量实现 <code>ILazyContextVariable</code> 接口（很可能是通过扩展其 <code>LazyContextVariable</code> 默认值来实现）实现将在执行时解决。例如：</p>
<pre class=" language-java"><code class="language-java">context<span class="token punctuation">.</span><span class="token function">setVariable</span><span class="token punctuation">(</span>
<span class="token string">"users"</span><span class="token punctuation">,</span>
<span class="token keyword">new</span> <span class="token class-name">LazyContextVariable</span><span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>User<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">loadValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">return</span> databaseRepository<span class="token punctuation">.</span><span class="token function">findAllUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>代码中，可以在不知道其懒散性的情况下使用此变量，为了保证是否执行，可以加个条件：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${condition}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>u : ${users}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${u.name}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>user name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre>
<h2 id="七、条件表达式"><a href="#七、条件表达式" class="headerlink" title="七、条件表达式"></a>七、条件表达式</h2><h3 id="1、简单条件表达式"><a href="#1、简单条件表达式" class="headerlink" title="1、简单条件表达式"></a>1、简单条件表达式</h3><p><code>if</code> 和  <code>unless</code> 。</p>
<p>示例：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>NAME<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>PRICE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>IN STOCK<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>COMMENTS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prod : ${prods}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${prodStat.odd}? <span class="token punctuation">'</span>odd<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${prod.name}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Onions<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${prod.price}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2.41<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${prod.inStock}? #{true} : #{false}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>yes<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#lists.size(prod.comments)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> comment/s
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>comments.html<span class="token punctuation">"</span></span>
            <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/product/comments(prodId<span class="token punctuation">=</span>${prod.id})}<span class="token punctuation">"</span></span>
            <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${not #lists.isEmpty(prod.comments)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>view<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre>
<p>可以看到 <code>&lt;a&gt;</code>标签被解析的条件是<code>prod.comments</code> 不能为空。</p>
<p>注意，<code>th:if</code> 属性不仅计算布尔条件。它的能力远不止于此，而且将根据以下规则将指定的表达式求值为 <code>true</code>：</p>
<p>（1）if 表达式值不为 null 的情况运算结果是<code>true</code>: </p>
<ul>
<li>If 表达式值是个布尔值并且是true. </li>
<li>If 表达式值是个不为 0 的数字。</li>
<li>If 表达式值是个不为 <code>&#39;0&#39;</code> 的字符。</li>
<li>If 表达式值是个字符，但不是 “false”, “off” or “no” </li>
<li>If 表达式值不是布尔值、不是数字、不是字符、也不是字符串。</li>
</ul>
<p>（2）if 表达式值为 null ，那么运算结果是 <code>false</code>  。    </p>
<p><code>th:if</code> 的逆属性 <code>th:unless</code> 也可以使用。</p>
<pre class=" language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>comments.html<span class="token punctuation">"</span></span>
            <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/product/comments(prodId<span class="token punctuation">=</span>${prod.id})}<span class="token punctuation">"</span></span>
            <span class="token attr-name"><span class="token namespace">th:</span>unless</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#lists.isEmpty(prod.comments)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>view<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre>
<h3 id="2、切换选择语句"><a href="#2、切换选择语句" class="headerlink" title="2、切换选择语句"></a>2、切换选择语句</h3><p>还有一种方法可以使用Java中的<code>switch</code> 结构有条件地显示内容：<code>th:switch</code> / <code>th:case</code> 属性集。</p>
<p>示例：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>switch</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user.role}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>case</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>admin<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>User is an administrator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>case</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{roles.manager}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>User is a manager<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<p>请注意，只要一个 <code>th:case</code> 属性被运算为 <code>true</code> ，则在同一个<code>switch</code> 中其他每一个 <code>th:case</code>属性运算结果为 <code>false</code> 。</p>
<p>万一所有的 <code>case</code> 都不中怎么办？可以设置默认选项呀~ 默认选项指定为<code>th:case=&quot;*&quot;</code>：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>switch</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user.role}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>case</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>admin<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>User is an administrator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>case</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{roles.manager}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>User is a manager<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>case</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>User is some other thing<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<h2 id="八、内联"><a href="#八、内联" class="headerlink" title="八、内联"></a>八、内联</h2><h3 id="1、表达式内联"><a href="#1、表达式内联" class="headerlink" title="1、表达式内联"></a>1、表达式内联</h3><p>表达式内联、也叫内联写法、行间写法。反正都是翻译的怎么叫都行，其实就是直接在HTML文本中写入表达式，不配合标签来使用。</p>
<p>示例：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Hello, [[${session.user.name}]]!&lt;/p</code></pre>
<p>等价于：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Hello, <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${session.user.name}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Sebastian<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre>
<p><code>[[...]]</code> 和 <code>[(...)]</code> 的区别类似 <code>th:text</code> 和 <code>th:utext</code>    </p>
<p><code>[[...]]</code> 对应着 <code>th:text</code> ：转义特殊字符，内容是什么原样输出什么，浏览器不进行解析。</p>
<p><code>[(...)]</code>对应着 <code>th:utext</code> ：不转义特殊字符，有标签时，浏览器会识别解析 html 标签。</p>
<p>注意：这个内联写法可以使用 <code>th:inline=&quot;none&quot;</code> 禁用：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>inline</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>A double array looks like this: [[1, 2, 3], [4, 5]]!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre>
<p>解析结果：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>A double array looks like this: [[1, 2, 3], [4, 5]]!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre>
<h3 id="2、文本内联"><a href="#2、文本内联" class="headerlink" title="2、文本内联"></a>2、文本内联</h3><p>Textual template modes 文本模板模式</p>
<p>这个特征在页面开发中感觉使用并不是特别多，如果以后遇到再查API 进行补充学习。</p>
<h3 id="3、JS脚本内联"><a href="#3、JS脚本内联" class="headerlink" title="3、JS脚本内联"></a>3、JS脚本内联</h3><p>就是允许在<code>&lt;javascript&gt;</code> 脚本中使用 Thymeleaf 。</p>
<p>1) 基本使用</p>
<p>使用 <code>th:inline=&quot;javascript&quot;</code> 来激活使用：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script th<span class="token punctuation">:</span>inline<span class="token operator">=</span><span class="token string">"javascript"</span><span class="token operator">></span>
<span class="token operator">...</span>
<span class="token keyword">var</span> username <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>$<span class="token punctuation">{</span>session<span class="token punctuation">.</span>user<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token operator">...</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>
<p>最终结果：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script th<span class="token punctuation">:</span>inline<span class="token operator">=</span><span class="token string">"javascript"</span><span class="token operator">></span>
<span class="token operator">...</span>
<span class="token keyword">var</span> username <span class="token operator">=</span> <span class="token string">"Sebastian \"Fruity\" Applejuice"</span><span class="token punctuation">;</span>
<span class="token operator">...</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>
<p>需要注意：</p>
<p>（1）JavaScript 内联不仅输出所需的文本，还将其用引号括起来，并且JavaScript 转义其内容，以便将表达式结果作为格式良好的JavaScript文本输出。</p>
<p>（2）因为我们 <code>${session.user.name}</code> 输出，表达式为转义，如果使用双括号表达式：[[${session.user.name}]] ，表达式的结果就是非转义。就像这样：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name"><span class="token namespace">th:</span>inline</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">
<span class="token operator">...</span>
<span class="token keyword">var</span> username <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>$<span class="token punctuation">{</span>session<span class="token punctuation">.</span>user<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token operator">...</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>
<p>最终结果：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name"><span class="token namespace">th:</span>inline</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">
<span class="token operator">...</span>
<span class="token keyword">var</span> username <span class="token operator">=</span> Sebastian <span class="token string">"Fruity"</span> Applejuice<span class="token punctuation">;</span>
<span class="token operator">...</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>
<p>明显这样是一种错误的JS格式，浏览器肯定会报错。但是输出为转义的内容可能是我们需要的，比如通过附加内联表达式来实现脚本的一部分内容，也是一个比较不错的工具。</p>
<p>JavaScript内联机制的智能性远不止是应用特定于JavaScript的转义并将表达式结果作为有效文本输出。</p>
<p>例如，我们可以在JavaScript注释中包装（转义）内联表达式，例如：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name"><span class="token namespace">th:</span>inline</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">
<span class="token operator">...</span>
<span class="token keyword">var</span> username <span class="token operator">=</span> <span class="token comment" spellcheck="true">/*[[${session.user.name}]]*/</span> <span class="token string">"Gertrud Kiwifruit"</span><span class="token punctuation">;</span>
<span class="token operator">...</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>
<p>而Thymeleaf将忽略我们在注释之后和分号之前写的所有内容（在本例中 <code>&#39;Gertrud Kiwifruit&#39;</code>），因此执行此操作的结果将与不使用包装时完全相同：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name"><span class="token namespace">th:</span>inline</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">
<span class="token operator">...</span>
<span class="token keyword">var</span> username <span class="token operator">=</span> <span class="token string">"Sebastian \"Fruity\" Applejuice"</span><span class="token punctuation">;</span>
<span class="token operator">...</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>
<p>注意：这是如何有效的JavaScript代码。当你在静态模式下打开你的模板文件时，它将完美地执行方式（不在服务器上执行）。所以我们这里有一种方法来制作JavaScript自然模板！</p>
<p>2） 高级内联求值和JavaScript序列化:</p>
<p>关于JavaScript内联，需要注意的一点是，这个表达式计算是智能的，不局限于字符串。Thymeleaf将正确地用JavaScript语法编写以下类型的对象：</p>
<p><code>Strings</code>、<code>Numbers</code> 、<code>Booleans</code>、 <code>Arrays</code>、 <code>Collections</code>、 <code>Maps</code>、 <code>Beans</code> (对象要求有getter和setter方法)    </p>
<p>示例：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name"><span class="token namespace">th:</span>inline</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">
<span class="token operator">...</span>
<span class="token keyword">var</span> user <span class="token operator">=</span> <span class="token comment" spellcheck="true">/*[[${session.user}]]*/</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token operator">...</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>
<p><code>${session.user}</code> 将会运算 user 对象，运行结果：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name"><span class="token namespace">th:</span>inline</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">
<span class="token operator">...</span>
<span class="token keyword">var</span> user <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"age"</span><span class="token punctuation">:</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string">"firstName"</span><span class="token punctuation">:</span><span class="token string">"John"</span><span class="token punctuation">,</span><span class="token string">"lastName"</span><span class="token punctuation">:</span><span class="token string">"Apricot"</span><span class="token punctuation">,</span>
<span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"John Apricot"</span><span class="token punctuation">,</span><span class="token string">"nationality"</span><span class="token punctuation">:</span><span class="token string">"Antarctica"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token operator">...</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>
<p>​        JavaScript序列化的方法是通过 <code>org.thymeleaf.standard.serializer.IStandardJavaScriptSerializer</code> 接口，可以在模板引擎中使用的<code>StandardDialect</code>的实例。 这个JS序列化机制的默认实现将在类路径中查找<code>Jackson</code>库，如果存在，将使用它。如果没有，它将应用一个内置的序列化机制来满足大多数场景和产生类似的结果（但灵活性较差） </p>
<h3 id="4、CSS样式内联"><a href="#4、CSS样式内联" class="headerlink" title="4、CSS样式内联"></a>4、CSS样式内联</h3><p>就是允许在<code>&lt;style&gt;</code> 样式脚本中使用 Thymeleaf 。</p>
<p>使用 <code>th:inline=&quot;css&quot;</code> 来激活使用：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name"><span class="token namespace">th:</span>inline</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">
<span class="token number">...</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre>
<p>比如我们有两个字符串变量：</p>
<pre class=" language-css"><code class="language-css">classname = <span class="token string">'main elems'</span>
align = 'center</code></pre>
<p>就可以直接使用：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name"><span class="token namespace">th:</span>inline</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">
<span class="token selector">.[[$</span><span class="token punctuation">{</span>classname<span class="token punctuation">}</span><span class="token selector">]] </span><span class="token punctuation">{</span>
<span class="token selector">text-align: [[$</span><span class="token punctuation">{</span>align<span class="token punctuation">}</span>]]<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre>
<p>最终解析结果：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name"><span class="token namespace">th:</span>inline</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">
<span class="token selector"><span class="token class">.main</span>\ elems </span><span class="token punctuation">{</span>
    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre>
<p>注意：</p>
<p>​    CSS内联也具有一些智能，就像JavaScript一样像 <code>[[${classname}]]</code> 这样的表达式将作为CSS标识符转义。这就是为什么上面的 <code>classname=&#39;main elems&#39;</code>在代码片段中变成了<code>main\ elems</code>。</p>
<p>高级功能：CSS自然模板。</p>
<p>​    与前面对JavaScript的解释相同，CSS内联也允许 <code>&lt;style&gt;</code>标记工作静态和动态都可以，例如通过在注释中包装内联表达式作为CSS自然模板。</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name"><span class="token namespace">th:</span>inline</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">
<span class="token selector"><span class="token class">.main</span>\ elems </span><span class="token punctuation">{</span>
<span class="token property">text-align</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">/*[[${align}]]*/</span> left<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre>
<p>结果是：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name"><span class="token namespace">th:</span>inline</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">
<span class="token selector"><span class="token class">.main</span>\ elems </span><span class="token punctuation">{</span>
<span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre>
<h2 id="九、注释和块"><a href="#九、注释和块" class="headerlink" title="九、注释和块"></a>九、注释和块</h2><h3 id="1、标准HTML-XML注释"><a href="#1、标准HTML-XML注释" class="headerlink" title="1、标准HTML/XML注释"></a>1、标准HTML/XML注释</h3><p>基本语法：<code>&lt;!--  ...   --&gt;</code></p>
<h3 id="2、解析器级注释块"><a href="#2、解析器级注释块" class="headerlink" title="2、解析器级注释块"></a>2、解析器级注释块</h3><p>解析器级注释块是在Thymeleaf解析模板时将其从模板中简单删除的代码。</p>
<p>基本语法：<code>&lt;!--/* and */--&gt;</code></p>
<pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--/* This code will be removed at Thymeleaf parsing time! */--></span></code></pre>
<h3 id="3、Thymeleaf原型仅注释块"><a href="#3、Thymeleaf原型仅注释块" class="headerlink" title="3、Thymeleaf原型仅注释块"></a>3、Thymeleaf原型仅注释块</h3><p>当模板静态地（例如，作为一个原型）打开时，Thymeleaf允许定义标记为注释的特殊注释块，但是在执行模板时，Thymeleaf认为是正常的标记。</p>
<p>示例：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>hello!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
<span class="token comment" spellcheck="true">&lt;!--/*/
&lt;div th:text="${...}">
...
&lt;/div>
/*/--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>goodbye!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre>
<p>Thymeleaf的解析系统将简单地删除 <code>&lt;！--/*  */--&gt;</code> 标记，但不包括其内容。因此没有注释。因此，在执行模板时，Thymeleaf将实际看到：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>hello!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${...}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
...
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>goodbye!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre>
<p>与解析器级别的注释块一样，这个特性与方言无关。</p>
<h3 id="4、合成-th-block-标记"><a href="#4、合成-th-block-标记" class="headerlink" title="4、合成 th:block 标记"></a>4、合成 th:block 标记</h3><p>Thymeleaf标准方言中唯一的元素处理器（不是属性）是<code>th:block</code>。<code>th:block</code> 仅仅是一个属性容器，允许模板开发人员指定他们想要的任何属性。</p>
<p>Thymeleaf将执行这些属性，然后简单地使块（而不是其内容）消失。因此，例如，在创建每个元素需要多个<code>&lt;tr&gt;</code>的迭代表时，它可能很有用：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">th:</span>block</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user : ${users}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user.login}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user.name}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user.address}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">th:</span>block</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre>
<p>尤其是与原型仅注释块结合使用时非常有用：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>
<span class="token comment" spellcheck="true">&lt;!--/*/ &lt;th:block th:each="user : ${users}"> /*/--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user.login}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user.name}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user.address}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
<span class="token comment" spellcheck="true">&lt;!--/*/ &lt;/th:block> /*/--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre>
<p>注意：</p>
<p>​    这个解决方案允许模板是有效的HTML（不需要在<code>&lt;table&gt;</code>中添加禁止的<code>&lt;div&gt;</code>块），以及作为原型在浏览器中静态打开时仍然可以正常工作！ </p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>Thymeleaf</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot注解IoC</title>
    <url>/posts/372e3018.html</url>
    <content><![CDATA[<h1 id="SpringBoot注解IoC"><a href="#SpringBoot注解IoC" class="headerlink" title="SpringBoot注解IoC"></a>SpringBoot注解IoC</h1><h2 id="一、Ioc简介"><a href="#一、Ioc简介" class="headerlink" title="一、Ioc简介"></a>一、Ioc简介</h2><p><code>IoC</code>是一种通过描述来生成或者获取对象的技术。在Spring 中把每个需要管理的对象称为Spring Bean，简称Bean，Spring 管理这些Bean的容器，被称为Spring IoC容器（简称IoC容器）。</p>
<p>2个基本作用：</p>
<p>（1）通过描述管理Bean，包括发布和获取Bean；</p>
<p>（2）通过描述完成Bean之间的依赖关系。</p>
<p><code>Spring IoC</code>容器其实就是管理Bean的容器。Spring定义中，要求所有的 <code>IoC</code> 容器都需要实现 <code>BeanFactory</code> 接口，它是一个顶级容器接口。</p>
<p><code>BeanFactory</code> 接口主要代码：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org <span class="token punctuation">.</span> springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BeanFactory</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 前缀 用来区分是获取FactoryBean还是FactoryBean的createBean创建的实例.如果&amp;开始则获取FactoryBean;否则获取createBean创建的实例.</span>
    String FACTORY BEAN PREFIX <span class="token operator">=</span> <span class="token string">" &amp;"</span> <span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//多个getBean方法</span>
    Object <span class="token function">getBean</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException<span class="token punctuation">;</span>

    <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getBean</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> requiredType<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException<span class="token punctuation">;</span>

    Object <span class="token function">getBean</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException<span class="token punctuation">;</span> 

    <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getBean</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> requiredType<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException<span class="token punctuation">;</span>

    <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getBean</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> requiredType<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException<span class="token punctuation">;</span>

    <span class="token operator">&lt;</span>T<span class="token operator">></span> ObjectProvider<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">getBeanProvider</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> requiredType<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token operator">&lt;</span>T<span class="token operator">></span> ObjectProvider<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">getBeanProvider</span><span class="token punctuation">(</span>ResolvableType requiredType<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//是否包含某个Bean</span>
    <span class="token keyword">boolean</span> <span class="token function">containsBean</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//Bean 是否为单例</span>
    <span class="token keyword">boolean</span> <span class="token function">isSingleton</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchBeanDefinitionException<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//Bean 是否为原型</span>
    <span class="token keyword">boolean</span> <span class="token function">isPrototype</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchBeanDefinitionException<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//是否类型匹配</span>
    <span class="token keyword">boolean</span> <span class="token function">isTypeMatch</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> ResolvableType typeToMatch<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchBeanDefinitionException<span class="token punctuation">;</span>

    <span class="token keyword">boolean</span> <span class="token function">isTypeMatch</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> typeToMatch<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchBeanDefinitionException<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//获取Bean的类型</span>
    <span class="token annotation punctuation">@Nullable</span>
    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">getType</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchBeanDefinitionException<span class="token punctuation">;</span>
     <span class="token comment" spellcheck="true">//获取Bean的别名</span>
    String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getAliases</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>源码中有多个 <code>getBean()</code> 的方法，有按类型获取Bean，有按名称获取Bean，Spring IoC容器允许按类型或者名称获取Bean。</p>
<p><code>isSingleton()</code> 方法判断Bean 在Spring IoC中是否为单例。<strong>在Spring IoC中，默认情况下，Bean 都是以单例存在的，即使用 <code>getBean()</code> 方法返回的都是同一个对象。</strong></p>
<p><code>isPrototype()</code> 方法与<code>isSingleton()</code> 方法刚好相反，如果它返回<code>true</code>， 那么使用 <code>getBean()</code> 方法获取Bean的时候，Spring IoC容器就会创建一个新的Bean返回。</p>
<p>Spring IoC 容器布局：</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/spring/springioc.svg" alt="spring IoC 接口"></p>
<p><code>ApplicationContext</code> 接口通过继承上级接口进而继承 <code>BeanFactory</code> 接口，还在<code>BeanFactory</code> 的基础上扩展了消息国际化接口（MessageSource）、环境可配置接口（EnvironmentCapable）、应用事件发布接口（ApplicationEventPublisher）和资源模式解析接口（ResourcePatternResolver），功能更强大。</p>
<p>XML相关的<code>IoC</code> 容器装配的方式主要是使用<code>&lt;bean&gt;</code> 标签，通过解析<code>bean</code>标签的描述来管理<code>bean</code>及相关依赖。</p>
<p>在SpringBoot 中主要是通过注解来装配<code>Bean</code> 到<code>Spring IoC</code>容器中，基于注解的<code>IoC</code> 容器为<code>AnnotationConfigApplicationContext</code>。</p>
<p>示例：</p>
<p>一个普通的POJO</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>smallrose<span class="token punctuation">.</span>web<span class="token punctuation">.</span>app<span class="token punctuation">.</span>model<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> String id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String userName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String note<span class="token punctuation">;</span>
     <span class="token comment" spellcheck="true">// getter setter  tostring</span>
<span class="token punctuation">}</span></code></pre>
<p>SpringBoot 的配置：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>smallrose<span class="token punctuation">.</span>web<span class="token punctuation">.</span>config<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>smallrose<span class="token punctuation">.</span>web<span class="token punctuation">.</span>app<span class="token punctuation">.</span>model<span class="token punctuation">.</span>User<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"user"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> User <span class="token function">initUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        User u <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        u<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        u<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span><span class="token string">"zhangxiaocai.cn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        u<span class="token punctuation">.</span><span class="token function">setNote</span><span class="token punctuation">(</span><span class="token string">"小菜"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> u<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p><code>@Configuration</code> ：表示一个Java配置文件，类似Spring的xml配置文件。Spring的容器会根据它来生成IoC容器去装配Bean；</p>
<p><code>@Bean</code>：表示将 <code>initeUser()</code> 方法返回的POJO装配到IoC容器中，它的属性name 定义这个Bean的名称，如果没有配置name属性，则将方法名称<code>“initUser”</code>作为Bean的名称保存到Srping IoC 容器中。</p>
<p>然后就可以使用<code>AnnotationConfigApplicationContext</code>来构建自己的IoC容器：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>smallrose<span class="token punctuation">.</span>web<span class="token punctuation">.</span>config<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>LoggerFactory<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationContext<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>AnnotationConfigApplicationContext<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>smallrose<span class="token punctuation">.</span>web<span class="token punctuation">.</span>app<span class="token punctuation">.</span>model<span class="token punctuation">.</span>User<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IoCTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> Logger log <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>IoCTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ApplicationContext ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>AppConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        User user <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>输出结果：</p>
<pre class=" language-txt"><code class="language-txt">15:06:34.640 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean 'appConfig'
15:06:34.656 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean 'user'
15:06:34.792 [main] DEBUG org.springframework.core.env.PropertySourcesPropertyResolver - Found key 'spring.liveBeansView.mbeanDomain' in PropertySource 'systemProperties' with value of type String
User [id=123, userName=zhangxiaocai.cn, note=小菜]
</code></pre>
<h2 id="二、Bean-的装配"><a href="#二、Bean-的装配" class="headerlink" title="二、Bean 的装配"></a>二、Bean 的装配</h2><p>Spring 允许通过XML或Java配置文件装配Bean，但 SpringBoot 是基于注解的方式。</p>
<h3 id="1、扫描装配Bean"><a href="#1、扫描装配Bean" class="headerlink" title="1、扫描装配Bean"></a>1、扫描装配Bean</h3><p>前面的例子是使用注解<code>@Bean</code> 注入到SpringIoC 容器，实际项目中，肯定会有很多个Bean，每个都这么写，岂不是要累死人。</p>
<p>Spring 还允许进行扫描装配Bean 到 IoC 容器，对于扫描装配而言使用的注解是<code>@Component</code>和<code>@ComponentScan</code>。</p>
<p><code>@Component</code> ：用来标明哪个类被扫描进入<code>Spring IoC</code> 容器。</p>
<p><code>@ComponentScan</code> ：用来标明采用何种策略去扫描装配Bean。</p>
<p>实例：</p>
<p>在刚才的 <code>config</code>目录下建一个POJO 如，可以将刚才的<code>User</code>移过来，为了区分我新建一个类：<code>Employee</code> ：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>smallrose<span class="token punctuation">.</span>web<span class="token punctuation">.</span>config<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Value<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"emp"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"zhangxiaocai.cn"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> String empName<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"note_xiaocai"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> String empNote<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//getter setter tostring</span>
<span class="token punctuation">}</span></code></pre>
<p>使用<code>@Component</code> 注解表示该类将会被<code>Spring IoC</code>容器扫描装备，其中<code>“emp”</code>表示作为Bean的名称，也可以不配置这个名称字符串，IoC 容器会把类名第一个字母作为小写其他不变作为Bean的名称放入到IoC容器中；</p>
<p><code>@Value</code> 注解在学习YML语法的时候遇到过，是用来绑定属性注入参数，也可以直接赋值。</p>
<p>修改<code>AppConfig</code>类：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>smallrose<span class="token punctuation">.</span>web<span class="token punctuation">.</span>config<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ComponentScan<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@ComponentScan</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span></code></pre>
<p>这里添加了<code>@ComponentScan</code> 注解，它会进行扫描，默认情况下它只会扫描所在注解类<code>AppConfig</code>所在的当前包和其子包。为什么要把<code>Employee</code>建在<code>config</code> 目录下就是这个原因。</p>
<p>运行测试类：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>smallrose<span class="token punctuation">.</span>web<span class="token punctuation">.</span>config<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>LoggerFactory<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationContext<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>AnnotationConfigApplicationContext<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>smallrose<span class="token punctuation">.</span>web<span class="token punctuation">.</span>app<span class="token punctuation">.</span>model<span class="token punctuation">.</span>User<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IoCTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> Logger log <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>IoCTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ApplicationContext ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>AppConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Employee emp <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>Employee<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>运行结果：</p>
<pre class=" language-txt"><code class="language-txt">16:07:46.227 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean 'appConfig'
16:07:46.238 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean 'emp'
Employee [id=123, empName=zhangxiaocai.cn, empNote=note_xiaocai]</code></pre>
<p>找到注解类<code>ComponentScan</code>源码：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Repeatable</span><span class="token punctuation">(</span>ComponentScans<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//在一个类中可重复定义</span>
<span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">ComponentScan</span> <span class="token punctuation">{</span>
     <span class="token comment" spellcheck="true">//** 定义扫描的包</span>
    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span><span class="token string">"basePackages"</span><span class="token punctuation">)</span>
    String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
     <span class="token comment" spellcheck="true">//** 定义扫描的包</span>
    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span>
    String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">basePackages</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
     <span class="token comment" spellcheck="true">//** 定义扫描的类</span>
    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">basePackageClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
     <span class="token comment" spellcheck="true">// Bean name 生成器</span>
    Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">BeanNameGenerator</span><span class="token operator">></span> <span class="token function">nameGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> BeanNameGenerator<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>

     <span class="token comment" spellcheck="true">// 作用域解析器</span>
    Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">ScopeMetadataResolver</span><span class="token operator">></span> <span class="token function">scopeResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> AnnotationScopeMetadataResolver<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
     <span class="token comment" spellcheck="true">// 作用域代理模式</span>
    ScopedProxyMode <span class="token function">scopedProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> ScopedProxyMode<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">;</span>

     <span class="token comment" spellcheck="true">// 资源匹配模式</span>
    String <span class="token function">resourcePattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> ClassPathScanningCandidateComponentProvider<span class="token punctuation">.</span>DEFAULT_RESOURCE_PATTERN<span class="token punctuation">;</span>
     <span class="token comment" spellcheck="true">//是否启用默认的过滤器</span>
    <span class="token keyword">boolean</span> <span class="token function">useDefaultFilters</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
     <span class="token comment" spellcheck="true">//** 当满足过滤条件时扫描</span>
    Filter<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">includeFilters</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//** 当不满足过滤条件时扫描</span>
    Filter<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">excludeFilters</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// ** 是否启用延迟加载</span>
    <span class="token keyword">boolean</span> <span class="token function">lazyInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//定义过滤器</span>
    <span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    @<span class="token keyword">interface</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>
         <span class="token comment" spellcheck="true">// 过滤器类型，可以按注解类型或者正则表达式等过滤</span>
        FilterType <span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> FilterType<span class="token punctuation">.</span>ANNOTATION<span class="token punctuation">;</span>
         <span class="token comment" spellcheck="true">// 定义过滤的类</span>
        <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span><span class="token string">"classes"</span><span class="token punctuation">)</span>
        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
         <span class="token comment" spellcheck="true">// 定义过滤的类</span>
        <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span>
        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">classes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
           <span class="token comment" spellcheck="true">// 匹配方式</span>
        String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">pattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>带<code>“**”</code>的是最常用的配置项。</p>
<p><code>basePackages</code>： 定义扫描的包名，没有定义时只会扫描当前包和子包下的路径；</p>
<p><code>basePackagesClasses</code>：定义扫描的类；</p>
<p><code>includeFilters</code>：定义满足过滤器（Filter）条件的 <code>Bean</code>才去扫描</p>
<p><code>excludeFilters</code>：排除过滤器（Filter）条件的 <code>Bean</code>才去扫描，二者都需要通过一个<code>@Filter</code>去定义，它有一个type类型，这里可以定义为注解或者正则等类型。<code>classes</code>定义注解类，<code>pattern</code>定义正则式类。</p>
<p>按照前面的实例，<code>User</code>类不在<code>config</code>目录，可以将<code>AppConfig</code>中的注解修改为：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"com.smallrose.web.app.*"</span><span class="token punctuation">)</span></code></pre>
<p>或者</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"com.smallrose.web.app.model"</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<p>或者</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackageClass<span class="token operator">=</span><span class="token punctuation">{</span>User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<p>三种方式都可以使<code>IoC</code> 容器去扫描<code>User</code> 类，而包名可以采用正则式去匹配。</p>
<p>但有些时候需求是扫描一些包，将一些Bean 装配到SpringIoC 容器中，而不想加载这个包里的某些Bean。比如在包<code>com.smallrose.web.app</code> 下可能有<code>service</code>包，在<code>service</code>包下有个<code>UserService</code>类，一般使用<code>@Service</code> 注解标注（该标注注入了<code>@Component</code>，在默认情况下会被Spring 扫描装配到 <code>IoC</code>容器），类如下：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>smallrose<span class="token punctuation">.</span>web<span class="token punctuation">.</span>app<span class="token punctuation">.</span>service<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>smallrose<span class="token punctuation">.</span>web<span class="token punctuation">.</span>app<span class="token punctuation">.</span>model<span class="token punctuation">.</span>User<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>如果正常启动，那么这个类是会被扫描到<code>Spring IoC</code> 容器中。假设不想装配这个类呢？</p>
<p>则需要把<code>AppConfig</code> 扫描策略修改为：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">"com.smallrose.web.app.*"</span><span class="token punctuation">,</span>
    excludeFilters <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token punctuation">{</span>Service<span class="token punctuation">.</span> <span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<p>记得把<code>User</code>类添加<code>@Component</code>注解：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>smallrose<span class="token punctuation">.</span>web<span class="token punctuation">.</span>app<span class="token punctuation">.</span>model<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> String id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String userName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String note<span class="token punctuation">;</span>
     <span class="token comment" spellcheck="true">// getter setter toString</span>

<span class="token punctuation">}</span></code></pre>
<p>运行测试类：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>smallrose<span class="token punctuation">.</span>web<span class="token punctuation">.</span>config<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>LoggerFactory<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationContext<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>AnnotationConfigApplicationContext<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>smallrose<span class="token punctuation">.</span>web<span class="token punctuation">.</span>app<span class="token punctuation">.</span>model<span class="token punctuation">.</span>User<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>smallrose<span class="token punctuation">.</span>web<span class="token punctuation">.</span>app<span class="token punctuation">.</span>service<span class="token punctuation">.</span>UserService<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IoCTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> Logger log <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>IoCTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ApplicationContext ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>AppConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        User user <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>

        UserService userservice <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>UserService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" userservice "</span><span class="token operator">+</span> userservice<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>运行结果：</p>
<pre class=" language-txt"><code class="language-txt">17:18:43.019 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean 'appConfig'
17:18:43.030 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean 'user'
User [id=null, userName=null, note=null]
Exception in thread "main" org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'com.smallrose.web.app.service.UserService' available
    at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:352)
    at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:343)
    at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1127)
    at com.smallrose.web.config.IoCTest.main(IoCTest.java:20)</code></pre>
<p>可以看到<code>User</code>类已经装配了，只是属性默认<code>null</code>值，而<code>UserService</code>则提示没有定义这个<code>Bean</code>，说明<code>UserService</code> 类根本没有进行装配。在加入了<code>excludeFilters</code>的配置，使标注了<code>@Service</code>的类将不被<code>IoC</code>容器扫描注入，这样就可以把<code>UserService</code> 类排除出 <code>Spring IoC</code>中了。</p>
<p>在<code>@SpringBootApplication</code>注解中也注入了<code>@ComponentScan</code>，源码：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Inherited</span>
<span class="token annotation punctuation">@SpringBootConfiguration</span>
<span class="token annotation punctuation">@EnableAutoConfiguration</span>
<span class="token comment" spellcheck="true">//自定义排除扫描类</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>excludeFilters <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> FilterType<span class="token punctuation">.</span>CUSTOM<span class="token punctuation">,</span> classes <span class="token operator">=</span> TypeExcludeFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> FilterType<span class="token punctuation">.</span>CUSTOM<span class="token punctuation">,</span> classes <span class="token operator">=</span> AutoConfigurationExcludeFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">SpringBootApplication</span> <span class="token punctuation">{</span>
     <span class="token comment" spellcheck="true">// 通过类型排除自动类型类</span>
    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span>annotation <span class="token operator">=</span> EnableAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">exclude</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
     <span class="token comment" spellcheck="true">// 通过名称排除自动类型类</span>
    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span>annotation <span class="token operator">=</span> EnableAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">excludeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
     <span class="token comment" spellcheck="true">// 定义扫描包</span>
    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span>annotation <span class="token operator">=</span> ComponentScan<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> attribute <span class="token operator">=</span> <span class="token string">"basePackages"</span><span class="token punctuation">)</span>
    String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">scanBasePackages</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

     <span class="token comment" spellcheck="true">// 定义被扫描的类</span>
    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span>annotation <span class="token operator">=</span> ComponentScan<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> attribute <span class="token operator">=</span> <span class="token string">"basePackageClasses"</span><span class="token punctuation">)</span>
    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">scanBasePackageClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// Bean 的名称生成器</span>
    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span>annotation <span class="token operator">=</span> ComponentScan<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> attribute <span class="token operator">=</span> <span class="token string">"nameGenerator"</span><span class="token punctuation">)</span>
    Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">BeanNameGenerator</span><span class="token operator">></span> <span class="token function">nameGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> BeanNameGenerator<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//是否生成代理bean方法</span>
    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span>annotation <span class="token operator">=</span> Configuration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">boolean</span> <span class="token function">proxyBeanMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p><code>exclude</code> 和 <code>excludeName</code> 两个方法是对于其内部的自动配置类才会生效。如果要自己排除其他类，可以加入<code>@ComponentScan</code>达到目录，如上面的扫描<code>User</code>而不扫描<code>UserService</code>可以修改启动配置文件：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">"com.smallrose.web.app.*"</span><span class="token punctuation">,</span>
    excludeFilters <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token punctuation">{</span>Service<span class="token punctuation">.</span> <span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringiocApplication</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringiocApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span></code></pre>
<h3 id="2、自定义第三方Bean"><a href="#2、自定义第三方Bean" class="headerlink" title="2、自定义第三方Bean"></a>2、自定义第三方Bean</h3><p>有时候需要引入第三方的<code>Bean</code>，比如<code>DataSource</code>，使用<code>@Bean</code>注解即可。</p>
<p>示例：</p>
<p>引入DBCP数据源</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupid</span><span class="token punctuation">></span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupid</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactid</span><span class="token punctuation">></span></span>commons-dbcp2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactid</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupid</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupid</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactid</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactid</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>
<p>然后在<code>AppConfig.java</code> 中添加到IoC容器即可：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"dataSource"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> DateSource <span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    Properties props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    props<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"driver"</span><span class="token punctuation">,</span><span class="token string">"com.mysql.jdbc,Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    props<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">,</span><span class="token string">"jdbc:mysql://localhost:3306/test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    props<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    props<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    DateSource dataSource <span class="token operator">=</span> null<span class="token punctuation">;</span>
    <span class="token keyword">try</span><span class="token punctuation">{</span>
        dataSource <span class="token operator">=</span> BasicDataSourceFactory<span class="token punctuation">.</span><span class="token function">creatDataSource</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> dataSource<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h2 id="三、依赖注入"><a href="#三、依赖注入" class="headerlink" title="三、依赖注入"></a>三、依赖注入</h2><h3 id="1、-Autowired-注解"><a href="#1、-Autowired-注解" class="headerlink" title="1、@Autowired 注解"></a>1、@Autowired 注解</h3><p>Spring 中常用注解之一。注入机制最基本的一条是根据属性的类型（by type）找到对应的<code>Bean</code> 进行注入。在Ioc的顶级接口<code>BeanFactory</code> 中就有<code>getBean()</code> 方法获取对应的<code>Bean</code> ,<code>getBean()</code> 支持根据类型或根据名称获取方式。</p>
<p>比较常见的就不举例了。在常见的操作里，一个接口一个实现类，实现类使用<code>@Service</code> 标注，然后使用接口注入的方式进行使用。</p>
<p>这里举个不一样的例子，模拟调用支付的，请求只调用支付接口，接口分布被用微信支付和支付宝支付实现。</p>
<p>接口：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>smallrose<span class="token punctuation">.</span>web<span class="token punctuation">.</span>app<span class="token punctuation">.</span>service<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PayServiceI</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>微信支付实现类：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>smallrose<span class="token punctuation">.</span>web<span class="token punctuation">.</span>app<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>smallrose<span class="token punctuation">.</span>web<span class="token punctuation">.</span>app<span class="token punctuation">.</span>service<span class="token punctuation">.</span>PayServiceI<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WxPayImpl</span> <span class="token keyword">implements</span> <span class="token class-name">PayServiceI</span><span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用微信支付...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>支付宝支付实现类：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>smallrose<span class="token punctuation">.</span>web<span class="token punctuation">.</span>app<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>smallrose<span class="token punctuation">.</span>web<span class="token punctuation">.</span>app<span class="token punctuation">.</span>service<span class="token punctuation">.</span>PayServiceI<span class="token punctuation">;</span>
<span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AliPayImpl</span> <span class="token keyword">implements</span> <span class="token class-name">PayServiceI</span><span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用支付宝支付...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span></code></pre>
<p>在controller 中注入调用：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>smallrose<span class="token punctuation">.</span>web<span class="token punctuation">.</span>app<span class="token punctuation">.</span>controller<span class="token punctuation">;</span>

<span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Controller<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>smallrose<span class="token punctuation">.</span>web<span class="token punctuation">.</span>app<span class="token punctuation">.</span>service<span class="token punctuation">.</span>PayServiceI<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PayController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> PayServiceI payservice <span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/pay"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">toPay</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span><span class="token punctuation">{</span>
        payservice<span class="token punctuation">.</span><span class="token function">pay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>在示例中可以看到，输入值是一个支付操作，但是却有两种支付方式，<code>SpringIoC</code> 注入怎么办呢？启动程序发现会有以下错误信息：</p>
<pre class=" language-txt"><code class="language-txt">Description:

Field payservice in com.smallrose.web.app.controller.PayController required a single bean, but 2 were found:
    - aliPayImpl: defined in file [D:\dev-toos\sts-bundle\stsWork\SpringBootLearn\target\classes\com\smallrose\web\app\service\impl\AliPayImpl.class]
    - wxPayImpl: defined in file [D:\dev-toos\sts-bundle\stsWork\SpringBootLearn\target\classes\com\smallrose\web\app\service\impl\WxPayImpl.class]</code></pre>
<p>程序注入需要一个Bean 但是现在发现了两个匹配的Bean，所以就不知道到底使用哪一个了，怎么办呢？</p>
<p>将属性名称改成对应的实现类名称</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>smallrose<span class="token punctuation">.</span>web<span class="token punctuation">.</span>app<span class="token punctuation">.</span>controller<span class="token punctuation">;</span>

<span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Controller<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>smallrose<span class="token punctuation">.</span>web<span class="token punctuation">.</span>app<span class="token punctuation">.</span>service<span class="token punctuation">.</span>PayServiceI<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PayController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> PayServiceI wxPayImpl <span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/pay"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">toPay</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span><span class="token punctuation">{</span>
        wxPayImpl<span class="token punctuation">.</span><span class="token function">pay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>将属性名称从 payservice 改成 wxPayImp 为什么可以？</p>
<p><strong>因为<code>@Autowired</code> 首先根据类型找对应的Bean，如果对应的类型的Bean 不是唯一的，那么会根据其属性名称和Bean 的名称进行匹配。如果匹配得上就会使用该Bean，如果还无法匹配，就会抛出异常。</strong></p>
<p>注意，<code>@Autowired</code> 是一个默认必须找到对应Bean的注解，如果不能确定其标注属性一定会存在并且允许这个被标注的属性为<code>null</code>，那么可以配置<code>@Autowired</code> 的属性<code>required</code> 为<code>false</code>。</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token punctuation">(</span>required<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">)</span></code></pre>
<p>另外，<code>@Autowired</code>除了可以标注属性外，还可以标注方法，如setPayservice方法：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPayservice</span><span class="token punctuation">(</span>Payservice payservice<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>payservice <span class="token operator">=</span> payservice<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="2、消除歧义"><a href="#2、消除歧义" class="headerlink" title="2、消除歧义"></a>2、消除歧义</h3><p>在上面，支付方式有两种的时候，为了使<code>@Autowired</code> 能继续使用，将属性名称 payservice 改成 wxPayImp 。</p>
<p>产生注入失败的问题根本是按类型查找时，发现了多个匹配Bean，造成IoC 容器注入的困扰，这个问题成为歧义性问题。</p>
<p>如果不修改属性名称，消除歧义的办法有哪些呢？</p>
<p>（1）使用 <code>@Primary</code> 注解，它是一个修改优先权的注解。当有微信支付和支付宝支付的时候，假设这个是使用微信支付，那么只需要在微信支付的类上加入 <code>@Primary</code> 注解即可。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>smallrose<span class="token punctuation">.</span>web<span class="token punctuation">.</span>app<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Primary<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>smallrose<span class="token punctuation">.</span>web<span class="token punctuation">.</span>app<span class="token punctuation">.</span>service<span class="token punctuation">.</span>PayServiceI<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Service</span>
<span class="token annotation punctuation">@Primary</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WxPayImpl</span> <span class="token keyword">implements</span> <span class="token class-name">PayServiceI</span><span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用微信支付...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p> <code>@Primary</code> 注解会告诉spring IoC 容器，放发现多个相同类型的Bean 时，请优先使用我进行注入。</p>
<p>这样通过优先级变换使得IoC 容器知道那个具体的实例满足依赖注入。</p>
<p>但是， <code>@Primary</code> 注解可以使用在多个类上，微信支付和支付宝支付都添加了该注解，那么IoC容器还是无法区分采用哪个Bean的实例进行注入。那么可以使用<code>@Quelifier</code>注解来灵活实现注入。它将和<code>@Autowired</code>注解 组合在一起，通过类型和名称一起找到Bean。<strong>因为Bean名称在Spring IoC容器中是唯一标识。</strong>这样就可以消除歧义性。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>smallrose<span class="token punctuation">.</span>web<span class="token punctuation">.</span>app<span class="token punctuation">.</span>controller<span class="token punctuation">;</span>

<span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Qualifier<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Controller<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>smallrose<span class="token punctuation">.</span>web<span class="token punctuation">.</span>app<span class="token punctuation">.</span>service<span class="token punctuation">.</span>PayServiceI<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PayController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"wxPayImpl"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> PayServiceI payService <span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/pay"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">toPay</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span><span class="token punctuation">{</span>
        payService<span class="token punctuation">.</span><span class="token function">pay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="3、带参数的构造方法类装配"><a href="#3、带参数的构造方法类装配" class="headerlink" title="3、带参数的构造方法类装配"></a>3、带参数的构造方法类装配</h3><p>上面都是不带参数的构造方法下实现的依赖注入。但有时候有些累只有带参数的构造方法，可以使用<code>@Autowired</code></p>
<p> 注解对构造方法的参数进行注入。</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonBean</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> PayServiceI payService <span class="token punctuation">;</span> 

    <span class="token keyword">public</span> <span class="token function">PersonBean</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Autowired</span> <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"wxPayImpl"</span><span class="token punctuation">)</span> PayServiceI payService<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>payService<span class="token operator">=</span>payService<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h2 id="四、生命周期"><a href="#四、生命周期" class="headerlink" title="四、生命周期"></a>四、生命周期</h2><p> IoC 容器装配和销毁Bean的过程，即Bean 的生命周期过程，大致分为Bean定义、Bean的初始化、Bean的生存期、Bean的销毁4个部分。</p>
<p><strong>Bean定义过程：</strong></p>
<p>（1）<code>Spring</code> 通过我们的配置，如<code>@ComponentScan</code>定义的扫描路径去找到带有<code>@Component</code>的类，这个过程就是资源定位的过程。</p>
<p>（2）找到资源之后，就开始解析，并且将定义的信息保存起来（保存到BeanDefinition的实例中）。（注意，此时没有初始化Bean，也没有Bean实例）</p>
<p>（3）接着会把<code>Bean 定义</code>发布到<code>Spring IoC</code>容器中。（注意，此时也只有Bean定义，没有初始化Bean，没有Bean实例）</p>
<p>完成3步只是资源定位并将Bean的定义发布到 <code>IoC</code> 容器的过程，还没有<code>Bean</code> 实例的生成，更没有完成依赖注入。</p>
<p>在默认情况下，Spring 会继续去完成Bean 的实例化和依赖注入，这样从 <code>IoC</code>容器中就可以得到一个依赖注入完成的Bean。</p>
<p>Spring Bean 的初始化流程：</p>
<pre class=" language-txt"><code class="language-txt">资源定位       ——>       Bean定义          ——>     发布Bean定义    ——>    实例化   ——>  依赖注入（DI）
@ComponentScan    保存到BeanDefinition的实例     IoC容器装载Bean定义    创建Bean实例    @Autowired注入</code></pre>
<p><code>ComponentScan</code> 中还有一个配置项 lazyInit，只可以配置 Boolean 值，且默认值为 false ，也就是 默认不进行延迟初始化，因此在默认的情况下 Spring 会对 Bean 进行实例化和依赖注入对应的属性值。    </p>
<p>使用的话在配置类 AppConfig 的<code>＠ComponentScan</code> 中加入 lazylnit 配置，如下面的代码： </p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">"com.smallrose.web.app.*"</span><span class="token punctuation">,</span> lazyinit <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    </code></pre>
<p>这样<code>IoC</code>容器不会在发布Bean定义后马上完成实例化和依赖注入，而是在使用Bean的时候进行实例化和依赖注入。</p>
<p>/medias/loading-animated.gif" data-original="<img src="" alt="Spring Bean 的生命周期"></p>
<p>（1）这些接口和方法，在没有注释说明的情况下的流程节点都是针对单个Bean，但是<code>BeanPostProcessor</code>是针对所有Bean。</p>
<p>（2）即使定义了<code>ApplicationContextAware</code> 接口，有时并不会调用，这要根据<code>IoC</code>容器来决定。<code>Spring IoC</code>容器的最低要求是实现<code>BeanFactory</code>接口，而不是实现<code>ApplicationContext</code> 接口。对于没有实现<code>ApplicationContextAware</code> 接口的容器，在生命周期对于的<code>ApplicationContextAware</code> 定义的方法也是不会被调用的，只有实现了<code>ApplicationContext</code> 接口的容器，才好在生命周期调用<code>ApplicationContextAware</code> 所定义的<code>setApplicationContext</code>方法。</p>
<h2 id="五、条件装配Bean"><a href="#五、条件装配Bean" class="headerlink" title="五、条件装配Bean"></a>五、条件装配Bean</h2><p>有时因为某些客观因素会使一些Bean无法进行初始化，如数据库连接池的配置中漏掉了一下配置会造成数据源不能连接上，这时<code>IoC</code>容器如果还进行数据源装配，系统将会抛出异常，导致应用无法继续，这时希望<code>IoC</code>容器不去装配数据源。</p>
<p>为了处理这种场景，Spring 提供了 <code>@Conditional</code>注解来实现，同时它需要配合另外一个<code>Condition</code>接口来完成对应的功能。(<code>org.springframework .context.annotation.Condition</code>)</p>
<p>如之前配置数据源：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>smallrose<span class="token punctuation">.</span>web<span class="token punctuation">.</span>config<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span>

<span class="token keyword">import</span> javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DataSource<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>dbcp2<span class="token punctuation">.</span>BasicDataSourceFactory<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Value<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Conditional<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>smallrose<span class="token punctuation">.</span>web<span class="token punctuation">.</span>condition<span class="token punctuation">.</span>DatabaseConditional<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"dataSource"</span><span class="token punctuation">,</span>destroyMethod<span class="token operator">=</span><span class="token string">"close"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Conditional</span><span class="token punctuation">(</span>DatabaseConditional<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> DataSource <span class="token function">getDataSource</span><span class="token punctuation">(</span>
            <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${database.driverName}"</span><span class="token punctuation">)</span> String driver<span class="token punctuation">,</span>
            <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${database. url}"</span><span class="token punctuation">)</span>  String url <span class="token punctuation">,</span>
            <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${database.username}"</span><span class="token punctuation">)</span> String username <span class="token punctuation">,</span>
            <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${database. password }"</span><span class="token punctuation">)</span> String password
            <span class="token punctuation">)</span><span class="token punctuation">{</span>
        Properties props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        props<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"driver"</span><span class="token punctuation">,</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span>
        props<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">,</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
        props<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>
        props<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>
        DataSource dataSource <span class="token operator">=</span> null<span class="token punctuation">;</span>
        <span class="token keyword">try</span><span class="token punctuation">{</span>
            dataSource <span class="token operator">=</span> BasicDataSourceFactory<span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> dataSource<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>添加<code>@Conditional</code>注解，并且配置类<code>DatabaseConditional</code>，这个类必须现实<code>Condition</code>接口。对于<code>Condition</code>接口则要求实现<code>matches</code>方法：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>smallrose<span class="token punctuation">.</span>web<span class="token punctuation">.</span>condition<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Condition<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ConditionContext<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>env<span class="token punctuation">.</span>Environment<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>type<span class="token punctuation">.</span>AnnotatedTypeMetadata<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DatabaseConditional</span> <span class="token keyword">implements</span> <span class="token class-name">Condition</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/**
     * 数据库装配条件
     * @param context 条件上下文
     * @param metadata 注释类型的元数据
     * @return true 装配 Bean ，否则不装配
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span>ConditionContext context<span class="token punctuation">,</span> AnnotatedTypeMetadata metadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//取出环境配置</span>
        Environment evn <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 判断属性文件是否存在对应的数据库配置</span>
        <span class="token keyword">return</span> evn<span class="token punctuation">.</span><span class="token function">containsProperty</span><span class="token punctuation">(</span><span class="token string">"database.driverName"</span><span class="token punctuation">)</span> 
                <span class="token operator">&amp;&amp;</span> evn<span class="token punctuation">.</span><span class="token function">containsProperty</span><span class="token punctuation">(</span><span class="token string">"database.url"</span><span class="token punctuation">)</span> 
                <span class="token operator">&amp;&amp;</span> evn<span class="token punctuation">.</span><span class="token function">containsProperty</span><span class="token punctuation">(</span><span class="token string">"database.userName"</span><span class="token punctuation">)</span>
                <span class="token operator">&amp;&amp;</span> evn<span class="token punctuation">.</span><span class="token function">containsProperty</span><span class="token punctuation">(</span><span class="token string">"database.password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>matches 方法首先读取其上下文环境 ， 然后判定是否已经配置了对应的数据库信息。这样，当这 些都己经配置好后则返回 true。这个时候 Spring 会装配数据库连接池的 Bean ，否则是不装配的。    </p>
<h2 id="六、Bean的作用域"><a href="#六、Bean的作用域" class="headerlink" title="六、Bean的作用域"></a>六、Bean的作用域</h2><p>在<code>BeanFactory</code>接口中，有<code>isSingleton</code> 和 <code>isPrototype</code> 两个方法。其中， <code>isSingleton</code> 方法如果返回 <code>true</code> ，则 Bean 在 loC 容器中以单例存在，这也是 <code>Spring IoC</code>容器的默认值 ；如果 <code>isPrototype</code> 方法返回 <code>true</code>，则 当我们每次获取 Bean 的时候， <code>IoC</code> 容器都会创建一个新的 Bean，这显然存在很大的不同，这便是 Spring Bean 的作用域的问题。 </p>
<p>在一般容器中，Bean 都会存在单例（Singleton）和原型（Prototype）两种作用域。而Web 容器，则存在页面（page）、请求（ request ）、会话 （ session ）和应用（ Application ）4种作用域。对于页面（Page）是针对JSP当前页面而言，spring 无法支持。</p>
<p>Bean的作用域</p>
<table>
<thead>
<tr>
<th>作用域类型</th>
<th>使用范围</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><strong>singleton</strong></td>
<td>所有spring应用</td>
<td>默认值，IoC容器值存在单例</td>
</tr>
<tr>
<td><strong>prototype</strong></td>
<td>所有spring应用</td>
<td>每当从IoC容器取出一个Bean，就会创建一个新的 Bean</td>
</tr>
<tr>
<td><strong>session</strong></td>
<td>spring web应用</td>
<td>HTTP会话</td>
</tr>
<tr>
<td><strong>application</strong></td>
<td>spring web应用</td>
<td>Web 工程生命周期</td>
</tr>
<tr>
<td>request</td>
<td>spring web应用</td>
<td>Web 工程单词请求（request）</td>
</tr>
<tr>
<td>globalSession</td>
<td>spring web应用</td>
<td>在一个全局的HTTP Session，一个Bean定义对应一个示例。<br/>实践中基本不使用</td>
</tr>
</tbody></table>
<p>常用的是加粗的4种，对于application 作用域，完全可以使用单例来代替。</p>
<p><strong>单例 （ Singleton）和原型（ p刚otype ）的区别</strong></p>
<p>不进行任何配置默认就是单例。单例就是每次获取的Bean实例都他相同的一个Bean。</p>
<p>如果要进行原型配置，则在需要配置的Bean上添加作用域注解<code>@Scope</code></p>
<pre><code>@Scope(ConfiguarebleBeanFactory.SCOPE_PROTOTYPE)</code></pre><p>示例：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>smallrose<span class="token punctuation">.</span>web<span class="token punctuation">.</span>config<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>config<span class="token punctuation">.</span>ConfigurableBeanFactory<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Scope<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span>ConfigurableBeanFactory<span class="token punctuation">.</span>SCOPE_PROTOTYPE<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanTest</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span></code></pre>
<p>测试：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>smallrose<span class="token punctuation">.</span>web<span class="token punctuation">.</span>test<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>LoggerFactory<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>AnnotationConfigApplicationContext<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>smallrose<span class="token punctuation">.</span>web<span class="token punctuation">.</span>config<span class="token punctuation">.</span>AppConfig<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>smallrose<span class="token punctuation">.</span>web<span class="token punctuation">.</span>config<span class="token punctuation">.</span>BeanTest<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IoCTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> Logger log <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>IoCTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        AnnotationConfigApplicationContext ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>AppConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        BeanTest bean1 <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>BeanTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        BeanTest bean2 <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>BeanTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bean1<span class="token operator">==</span>bean2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>测试结果：false</p>
<p>注释掉<code>@Scope</code> 结果为 true 。</p>
<p>ConfigurableBeanFactory 只能提供 单 例 （ SCOPE_SINGLETON ）和 原 型 （ SCOPE_ PROTOTYPE ） 两种作用域供选择 ， 如果是在 SpringMVC 环境中，还可以使用 WebApp l icationContext 去定 义其他作用域 ， 如请求（ SCOPE REQUEST ）、 会话 （ SCOPE_SESSION ） 和应用 （ SCOPE APPLICATION ） 。     </p>
<p>如：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>smallrose<span class="token punctuation">.</span>web<span class="token punctuation">.</span>config<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>config<span class="token punctuation">.</span>ConfigurableBeanFactory<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Scope<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span>WebApplicationContxt<span class="token punctuation">.</span>SCOPE_REQUEST<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanTest</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span></code></pre>
<p>这样同一个请求范围内去获取这个Bean的时候，只会共用同一个Bean，第二次请求就会产生新的Bean。</p>
<h2 id="七、使用-Profile"><a href="#七、使用-Profile" class="headerlink" title="七、使用 @Profile"></a>七、使用 @Profile</h2><p>实际开发中，常常是多环境切换。每套环境可能一些上下文配置不一样、数据库连接不一样等。Spring 提供了 Profile 机制，可以在不同环境之间切换。</p>
<p>复习一下配置文件的方式的话之间使用以下格式：</p>
<p><code>application-{profile}.properties</code> 或<code>application-{profile}.yml</code></p>
<p>然后在 <code>application.properties</code> 或<code>application.yml</code> 中激活Profile使用机制：</p>
<p>如：</p>
<pre><code>spring.profiles.active=dev</code></pre><p>这里主要学习的是注解方式。</p>
<p>在 Spring 中存在两个 参数可以提供给配置，以修改启动 Profile 机制， 一个是<code>spring.profiles.active</code> ， 另一个是 <code>spring profiles.default</code> 。在这两个属性都没有配置的情况下 ， Spring 将不会启 动 Profile 机制，这就意味着被<code>＠Profile</code> 标注的 Bean 将不会被 Spring 装配到 <code>IoC</code> 容器中 。 Spring是先判定是否存在<code>spring.profiles.active</code>配置后再去查找 <code>spring profiles.default</code> 配置的，所以<code>spring.profiles.active</code>的优先级要大于 <code>spring profiles.default</code> 。</p>
<p>在Java 启动项目时，如果不在配置文件激活也可以使用以下配置也可以启动Profile 机制：</p>
<pre><code>JAVA_OPTS=&quot;-Dspring.profiles.active=dev&quot;</code></pre><p>如果在全局配置文件和profile配置文件有相同配置，根据Spring Boot规则，如果配置了profile激活，那么<code>application- {profile} . properties</code> 文件去代替原来默认的 <code>app lication.properties</code> 文件，相同属性会覆盖，不同属性则合并。</p>
<p>比如开发环境，对日志打印使用较多，但生产环境较少。</p>
<h2 id="八、XML引入Bean"><a href="#八、XML引入Bean" class="headerlink" title="八、XML引入Bean"></a>八、XML引入Bean</h2><p>SpringBoot 建议使用注解和扫描配置Bean，但同样支持XML配置Bean。</p>
<p>在SpringBoot 中使用XML 对Bean 进行配置，需要使用<code>@ImportResource</code>注解引入对应的 XML 文件，用以价值Bean。 有些框架（如Dubbo等）是基于Spring XML 方式开发，这时就需要引入XML 方式来实现配置。</p>
<p>比如有个想加载的Bean，即使是个普通的POJO也行，然后建个<code>spring-other.xml</code>文件，接着配置Bean。</p>
<p>在java 配置文件中直接载入：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>smallrose<span class="token punctuation">.</span>web<span class="token punctuation">.</span>config<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ComponentScan<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ImportResource<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"com.smallrose.web.app.*"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ImportResource</span><span class="token punctuation">(</span>value<span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"classpath:spring-other.xml"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>


<span class="token punctuation">}</span></code></pre>
<h2 id="九、Spring-EL"><a href="#九、Spring-EL" class="headerlink" title="九、Spring EL"></a>九、Spring EL</h2><p>为了装配Bean 更加灵活，Spring 提供了表达式语言 Spring EL 。主要作用如下：</p>
<h3 id="（1）读取属性文件"><a href="#（1）读取属性文件" class="headerlink" title="（1）读取属性文件"></a>（1）读取属性文件</h3><p>如：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${database.driverName}"</span><span class="token punctuation">)</span>
String driver <span class="token punctuation">;</span></code></pre>
<p><code>@Value</code> 中的<code>${ }</code> 代表占位符，它会去读上下文的属性值装配到属性中。</p>
<p>更多的属性与JavaBean 绑定参考 <a href="bb845937.html">YAML 语法</a></p>
<h3 id="（2）调用方法"><a href="#（2）调用方法" class="headerlink" title="（2）调用方法"></a>（2）调用方法</h3><p>如记录一个Bean 初始化时间：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"#{T(System).currentTimeMillis()}"</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> Long initTime <span class="token operator">=</span> null <span class="token punctuation">;</span></code></pre>
<p>这里采用 <code>#{ }</code>代表启用 Spring 表达式，它将具有运算的功能 ； <code>T(...)</code>代表的是引入类；</p>
<p>System是<code>java.lang.*</code>包的类，这是Java 默认加载的包，因此可以不写全限定名，如果是其他的包，则需要写出全限定名才能引用类；<code>currentTimeMillis</code> 是它的静态（ static ）方法，也就是我们调用一次<code>System.currentTimeMillis()</code>方法来为这个属性赋值。</p>
<h3 id="（3）给属性直接赋值。"><a href="#（3）给属性直接赋值。" class="headerlink" title="（3）给属性直接赋值。"></a>（3）给属性直接赋值。</h3><p>如：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"#{'使用spring EL 赋值字符串'}"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//字符串赋值</span>
<span class="token keyword">private</span> String str <span class="token operator">=</span> null<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"#{9.3E3}"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//科学计数法赋值</span>
<span class="token keyword">private</span> <span class="token keyword">double</span> d <span class="token punctuation">;</span>

<span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"#{3.14}"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 浮点数赋值</span>
<span class="token keyword">private</span> <span class="token keyword">float</span> pi <span class="token punctuation">;</span></code></pre>
<p>还可以获取其他Spring Bean 的属性来给当前 Bean 属性赋值，如：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"#{beanName.str}"</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> String otherBeanProp <span class="token operator">=</span> null<span class="token punctuation">;</span></code></pre>
<p>注意 ，这里的 beanName 是 Spring IoC 容器 Bean 的名称 。 str 是其属性，代表引用对应的 Bean 的属性给当前属性赋值。如果想把这个属性的字母全部变大写还可以这样：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"#{beanName.str?.toUpperCase()}"</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> String otherBeanProp <span class="token operator">=</span> null <span class="token punctuation">;</span></code></pre>
<p>注意这里的 Spring EL。这里引用由属性后跟着是一个<code>？</code>，这个符号 的含义是判断这个属性是否为空。如果不为空才会去执行 toUppercase 方法，进而把引用到的属性转换为大写，赋予当前属性。</p>
<h3 id="（4）其他运算"><a href="#（4）其他运算" class="headerlink" title="（4）其他运算"></a>（4）其他运算</h3><p>可以使用 Spring EL 进行一定的运算。如：</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//数学运算</span>
<span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"#{1+2}"</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token keyword">int</span> addsum <span class="token punctuation">;</span> 

<span class="token comment" spellcheck="true">//浮点比较运算</span>
<span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"#{beanName.pi == 3.14f}"</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token keyword">int</span> piFlag <span class="token punctuation">;</span> 

<span class="token comment" spellcheck="true">//字符串比较运算</span>
<span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"#{ beanName.str eq 'Spring Boot' }"</span><span class="token punctuation">)</span>
pri<span class="token punctuation">.</span>vate <span class="token keyword">boolean</span> strFlag <span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 字符串连接</span>
<span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"#{beanName.str + ' 连接字符串 '}"</span>）
<span class="token keyword">private</span> String strApp <span class="token operator">=</span> null <span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//＃三元运算</span>
<span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"#{beanName.d > 1000 ？ '大于' ：'小于'}"</span> ）
<span class="token keyword">private</span> String resultDesc <span class="token operator">=</span> null <span class="token punctuation">;</span></code></pre>
<p>Spring EL 能够支持的运算还有很多，其中等值比较如果是数字型的可 以使用<code>==</code>比较符，如果是字符串型的可以使用 <code>eq</code> 比较符。当然 ， Spring EL 的内容远不止这些，只 是其他表达式的使用率没有那么高    </p>
<p>​     </p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>IoC</tag>
      </tags>
  </entry>
  <entry>
    <title>RESTful 接口设计规范</title>
    <url>/posts/eeda118.html</url>
    <content><![CDATA[<h2 id="RESTful-接口设计规范"><a href="#RESTful-接口设计规范" class="headerlink" title="RESTful 接口设计规范"></a>RESTful 接口设计规范</h2><p>相关链接：</p>
<ul>
<li><a href="bad02d94.html">SpringCloud 微服务学习</a></li>
<li><a href="eeda118.html">RESTful 接口设计规范</a></li>
<li><a href="648d6b26.html">SpringCloud Eureka 服务注册与发现</a></li>
<li><a href="3010739f.html">SpringCloud Consul 服务注册与发现</a></li>
<li><a href="7ecbba09.html">SpringCloud Ribbon 客户端负载均衡与服务调用</a></li>
<li><a href="b27245de.html">SpringCloud OpenFeign 服务接口调用</a></li>
<li><a href="464bb413.html">SpringCloud Hystrix熔断器</a></li>
<li><a href="bc16d093.html">SpringCloud Gateway 服务网关</a></li>
<li><a href="fbbe72e1.html">SpringCloud Zuul 服务网关</a></li>
<li><a href="5b5896d1.html">Spring Cloud Config 分布式配置中心</a></li>
<li><a href="9e02a3e8.html">Spring Cloud Bus 消息总线</a></li>
<li><a href="7f3b07b1.html">SpringCloud Stream 消息驱动</a></li>
<li><a href="b99c053f.html">SpringCloud Sleuth 分布式请求链路追踪</a></li>
<li><a href="461589aa.html">SpringCloud Alibaba</a></li>
<li><a href="a46e46f8.html">SpringCloud Alibaba Nacos服务注册和配置中心</a></li>
<li><a href="5122a811.html">SpringCloud Alibaba Sentinel 实现熔断与限流</a></li>
<li><a href="fb7c74c4.html">SpringCloud Alibaba Seata 分布式事务</a></li>
</ul>
<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p>本文学习 RESTful API 设计相关的一些原则和规范。</p>
<p>少量的API在使用时不知不觉，但是当后续API不断增加了，需求变动也会导致API版本的变化。主要是为了可以进行规范化开发，并非是只能使用该规范，其他做法亦可，只是作为前人大佬已经在实践中进行总结整理。学习好的编程设计规范总是便捷有利的。</p>
<h2 id="二、常见规范"><a href="#二、常见规范" class="headerlink" title="二、常见规范"></a>二、常见规范</h2><h3 id="1、协议和域名"><a href="#1、协议和域名" class="headerlink" title="1、协议和域名"></a>1、协议和域名</h3><p>API通讯使用http协议，如果能使用https尽量使用https。</p>
<p>尽量使用独立域名，</p>
<p><a href="https://api.zhangxiaocai.cn" target="_blank" rel="noopener">https://api.zhangxiaocai.cn</a></p>
<p><a href="http://api.zhangxiaocai.cn" target="_blank" rel="noopener">http://api.zhangxiaocai.cn</a></p>
<p>如果不能使用可以以api 打头区分访问</p>
<p><a href="https://zhangxiaocai.cn/api" target="_blank" rel="noopener">https://zhangxiaocai.cn/api</a></p>
<h3 id="2、版本变化"><a href="#2、版本变化" class="headerlink" title="2、版本变化"></a>2、版本变化</h3><p>常见的三种版本方式：</p>
<ol>
<li>在uri中放版本信息：<code>GET /v1/users/1</code></li>
<li>Accept Header：<code>Accept: application/json+v1</code></li>
<li>自定义 Header：<code>X-Api-Version: 1</code></li>
</ol>
<p>推荐用第一种，虽然没有那么优雅，最明显最方便。</p>
<h3 id="3、URI资源"><a href="#3、URI资源" class="headerlink" title="3、URI资源"></a>3、URI资源</h3><h4 id="（1）URI概念"><a href="#（1）URI概念" class="headerlink" title="（1）URI概念"></a>（1）URI概念</h4><p>URI 表示资源，资源一般对应服务器端领域模型中的实体类。<br>URI规范</p>
<ul>
<li>不用大写;</li>
<li>用中杠<code>-</code>而不用下杠<code>_</code>;</li>
<li>参数列表要encode;</li>
<li>URI中的名词表示资源集合，使用复数形式;</li>
<li>避免层级过深</li>
<li>带上版本号</li>
</ul>
<h4 id="（2）资源路径"><a href="#（2）资源路径" class="headerlink" title="（2）资源路径"></a>（2）资源路径</h4><p><strong>资源集合：</strong> </p>
<p>所有动物园</p>
<pre><code>/zoos/　　　　</code></pre><p>id为1的动物园内的所有动物</p>
<pre class=" language-txt"><code class="language-txt">/zoos/1/animals</code></pre>
<p><strong>单个资源：</strong></p>
<p>比如：id为1的动物园</p>
<pre class=" language-txt"><code class="language-txt">/zoos/1      </code></pre>
<p>id为1,2,3的动物园</p>
<pre class=" language-txt"><code class="language-txt">/zoos/1;2;3   </code></pre>
<p><strong>层级过深资源：</strong></p>
<p>过深的导航容易导致url膨胀，不易维护，如 <code>GET /zoos/1/areas/3/animals/4</code>，尽量使用查询参数代替路径中的实体导航，如<code>GET /animals?zoo=1&amp;area=3</code>; </p>
<h3 id="4、操作类型"><a href="#4、操作类型" class="headerlink" title="4、操作类型"></a>4、操作类型</h3><p>对于资源的具体操作类型，由HTTP动词表示。</p>
<p>常用的HTTP动词有下面五个。</p>
<table>
<thead>
<tr>
<th>HTTP动作</th>
<th>含义</th>
<th>对应的SQL操作</th>
</tr>
</thead>
<tbody><tr>
<td>GET</td>
<td>从服务器取出资源（一项或多项）</td>
<td>SELECT</td>
</tr>
<tr>
<td>POST</td>
<td>在服务器新建一个资源。</td>
<td>CREATE</td>
</tr>
<tr>
<td>PUT</td>
<td>在服务器更新资源（客户端提供改变后的完整资源）</td>
<td>UPDATE</td>
</tr>
<tr>
<td>PATCH</td>
<td>在服务器更新资源（客户端提供改变的属性）</td>
<td>UPDATE</td>
</tr>
<tr>
<td>DELETE</td>
<td>从服务器删除资源。</td>
<td>DELETE</td>
</tr>
<tr>
<td>HEAD</td>
<td>获取资源的元数据。</td>
<td></td>
</tr>
<tr>
<td>OPTIONS</td>
<td>获取信息，关于资源的哪些属性是客户端可以改变的。</td>
<td></td>
</tr>
</tbody></table>
<p>示例：</p>
<blockquote>
<ul>
<li>GET /zoos：列出所有动物园</li>
<li>POST /zoos：新建一个动物园</li>
<li>GET /zoos/ID：获取某个指定动物园的信息</li>
<li>PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息）</li>
<li>PATCH /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息）</li>
<li>DELETE /zoos/ID：删除某个动物园</li>
<li>GET /zoos/ID/animals：列出某个指定动物园的所有动物</li>
<li>DELETE /zoos/ID/animals/ID：删除某个指定动物园的指定动物</li>
</ul>
</blockquote>
<h3 id="5、条件过滤"><a href="#5、条件过滤" class="headerlink" title="5、条件过滤"></a>5、条件过滤</h3><p>记录数量很多，不能全返回，需要对数据进行过滤。API应该提供参数，过滤返回结果。 </p>
<p>下面是一些常见的参数（分页条件、查询条件）。</p>
<blockquote>
<ul>
<li>?limit=10：指定返回记录的数量</li>
<li>?offset=10：指定返回记录的开始位置。</li>
<li>?page=2&amp;per_page=100：指定第几页，以及每页的记录数。</li>
<li>?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。</li>
<li>?animal_type_id=1：指定筛选条件</li>
</ul>
</blockquote>
<p>参数的设计允许存在冗余，即允许API路径和URL参数偶尔有重复。比如，GET /zoo/ID/animals 与 GET /animals?zoo_id=ID 的含义是相同的。 </p>
<h3 id="6、状态码"><a href="#6、状态码" class="headerlink" title="6、状态码"></a>6、状态码</h3><h4 id="（1）常规状态码"><a href="#（1）常规状态码" class="headerlink" title="（1）常规状态码"></a>（1）常规状态码</h4><p>常规的状态主要是参考 HTTP 状态码。</p>
<blockquote>
<ul>
<li>200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。</li>
<li>201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。</li>
<li>202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务）</li>
<li>204 NO CONTENT - [DELETE]：用户删除数据成功。</li>
<li>400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。</li>
<li>401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。</li>
<li>403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。</li>
<li>404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。</li>
<li>406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。</li>
<li>410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。</li>
<li>422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。</li>
<li>500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。</li>
</ul>
</blockquote>
<p><a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html" target="_blank" rel="noopener">HTTP状态码</a> </p>
<h4 id="（2）业务类状态码"><a href="#（2）业务类状态码" class="headerlink" title="（2）业务类状态码"></a>（2）业务类状态码</h4><p>系统较多的时候，将系统码也带上，使用数字的定义也可以参考HTTP进行设计。</p>
<p><code>业务系统码+四位数字</code></p>
<p>具体的可以根据需求来。</p>
<h4 id="（3）错误与异常"><a href="#（3）错误与异常" class="headerlink" title="（3）错误与异常"></a>（3）错误与异常</h4><p>发生错误或异常时：</p>
<ol>
<li><p>不响应2xx开头的状态码，客户端可能会缓存成功的http请求；</p>
</li>
<li><p>正确设置http状态码，遵循HTTP协议规范；</p>
</li>
<li><p>Response body 需要提供的信息</p>
<p>​    1) 错误的代码，方便定位日志，排查问题；</p>
<p>​    2) 直接正面的描述错误的文本。</p>
</li>
</ol>
<p>如果状态码是4xx，就应该向用户返回出错信息。一般来说，返回的信息中将error作为键名，出错信息作为键值即可。 </p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>场景</th>
</tr>
</thead>
<tbody><tr>
<td>400</td>
<td>参数校验失败</td>
</tr>
<tr>
<td>401</td>
<td>未验证的用户，未登录</td>
</tr>
<tr>
<td>403</td>
<td>无权限</td>
</tr>
<tr>
<td>404</td>
<td>资源不存在</td>
</tr>
<tr>
<td>500</td>
<td>非业务类异常</td>
</tr>
</tbody></table>
<p>业务类异常，一般自定义Exception，见词知义。</p>
<p>常规异常：</p>
<pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>
    <span class="token property">"status"</span><span class="token operator">:</span><span class="token string">"failed"</span><span class="token punctuation">,</span>
    <span class="token property">"code"</span><span class="token operator">:</span><span class="token number">400</span>，
    <span class="token property">"error"</span><span class="token operator">:</span> <span class="token string">"参数xxx校验失败"</span>
<span class="token punctuation">}</span></code></pre>
<p>业务类异常：系统名为ABCD</p>
<pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>
    <span class="token property">"status"</span><span class="token operator">:</span><span class="token string">"failed"</span><span class="token punctuation">,</span>
    <span class="token property">"code"</span><span class="token operator">:</span>ABCD2001，
    <span class="token property">"error"</span><span class="token operator">:</span> <span class="token string">"XXX数据已经过期。"</span>

<span class="token punctuation">}</span></code></pre>
<h4 id="（4）正常返回"><a href="#（4）正常返回" class="headerlink" title="（4）正常返回"></a>（4）正常返回</h4><p>正常返回，减少数据层级。</p>
<p>判断操作成功失败的标记 和操作的单个数据</p>
<pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>
    <span class="token property">"success"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">200</span>，
    <span class="token property">"info"</span><span class="token operator">:</span> <span class="token string">"操作成功"</span>，
    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"zhangxiaocai"</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>info 可选。</p>
<p>分页查询</p>
<pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>
    <span class="token property">"paging"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"limit"</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token property">"offset"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token property">"total"</span><span class="token operator">:</span><span class="token number">119</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">"data"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span>...<span class="token punctuation">]</span>
<span class="token punctuation">}</span></code></pre>
<p>操作与响应</p>
<table>
<thead>
<tr>
<th>HTTP操作</th>
<th>响应格式</th>
</tr>
</thead>
<tbody><tr>
<td>GET</td>
<td>状态标记+集合、单个对象</td>
</tr>
<tr>
<td>POST</td>
<td>状态标记+新增成功的对象</td>
</tr>
<tr>
<td>PUT/PATCH</td>
<td>状态标记+更新成功的对象</td>
</tr>
<tr>
<td>DELETE</td>
<td>状态标记</td>
</tr>
</tbody></table>
<h4 id="（5）异步任务"><a href="#（5）异步任务" class="headerlink" title="（5）异步任务"></a>（5）异步任务</h4><p>对耗时的异步任务，服务器端接受客户端传递的参数后，应返回创建成功的任务资源，其中包含了任务的执行状态。客户端可以轮训该任务获得最新的执行进度。 </p>
<p>比如常见信息：</p>
<p>任务ID，任务执行状态，发起人。<br>请求：</p>
<pre class=" language-txt"><code class="language-txt">GET /task/3    </code></pre>
<p>返回：</p>
<pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"taskId"</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token property">"createBy"</span><span class="token operator">:</span><span class="token string">"Anonymous"</span><span class="token punctuation">,</span><span class="token property">"status"</span><span class="token operator">:</span><span class="token string">"success"</span><span class="token punctuation">}</span>

<span class="token punctuation">{</span><span class="token property">"taskId"</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token property">"createBy"</span><span class="token operator">:</span><span class="token string">"Anonymous"</span><span class="token punctuation">,</span><span class="token property">"status"</span><span class="token operator">:</span><span class="token string">"running"</span><span class="token punctuation">}</span></code></pre>
<p>批量请求：</p>
<pre class=" language-txt"><code class="language-txt">POST /batchTasks/1;2;3;</code></pre>
<p>批量返回：</p>
<pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token property">"taskId"</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token property">"createBy"</span><span class="token operator">:</span><span class="token string">"Anonymous"</span><span class="token punctuation">,</span><span class="token property">"status"</span><span class="token operator">:</span><span class="token string">"success"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span>...<span class="token punctuation">]</span>

<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token property">"from"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token property">"to"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token property">"info"</span><span class="token operator">:</span><span class="token string">"Runing 50 %"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span>...<span class="token punctuation">]</span></code></pre>
<p>如果任务的执行状态包括较多信息，可以把“执行状态”抽象成组合资源，客户端查询该状态资源了解任务的执行情况。 </p>
<p>提交：</p>
<pre><code>GET /task/3/status</code></pre><p>返回：    </p>
<pre><code>{&quot;progress&quot;:&quot;50%&quot;,&quot;total&quot;:18,&quot;success&quot;:8,&quot;fail&quot;:1}</code></pre><h3 id="7、Hypermedia-API"><a href="#7、Hypermedia-API" class="headerlink" title="7、Hypermedia API"></a>7、Hypermedia API</h3><p>RESTful API最好做到Hypermedia，即返回结果中提供链接，连向其他API方法，使得用户不查文档，也知道下一步应该做什么。</p>
<p>比如，当用户向api.doname.com的根目录发出请求，会得到这样一个文档。</p>
<blockquote>
<pre><code>{&quot;link&quot;: {
  &quot;rel&quot;:   &quot;collection https://www.example.com/zoos&quot;,
  &quot;href&quot;:  &quot;https://api.example.com/zoos&quot;,
  &quot;title&quot;: &quot;List of zoos&quot;,
  &quot;type&quot;:  &quot;application/vnd.yourformat+json&quot;
}}</code></pre></blockquote>
<p>上面代码表示，文档中有一个link属性，用户读取这个属性就知道下一步该调用什么API了。rel表示这个API与当前网址的关系（collection关系，并给出该collection的网址），href表示API的路径，title表示API的标题，type表示返回类型。</p>
<p>Hypermedia API的设计被称为<a href="http://en.wikipedia.org/wiki/HATEOAS" target="_blank" rel="noopener">HATEOAS</a>。Github的API就是这种设计，访问<a href="https://api.github.com/" target="_blank" rel="noopener">api.github.com</a>会得到一个所有可用API的网址列表。</p>
<blockquote>
<pre><code>{
  &quot;current_user_url&quot;: &quot;https://api.github.com/user&quot;,
  &quot;authorizations_url&quot;: &quot;https://api.github.com/authorizations&quot;,
  // ...
}</code></pre></blockquote>
<p>从上面可以看到，如果想获取当前用户的信息，应该去访问<a href="https://api.github.com/user" target="_blank" rel="noopener">api.github.com/user</a>，然后就得到了下面结果。</p>
<blockquote>
<pre><code>{
  &quot;message&quot;: &quot;Requires authentication&quot;,
  &quot;documentation_url&quot;: &quot;https://developer.github.com/v3&quot;
}</code></pre></blockquote>
<p>上面代码表示，服务器给出了提示信息，以及文档的网址。</p>
<h3 id="8、数据格式"><a href="#8、数据格式" class="headerlink" title="8、数据格式"></a>8、数据格式</h3><p>JSON 或 XML 按要求使用即可。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>RESTful</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot 配置文件相关</title>
    <url>/posts/9911da24.html</url>
    <content><![CDATA[<h2 id="SpringBoot-配置文件相关"><a href="#SpringBoot-配置文件相关" class="headerlink" title="SpringBoot 配置文件相关"></a>SpringBoot 配置文件相关</h2><h2 id="一、Profile-机制"><a href="#一、Profile-机制" class="headerlink" title="一、Profile 机制"></a>一、Profile 机制</h2><p>Profile 其实就是环境配置切换的过程。</p>
<p>在实际的项目开发中，经常需要不同的环境配置，如开发时使用的开发环境数据库，一般可以数据或表可以直接操作修改，但是不能直接连生产环境的数据库，测试的时候测试人员使用测试数据库，而上线时就需要连生产环境的数据库。这就要求项目能够切换环境配置。</p>
<p>spring boot项目中，<code>application.properties</code>称为全局配置文件，实际上可以引入不同环境的配置文件，如：<code>application-dev.properties</code>，<code>application-prod.properties</code>，<code>application-test.properties</code>，</p>
<p>通过指定在全局配置文件<code>application.properties</code>中指定：<code>spring.profiles.active</code>的值切换配置文件，比如：</p>
<pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.profiles.active</span><span class="token punctuation">=</span><span class="token attr-value">xxx</span></code></pre>
<p>就可加载<code>application-xxx.properties</code>配置。</p>
<p>当然，这里是列举的properties 文件，yml 后缀同理。</p>
<h2 id="二、激活profile方式"><a href="#二、激活profile方式" class="headerlink" title="二、激活profile方式"></a>二、激活profile方式</h2><p>（1）在全局配置文件中激活</p>
<pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.profiles.active</span><span class="token punctuation">=</span><span class="token attr-value">xxx</span></code></pre>
<p>（2）在启动项目时使用命令行激活</p>
<pre class=" language-bash"><code class="language-bash">java -jar spring-boot-demo-0.0.1-SNAPSHOT.jar --spring.profiles.active<span class="token operator">=</span>dev</code></pre>
<p>（3）使用虚拟机参数激活</p>
<pre class=" language-properties"><code class="language-properties"><span class="token attr-name">-Dspring.profiles.active</span><span class="token punctuation">=</span><span class="token attr-value">dev</span></code></pre>
<h2 id="三、配置文件加载位置"><a href="#三、配置文件加载位置" class="headerlink" title="三、配置文件加载位置"></a>三、配置文件加载位置</h2><p>springboot 启动会扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件：</p>
<ul>
<li>file:./config/</li>
<li>file:./</li>
<li>classpath:/config/</li>
<li>classpath:/</li>
</ul>
<p>SpringBoot会从这四个位置全部加载主配置文件，<strong>优先级由高到底，高优先级的配置（相同属性）会覆盖低优先级的配置，不同属性互补配置</strong>；</p>
<p>总结：重复配置会覆盖，不同配置可补充。</p>
<h2 id="四、外部配置加载顺序"><a href="#四、外部配置加载顺序" class="headerlink" title="四、外部配置加载顺序"></a>四、外部配置加载顺序</h2><p>Spring Boot 支持多种外部配置方式如下，<strong>优先级从高到低</strong>：</p>
<p><strong>1.命令行参数</strong></p>
<p>所有的配置都可以在命令行上进行指定</p>
<p>java -jar spring-boot-demo-0.0.1-SNAPSHOT.jar –server.port=8087  –server.context-path=/abc</p>
<p>多个配置用空格分开； <code>--配置项=值</code></p>
<p>2.来自java:comp/env的JNDI属性</p>
<p>3.Java系统属性（System.getProperties()）</p>
<p>4.操作系统环境变量</p>
<p>5.RandomValuePropertySource配置的 <code>random.*</code> 属性值</p>
<p><strong>由jar包外向jar包内进行寻找；</strong></p>
<p>==<strong>优先加载带profile</strong>==</p>
<p><strong>6.jar包外部的application-{profile}.properties或application.yml(带spring.profile)配置文件</strong></p>
<p><strong>7.jar包内部的application-{profile}.properties或application.yml(带spring.profile)配置文件</strong></p>
<p>==<strong>再来加载不带profile</strong>==</p>
<p><strong>8.jar包外部的application.properties或application.yml(不带spring.profile)配置文件</strong></p>
<p><strong>9.jar包内部的application.properties或application.yml(不带spring.profile)配置文件</strong></p>
<p>10.@Configuration注解类上的@PropertySource</p>
<p>11.通过SpringApplication.setDefaultProperties指定的默认属性</p>
<p>所有支持的配置加载来源；</p>
<p><a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#boot-features-external-config" target="_blank" rel="noopener">参考官方文档</a></p>
<p>参考资料：尚硅谷学习视频，官方文档等</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot配置相关</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud Consul</title>
    <url>/posts/3010739f.html</url>
    <content><![CDATA[<h2 id="SpringCloud-Consul-服务注册与发现"><a href="#SpringCloud-Consul-服务注册与发现" class="headerlink" title="SpringCloud Consul 服务注册与发现"></a>SpringCloud Consul 服务注册与发现</h2><p>相关链接：</p>
<ul>
<li><a href="bad02d94.html">SpringCloud 微服务学习</a></li>
<li><a href="eeda118.html">RESTful 接口设计规范</a></li>
<li><a href="648d6b26.html">SpringCloud Eureka 服务注册与发现</a></li>
<li><a href="3010739f.html">SpringCloud Consul 服务注册与发现</a></li>
<li><a href="7ecbba09.html">SpringCloud Ribbon 客户端负载均衡与服务调用</a></li>
<li><a href="b27245de.html">SpringCloud OpenFeign 服务接口调用</a></li>
<li><a href="464bb413.html">SpringCloud Hystrix熔断器</a></li>
<li><a href="bc16d093html">SpringCloud Gateway 服务网关</a></li>
<li><a href="fbbe72e1.html">SpringCloud Zuul 服务网关</a></li>
<li><a href="5b5896d1.html">Spring Cloud Config 分布式配置中心</a></li>
<li><a href="9e02a3e8.html">Spring Cloud Bus 消息总线</a></li>
<li><a href="7f3b07b1.html">SpringCloud Stream 消息驱动</a></li>
<li><a href="b99c053f.html">SpringCloud Sleuth 分布式请求链路追踪</a></li>
<li><a href="461589aa.html">SpringCloud Alibaba</a></li>
<li><a href="a46e46f8.html">SpringCloud Alibaba Nacos服务注册和配置中心</a></li>
<li><a href="5122a811.html">SpringCloud Alibaba Sentinel 实现熔断与限流</a></li>
<li><a href="fb7c74c4.html">SpringCloud Alibaba Seata 分布式事务</a></li>
</ul>
<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><h3 id="1、为什么了解Consul"><a href="#1、为什么了解Consul" class="headerlink" title="1、为什么了解Consul"></a>1、为什么了解Consul</h3><p>Eureka 停更了。<a href="https://github.com/Netflix/eureka/wiki" target="_blank" rel="noopener">https://github.com/Netflix/eureka/wiki</a></p>
<h3 id="2、什么是Consul？"><a href="#2、什么是Consul？" class="headerlink" title="2、什么是Consul？"></a>2、什么是Consul？</h3><p>Consul 是由HashCorp公司用Go语言开发的一套开源的分布式服务发现和配置管理系统。</p>
<p>Consul需要一个数据平面，并支持代理和本机集成模型。</p>
<p>Consul提供了一个简单的内置代理，可以开箱即用。</p>
<p>官网：<a href="https://www.consul.io" target="_blank" rel="noopener">https://www.consul.io</a></p>
<p>官方文档：<a href="https://www.consul.io/docs/intro" target="_blank" rel="noopener">https://www.consul.io/docs/intro</a></p>
<p>下载：<a href="https://www.consul.io/downloads.html" target="_blank" rel="noopener">https://www.consul.io/downloads.html</a></p>
<p>spring cloud 中使用：<a href="https://www.springcloud.cc/spring-cloud-consul.html" target="_blank" rel="noopener">https://www.springcloud.cc/spring-cloud-consul.html</a></p>
<h3 id="3、主要特征："><a href="#3、主要特征：" class="headerlink" title="3、主要特征："></a>3、主要特征：</h3><p>（1）<strong>服务发现</strong>。Consul的客户端可以注册一个服务，比如api或者mysql，其他客户端可以使用Consul来发现某个服务的提供者，进行消费使用。使用DNS或HTTP两种发现方式。</p>
<p>（2）<strong>健康检查</strong>。Consul 提供任意数量的健康检查。支持多种协议HTTP/TCP/DOCKER/SHELL脚本等。</p>
<p>（3）<strong>KV存储</strong>。可以利用CONSUR的分层key/value存储进行任何目的，包括动态配置、功能标记、协调、领导人选举等。</p>
<p>（4）<strong>安全服务通信</strong>。Consul可以为服务生成和分发TLS证书，以建立相互TLS连接。可以用来定义意图的服务。服务分段可以很容易地管理，意图可以实时更改，而不是使用复杂的网络拓扑和静态防火墙规则。</p>
<p>（5）<strong>多数据中心</strong>。支持开箱即用的多个数据中心。</p>
<p>（6）<strong>友好的Web界面</strong>。</p>
<h2 id="二、安装运行"><a href="#二、安装运行" class="headerlink" title="二、安装运行"></a>二、安装运行</h2><h3 id="1、windows安装"><a href="#1、windows安装" class="headerlink" title="1、windows安装"></a>1、windows安装</h3><p>官方安装说明：<a href="https://learn.hashicorp.com/consul/getting-started/install.html" target="_blank" rel="noopener">https://learn.hashicorp.com/consul/getting-started/install.html</a></p>
<p>当前版本（2020.9）Consul 1.8.4。</p>
<p>下载完成后只有一个 <code>consul.exe</code>文件，文件路径下双击运行即可。</p>
<p>查看版本信息 windows 和 linux 是一样的。</p>
<pre class=" language-bash"><code class="language-bash">consul --version</code></pre>
<p>以开发模式启动：</p>
<pre class=" language-bash"><code class="language-bash">consul agent -dev</code></pre>
<p>Consul 的DNS协议代理TCP/UDP端口：8600</p>
<p>Consul 的HTTPS协议代理TCP端口：8500</p>
<p>Consul 的gRPC协议代理TCP端口：8502</p>
<p>访问Consul的web控制台：<code>http://localhost:8500</code></p>
<p>停止Consul代理服务：</p>
<pre class=" language-bash"><code class="language-bash">consul leave</code></pre>
<h3 id="2、Centos-RHEL-安装"><a href="#2、Centos-RHEL-安装" class="headerlink" title="2、Centos/RHEL 安装"></a>2、Centos/RHEL 安装</h3><p>其他系统参考官网：<a href="https://learn.hashicorp.com/tutorials/consul/get-started-install" target="_blank" rel="noopener">https://learn.hashicorp.com/tutorials/consul/get-started-install</a></p>
<p>（1）方式一</p>
<p>安装<code>yum-config-manager</code>管理镜像源：</p>
<pre class=" language-bash"><code class="language-bash">yum <span class="token function">install</span> -y yum-utils</code></pre>
<p>添加HashCorp 的linux 镜像源</p>
<pre class=" language-bash"><code class="language-bash">yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo</code></pre>
<p>直接安装即可：</p>
<pre class=" language-bash"><code class="language-bash">yum -y <span class="token function">install</span> consul</code></pre>
<p>验证安装：</p>
<pre class=" language-bash"><code class="language-bash">consul</code></pre>
<p>如果有相关的命令提示表示安装成功。</p>
<p>（2）方式二</p>
<p>也可以使用zip下载解压的方式：</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">wget</span> https://releases.hashicorp.com/consul/1.8.4/consul_1.8.4_linux_amd64.zip
unzip consul_1.8.4_linux_amd64.zip</code></pre>
<p>然后验证一想安装。再将<code>consul</code>所在目录<code>/opt/consul</code>配置到<code>path</code> 。</p>
<pre class=" language-bash"><code class="language-bash">vim ~/.bash_profile</code></pre>
<p>添加配置：</p>
<pre><code>PATH=$PATH:$HOME/bin：/opt/consul</code></pre><p>使配置生效</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">source</span> ~/.bash_profile</code></pre>
<p>如果需要web控制台，则需要单独下载：</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">wget</span> https://releases.hashicorp.com/consul/1.8.4/consul_1.8.4_web_ui.zip</code></pre>
<p>Consul 常见参数：</p>
<ul>
<li><code>server</code> 表示启动的为consul server ，构建一个consul cluster 一般建议使用3或者5个consul server</li>
<li><code>bootstrap-expect 1</code> 表示期望的服务节点数目为1</li>
<li><code>-data-dir</code> 数据目录，如果该文件夹不存在则手工创建,如果在consul发生错误后，建议先清理该目录文件</li>
<li><code>advertise</code> 设置广播地址,ip可以设置为公网ip</li>
<li><code>client</code> 设置client访问的地址</li>
<li><code>ui-dir</code> web控制台目录位置</li>
</ul>
<p>执行命令启动：</p>
<pre class=" language-bash"><code class="language-bash">consul -advertise 192.168.100.180 -client 192.168.100.181 -ui-dir /opt/consul/consul-ui</code></pre>
<h2 id="三、Consul-使用"><a href="#三、Consul-使用" class="headerlink" title="三、Consul 使用"></a>三、Consul 使用</h2><p>因为Consul 作为服务注册中心，不需要再创建注册中心的工程。</p>
<p>那么其他微服务（提供者或消费者）相关配置基本相似。</p>
<h3 id="1、引入pom依赖"><a href="#1、引入pom依赖" class="headerlink" title="1、引入pom依赖"></a>1、引入pom依赖</h3><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-consul-discovery --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-consul-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>


</code></pre>
<h3 id="2、Config-配置"><a href="#2、Config-配置" class="headerlink" title="2、Config 配置"></a>2、Config 配置</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8006</span>


<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> consul<span class="token punctuation">-</span>provider<span class="token punctuation">-</span>payment
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">consul</span><span class="token punctuation">:</span>
      <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost
      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8500</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">service-name</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.application.name<span class="token punctuation">}</span></code></pre>
<h3 id="3、开启服务发现"><a href="#3、开启服务发现" class="headerlink" title="3、开启服务发现"></a>3、开启服务发现</h3><p>使用注解 <code>@EnableDiscoveryClient</code> 开启服务发现。</p>
<p>示例：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>client<span class="token punctuation">.</span>discovery<span class="token punctuation">.</span>EnableDiscoveryClient<span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableDiscoveryClient</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsulClientProvider8006</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ConsulClientProvider8006<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="4、针对消费端"><a href="#4、针对消费端" class="headerlink" title="4、针对消费端"></a>4、针对消费端</h3><p>如果服务提供方是多台，可以在调用方使用 Ribbon + RestTemplate 当时进行客户端负载均衡。</p>
<p>关于Ribbon 参考<a href="">《SpringCloud Ribbon》</a></p>
<p>补充配置：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>config<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>client<span class="token punctuation">.</span>loadbalancer<span class="token punctuation">.</span>LoadBalanced<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>client<span class="token punctuation">.</span>RestTemplate<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationContextConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@LoadBalanced</span> <span class="token comment" spellcheck="true">//Ribbon 客户端负载均衡</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> RestTemplate <span class="token function">getRestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span></code></pre>
<h3 id="5、验证测试"><a href="#5、验证测试" class="headerlink" title="5、验证测试"></a>5、验证测试</h3><p>打开Consul 的web控制台，查看服务是否正常注册进注册中心。</p>
<p>访问消费端地址，验证是否正常调用服务端返，浏览器查看是否正常返回数据。</p>
<h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>Consul 作为服务发现数据中心，是开箱即用的。</p>
<p>作为关注数据粒度的CAP理论：</p>
<ul>
<li>C ：Consistency  强一致性</li>
<li>A ：Availability 可用性</li>
<li>P ：Partition tolerance 分区容错</li>
</ul>
<p>Consul 是符合CP 原则。</p>
<p>Zookeeper 作为服务注册中心也是CP原则。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot 静态资源配置</title>
    <url>/posts/6de4ee20.html</url>
    <content><![CDATA[<h2 id="SpringBoot-静态资源配置"><a href="#SpringBoot-静态资源配置" class="headerlink" title="SpringBoot 静态资源配置"></a>SpringBoot 静态资源配置</h2><p>在 SpringBoot 的特征中之一是 SpringBoot 的自动化配置。 SpringBoot 已经默认将大部分场景配置都做好了，静态资源部分在其中。</p>
<h3 id="1、静态资源管理"><a href="#1、静态资源管理" class="headerlink" title="1、静态资源管理"></a>1、静态资源管理</h3><p>静态资源的配置在 SringMVC 的自动化配置类  <code>org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration</code>中进行管理的。真正实现的是在其内部静态类 <code>WebMvcAutoConfigurationAdapter</code> 中进行的一系列的自动化配置。</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@ConditionalOnWebApplication</span><span class="token punctuation">(</span>type <span class="token operator">=</span> Type<span class="token punctuation">.</span>SERVLET<span class="token punctuation">)</span>
<span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span> Servlet<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> DispatcherServlet<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> WebMvcConfigurer<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>WebMvcConfigurationSupport<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@AutoConfigureOrder</span><span class="token punctuation">(</span>Ordered<span class="token punctuation">.</span>HIGHEST_PRECEDENCE <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@AutoConfigureAfter</span><span class="token punctuation">(</span><span class="token punctuation">{</span> DispatcherServletAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>
        TaskExecutionAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> ValidationAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebMvcAutoConfiguration</span> <span class="token punctuation">{</span>
     <span class="token comment" spellcheck="true">// some code </span>

    <span class="token annotation punctuation">@Configuration</span>
    <span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>EnableWebMvcConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token punctuation">{</span> WebMvcProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> ResourceProperties<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">WebMvcAutoConfigurationAdapter</span>
            <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span><span class="token punctuation">,</span> ResourceLoaderAware <span class="token punctuation">{</span>

        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Log logger <span class="token operator">=</span> LogFactory<span class="token punctuation">.</span><span class="token function">getLog</span><span class="token punctuation">(</span>WebMvcConfigurer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">private</span> <span class="token keyword">final</span> ResourceProperties resourceProperties<span class="token punctuation">;</span>

         <span class="token comment" spellcheck="true">// some code </span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p> 其中 <code>ResourceProperties</code> 就是静态静态资源配置的类，可以设置和静态资源有关的参数，资源路径、是否缓存、缓存周期（秒）、资源处理链、资源版本是否固定一系列内容。</p>
<p><strong>常见的以 xxxxProperties 的配置类是用来封装配置文件的内容的 Bean 。</strong></p>
<p>在 <code>WebMvcAutoConfiguration</code> 的内部静态类 <code>WebMvcAutoConfigurationAdapter</code>中进行一些常见的静态资源处理：</p>
<pre class=" language-java"><code class="language-java">         <span class="token comment" spellcheck="true">// 静态资源异步支持</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureAsyncSupport</span><span class="token punctuation">(</span>AsyncSupportConfigurer configurer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">.</span><span class="token function">containsBean</span><span class="token punctuation">(</span>
                    TaskExecutionAutoConfiguration<span class="token punctuation">.</span>APPLICATION_TASK_EXECUTOR_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                Object taskExecutor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>
                        TaskExecutionAutoConfiguration<span class="token punctuation">.</span>APPLICATION_TASK_EXECUTOR_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>taskExecutor <span class="token keyword">instanceof</span> <span class="token class-name">AsyncTaskExecutor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    configurer<span class="token punctuation">.</span><span class="token function">setTaskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>AsyncTaskExecutor<span class="token punctuation">)</span> taskExecutor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            Duration timeout <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRequestTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                configurer<span class="token punctuation">.</span><span class="token function">setDefaultTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">// 国际化</span>
        <span class="token annotation punctuation">@Bean</span>
        <span class="token annotation punctuation">@ConditionalOnMissingBean</span>
        <span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.mvc"</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"locale"</span><span class="token punctuation">)</span>
        <span class="token keyword">public</span> LocaleResolver <span class="token function">localeResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties
                    <span class="token punctuation">.</span><span class="token function">getLocaleResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> WebMvcProperties<span class="token punctuation">.</span>LocaleResolver<span class="token punctuation">.</span>FIXED<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FixedLocaleResolver</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getLocale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            AcceptHeaderLocaleResolver localeResolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AcceptHeaderLocaleResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            localeResolver<span class="token punctuation">.</span><span class="token function">setDefaultLocale</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getLocale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> localeResolver<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">// 静态资源映射相关</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addResourceHandlers</span><span class="token punctuation">(</span>ResourceHandlerRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">isAddMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Default resource handling disabled"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            Duration cachePeriod <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPeriod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            CacheControl cacheControl <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">getCachecontrol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHttpCacheControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">hasMappingForPattern</span><span class="token punctuation">(</span><span class="token string">"/webjars/**"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">customizeResourceHandlerRegistration</span><span class="token punctuation">(</span>registry
                        <span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">"/webjars/**"</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">"classpath:/META-INF/resources/webjars/"</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">setCachePeriod</span><span class="token punctuation">(</span><span class="token function">getSeconds</span><span class="token punctuation">(</span>cachePeriod<span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">setCacheControl</span><span class="token punctuation">(</span>cacheControl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
                <span class="token operator">/</span><span class="token operator">/</span> 静态资源文件夹映射处理
            String staticPathPattern <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getStaticPathPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">hasMappingForPattern</span><span class="token punctuation">(</span>staticPathPattern<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">customizeResourceHandlerRegistration</span><span class="token punctuation">(</span>
                        registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span>staticPathPattern<span class="token punctuation">)</span>
                                <span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token function">getResourceLocations</span><span class="token punctuation">(</span>
                                        <span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getStaticLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                                <span class="token punctuation">.</span><span class="token function">setCachePeriod</span><span class="token punctuation">(</span><span class="token function">getSeconds</span><span class="token punctuation">(</span>cachePeriod<span class="token punctuation">)</span><span class="token punctuation">)</span>
                                <span class="token punctuation">.</span><span class="token function">setCacheControl</span><span class="token punctuation">(</span>cacheControl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token operator">/</span><span class="token operator">/</span> 欢迎页 静态资源文件夹下的所有index<span class="token punctuation">.</span>html页面；被<span class="token string">"/**"</span>映射
        <span class="token annotation punctuation">@Bean</span>
        <span class="token keyword">public</span> WelcomePageHandlerMapping <span class="token function">welcomePageHandlerMapping</span><span class="token punctuation">(</span>
                ApplicationContext applicationContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WelcomePageHandlerMapping</span><span class="token punctuation">(</span>
                    <span class="token keyword">new</span> <span class="token class-name">TemplateAvailabilityProviders</span><span class="token punctuation">(</span>applicationContext<span class="token punctuation">)</span><span class="token punctuation">,</span>
                    applicationContext<span class="token punctuation">,</span> <span class="token function">getWelcomePage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getStaticPathPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token operator">/</span><span class="token operator">/</span>  favicon 图标
        <span class="token annotation punctuation">@Configuration</span>
        <span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"spring.mvc.favicon.enabled"</span><span class="token punctuation">,</span> matchIfMissing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">FaviconConfiguration</span> <span class="token keyword">implements</span> <span class="token class-name">ResourceLoaderAware</span> <span class="token punctuation">{</span>

            <span class="token keyword">private</span> <span class="token keyword">final</span> ResourceProperties resourceProperties<span class="token punctuation">;</span>

            <span class="token keyword">private</span> ResourceLoader resourceLoader<span class="token punctuation">;</span>

            <span class="token keyword">public</span> <span class="token function">FaviconConfiguration</span><span class="token punctuation">(</span>ResourceProperties resourceProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties <span class="token operator">=</span> resourceProperties<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setResourceLoader</span><span class="token punctuation">(</span>ResourceLoader resourceLoader<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader <span class="token operator">=</span> resourceLoader<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token annotation punctuation">@Bean</span>
            <span class="token keyword">public</span> SimpleUrlHandlerMapping <span class="token function">faviconHandlerMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                SimpleUrlHandlerMapping mapping <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleUrlHandlerMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                mapping<span class="token punctuation">.</span><span class="token function">setOrder</span><span class="token punctuation">(</span>Ordered<span class="token punctuation">.</span>HIGHEST_PRECEDENCE <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token operator">/</span><span class="token operator">/</span> 所有的 <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">/</span>favicon<span class="token punctuation">.</span>ico  都是在静态资源文件下找
                mapping<span class="token punctuation">.</span><span class="token function">setUrlMap</span><span class="token punctuation">(</span>Collections<span class="token punctuation">.</span><span class="token function">singletonMap</span><span class="token punctuation">(</span><span class="token string">"**/favicon.ico"</span><span class="token punctuation">,</span>
                        <span class="token function">faviconRequestHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> mapping<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token annotation punctuation">@Bean</span>
            <span class="token keyword">public</span> ResourceHttpRequestHandler <span class="token function">faviconRequestHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                ResourceHttpRequestHandler requestHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourceHttpRequestHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                requestHandler<span class="token punctuation">.</span><span class="token function">setLocations</span><span class="token punctuation">(</span><span class="token function">resolveFaviconLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> requestHandler<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Resource<span class="token operator">></span> <span class="token function">resolveFaviconLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                String<span class="token punctuation">[</span><span class="token punctuation">]</span> staticLocations <span class="token operator">=</span> <span class="token function">getResourceLocations</span><span class="token punctuation">(</span>
                        <span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getStaticLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                List<span class="token operator">&lt;</span>Resource<span class="token operator">></span> locations <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>staticLocations<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>staticLocations<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader<span class="token operator">:</span><span class="token operator">:</span>getResource<span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>locations<span class="token operator">:</span><span class="token operator">:</span>add<span class="token punctuation">)</span><span class="token punctuation">;</span>
                locations<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> Collections<span class="token punctuation">.</span><span class="token function">unmodifiableList</span><span class="token punctuation">(</span>locations<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

        <span class="token punctuation">}</span></code></pre>
<p>还有一些视图解析、路径匹配等等相关处理。</p>
<h3 id="2、静态资源默认配置"><a href="#2、静态资源默认配置" class="headerlink" title="2、静态资源默认配置"></a>2、静态资源默认配置</h3><p>在 ResourceProperties  类中可以找点默认的静态资源路径</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.resources"</span><span class="token punctuation">,</span> ignoreUnknownFields <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResourceProperties</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> CLASSPATH_RESOURCE_LOCATIONS <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token string">"classpath:/META-INF/resources/"</span><span class="token punctuation">,</span> <span class="token string">"classpath:/resources/"</span><span class="token punctuation">,</span>
            <span class="token string">"classpath:/static/"</span><span class="token punctuation">,</span> <span class="token string">"classpath:/public/"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * Locations of static resources. Defaults to classpath:[/META-INF/resources/,
     * /resources/, /static/, /public/].
     */</span>
    <span class="token keyword">private</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> staticLocations <span class="token operator">=</span> CLASSPATH_RESOURCE_LOCATIONS<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// some code </span>
<span class="token punctuation">}</span></code></pre>
<p>默认路径有：</p>
<pre class=" language-txt"><code class="language-txt">"classpath:/META-INF/resources/"
"classpath:/resources/"
"classpath:/static/"
"classpath:/public/"</code></pre>
<p>静态资源默认可以放这4个地方。</p>
<h3 id="3、静态资源自定义配置"><a href="#3、静态资源自定义配置" class="headerlink" title="3、静态资源自定义配置"></a>3、静态资源自定义配置</h3><p>在 YAML 语法学习 篇章中学习了 配置文件与JavaBean 的绑定，其实 <strong><code>@ConfigurationProperties</code></strong> 就是其中方式之一，并且这个类没有使用<strong><code>@PropertySource</code></strong> 注解用来指定文件，说明如果要自定义配置以 <code>spring.resources</code> 前缀的静态资源相关配置必须放在全局配置<code>application.properties</code> 或 <code>application.yml</code> 里面。如果写在另外的配置文件将无法识别。当然也支持Java方式设置自定义配置。</p>
<p>比如在 <code>application.properties</code>中：</p>
<pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.resources.static-locations</span><span class="token punctuation">=</span><span class="token attr-value">/**</span></code></pre>
<p>其中 <code>static-locations</code> 就是 <code>ResourceProperties</code> 中的 <code>staticLocations</code> 属性，它是一个数组，可以配置多个静态资源路径，以逗号 <code>,</code> 分隔。</p>
<p><code>static-locations</code> 也可以写成 <code>static_locations</code> 。</p>
<p>如果 SpringBoot 版本较高，静态资源可能略有变化：</p>
<pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.mvc.static-path-pattern</span><span class="token punctuation">=</span><span class="token attr-value">/resources/**</span></code></pre>
<p>可以到 <code>ResourceProperties</code> 类中查看一下前缀和变量即可。</p>
<h3 id="4、静态资源引入"><a href="#4、静态资源引入" class="headerlink" title="4、静态资源引入"></a>4、静态资源引入</h3><p>对于静态资源引入可以两种：</p>
<ul>
<li>（1）直接引入外部库 <code>webjars</code> 方式。</li>
<li>（2）引入自定义静态资源，比如项目自定义的<code>js</code> 、<code>css</code> 、<code>images</code>等</li>
</ul>
<p>（1）<code>webjars</code> 方式</p>
<p><code>webjars</code> 是以jar包的方式引入静态资源，可以在 webjars 网站 <a href="http://www.webjars.org/" target="_blank" rel="noopener">http://www.webjars.org/</a> 查询引入自己需要的。</p>
<p>如引入 jquery :</p>
<pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--引入jquery-webjar--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.webjars<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jquery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>
<p>在访问的时候只需要写 webjars 下面资源的名称即可，如 <code>localhost:8080/webjars/jquery/3.3.1/jquery.js</code> </p>
<p>所有 /webjars/** ，都会在 classpath:/META-INF/resources/webjars/ 找对应的资源。</p>
<p>（2）自定义方式</p>
<p><code>&quot;/**&quot;</code> 访问当前项目的任何资源，都去（静态资源的文件夹）找映射自定义方式前面提到了默认路径：</p>
<pre class=" language-txt"><code class="language-txt">"classpath:/META-INF/resources/", 
"classpath:/resources/",
"classpath:/static/", 
"classpath:/public/" 
"/"：当前项目的根路径</code></pre>
<h3 id="5、其他"><a href="#5、其他" class="headerlink" title="5、其他"></a>5、其他</h3><p>如果遇到其他问题后续补充</p>
<p>​    </p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>static</tag>
      </tags>
  </entry>
  <entry>
    <title>java8 日期时间API</title>
    <url>/posts/d0e15f60.html</url>
    <content><![CDATA[<h3 id="Java-8-日期时间-API"><a href="#Java-8-日期时间-API" class="headerlink" title="Java 8 日期时间 API"></a>Java 8 日期时间 API</h3><p>Java 8通过发布新的Date-Time API (JSR 310)来进一步加强对日期与时间的处理。 旧版的<code>java.util.Date</code>是非线程安全的。</p>
<h4 id="1-java8日期时间"><a href="#1-java8日期时间" class="headerlink" title="1. java8日期时间"></a>1. java8日期时间</h4><p><code>LocalDate</code>（本地日期）− 简化了日期处理，不带时间。</p>
<p><code>LocalTime</code>（本地时间）− 简化了时间处理，不带日期且没有偏移信息、无时区的时间。</p>
<p><code>LocalDateTime</code>（本地日期时间）− 日期+时间的处理。</p>
<p>上面的三个类的实例是不可变的对象，分布表示使用<code>ISO-8601</code>日历系统的日期、时间、日期时间。无时区相关信息。</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>now()</td>
<td>静态方法，根据当前时间创建对象</td>
</tr>
<tr>
<td>of()</td>
<td>静态方法，根据当前时间或日期创建对象</td>
</tr>
<tr>
<td>plusDays, plusWeeks, <br/> plusMonths, plusYears</td>
<td>向当前LocalDate 对象添加几天、几周、几个月、几年的运算</td>
</tr>
<tr>
<td>minisDays, minisWeeks, <br/>minisMonths, minisYears</td>
<td>从当前LocalDate 对象减去几天、几周、几个月、几年的运算</td>
</tr>
<tr>
<td>withDayOfMonth, withDayOfYear,<br/> withMonth, withYear</td>
<td>将月份天数、年份天数、月份年份修改为指定的值并返回新的LocalDate对象</td>
</tr>
<tr>
<td>getDayOfMonth</td>
<td>获取月份天数（1-31）</td>
</tr>
<tr>
<td>getDayOfYear</td>
<td>获取年份天数（1-366）</td>
</tr>
<tr>
<td>getDayOfWeek</td>
<td>获取星期几，返回一个DayOfWeek的枚举值</td>
</tr>
<tr>
<td>getMonth</td>
<td>获取月份，返回一个Month的枚举值</td>
</tr>
<tr>
<td>getMonthValue</td>
<td>获取月份数值（1-12）</td>
</tr>
<tr>
<td>getYear</td>
<td>获取年份</td>
</tr>
<tr>
<td>unitl</td>
<td>获取两个日期之间的 Period 对象，或者指定 ChronoUnits 的数字</td>
</tr>
<tr>
<td>isBefore,isAfter</td>
<td>比较两个LocalDate</td>
</tr>
<tr>
<td>isLeapYear</td>
<td>判断是否是闰年</td>
</tr>
</tbody></table>
<pre class=" language-java"><code class="language-java">```java
<span class="token keyword">package</span> com<span class="token punctuation">.</span>zxc<span class="token punctuation">.</span>jdk8<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>*<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token keyword">static</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>System<span class="token punctuation">.</span>out<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DateTimeTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>


        LocalDate ldt <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//日期</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" ldt = "</span> <span class="token operator">+</span> ldt<span class="token punctuation">)</span><span class="token punctuation">;</span>

        LocalTime time <span class="token operator">=</span> LocalTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//时间</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" time = "</span> <span class="token operator">+</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>

        LocalDateTime dttm <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" dttm = "</span> <span class="token operator">+</span> dttm<span class="token punctuation">)</span><span class="token punctuation">;</span>


        LocalDate date2 <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">07</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//日期</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" date2 = "</span> <span class="token operator">+</span> date2<span class="token punctuation">)</span><span class="token punctuation">;</span>

        LocalTime time2 <span class="token operator">=</span> LocalTime<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//时间</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" time2 = "</span> <span class="token operator">+</span> time2<span class="token punctuation">)</span><span class="token punctuation">;</span>

        LocalDateTime dttm2 <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span><span class="token number">07</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" dttm2 = "</span> <span class="token operator">+</span> dttm2<span class="token punctuation">)</span><span class="token punctuation">;</span>

        LocalDateTime ldt3 <span class="token operator">=</span> ld2<span class="token punctuation">.</span><span class="token function">plusYears</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ldt3<span class="token punctuation">)</span><span class="token punctuation">;</span>

        LocalDateTime ldt4 <span class="token operator">=</span> ld2<span class="token punctuation">.</span><span class="token function">minusMonths</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ldt4<span class="token punctuation">)</span><span class="token punctuation">;</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ldt<span class="token punctuation">.</span><span class="token function">getYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ldt<span class="token punctuation">.</span><span class="token function">getMonthValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ldt<span class="token punctuation">.</span><span class="token function">getDayOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ldt<span class="token punctuation">.</span><span class="token function">getHour</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ldt<span class="token punctuation">.</span><span class="token function">getMinute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ldt<span class="token punctuation">.</span><span class="token function">getSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 日期比较</span>
        LocalDate date1 <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        LocalDate date2 <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// isBefore</span>
        <span class="token keyword">boolean</span> b1 <span class="token operator">=</span> date1<span class="token punctuation">.</span><span class="token function">isBefore</span><span class="token punctuation">(</span>date2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" date1 在date2的前面 ："</span> <span class="token operator">+</span> b1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// isAfter</span>
        <span class="token keyword">boolean</span> b2 <span class="token operator">=</span> date1<span class="token punctuation">.</span><span class="token function">isAfter</span><span class="token punctuation">(</span>date2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" date1 在date2的后面 ："</span> <span class="token operator">+</span> b2<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">boolean</span> b3 <span class="token operator">=</span> date1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>date2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" date1   equals  date2  ? "</span> <span class="token operator">+</span> b3<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 日期时间比较</span>
        LocalDateTime dttm1 <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" dttm1 = "</span> <span class="token operator">+</span> dttm1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        LocalDateTime dttm2 <span class="token operator">=</span> dttm1<span class="token punctuation">.</span><span class="token function">plusDays</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" dttm2 = "</span> <span class="token operator">+</span> dttm2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> b4 <span class="token operator">=</span> dttm1<span class="token punctuation">.</span><span class="token function">isBefore</span><span class="token punctuation">(</span>dttm2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" dttm1 在 dttm2 的前面 ："</span> <span class="token operator">+</span> b4<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="2-java8-时间戳"><a href="#2-java8-时间戳" class="headerlink" title="2. java8 时间戳"></a>2. java8 时间戳</h4><p><code>Instant</code>（时间戳）-精确到纳秒的的某个时间点，不包含时区，允许加减运算。该方法默认使用的是UTC(协调世界时——由原子钟提供)时间(Unix元年开始经历描述进行运算)，可以使用<br><code>equeal</code> 和 <code>compareTo</code> 来比较两个时间点的值。支持旧版时间转换新版时间戳。</p>
<pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        Instant ins <span class="token operator">=</span> Instant<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//默认使用 UTC 时区</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ins<span class="token punctuation">)</span><span class="token punctuation">;</span>

        OffsetDateTime odt <span class="token operator">=</span> ins<span class="token punctuation">.</span><span class="token function">atOffset</span><span class="token punctuation">(</span>ZoneOffset<span class="token punctuation">.</span><span class="token function">ofHours</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>odt<span class="token punctuation">)</span><span class="token punctuation">;</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ins<span class="token punctuation">.</span><span class="token function">getNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        Instant ins2 <span class="token operator">=</span> Instant<span class="token punctuation">.</span><span class="token function">ofEpochSecond</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ins2<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment" spellcheck="true">// 时间戳</span>
        Instant now <span class="token operator">=</span> Instant<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" now = "</span> <span class="token operator">+</span> now<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 将java.util.Date转换为Instant</span>
        Instant instant1 <span class="token operator">=</span> Instant<span class="token punctuation">.</span><span class="token function">ofEpochMilli</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instant1<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 从字符串类型中创建Instant类型的时间</span>
        Instant instant2 <span class="token operator">=</span> Instant<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"1995-10-23T10:12:35Z"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token punctuation">}</span></code></pre>
<h4 id="3-Duration-和-Period。"><a href="#3-Duration-和-Period。" class="headerlink" title="3. Duration 和 Period。"></a>3. Duration 和 Period。</h4><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">caculteTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

        Instant instant3 <span class="token operator">=</span> Instant<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 将现在的时间加上2个小时10分钟</span>
        Instant changeIns <span class="token operator">=</span> instant3<span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span><span class="token function">ofHours</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plusMinutes</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>changeIns<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 使用instant计算7天前</span>
        instant3<span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>DAYS<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 方法1</span>
        instant3<span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span><span class="token function">ofDays</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 方法2</span>

        <span class="token comment" spellcheck="true">// 计算两个Instant之间的分钟数</span>
        Instant instant4 <span class="token operator">=</span> Instant<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// long diffAsMinutes = instant.periodUntil(instant3, ChronoUnit.MINUTES); //</span>
        <span class="token comment" spellcheck="true">// 方法1</span>
        <span class="token keyword">long</span> diffAsMinutes1 <span class="token operator">=</span> ChronoUnit<span class="token punctuation">.</span>MINUTES<span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span>instant1<span class="token punctuation">,</span> instant4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 方法2</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>diffAsMinutes1 <span class="token operator">/</span> <span class="token number">60</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        Instant ins1 <span class="token operator">=</span> Instant<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span>

        Instant ins2 <span class="token operator">=</span> Instant<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"所耗费时间为："</span> <span class="token operator">+</span> Duration<span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span>ins1<span class="token punctuation">,</span> ins2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        LocalDate ld1 <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        LocalDate ld2 <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2011</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        Period pe <span class="token operator">=</span> Period<span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span>ld2<span class="token punctuation">,</span> ld1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pe<span class="token punctuation">.</span><span class="token function">getYears</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pe<span class="token punctuation">.</span><span class="token function">getMonths</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pe<span class="token punctuation">.</span><span class="token function">getDays</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 一周从周日开始</span>
        WeekFields weekFields <span class="token operator">=</span> WeekFields<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>DayOfWeek<span class="token punctuation">.</span>SUNDAY<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        LocalDate today <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"今天是今年第"</span> <span class="token operator">+</span> today<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>weekFields<span class="token punctuation">.</span><span class="token function">weekOfYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"周"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 计算date的相差天数</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>LocalDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEpochDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> LocalDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">minusDays</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEpochDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 计算date的相差月数</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>LocalDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">until</span><span class="token punctuation">(</span>LocalDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">minusDays</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>MONTHS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 计算date的相差月天，（相差0年1月24天）</span>
        LocalDate date1 <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        LocalDate date2 <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Period period <span class="token operator">=</span> Period<span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span>date1<span class="token punctuation">,</span> date2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>period<span class="token punctuation">.</span><span class="token function">getYears</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> period<span class="token punctuation">.</span><span class="token function">getMonths</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> period<span class="token punctuation">.</span><span class="token function">getDays</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<h4 id="4-时区处理"><a href="#4-时区处理" class="headerlink" title="4. 时区处理"></a>4. 时区处理</h4><p><code>Zoned</code> (时区) − 通过制定的时区处理日期时间。</p>
<p><code>ZoneDate</code>（时区日期）- 包含时区的日期。</p>
<p><code>ZoneTime</code>（时区时间）- 包含时区的时间。</p>
<p><code>ZoneDateTime</code>（时区日期时间）- 包含时区的完整的日期时间，偏移量是以<code>UTC/格林威治时间</code>为基准的。ZonedDateTime代表带时区的时间，等同于以前的<code>GregorianCalendar</code>类。使用该类，可以将本地时间转换成另一个时区中的对应时间。</p>
<p><code>ZonId</code>代表的是某个特定时区，里面的<code>getAvailableZoneIds()</code> 方法可以获取所有时区信息。里面的<code>of()</code> 方法是用指定的时区信息获取ZoneId对象</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zxc<span class="token punctuation">.</span>jdk8<span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token keyword">static</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>System<span class="token punctuation">.</span>out<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>LocalDateTime<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>ZoneId<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>ZonedDateTime<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TimeZoneTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 获取全部时区列表</span>
        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> set <span class="token operator">=</span> ZoneId<span class="token punctuation">.</span><span class="token function">getAvailableZoneIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        set<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>

        LocalDateTime localDateTime <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" localDateTime = "</span> <span class="token operator">+</span> localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>

        ZoneId zone <span class="token operator">=</span> ZoneId<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>ZoneId<span class="token punctuation">.</span>SHORT_IDS<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"CTT"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//取定义好的时区</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" zone = "</span> <span class="token operator">+</span> zone<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//包含时区的时间</span>
        ZonedDateTime dtWithZone <span class="token operator">=</span> ZonedDateTime<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">,</span> zone<span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" dtWithZone = "</span> <span class="token operator">+</span> dtWithZone<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>输出</p>
<pre><code> localDateTime = 2020-05-31T23:54:42.831
 zone = Asia/Shanghai
 dtWithZone = 2020-05-31T23:54:42.831+08:00[Asia/Shanghai]</code></pre><p> 注意：对应时区的文本可以直接手动填写，也可以调用系统默认定义的。</p>
<h4 id="5-格式化处理"><a href="#5-格式化处理" class="headerlink" title="5. 格式化处理"></a>5. 格式化处理</h4><p><code>java.time.format.DateTimeFormatter</code>提供格式化和解析功能。有三种格式化方法：</p>
<p>（1）预定义的标准格式，在<code>DateTimeFormatter</code>类中。<br>（2）语言环境相关的格式<br>（3）自定义格式，如带中文。</p>
<pre class=" language-java"><code class="language-java">
    <span class="token comment" spellcheck="true">//5. DateTimeFormatter : 解析和格式化日期或时间</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">formatterTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

        DateTimeFormatter dtf <span class="token operator">=</span> DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy年MM月dd日 HH:mm:ss E"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        LocalDateTime ldt <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String strDate <span class="token operator">=</span> ldt<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>dtf<span class="token punctuation">)</span><span class="token punctuation">;</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strDate<span class="token punctuation">)</span><span class="token punctuation">;</span>

        LocalDateTime newLdt <span class="token operator">=</span> ldt<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>strDate<span class="token punctuation">,</span> dtf<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>newLdt<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<h4 id="6-时间校正器"><a href="#6-时间校正器" class="headerlink" title="6. 时间校正器"></a>6. 时间校正器</h4><p><code>TemporalAdjuster</code>是时间校正器。有时候需要获取”下个周日”这种操作。</p>
<p><code>TemporalAdjusters</code> 该类是通过静态方法提供大量常用的<code>TemporalAdjuster</code>的实现。</p>
<pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//取下个周末</span>
        LocalDateTime ldt1 <span class="token operator">=</span> ldt<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>TemporalAdjusters<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>DayOfWeek<span class="token punctuation">.</span>SUNDAY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ldt1<span class="token punctuation">)</span><span class="token punctuation">;</span>

        LocalDateTime ldt2 <span class="token operator">=</span> ldt<span class="token punctuation">.</span><span class="token function">withDayOfMonth</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ldt2<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//自定义：下一个工作日</span>
        LocalDateTime ldt5 <span class="token operator">=</span> ldt<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>
            LocalDateTime ldt4 <span class="token operator">=</span> <span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">)</span> l<span class="token punctuation">;</span>

            DayOfWeek dow <span class="token operator">=</span> ldt4<span class="token punctuation">.</span><span class="token function">getDayOfWeek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span><span class="token punctuation">(</span>dow<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>DayOfWeek<span class="token punctuation">.</span>FRIDAY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> ldt4<span class="token punctuation">.</span><span class="token function">plusDays</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>dow<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>DayOfWeek<span class="token punctuation">.</span>SATURDAY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> ldt4<span class="token punctuation">.</span><span class="token function">plusDays</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> ldt4<span class="token punctuation">.</span><span class="token function">plusDays</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ldt5<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span></code></pre>
<h4 id="7-其他相关"><a href="#7-其他相关" class="headerlink" title="7. 其他相关"></a>7. 其他相关</h4><p><code>Locale</code> (本地) − 简化了日期时间的处理，没有时区的问题。</p>
<p><code>MonthDay</code>- 月日组合。它是一个值类（value class）,由，不包含年信息，可以用来代表每年重复出现的一些日期或其他组合。</p>
<p><code>YearMonth</code> - 年月组合。</p>
<p><code>WeekFields</code>(周) - 处理周的计算。</p>
<p><code>Clock</code> - 时钟。可以获取某个时区下（对时区是敏感的）当前的瞬时时间、日期。用来代替System.currentTimelnMillis()与TimeZone.getDefault()方法。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zxc<span class="token punctuation">.</span>jdk8<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>*<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token keyword">static</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>System<span class="token punctuation">.</span>out<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DateTimeTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>


        Locale l <span class="token operator">=</span> Locale<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>

        MonthDay md <span class="token operator">=</span> MonthDay<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" md :"</span><span class="token operator">+</span>md<span class="token punctuation">)</span><span class="token punctuation">;</span>

        YearMonth ym <span class="token operator">=</span> YearMonth<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">07</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" ym :"</span><span class="token operator">+</span>ym<span class="token punctuation">)</span><span class="token punctuation">;</span>

        Clock utc_cl <span class="token operator">=</span> Clock<span class="token punctuation">.</span><span class="token function">systemUTC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" utc_cl :"</span> <span class="token operator">+</span>utc_cl<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Clock def_cl <span class="token operator">=</span> Clock<span class="token punctuation">.</span><span class="token function">systemDefaultZone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" def_cl :"</span> <span class="token operator">+</span>def_cl<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

<span class="token punctuation">}</span></code></pre>
<h4 id="8-与传统日期转换"><a href="#8-与传统日期转换" class="headerlink" title="8 与传统日期转换"></a>8 与传统日期转换</h4><table>
<thead>
<tr>
<th>类</th>
<th>To 遗留类</th>
<th>From 遗留类</th>
</tr>
</thead>
<tbody><tr>
<td>java.time.Instant <br/> java.util.Date</td>
<td>Date.from(Instant it)</td>
<td>date.toInstant()</td>
</tr>
<tr>
<td>java.time.Instant <br/> java.util.Timestamp</td>
<td>Timestamp.from(Instant it)</td>
<td>tmestamp.toInstant()</td>
</tr>
<tr>
<td>java.time.ZonedDateTime <br/> java.util.GregorianCalendar</td>
<td>GregorianCalendar.from(ZonedDateTime zd)</td>
<td>cal.toZonedDateTime()</td>
</tr>
<tr>
<td>java.time.LocalDate <br/> java.sql.Time</td>
<td>Date.valueOf(LocalDate ld)</td>
<td>date.toLocalDate()</td>
</tr>
<tr>
<td>java.time.LocalTime <br/> java.sql.Time</td>
<td>Date.valueOf(LocalTime lt)</td>
<td>date.toLocalTime()</td>
</tr>
<tr>
<td>java.time.LocalDateTime<br/> java.sql.Timestamp</td>
<td>Timestamp.valueOf(LocalDateTime ldt)</td>
<td>tmestamp.toLocalDateTime()</td>
</tr>
<tr>
<td>java.time.ZoneId <br/> java.sql.TimeZone</td>
<td>TimeZone.getTimeZone(ZoneId ldt)</td>
<td>tmeZone.toZoneId()</td>
</tr>
<tr>
<td>java.time.format.DateTimeFormatter <br/> java.text.DateFormat</td>
<td>formatter.toFormat()</td>
<td>-</td>
</tr>
</tbody></table>
<p>部分示例如下。其他同理：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zhangxiaocai<span class="token punctuation">.</span>cn<span class="token punctuation">.</span>java8<span class="token punctuation">.</span>datetime<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Timestamp<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>Instant<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Locale<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestOtherDateTime</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

        Locale l <span class="token operator">=</span> Locale<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>

        Instant it <span class="token operator">=</span> Instant<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Date date <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" date :"</span><span class="token operator">+</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>

        Instant it2 <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" it2 : "</span><span class="token operator">+</span>it2<span class="token punctuation">)</span><span class="token punctuation">;</span>

        Timestamp ts <span class="token operator">=</span> Timestamp<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" ts : "</span><span class="token operator">+</span>ts<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Instant ts2 <span class="token operator">=</span> ts<span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" ts2 : "</span><span class="token operator">+</span>ts2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="9-其他"><a href="#9-其他" class="headerlink" title="9 其他"></a>9 其他</h4><p>可以参考<a href="https://www.matools.com/api/java8" target="_blank" rel="noopener">java 8 API</a>,在实际遇到再补充。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud OpenFeign</title>
    <url>/posts/b27245de.html</url>
    <content><![CDATA[<h2 id="SpringCloud-OpenFeign-服务接口调用"><a href="#SpringCloud-OpenFeign-服务接口调用" class="headerlink" title="SpringCloud OpenFeign 服务接口调用"></a>SpringCloud OpenFeign 服务接口调用</h2><p>相关链接：</p>
<ul>
<li><a href="bad02d94.html">SpringCloud 微服务学习</a></li>
<li><a href="eeda118.html">RESTful 接口设计规范</a></li>
<li><a href="648d6b26.html">SpringCloud Eureka 服务注册与发现</a></li>
<li><a href="3010739f.html">SpringCloud Consul 服务注册与发现</a></li>
<li><a href="7ecbba09.html">SpringCloud Ribbon 客户端负载均衡与服务调用</a></li>
<li><a href="b27245de.html">SpringCloud OpenFeign 服务接口调用</a></li>
<li><a href="464bb413.html">SpringCloud Hystrix熔断器</a></li>
<li><a href="bc16d093.html">SpringCloud Gateway 服务网关</a></li>
<li><a href="fbbe72e1.html">SpringCloud Zuul 服务网关</a></li>
<li><a href="5b5896d1.html">Spring Cloud Config 分布式配置中心</a></li>
<li><a href="9e02a3e8.html">Spring Cloud Bus 消息总线</a></li>
<li><a href="7f3b07b1.html">SpringCloud Stream 消息驱动</a></li>
<li><a href="b99c053f.html">SpringCloud Sleuth 分布式请求链路追踪</a></li>
<li><a href="461589aa.html">SpringCloud Alibaba</a></li>
<li><a href="a46e46f8.html">SpringCloud Alibaba Nacos服务注册和配置中心</a></li>
<li><a href="5122a811.html">SpringCloud Alibaba Sentinel 实现熔断与限流</a></li>
<li><a href="fb7c74c4.html">SpringCloud Alibaba Seata 分布式事务</a></li>
</ul>
<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p>Spring Cloud OpenFeign是一种声明式的REST客户端，是一种面向接口编程的实现。是对HTTP调用一种封装和简化。</p>
<p><strong>主要特征</strong>：</p>
<p>声明式REST客户机：Feign创建用JAX-RS或springmvc注释修饰的接口的动态实现。</p>
<p><strong>github</strong>：<a href="https://github.com/spring-cloud/spring-cloud-openfeign" target="_blank" rel="noopener">https://github.com/spring-cloud/spring-cloud-openfeign</a> </p>
<p>官网：</p>
<p><a href="https://spring.io/projects/spring-cloud-openfeign" target="_blank" rel="noopener">https://spring.io/projects/spring-cloud-openfeign</a></p>
<p>文档地址：</p>
<p><a href="https://docs.spring.io/spring-cloud-openfeign/docs/2.2.5.RELEASE/reference/html/" target="_blank" rel="noopener">https://docs.spring.io/spring-cloud-openfeign/docs/2.2.5.RELEASE/reference/html/</a></p>
<p>同类的功能</p>
<p>RestTemplate</p>
<p>HttpClient</p>
<h2 id="二、OpenFeign"><a href="#二、OpenFeign" class="headerlink" title="二、OpenFeign"></a>二、OpenFeign</h2><p>Spring Cloud OpenFeign是一种声明式的REST客户端。</p>
<p>OpenFeign使用编写java http 客户端变得更容易方便。</p>
<p>在实际开发中，对服务依赖的调用可能不止一处，一个接口会被多出调用，所以可以针对每一个微服务自行封装一些客户端来包装一些依赖服务的调用。</p>
<p>所以Feign在此基础上做了进一步封装，让它来定义和实现依赖服务接口。在OpenFeign 的实现下，只需要创建一个接口并使用注解的方式来配置即可完成对服务提供方的接口绑定，简化了使用Ribbon 时自己封装服务调用客户端的开发。</p>
<p>OpenFeign  已集成了Ribbon。</p>
<p>Feign 和 OpenFeign 区别</p>
<table>
<thead>
<tr>
<th>Feign</th>
<th>OpenFeign</th>
</tr>
</thead>
<tbody><tr>
<td>Feign 是 spring cloud 组件中一个轻量级Restful的HTTP服务客户端。<br>Feign内置了Ribbon，用来做客户端负载均衡，去调用服务注册中心的服务。Feign的使用方式是使用Feign的注解定义接口调用这个接口。</td>
<td>OpenFeign是spring Cloud在Feign的基础上支持了SpringMVC的注解，如@RequestMapping等。<br><br />OpenFeign的@FeignClient可以解析SpringMVC的注解下的接口，并通过动态代理的方式产生实现类，实现类中做负载均衡并调用其他服务。</td>
</tr>
<tr>
<td>artifact id <br><code>spring-cloud-starter-feign</code></td>
<td>artifact id <br><code>spring-cloud-starter-openfeign</code></td>
</tr>
</tbody></table>
<h2 id="三、OpenFeign-使用"><a href="#三、OpenFeign-使用" class="headerlink" title="三、OpenFeign 使用"></a>三、OpenFeign 使用</h2><p><strong>用在消费端</strong></p>
<p>作为消费端的组件必定是用在消费端/调用者工程中使用。</p>
<h3 id="1、POM中引入依赖"><a href="#1、POM中引入依赖" class="headerlink" title="1、POM中引入依赖"></a>1、POM中引入依赖</h3><pre class=" language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>
<h3 id="2、启用OpenFeign"><a href="#2、启用OpenFeign" class="headerlink" title="2、启用OpenFeign"></a>2、启用OpenFeign</h3><p>在消费端的工程主启动类上添加 <code>@EnableFeignClients</code>注解启用OpenFeign。</p>
<p>示例：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableFeignClients</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserFeignApplication</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>UserFeignApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span></code></pre>
<h3 id="3、调用接口封装。"><a href="#3、调用接口封装。" class="headerlink" title="3、调用接口封装。"></a>3、调用接口封装。</h3><p>接口和平时写的service 接口类似，需要注意的是在调用者/消费端工程。</p>
<p>注意：</p>
<p>（1）写的是接口类，需要<code>@Component</code>注解；</p>
<p>（2）需要<code>@FeignClient</code>注解，声明要声明指定的微服务名称；</p>
<p>（3）调用方法的地址即服务提供方springMVC中的地址。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>service<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>entities<span class="token punctuation">.</span>CommonResult<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>entities<span class="token punctuation">.</span>User<span class="token punctuation">;</span>
<span class="token keyword">import</span> feign<span class="token punctuation">.</span>Param<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>openfeign<span class="token punctuation">.</span>FeignClient<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PathVariable<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"MS-CLOUD-USER-SERVICE"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserFeignService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/v1/user/get/{id}"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> CommonResult <span class="token function">getUserById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Long id<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span></code></pre>
<h3 id="4、接口使用"><a href="#4、接口使用" class="headerlink" title="4、接口使用"></a>4、接口使用</h3><p>在消费端的controller中，和平时调用service 一样，</p>
<pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> UserFeignService userFeignService<span class="token punctuation">;</span></code></pre>
<p>消费端的controller示例：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>controller<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>entities<span class="token punctuation">.</span>CommonResult<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>entities<span class="token punctuation">.</span>User<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>service<span class="token punctuation">.</span>UserFeignService<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PathVariable<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span>

<span class="token keyword">import</span> javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Resource<span class="token punctuation">;</span>

<span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserFeignController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> UserFeignService userFeignService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/consumer/user/get/{id}"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> CommonResult<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getUserById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Long id<span class="token punctuation">)</span><span class="token punctuation">{</span>
       <span class="token keyword">return</span> userFeignService<span class="token punctuation">.</span><span class="token function">getUserById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="5、启动测试"><a href="#5、启动测试" class="headerlink" title="5、启动测试"></a>5、启动测试</h3><p>访问消费端工程路径，验证是否能正常访问。</p>
<h2 id="四、OpenFeign超时控制"><a href="#四、OpenFeign超时控制" class="headerlink" title="四、OpenFeign超时控制"></a>四、OpenFeign超时控制</h2><p>默认情况下，OpenFeign客户端只等待1秒，但是服务端处理可能需要超过1秒，导致OpenFeign客户端超时，直接返回报错。所以需要进行超时控制。</p>
<p>因为OpenFeign 集成了Ribbon，所以可以使用Ribbon的配置来进行控制：</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">ribbon</span><span class="token punctuation">:</span>
  <span class="token key atrule">ReadTimeout</span><span class="token punctuation">:</span>  <span class="token number">5000</span>
  <span class="token key atrule">ConnectTimeout</span><span class="token punctuation">:</span> <span class="token number">5000</span>
</code></pre>
<h2 id="五、OpenFeign日志"><a href="#五、OpenFeign日志" class="headerlink" title="五、OpenFeign日志"></a>五、OpenFeign日志</h2><h3 id="1、日志级别"><a href="#1、日志级别" class="headerlink" title="1、日志级别"></a>1、日志级别</h3><p>OpenFeign 提供了日志打印给你，可以通过配置来调整日志级别，从而监控OpenFeign中Http的请求细节。</p>
<p>OpenFeign日志级别：</p>
<ul>
<li>NONE ：默认，不显示任何日志；</li>
<li>BASIC ：仅记录请求方法、URL、响应状态码、执行时间；</li>
<li>HEADERS ：除了BASIC定义的信息之外，还有请求头和响应头信息；</li>
<li>FULL ：全部请求和响应信息，BASIC  + HEADERS  + BODY + DATA</li>
</ul>
<h3 id="2、日志配置"><a href="#2、日志配置" class="headerlink" title="2、日志配置"></a>2、日志配置</h3><p>（1）OpenFeign的日志配置</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>config<span class="token punctuation">;</span>

<span class="token keyword">import</span> feign<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FeignConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    Logger<span class="token punctuation">.</span>Level <span class="token function">feignLoggerLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> Logger<span class="token punctuation">.</span>Level<span class="token punctuation">.</span>FULL<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>（2）YML文件需要开启日志的OpenFeign客户端</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">logging</span><span class="token punctuation">:</span>
  <span class="token key atrule">level</span><span class="token punctuation">:</span>
    <span class="token key atrule">com.xiaocai.springcloud.service.UserFeignService</span><span class="token punctuation">:</span> debug
</code></pre>
<p>添加以上配置后重新启动测试，在后头控制台查看输出日志</p>
<h2 id="六、其他"><a href="#六、其他" class="headerlink" title="六、其他"></a>六、其他</h2><p>后续遇到再补充。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud Hystrix</title>
    <url>/posts/464bb413.html</url>
    <content><![CDATA[<h2 id="SpringCloud-Hystrix熔断器"><a href="#SpringCloud-Hystrix熔断器" class="headerlink" title="SpringCloud Hystrix熔断器"></a>SpringCloud Hystrix熔断器</h2><p>相关链接：</p>
<ul>
<li><a href="bad02d94.html">SpringCloud 微服务学习</a></li>
<li><a href="eeda118.html">RESTful 接口设计规范</a></li>
<li><a href="648d6b26.html">SpringCloud Eureka 服务注册与发现</a></li>
<li><a href="3010739f.html">SpringCloud Consul 服务注册与发现</a></li>
<li><a href="7ecbba09.html">SpringCloud Ribbon 客户端负载均衡与服务调用</a></li>
<li><a href="b27245de.html">SpringCloud OpenFeign 服务接口调用</a></li>
<li><a href="464bb413.html">SpringCloud Hystrix熔断器</a></li>
<li><a href="bc16d093.html">SpringCloud Gateway 服务网关</a></li>
<li><a href="fbbe72e1.html">SpringCloud Zuul 服务网关</a></li>
<li><a href="5b5896d1.html">Spring Cloud Config 分布式配置中心</a></li>
<li><a href="9e02a3e8.html">Spring Cloud Bus 消息总线</a></li>
<li><a href="7f3b07b1.html">SpringCloud Stream 消息驱动</a></li>
<li><a href="b99c053f.html">SpringCloud Sleuth 分布式请求链路追踪</a></li>
<li><a href="461589aa.html">SpringCloud Alibaba</a></li>
<li><a href="a46e46f8.html">SpringCloud Alibaba Nacos服务注册和配置中心</a></li>
<li><a href="5122a811.html">SpringCloud Alibaba Sentinel 实现熔断与限流</a></li>
<li><a href="fb7c74c4.html">SpringCloud Alibaba Seata 分布式事务</a></li>
</ul>
<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p>分布式系统环境下，服务间类似依赖非常常见，一个业务调用通常依赖多个基础服务。 </p>
<h3 id="1、服务雪崩"><a href="#1、服务雪崩" class="headerlink" title="1、服务雪崩"></a>1、服务雪崩</h3><p>多个微服务调用时，服务A调用服务B和服务C，服务B和C又调用其他微服务…这就是<strong>扇出</strong>。</p>
<p>扇出链路上某个或某些微服务的调用响应时间过长或不可用，对服务A的调用就会占用越来越多的系统资源，进而引起系统崩溃，即发生”雪崩效应“。</p>
<p><strong>雪崩效应常见场景</strong></p>
<ul>
<li>硬件故障：如服务器宕机，机房断电，光纤损坏等。</li>
<li>流量激增：如异常流量，重试加大流量等。</li>
<li>缓存穿透：一般发生在应用重启，所有缓存失效时，以及短时间内大量缓存失效时。大量的缓存不命中，使请求直击后端服务，造成服务提供者超负荷运行，引起服务不可用。</li>
<li>程序BUG：如程序逻辑导致内存泄漏，JVM长时间FullGC等。</li>
<li>同步等待：服务间采用同步调用模式，同步等待造成的资源耗尽。</li>
</ul>
<p><strong>雪崩效应应对策略</strong></p>
<p>针对造成雪崩效应的不同场景，可以使用不同的应对策略，没有一种通用所有场景的策略，参考如下：</p>
<ul>
<li>硬件故障：多机房容灾、异地多活等。</li>
<li>流量激增：服务自动扩容、流量控制（限流、关闭重试）等。</li>
<li>缓存穿透：缓存预加载、缓存异步加载等。</li>
<li>程序BUG：修改程序bug、及时释放资源等。</li>
<li>同步等待：资源隔离、MQ解耦、不可用服务调用快速失败等。资源隔离通常指不同服务调用采用不同的线程池；不可用服务调用快速失败一般通过熔断器模式结合超时机制实现。</li>
</ul>
<p>一个应用不能对来自依赖的故障进行隔离，那该应用本身就处在被拖垮的风险中。 </p>
<p>雪崩效应常见场景及对策参考文章：<a href="https://blog.csdn.net/loushuiyifan/article/details/82702522" target="_blank" rel="noopener">https://blog.csdn.net/loushuiyifan/article/details/82702522</a></p>
<p>因此Hystrix出现了。</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/hystrix-00.png" alt="官方图标"></p>
<p>Hystrix [hɪst’rɪks]，中文含义是豪猪，因其背上长满棘刺，从而拥有了自我保护的能力。</p>
<h2 id="二、Hystrix"><a href="#二、Hystrix" class="headerlink" title="二、Hystrix"></a>二、Hystrix</h2><p>Hystrix是Netflix开源的一款容错框架。</p>
<p>Hystrix是一个用于处理分布式系统的延迟和容错的开源库，Hystrix能够保证在一个依赖出问题的情况下，不会导致整体服务是不，避免级联故障，以提高分布式系统的弹性。</p>
<h3 id="1、Hystrix目标"><a href="#1、Hystrix目标" class="headerlink" title="1、Hystrix目标"></a>1、Hystrix目标</h3><p>Hystrix被设计的目标是：</p>
<ol>
<li>对通过第三方客户端库访问的依赖项（通常是通过网络）的延迟和故障进行保护和控制。</li>
<li>在复杂的分布式系统中阻止级联故障。</li>
<li>快速失败，快速恢复。</li>
<li>回退，尽可能优雅地降级。</li>
<li>启用近实时监控、警报和操作控制。</li>
</ol>
<h3 id="2、Hystrix解决了什么问题"><a href="#2、Hystrix解决了什么问题" class="headerlink" title="2、Hystrix解决了什么问题"></a>2、Hystrix解决了什么问题</h3><p>复杂分布式体系结构中的应用程序有许多依赖项，每个依赖项在某些时候都不可避免地会失败。如果主机应用程序没有与这些外部故障隔离，那么它有可能被他们拖垮。</p>
<p>例如，对于一个依赖于30个服务的应用程序，每个服务都有99.99%的正常运行时间，你可以期望如下：</p>
<p>99.9930  =  99.7% 可用</p>
<p>也就是说一亿个请求的0.03% = 3000000 会失败</p>
<p>如果一切正常，那么每个月有2个小时服务是不可用的</p>
<p>现实通常是更糟糕。 </p>
<p>正常情况下：</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/hystrix-01.png" alt=""></p>
<p>当其中有一个系统有延迟时，它可能阻塞整个用户请求： </p>
<p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/hystrix-02.png" alt=""></p>
<p>在高流量的情况下，一个后端依赖项的延迟可能导致所有服务器上的所有资源在数秒内饱和：</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/hystrix-03.png" alt=""></p>
<p>使用Hystrix来包装每个依赖项时，上图中所示的架构会发生变化，如下图所示：<br>每个依赖项相互隔离，当延迟发生时，它会被限制在资源中，并包含回退逻辑，该逻辑决定在依赖项中发生任何类型的故障时应作出何种响应：</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/hystrix-04.png" alt=""></p>
<h3 id="3、Hystrix设计原则"><a href="#3、Hystrix设计原则" class="headerlink" title="3、Hystrix设计原则"></a>3、Hystrix设计原则</h3><p>Hystrix 涉及原则</p>
<ul>
<li>防止任何单个依赖项耗尽所有容器（如Tomcat）用户线程。</li>
<li>甩掉包袱，快速失败而不是排队。</li>
<li>在任何可行的地方提供回退，以保护用户不受失败的影响。</li>
<li>使用隔离技术（如隔离板、泳道和断路器模式）来限制任何一个依赖项的影响。</li>
<li>通过近实时的度量、监视和警报来优化发现时间。</li>
<li>通过配置的低延迟传播来优化恢复时间。</li>
<li>支持对Hystrix的大多数方面的动态属性更改，允许使用低延迟反馈循环进行实时操作修改。</li>
<li>避免在整个依赖客户端执行中出现故障，而不仅仅是在网络流量中。</li>
</ul>
<h3 id="4、Hystrix-工作流程"><a href="#4、Hystrix-工作流程" class="headerlink" title="4、Hystrix 工作流程"></a>4、Hystrix 工作流程</h3><p>Hystrix 熔断工作流程图</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/hystrix-work.png" alt=""></p>
<p>Hystrix整个工作流如下：</p>
<ol>
<li>构造一个 HystrixCommand或HystrixObservableCommand对象，用于封装请求，并在构造方法配置请求被执行需要的参数；</li>
<li>执行命令，Hystrix提供了4种执行命令的方法，后面详述；</li>
<li>判断是否使用缓存响应请求，若启用了缓存，且缓存可用，直接使用缓存响应请求。Hystrix支持请求缓存，但需要用户自定义启动；</li>
<li>判断熔断器是否打开，如果打开，跳到第8步；</li>
<li>判断线程池/队列/信号量是否已满，已满则跳到第8步；</li>
<li>执行HystrixObservableCommand.construct()或HystrixCommand.run()，如果执行失败或者超时，跳到第8步；否则，跳到第9步；</li>
<li>统计熔断器监控指标；</li>
<li>走Fallback备用逻辑</li>
<li>返回请求响应</li>
</ol>
<p>Hystrix 隔离</p>
<p>Hystrix隔离方式采用线程/信号的方式，通过隔离限制依赖的并发量和阻塞扩散 </p>
<p>（1）线程隔离</p>
<p>Hystrix在用户请求和服务之间加入了线程池。</p>
<p>Hystrix为每个依赖调用分配一个小的线程池，如果线程池已满调用将被立即拒绝，默认不采用排队.加速失败判定时间。线程数是可以被设定的。</p>
<p>原理：用户的请求将不再直接访问服务，而是通过线程池中的空闲线程来访问服务，如果线程池已满，则会进行降级处理，用户的请求不会被阻塞，至少可以看到一个执行结果（例如返回友好的提示信息），而不是无休止的等待或者看到系统崩溃。</p>
<p>（2）信号隔离</p>
<p>​         信号隔离也可以用于限制并发访问，防止阻塞扩散,  与线程隔离最大不同在于执行依赖代码的线程依然是请求线程（该线程需要通过信号申请, 如果客户端是可信的且可以快速返回，可以使用信号隔离替换线程隔离,降低开销。信号量的大小可以动态调整,  线程池大小不可以。</p>
<h2 id="三、Hystrix使用"><a href="#三、Hystrix使用" class="headerlink" title="三、Hystrix使用"></a>三、Hystrix使用</h2><p>Hystrix 比较重要的几个概念/功能。</p>
<ul>
<li>服务降级</li>
<li>服务熔断</li>
<li>服务限流</li>
<li>服务监控</li>
</ul>
<h3 id="1、服务降级"><a href="#1、服务降级" class="headerlink" title="1、服务降级"></a>1、服务降级</h3><p>服务降级：在请求服务时，服务器因某些原因（异常/超时等原因）繁忙无法立即响应，Hystrix会有一个fallback 的备选响应。</p>
<p>服务降级引发原因：</p>
<ul>
<li>程序运行异常</li>
<li>超时，执行开始冒烟在允许的时间内完成</li>
<li>服务熔断触发服务降级</li>
<li>线程池/信号量拒绝，不尝试执行</li>
</ul>
<p>超时快速响应，异常快速失败。</p>
<p><strong>服务降级测试</strong>：</p>
<p>进行服务降级测试的时候，可以让线程Sleep模拟超时，手工制造异常模拟运行异常，停止服务模拟宕机进行访问。</p>
<h4 id="（1）针对特定方法的服务降级"><a href="#（1）针对特定方法的服务降级" class="headerlink" title="（1）针对特定方法的服务降级"></a>（1）针对特定方法的服务降级</h4><p>在服务提供方，针对某个可能会频繁调用的核心业务方法进行服务降级。</p>
<p>A、在业务类中启用，使用<code>@HystrixCommand</code>注解开启。</p>
<p>B、在主启动类启用熔断器，使用<code>@EnableCircuitBreaker</code>注解。</p>
<p>示例：</p>
<p>业务类方法：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>service<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>hystrix<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>javanica<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>HystrixCommand<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>hystrix<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>javanica<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>HystrixProperty<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserHystrixService</span> <span class="token punctuation">{</span>

    <span class="token comment" spellcheck="true">//成功</span>
    <span class="token keyword">public</span> String <span class="token function">usertInfo_OK</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"线程池："</span><span class="token operator">+</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"   usertInfo_OK,id：  "</span><span class="token operator">+</span>id<span class="token operator">+</span><span class="token string">"\t"</span><span class="token operator">+</span><span class="token string">"哈哈哈"</span>  <span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//失败</span>
    <span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>fallbackMethod <span class="token operator">=</span> <span class="token string">"usertInfo_TimeOutHandler"</span><span class="token punctuation">,</span>commandProperties <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"execution.isolation.thread.timeoutInMilliseconds"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"3000"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//表示在3秒钟以内响应就是正常的业务逻辑</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">usertInfo_TimeOut</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>
           <span class="token comment" spellcheck="true">//这里写业务逻辑代码</span>
        <span class="token keyword">int</span> timeNumber <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// try { TimeUnit.SECONDS.sleep(timeNumber); }catch (Exception e) {e.printStackTrace();}</span>
        <span class="token keyword">return</span> <span class="token string">"线程池："</span><span class="token operator">+</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"   usertInfo_TimeOut,id：  "</span><span class="token operator">+</span>id<span class="token operator">+</span><span class="token string">"\t"</span><span class="token operator">+</span><span class="token string">" 耗时(秒)"</span><span class="token operator">+</span>timeNumber<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//兜底方法</span>
    <span class="token keyword">public</span> String <span class="token function">usertInfo_TimeOutHandler</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"线程池："</span><span class="token operator">+</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"   系统繁忙, 请稍候再试  ,id：  "</span><span class="token operator">+</span>id<span class="token operator">+</span><span class="token string">"\t"</span><span class="token operator">+</span><span class="token string">" 服务降级"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//成功</span>
    <span class="token keyword">public</span> String <span class="token function">getUserById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span>   <span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>主启动类<code>@EnableCircuitBreaker</code>示例：</p>
<pre class=" language-java"><code class="language-java">
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableEurekaClient</span> 
<span class="token annotation punctuation">@EnableCircuitBreaker</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserInfoApplication</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>UserInfoApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span></code></pre>
<p>在服务消费方，针对前端或浏览器调用的方法进行服务降级。</p>
<p>（A）开启配置</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">feign</span><span class="token punctuation">:</span>
  <span class="token key atrule">hystrix</span><span class="token punctuation">:</span>
    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true">#如果处理自身的容错就开启。</span>
</code></pre>
<p>（B）主启动类，添加注解<code>@EnableHystrix</code></p>
<p>（C）消费方调用业务类的controller</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>service<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>entities<span class="token punctuation">.</span>CommonResult<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>entities<span class="token punctuation">.</span>User<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>hystrix<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>javanica<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>HystrixCommand<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>hystrix<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>javanica<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>HystrixProperty<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span>

<span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> UserFeignService userFeignService <span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/consumer/user/hystrix/timeout/{id}"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>fallbackMethod <span class="token operator">=</span> <span class="token string">"userTimeOutFallbackMethod"</span><span class="token punctuation">,</span>commandProperties <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"execution.isolation.thread.timeoutInMilliseconds"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"1500"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//1.5秒钟以内就是正常的业务逻辑</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">paymentInfo_TimeOut</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>
        String result <span class="token operator">=</span> userFeignService<span class="token punctuation">.</span><span class="token function">usertInfo_TimeOut</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//fallback方法</span>
    <span class="token keyword">public</span> String <span class="token function">userTimeOutFallbackMethod</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"我是消费端，系统繁忙请10秒钟后再试或者自己运行出错请检查自己,(┬＿┬)"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>对<code>@HystrixCommand</code>内属性的修改需要重启微服务。</p>
<h4 id="（2）针对所有方法全局服务降级"><a href="#（2）针对所有方法全局服务降级" class="headerlink" title="（2）针对所有方法全局服务降级"></a>（2）针对所有方法全局服务降级</h4><p>实际开发中，可能有很多方法，为每个方法写一个专属的服务降级方法，导致方法特别多，代码膨胀。只有几个特点的核心方法、调用频繁的方进行特定fallback降级服务。其他的可以使用全局公共的fallback进行服务降级。</p>
<p>在类的头部声明默认的fallback。</p>
<p>注意，这里的<code>usertInfo_TimeOut</code> 方法的特定服务降级<code>@HystrixCommand</code>是在userHystrixService中写的。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>service<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>entities<span class="token punctuation">.</span>CommonResult<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>entities<span class="token punctuation">.</span>User<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>hystrix<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>javanica<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>HystrixCommand<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>hystrix<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>javanica<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>HystrixProperty<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span>

<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@DefaultProperties</span><span class="token punctuation">(</span>defaultFallback <span class="token operator">=</span> <span class="token string">"default_Global_Fallback"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserProviderController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
     <span class="token keyword">private</span> UserHystrixService userHystrixService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/v1/user/hystrix/timeout/{id}"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">usertInfo_TimeOut</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>
        String result <span class="token operator">=</span> userHystrixService<span class="token punctuation">.</span><span class="token function">usertInfo_TimeOut</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

      <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/v1/user/get/{id}"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> CommonResult <span class="token function">getUserById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Long id<span class="token punctuation">)</span><span class="token punctuation">{</span>
        User user <span class="token operator">=</span> userHystrixService<span class="token punctuation">.</span><span class="token function">getUserById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        CommonResult result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"调用成功"</span>，user<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/v1/user/ok/{id}"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> CommonResult <span class="token function">usertInfo_OK</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Long id<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> userHystrixService<span class="token punctuation">.</span><span class="token function">usertInfo_OK</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> String <span class="token function">default_Global_Fallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"Global Fallback  系统繁忙，请10秒之后再试！"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="（3）配合Feign的使用"><a href="#（3）配合Feign的使用" class="headerlink" title="（3）配合Feign的使用"></a>（3）配合Feign的使用</h4><p>既然是使用Feign，那么肯定是在调用端/客户端工程。</p>
<p>配合Feign的使用的时候可以更好的解耦，将服务降级分离出正常的业务逻辑代码中。</p>
<p>（A）配置</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">feign</span><span class="token punctuation">:</span>
  <span class="token key atrule">hystrix</span><span class="token punctuation">:</span>
    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true">#如果处理自身的容错就开启。</span>
</code></pre>
<p>（B）存在一个对服务调用的Feign的Service接口封装，并指明fallback的类是<code>UserFallbackService</code></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>service<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>entities<span class="token punctuation">.</span>CommonResult<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>entities<span class="token punctuation">.</span>User<span class="token punctuation">;</span>
<span class="token keyword">import</span> feign<span class="token punctuation">.</span>Param<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>openfeign<span class="token punctuation">.</span>FeignClient<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PathVariable<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"MS-CLOUD-USER-SERVICE"</span>，fallback<span class="token operator">=</span>UserFallbackService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserFeignService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/v1/user/get/{id}"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> CommonResult <span class="token function">getUserById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Long id<span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/v1/user/ok/{id}"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> CommonResult <span class="token function">usertInfo_OK</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Long id<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/v1/user/hystrix/timeout/{id}"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> CommonResult <span class="token function">usertInfo_TimeOut</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Long id<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span></code></pre>
<p>（C）新建一个降级使用的类<code>UserFallbackService</code>，并实现Feign的Service 接口</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>service<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserFallbackService</span> <span class="token keyword">implements</span> <span class="token class-name">UserFeignService</span><span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> String <span class="token function">getUserById</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"我是 getUserById 的服务降级方法，来自 UserFallbackService "</span>；
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> String <span class="token function">userInfo_OK</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"我是 userInfo_OK 的服务降级方法，来自 UserFallbackService "</span>；
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> String <span class="token function">usertInfo_TimeOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"我是 usertInfo_TimeOut 的服务降级方法，来自 UserFallbackService "</span>；
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>该类中对应方法的服务降级fallback响应。这样服务降级就和业务进行分离。</p>
<h4 id="（3）fallback方法抛出异常"><a href="#（3）fallback方法抛出异常" class="headerlink" title="（3）fallback方法抛出异常"></a>（3）fallback方法抛出异常</h4><p>fallback方法在什么情况下会抛出异常</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
<th>是否抛异常</th>
</tr>
</thead>
<tbody><tr>
<td>FALLBACK_FAILURE</td>
<td>Fallback执行抛出出错</td>
<td>YES</td>
</tr>
<tr>
<td>FALLBACK_REJECTED</td>
<td>Fallback信号量拒绝，不尝试执行</td>
<td>YES</td>
</tr>
<tr>
<td>FALLBACK_MISSING</td>
<td>没有Fallback实例</td>
<td>YES</td>
</tr>
</tbody></table>
<h3 id="2、服务熔断"><a href="#2、服务熔断" class="headerlink" title="2、服务熔断"></a>2、服务熔断</h3><p>服务熔断：由于某些原因使得服务出现了过载现象，为防止造成整个系统故障，从而采用的一种保护措施，所以很多地方把熔断亦称为过载保护。 </p>
<p>类似保险开关功能，服务器接近最大服务访问后，拉闸限电，直接拒绝访问，然后调用服务降级的方法并返回友好提示。</p>
<p><strong>Hystrix 熔断机制</strong>：</p>
<p>如果某个目标服务调用慢或者有大量超时，此时，熔断该服务的调用，对于后续调用请求，不在继续调用目标服务，直接返回，快速释放资源。如果目标服务情况好转则恢复调用。 </p>
<p>（服务降级——&gt; 服务熔断——&gt;恢复调用链路）</p>
<p>熔断相关论述<a href="https://martinfowler.com/bliki/CircuitBreaker.html" target="_blank" rel="noopener">https://martinfowler.com/bliki/CircuitBreaker.html</a></p>
<p><strong>熔断器:Circuit Breaker</strong></p>
<p>​      熔断器是位于线程池之前的组件。用户请求某一服务之后，Hystrix会先经过熔断器，此时如果熔断器的状态是打开（跳起），则说明已经熔断，这时将直接进行降级处理，不会继续将请求发到线程池<strong>。</strong>熔断器相当于在线程池之前的一层屏障。每个熔断器默认维护10个bucket ，每秒创建一个bucket ，每个blucket记录成功,失败,超时,拒绝的次数。当有新的bucket被创建时，最旧的bucket会被抛弃。</p>
<p>​       </p>
<p>​           <img src="/medias/loading-animated.gif" data-original="/images/springcloud/hystrix-circuit-break.jpg" alt="熔断器的状态"> </p>
<h4 id="（1）熔断使用"><a href="#（1）熔断使用" class="headerlink" title="（1）熔断使用"></a>（1）熔断使用</h4><p>熔断使用依旧是注解 <code>@HystrixCommand</code></p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>fallbackMethod <span class="token operator">=</span> <span class="token string">"userCircuitBreaker_fallback"</span><span class="token punctuation">,</span>commandProperties <span class="token operator">=</span> <span class="token punctuation">{</span>
     <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"circuitBreaker.enabled"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//是否开启断路器</span>
     <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"circuitBreaker.requestVolumeThreshold"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">//请求次数</span>
     <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"circuitBreaker.sleepWindowInMilliseconds"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"10000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//时间范围</span>
     <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"circuitBreaker.errorThresholdPercentage"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"60"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//失败率达到多少后跳闸</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<p>熔断主要是针对服务提供者。</p>
<p>Service 示例：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>service<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>hystrix<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>javanica<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>HystrixCommand<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>hystrix<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>javanica<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>HystrixProperty<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserHystrixService</span> <span class="token punctuation">{</span>

    <span class="token comment" spellcheck="true">//成功</span>
    <span class="token keyword">public</span> String <span class="token function">usertInfo_OK</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"线程池："</span><span class="token operator">+</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"   usertInfo_OK,id：  "</span><span class="token operator">+</span>id<span class="token operator">+</span><span class="token string">"\t"</span><span class="token operator">+</span><span class="token string">"哈哈哈"</span>  <span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//失败-服务降级</span>
    <span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>fallbackMethod <span class="token operator">=</span> <span class="token string">"usertInfo_TimeOutHandler"</span><span class="token punctuation">,</span>commandProperties <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"execution.isolation.thread.timeoutInMilliseconds"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"3000"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//表示在3秒钟以内响应就是正常的业务逻辑</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">usertInfo_TimeOut</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>
           <span class="token comment" spellcheck="true">//这里写业务逻辑代码</span>
        <span class="token keyword">int</span> timeNumber <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// try { TimeUnit.SECONDS.sleep(timeNumber); }catch (Exception e) {e.printStackTrace();}</span>
        <span class="token keyword">return</span> <span class="token string">"线程池："</span><span class="token operator">+</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"   usertInfo_TimeOut,id：  "</span><span class="token operator">+</span>id<span class="token operator">+</span><span class="token string">"\t"</span><span class="token operator">+</span><span class="token string">" 耗时(秒)"</span><span class="token operator">+</span>timeNumber<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//兜底方法</span>
    <span class="token keyword">public</span> String <span class="token function">usertInfo_TimeOutHandler</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"线程池："</span><span class="token operator">+</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"   系统繁忙, 请稍候再试  ,id：  "</span><span class="token operator">+</span>id<span class="token operator">+</span><span class="token string">"\t"</span><span class="token operator">+</span><span class="token string">" 服务降级"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//成功</span>
    <span class="token keyword">public</span> String <span class="token function">getUserById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span>   <span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token comment" spellcheck="true">//服务熔断</span>
    <span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>fallbackMethod <span class="token operator">=</span> <span class="token string">"userCircuitBreaker_fallback"</span><span class="token punctuation">,</span>commandProperties <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"circuitBreaker.enabled"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//是否开启断路器</span>
            <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"circuitBreaker.requestVolumeThreshold"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">//请求次数</span>
            <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"circuitBreaker.sleepWindowInMilliseconds"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"10000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//时间范围</span>
            <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"circuitBreaker.errorThresholdPercentage"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"60"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//失败率达到多少后跳闸</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">userCircuitBreaker</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"*****id 不能负数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        String serialNumber <span class="token operator">=</span> IdUtil<span class="token punctuation">.</span><span class="token function">simpleUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token operator">+</span><span class="token string">"调用成功,流水号："</span><span class="token operator">+</span>serialNumber<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> String <span class="token function">userCircuitBreaker_fallback</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"id 不能负数，请稍候再试,(┬＿┬)/~~     id: "</span> <span class="token operator">+</span>id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


<span class="token punctuation">}</span></code></pre>
<p>在controller中的调用，就平时service调用方法一致。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>service<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>entities<span class="token punctuation">.</span>CommonResult<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>entities<span class="token punctuation">.</span>User<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>hystrix<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>javanica<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>HystrixCommand<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>hystrix<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>javanica<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>HystrixProperty<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span>

<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@DefaultProperties</span><span class="token punctuation">(</span>defaultFallback <span class="token operator">=</span> <span class="token string">"default_Global_Fallback"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserProviderController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
     <span class="token keyword">private</span> UserHystrixService userHystrixService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/v1/user/hystrix/timeout/{id}"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">usertInfo_TimeOut</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>
        String result <span class="token operator">=</span> userHystrixService<span class="token punctuation">.</span><span class="token function">usertInfo_TimeOut</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

      <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/v1/user/get/{id}"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> CommonResult <span class="token function">getUserById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Long id<span class="token punctuation">)</span><span class="token punctuation">{</span>
        User user <span class="token operator">=</span> userHystrixService<span class="token punctuation">.</span><span class="token function">getUserById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        CommonResult result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"调用成功"</span>，user<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/v1/user/ok/{id}"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> CommonResult <span class="token function">usertInfo_OK</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Long id<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> userHystrixService<span class="token punctuation">.</span><span class="token function">usertInfo_OK</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//服务熔断测试</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/v1/user/circuit/{id}"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> CommonResult <span class="token function">usertInfo_OK</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Long id<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> userHystrixService<span class="token punctuation">.</span><span class="token function">userCircuitBreaker</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> String <span class="token function">default_Global_Fallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"Global Fallback  系统繁忙，请10秒之后再试！"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>测试：</p>
<p>测试访问地址1：<a href="http://localhost:6002/v1/user/circuit/10" target="_blank" rel="noopener">http://localhost:6002/v1/user/circuit/10</a></p>
<p>测试访问地址2：<a href="http://localhost:6002/v1/user/circuit/-10" target="_blank" rel="noopener">http://localhost:6002/v1/user/circuit/-10</a></p>
<p>一次正确一次错误。</p>
<p>频繁刷新地址2之后，再频繁访问地址1，多次错误,然后慢慢正确，发现刚开始不满足条件，就算是正确的访问地址也不能进行访问，需要慢慢的恢复链路。</p>
<h4 id="（2）熔断器参数"><a href="#（2）熔断器参数" class="headerlink" title="（2）熔断器参数"></a>（2）熔断器参数</h4><p><strong>熔断器/断路器的三个重要参数</strong>：快照时间窗、请求总数阈值、错误百分比阈值。</p>
<p>（A）<strong>快照时间窗</strong>：熔断器确定是否打开需要统计一些请求和错误数据，而统计的世界范围就是快照时间窗，默认为最近10秒。</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"circuitBreaker.sleepWindowInMilliseconds"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"10000"</span><span class="token punctuation">)</span></code></pre>
<p>（B）<strong>请求总数阈值</strong>：在快照时间窗内，必须满足请求总数阈值才有资格熔断。默认是20，即在10秒内，如果Hystrix命令的调用次数不足20次，即使所有请求都超时或其他原因失败，熔断器都不会打开。</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"circuitBreaker.requestVolumeThreshold"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"20"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"circuitBreaker.sleepWindowInMilliseconds"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"10000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span></code></pre>
<p>（C）<strong>错误百分比阈值</strong>：当请求总数在快照时间窗内超过了阈值，比如在10秒内发生40次调用，如果在40次调用中有20次调用发生了超时或异常，即超过50%的错误百分比，在默认设定50%阈值的情况下，这时熔断器打开。</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"circuitBreaker.sleepWindowInMilliseconds"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"10000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"circuitBreaker.errorThresholdPercentage"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"60"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> </code></pre>
<p>熔断器打开的条件：</p>
<ul>
<li>当满足一定阈值的时候（默认是10秒内超过20次）</li>
<li>当失败率达到一定的时候（默认是10秒内超过50%）</li>
</ul>
<p>熔断器打开的时候，会引发服务降级，直接进入fallback的备选响应。</p>
<p>熔断器打开对主逻辑熔断之后，Hystrix会进入一个休眠时间窗，该期间，降级逻辑会成为主逻辑进行响应。</p>
<p>一段时间后（休眠时间窗结束，默认是5秒），熔断器自动进入半开状态，熔断器会让其中一次（少量）请求放行，进入正常的业务主逻辑，如果成功，断路器会关闭，放行后续请求，恢复正常的业务逻辑线；若请求失败，熔断器继续开启，依旧进行服务降级，进入fallback的备选响应。等待一段时间（休眠时间窗）后，再次进入半开状态，重复该步骤。</p>
<p><strong>常用参数：</strong></p>
<p><strong>## 超时时间 ##</strong></p>
<p>（1）hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds</p>
<p>在调用方配置，被该调用方的所有方法的超时时间都是该值，优先级低于下边的指定配置</p>
<p>（2）hystrix.command.HystrixCommandKey.execution.isolation.thread.timeoutInMilliseconds</p>
<p>在调用方配置，被该调用方的指定方法（HystrixCommandKey方法名）的超时时间是该值</p>
<p>线程池核心线程数</p>
<p>hystrix.threadpool.default.coreSize（默认为10）</p>
<p><strong>## Queue ##</strong></p>
<p>（1）hystrix.threadpool.default.maxQueueSize（最大排队长度。默认-1，使用SynchronousQueue。其他值则使用 LinkedBlockingQueue。如果要从-1换成其他值则需重启，即该值不能动态调整，若要动态调整，需要使用到下边这个配置）</p>
<p>（2）hystrix.threadpool.default.queueSizeRejectionThreshold（排队线程数量阈值，默认为5，达到时拒绝，如果配置了该选项，队列的大小是该队列）</p>
<p>注意：如果maxQueueSize=-1的话，则该选项不起作用</p>
<p><strong>## 断路器 ##</strong></p>
<p>（1）<code>hystrix.command.default.circuitBreaker.requestVolumeThreshold</code>（当在配置时间窗口内达到此数量的失败后，进行熔断路。默认20个）</p>
<p>简言之，10s内请求失败数量达到20个，断路器开。</p>
<p>（2）<code>hystrix.command.default.circuitBreaker.sleepWindowInMilliseconds</code>（短路多久以后开始尝试是否恢复，默认5s）</p>
<p>（3）<code>hystrix.command.default.circuitBreaker.errorThresholdPercentage</code>（出错百分比阈值，当达到此阈值后，开始短路。默认50%）</p>
<p><strong>## fallback ##</strong>  </p>
<p>hystrix.command.default.fallback.isolation.semaphore.maxConcurrentRequests（调用线程允许请求HystrixCommand.GetFallback()的最大数量，默认10。超出时将会有异常抛出，注意：该项配置对于THREAD隔离模式也起作用）</p>
<p><strong>熔断器全部参数：</strong></p>
<p>官方文档配置说明：<a href="https://github.com/Netflix/Hystrix/wiki/Configuration" target="_blank" rel="noopener">https://github.com/Netflix/Hystrix/wiki/Configuration</a></p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>fallbackMethod <span class="token operator">=</span> <span class="token string">"user_fallbackMethod"</span><span class="token punctuation">,</span>
                groupKey <span class="token operator">=</span> <span class="token string">"user_GroupCommand"</span><span class="token punctuation">,</span>
                commandKey <span class="token operator">=</span> <span class="token string">"user_Command"</span><span class="token punctuation">,</span> 
                threadPoolKey <span class="token operator">=</span> <span class="token string">"user_ThreadPool"</span><span class="token punctuation">,</span>
                commandProperties <span class="token operator">=</span> <span class="token punctuation">{</span>
     <span class="token comment" spellcheck="true">//设置隔离策略，THREAD-表示线程池隔离；SEMAPHORE-信号池隔离</span>
     <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"execution.isolation.strategy"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"THREAD"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
     <span class="token comment" spellcheck="true">//放隔离策略选择信号池隔离时，用来设置信号池的大小（最大并发量）</span>
     <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"execution.isolation.semaphore.maxConcurrentRequests"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
     <span class="token comment" spellcheck="true">//是否启动超时时间</span>
     <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"execution.timeout.enabled"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   
     <span class="token comment" spellcheck="true">//配置命令执行的超时时间</span>
     <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"execution.isolation.thread.timeoutinMilliseconds"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
     <span class="token comment" spellcheck="true">//执行超时的时候是否中断</span>
     <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"execution.isolation.thread.interruptOnTimeout"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
     <span class="token comment" spellcheck="true">//执行被取消的时候是否中断</span>
     <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"execution.isolation.thread.interruptOnCancel"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

     <span class="token comment" spellcheck="true">//允许回调方法执行的最大并发数</span>
     <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"fallback.isolation.semaphore.maxConcurrentRequests"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
     <span class="token comment" spellcheck="true">//服务降级是否启用，是否执行回调函数</span>
     <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"fallback.enabled"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
     <span class="token comment" spellcheck="true">//-------------------------------熔断------------------------      </span>
     <span class="token comment" spellcheck="true">//是否开启断路器/熔断器</span>
     <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"circuitBreaker.enabled"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
     <span class="token comment" spellcheck="true">//该属性用来设置在滚动时间窗中，熔断器熔断的最小请求数，例如，默认该值为20的时候，如果滚动时间窗（默认10秒）内收到19个请求，即使19个请求都失败了，熔断器也不会打开。</span>
     <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"circuitBreaker.requestVolumeThreshold"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"20"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          
     <span class="token comment" spellcheck="true">// 该属性用来设置在滚动时间窗中，请求数量超过circuitBreaker.requestVolumeThreshold的情况下，如果错误请求百分比超过50%，就把熔断器设置为打开状态，否则设置为关闭状态。即失败率达到多少后跳闸</span>
                    <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"circuitBreaker.errorThresholdPercentage"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"50"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
     <span class="token comment" spellcheck="true">// 该属性用来设置当熔断器打开之后的休眠时间窗，休眠时间窗结束之后，会将熔断器置为"半开"状态，尝试放行熔断的请求命令，如果放行请求依然失败就将熔断器继续设置为"打开"状态，如果成功就设置为"关闭"状态.     </span>
     <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"circuitBreaker.sleepWindowInMilliseconds"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"5000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
     <span class="token comment" spellcheck="true">// 熔断器强制打开               </span>
     <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"circuitBreaker.forceOpen"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"false"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
     <span class="token comment" spellcheck="true">// 熔断器强制关闭             </span>
     <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"circuitBreaker.forceClosed"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"false"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

     <span class="token comment" spellcheck="true">// -------------------------</span>
     <span class="token comment" spellcheck="true">// 滚动时间窗设置，该时间用于熔断器判断健康度时需要手机信息的持续时间             </span>
     <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"metrics.rollingStats.timeinMilliseconds"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"10000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

     <span class="token comment" spellcheck="true">// 该属性用来设置在滚动时间窗内统计指标信息时划分"桶"的数量。熔断器在手机指标信息的时候会根据设置的时间窗长度拆分成多个"桶" 来累计各度量值，每个"桶"记录了一段时间内的采集指标。比如在10秒 内拆分成10个“桶”收集样本，所以 timeinMilliseconds 必须能被 numBuckets 整除。否则会抛出异常。      </span>
     <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"metrics.rollingStats.numBuckets"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

     <span class="token comment" spellcheck="true">//该属性用来设置对命令执行的延迟是否使用百分位来跟踪和计算。如果设置为false,那么所有的概要统计都将返回-1</span>
     <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"metrics.rollingPercentile.enabled"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"false"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

     <span class="token comment" spellcheck="true">//该属性用来设置 百分位统计的滚动窗口的持续时间。单位为毫秒</span>
     <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"metrics.rollingPercentile.timeinMilliseconds"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"60000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 

     <span class="token comment" spellcheck="true">//该属性用来设置 百分位统计的滚动窗口中使用 "桶" 的数量</span>
     <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"metrics.rollingPercentile.numBuckets"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"60000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
     <span class="token comment" spellcheck="true">//该属性用来设置 在执行过程中，每个 "桶" 中保留的最大执行次数，如果在滚动时间窗内发生超过该设定值的执行次数，就从最初的位置重新开始写。例如，将该组值设置为100，滚动时间为10秒，若在10秒内一个 "桶" 中发生了500次执行，那么"桶"中值保留最后的100次执行的统计。另外，增加该值的大小将会增加内存的消耗，并增加排序百分位数所需的计算时间。</span>
     <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"metrics.rollingPercentile.bucketSize"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    
     <span class="token comment" spellcheck="true">//该属性用来设置 采集影响熔断器状态的健康快照（请求的成功、错误百分比）的间隔风带时间</span>
     <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"metrics.healthSnapshot.intervalinMilliseconds"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"500"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 

     <span class="token comment" spellcheck="true">//该属性用来设置 是否开启请求缓存</span>
     <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"requestCache.enabled"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>               <span class="token comment" spellcheck="true">// HystrixCommand 的执行和事件是否打印日志到 HystrixRequestLog 中</span>
     <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"requestLog.enabled"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">)</span> 
                 <span class="token punctuation">}</span><span class="token punctuation">,</span>
                 threadPoolProperties <span class="token operator">=</span> <span class="token punctuation">{</span>
     <span class="token comment" spellcheck="true">//该属性用来设置 执行命令线程池的核心线程数，该值是命令执行的最大并发量，默认10</span>
     <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"coreSize"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
     <span class="token comment" spellcheck="true">//该属性用来设置 线程池的最大队列大小，当设置为-1时，线程池将使用 SynchronousQueue 实现的队列(阻塞队列)，否则将使用 LinkedBlockingQueue 实现的队列</span>
     <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"maxQueueSize"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"-1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
    <span class="token comment" spellcheck="true">//该参数用来 为队列设置 拒绝阈值，通过该参数，即使队列没有达到最大值也能拒绝请求，改参数主要是对 LinkedBlockingQueue 队列的补充，因为 LinkedBlockingQueue 队列不能动态修改它的对象大小，而通过该属性就可以调整拒绝请求的队列大小了。</span>
     <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"queueSizeRejectionThreshold"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"5"</span><span class="token punctuation">)</span>                     

<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<h4 id="（2）参数配置"><a href="#（2）参数配置" class="headerlink" title="（2）参数配置"></a>（2）参数配置</h4><p>本小节参考《Hystrix使用说明，配置参数说明》一文，原文链接：<a href="http://blog.csdn.net/tongtong_use/article/details/78611225" target="_blank" rel="noopener">http://blog.csdn.net/tongtong_use/article/details/78611225</a>*</p>
<p>（一）<strong>Command Properties</strong></p>
<p>以下属性控制HystrixCommand行为：</p>
<p>1、<strong>Execution</strong></p>
<p>以下属性控制<code>HystrixCommand.run()</code>如何执行。</p>
<table>
<thead>
<tr>
<th><strong>参数</strong></th>
<th><strong>描述</strong></th>
<th><strong>默认值</strong></th>
</tr>
</thead>
<tbody><tr>
<td>execution.isolation.strategy</td>
<td>隔离策略，有THREAD和SEMAPHORE THREAD - 它在单独的线程上执行，并发请求受线程池中的线程数量的限制  SEMAPHORE - 它在调用线程上执行，并发请求受到信号量计数的限制</td>
<td>默认使用THREAD模式，以下几种场景可以使用SEMAPHORE模式： 只想控制并发度 外部的方法已经做了线程隔离 调用的是本地方法或者可靠度非常高、耗时特别小的方法（如medis）</td>
</tr>
<tr>
<td>execution.isolation.thread.timeoutInMilliseconds</td>
<td>超时时间</td>
<td>默认值：1000 在THREAD模式下，达到超时时间，可以中断 在SEMAPHORE模式下，会等待执行完成后，再去判断是否超时 设置标准： 有retry，99meantime+avg meantime 没有retry，99.5meantime</td>
</tr>
<tr>
<td>execution.timeout.enabled</td>
<td>HystrixCommand.run（）执行是否应该有超时。</td>
<td>默认值：true</td>
</tr>
<tr>
<td>execution.isolation.thread.interruptOnTimeout</td>
<td>在发生超时时是否应中断HystrixCommand.run（）执行。</td>
<td>默认值：true THREAD模式有效</td>
</tr>
<tr>
<td>execution.isolation.thread.interruptOnCancel</td>
<td>当发生取消时，执行是否应该中断。</td>
<td>默认值为false THREAD模式有效</td>
</tr>
<tr>
<td>execution.isolation.semaphore.maxConcurrentRequests</td>
<td>设置在使用时允许到HystrixCommand.run（）方法的最大请求数。</td>
<td>默认值：10 SEMAPHORE模式有效</td>
</tr>
</tbody></table>
<p>2、<strong>Fallback</strong></p>
<p>以下属性控制<code>HystrixCommand.getFallback()</code>如何执行。这些属性适用于<code>ExecutionIsolationStrategy.THREAD</code>和<code>ExecutionIsolationStrategy.SEMAPHORE</code>。</p>
<table>
<thead>
<tr>
<th><strong>参数</strong></th>
<th><strong>描述</strong></th>
<th><strong>默认值</strong></th>
</tr>
</thead>
<tbody><tr>
<td>fallback.isolation.semaphore.maxConcurrentRequests</td>
<td>设置从调用线程允许HystrixCommand.getFallback（）方法的最大请求数。</td>
<td>SEMAPHORE模式有效 默认值：10</td>
</tr>
<tr>
<td>fallback.enabled</td>
<td>确定在发生失败或拒绝时是否尝试调用HystrixCommand.getFallback（）。</td>
<td>默认值为true</td>
</tr>
</tbody></table>
<p>3、<strong>Circuit Breaker</strong></p>
<p>断路器属性控制<code>HystrixCircuitBreaker</code>的行为。</p>
<table>
<thead>
<tr>
<th><strong>参数</strong></th>
<th><strong>描述</strong></th>
<th><strong>默认值</strong></th>
</tr>
</thead>
<tbody><tr>
<td>circuitBreaker.enabled</td>
<td>确定断路器是否用于跟踪运行状况和短路请求（如果跳闸）。</td>
<td>默认值为true</td>
</tr>
<tr>
<td>circuitBreaker.requestVolumeThreshold</td>
<td>熔断触发的最小个数/10s</td>
<td>默认值：20</td>
</tr>
<tr>
<td>circuitBreaker.sleepWindowInMilliseconds</td>
<td>熔断多少秒后去尝试请求</td>
<td>默认值：5000</td>
</tr>
<tr>
<td>circuitBreaker.errorThresholdPercentage</td>
<td>失败率达到多少百分比后熔断</td>
<td>默认值：50 主要根据依赖重要性进行调整</td>
</tr>
<tr>
<td>circuitBreaker.forceOpen</td>
<td>属性如果为真，强制断路器进入打开（跳闸）状态，其中它将拒绝所有请求。</td>
<td>默认值为false 此属性优先于circuitBreaker.forceClosed</td>
</tr>
<tr>
<td>circuitBreaker.forceClosed</td>
<td>该属性如果为真，则迫使断路器进入闭合状态，其中它将允许请求，而不考虑误差百分比。</td>
<td>默认值为false 如果是强依赖，应该设置为true circuitBreaker.forceOpen属性优先，因此如果forceOpen设置为true，此属性不执行任何操作。</td>
</tr>
</tbody></table>
<p>4、<strong>Metrics</strong></p>
<p>以下属性与从<code>HystrixCommand</code>和<code>HystrixObservableCommand</code>执行捕获指标有关。</p>
<table>
<thead>
<tr>
<th><strong>参数</strong></th>
<th><strong>描述</strong></th>
<th><strong>默认值</strong></th>
</tr>
</thead>
<tbody><tr>
<td>metrics.rollingStats.timeInMilliseconds</td>
<td>此属性设置统计滚动窗口的持续时间（以毫秒为单位）。对于断路器的使用和发布Hystrix保持多长时间的指标。</td>
<td>默认值：10000</td>
</tr>
<tr>
<td>metrics.rollingStats.numBuckets</td>
<td>此属性设置rollingstatistical窗口划分的桶数。 以下必须为true - “metrics.rollingStats.timeInMilliseconds%metrics.rollingStats.numBuckets == 0” -否则将抛出异常。</td>
<td>默认值：10</td>
</tr>
<tr>
<td>metrics.rollingPercentile.enabled</td>
<td>此属性指示是否应以百分位数跟踪和计算执行延迟。 如果禁用它们，则所有摘要统计信息（平均值，百分位数）都将返回-1。</td>
<td>默认值为true</td>
</tr>
<tr>
<td>metrics.rollingPercentile.timeInMilliseconds</td>
<td>此属性设置滚动窗口的持续时间，其中保留执行时间以允许百分位数计算，以毫秒为单位。</td>
<td>默认值：60000</td>
</tr>
<tr>
<td>metrics.rollingPercentile.numBuckets</td>
<td>此属性设置rollingPercentile窗口将划分的桶的数量。 以下内容必须为true - “metrics.rollingPercentile.timeInMilliseconds%metrics.rollingPercentile.numBuckets == 0” -否则将抛出异常。</td>
<td>默认值：6</td>
</tr>
<tr>
<td>metrics.rollingPercentile.bucketSize</td>
<td>此属性设置每个存储桶保留的最大执行次数。如果在这段时间内发生更多的执行，它们将绕回并开始在桶的开始处重写。</td>
<td>默认值：100</td>
</tr>
<tr>
<td>metrics.healthSnapshot.intervalInMilliseconds</td>
<td>此属性设置在允许计算成功和错误百分比并影响断路器状态的健康快照之间等待的时间（以毫秒为单位）。</td>
<td>默认值：500</td>
</tr>
</tbody></table>
<p>5、<strong>Request Context</strong></p>
<p>这些属性涉及HystrixCommand使用的HystrixRequestContext功能。</p>
<table>
<thead>
<tr>
<th><strong>参数</strong></th>
<th><strong>描述</strong></th>
<th><strong>默认值</strong></th>
</tr>
</thead>
<tbody><tr>
<td>requestCache.enabled</td>
<td>HystrixCommand.getCacheKey（）是否应与HystrixRequestCache一起使用，以通过请求范围的缓存提供重复数据删除功能。</td>
<td>默认值为true</td>
</tr>
<tr>
<td>requestLog.enabled</td>
<td>HystrixCommand执行和事件是否应记录到HystrixRequestLog。</td>
<td>默认值为true</td>
</tr>
</tbody></table>
<p>（二）<strong>Collapser Properties</strong></p>
<p>下列属性控制HystrixCollapser行为。</p>
<table>
<thead>
<tr>
<th><strong>参数</strong></th>
<th><strong>描述</strong></th>
<th><strong>默认值</strong></th>
</tr>
</thead>
<tbody><tr>
<td>maxRequestsInBatch</td>
<td>此属性设置在触发批处理执行之前批处理中允许的最大请求数。</td>
<td>Integer.MAX_VALUE</td>
</tr>
<tr>
<td>timerDelayInMilliseconds</td>
<td>此属性设置创建批处理后触发其执行的毫秒数。</td>
<td>默认值：10</td>
</tr>
<tr>
<td>requestCache.enabled</td>
<td>此属性指示是否为HystrixCollapser.execute（）和HystrixCollapser.queue（）调用启用请求高速缓存。</td>
<td>默认值：true</td>
</tr>
</tbody></table>
<p> （三）<strong>ThreadPool Properties</strong></p>
<p>以下属性控制Hystrix命令在其上执行的线程池的行为。</p>
<p>大多数时候，默认值为10的线程会很好（通常可以做得更小）。</p>
<table>
<thead>
<tr>
<th><strong>参数</strong></th>
<th><strong>描述</strong></th>
<th><strong>默认值</strong></th>
</tr>
</thead>
<tbody><tr>
<td>coreSize</td>
<td>线程池coreSize</td>
<td>默认值：10 设置标准：qps*99meantime+breathing room</td>
</tr>
<tr>
<td>maximumSize</td>
<td>此属性设置最大线程池大小。 这是在不开始拒绝HystrixCommands的情况下可以支持的最大并发数。 请注意，此设置仅在您还设置allowMaximumSizeToDivergeFromCoreSize时才会生效。</td>
<td>默认值：10</td>
</tr>
<tr>
<td>maxQueueSize</td>
<td>请求等待队列</td>
<td>默认值：-1 如果使用正数，队列将从SynchronizeQueue改为LinkedBlockingQueue</td>
</tr>
<tr>
<td>queueSizeRejectionThreshold</td>
<td>此属性设置队列大小拒绝阈值 - 即使未达到maxQueueSize也将发生拒绝的人为最大队列大小。 此属性存在，因为BlockingQueue的maxQueueSize不能动态更改，我们希望允许您动态更改影响拒绝的队列大小。</td>
<td>默认值：5 注意：如果maxQueueSize == -1，则此属性不适用。</td>
</tr>
<tr>
<td>keepAliveTimeMinutes</td>
<td>此属性设置保持活动时间，以分钟为单位。</td>
<td>默认值：1</td>
</tr>
<tr>
<td>allowMaximumSizeToDivergeFromCoreSize</td>
<td>此属性允许maximumSize的配置生效。 那么该值可以等于或高于coreSize。 设置coreSize &lt;maximumSize会创建一个线程池，该线程池可以支持maximumSize并发，但在相对不活动期间将向系统返回线程。 （以keepAliveTimeInMinutes为准）</td>
<td>默认值：false</td>
</tr>
<tr>
<td>metrics.rollingStats.timeInMilliseconds</td>
<td>此属性设置statistical rolling窗口的持续时间（以毫秒为单位）。 这是为线程池保留多长时间。</td>
<td>默认值：10000</td>
</tr>
<tr>
<td>metrics.rollingStats.numBuckets</td>
<td>此属性设置滚动统计窗口划分的桶数。  注意：以下必须为true - “metrics.rollingStats.timeInMilliseconds%metrics.rollingStats.numBuckets == 0” -否则将引发异常。</td>
<td>默认值：10</td>
</tr>
</tbody></table>
<p>（四）<strong>其他</strong></p>
<table>
<thead>
<tr>
<th><strong>参数</strong></th>
<th><strong>描述</strong></th>
<th><strong>默认值</strong></th>
</tr>
</thead>
<tbody><tr>
<td>groupKey</td>
<td>表示所属的group，一个group共用线程池</td>
<td>默认值：getClass().getSimpleName();</td>
</tr>
<tr>
<td>commandKey</td>
<td></td>
<td>默认值：当前执行方法名</td>
</tr>
</tbody></table>
<h4 id="（3）熔断状态"><a href="#（3）熔断状态" class="headerlink" title="（3）熔断状态"></a>（3）熔断状态</h4><p>  熔断器的状态机：</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/hystrix-circuit-break.jpg" alt="熔断器的状态"></p>
<p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/hystrix-circuit-status.png" alt="熔断器的状态及机制"></p>
<ul>
<li>Closed：熔断器关闭状态，熔断器关闭不会对服务进行熔断操作。因调用失败次数积累，到了阈值（或一定比例）则启动熔断机制，熔断器进入打开状态；</li>
<li>Open：熔断器打开状态。此时对下游的调用都内部直接返回错误，不走网络，但设计了一个时钟选项，默认的时钟达到了一定时间（这个时间一般设置成平均故障处理时间，也就是MTTR），到了这个时间，进入半熔断状态； </li>
<li>Half-Open：半熔断状态，允许部分/定量的服务请求，如果调用都成功（或一定比例）则认为恢复了，关闭熔断器，否则认为还没好，又回到熔断器打开状态； </li>
</ul>
<p>（3）熔断器流程图</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/hystrix-circuit-break-work.jpg" alt="熔断器流程图"></p>
<h3 id="3、服务限流"><a href="#3、服务限流" class="headerlink" title="3、服务限流"></a>3、服务限流</h3><p>服务限流：服务器面对秒杀等高并发操作，防止瞬时流量过大使服务和数据崩溃而进行的一种限制请求正常通行的机制。</p>
<p> Hystrix 的限流 我的理解只是作为一种防御高并发冲击，防止扇出链路超时异常引发级联故障，完全不同于Sentinel 限流里的流控机制。Hystrix的限流就是通过熔断和服务降级来实现的。是一种防御式操作，降级的快速失败，紧紧是将微服务进行保护式隔离，本质上并不能真正解决高流量请求问题。</p>
<p>如果理解有误或不同观点，欢迎指正，后续再补充。</p>
<h3 id="4、服务监控"><a href="#4、服务监控" class="headerlink" title="4、服务监控"></a>4、服务监控</h3><p>除了隔离服务、Hystrix 还可以进行准实时监控Hystrix Dashboard 。</p>
<p>Hystrix 会持续地记录所有通过Hystrix发起的请求的执行信息，并以统计报表和图形的形式展示，包括每秒执行多少请求、多少成功、多少失败、等等。</p>
<p>Netflix 通过 hystrix-mertics-event-stream 项目实现了对以上指标的监控。</p>
<p>Spring Cloud 也提供了 Hystrix DashBoard 的整合，将监控内容转换为可视化web界面。</p>
<h4 id="4-1-服务监控使用"><a href="#4-1-服务监控使用" class="headerlink" title="4.1 服务监控使用"></a>4.1 服务监控使用</h4><p>作为独立的监控程序，需要创建新的微服务工程<code>MS-Hystrix-Dashboard</code>。</p>
<p>（1）POM引入依赖</p>
<pre class=" language-java"><code class="language-java">        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>新增hystrix dashboard<span class="token operator">--</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>
            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>netflix<span class="token operator">-</span>hystrix<span class="token operator">-</span>dashboard<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>
        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>
            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>actuator<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre>
<p>（2）配置端口和服务名</p>
<pre class=" language-yam"><code class="language-yam">server:
  port: 9999

spring:
  application:
    name: MS-Hystrix-Dashboard  </code></pre>
<p>（3）启用HystrixDashboard</p>
<p>使用 <code>@EnableHystrixDashboard</code> 注解开启即可。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>hystrix<span class="token punctuation">.</span>dashboard<span class="token punctuation">.</span>EnableHystrixDashboard<span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableHystrixDashboard</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HystrixDashboardMain9001</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>HystrixDashboardMain9001<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>（4）所以被监控微服务需要引入监控模块</p>
<pre class=" language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!-- springboot 监控模块 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>
<p>（5）注意事宜</p>
<p>如果打开报错，尝试新版本Hystrix需要在主启动类MainAppHystrix8001中指定监控路径</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> ServletRegistrationBean <span class="token function">getServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    HystrixMetricsStreamServlet streamServlet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HystrixMetricsStreamServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ServletRegistrationBean registrationBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token punctuation">(</span>streamServlet<span class="token punctuation">)</span><span class="token punctuation">;</span>
    registrationBean<span class="token punctuation">.</span><span class="token function">setLoadOnStartup</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    registrationBean<span class="token punctuation">.</span><span class="token function">addUrlMappings</span><span class="token punctuation">(</span><span class="token string">"/hystrix.stream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    registrationBean<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"HystrixMetricsStreamServlet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> registrationBean<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>（6）开始监控</p>
<p>打开Hystrix 主页面：<a href="http://localhost:9999/hystrix" target="_blank" rel="noopener">http://localhost:9999/hystrix</a></p>
<p>输入想要监控的路径：<a href="http://localhost:6001/hystrix.stream" target="_blank" rel="noopener">http://localhost:6001/hystrix.stream</a></p>
<p>进行服务访问测试。查看监控页面变化。</p>
<h4 id="4-2-服务监控阅读"><a href="#4-2-服务监控阅读" class="headerlink" title="4.2 服务监控阅读"></a>4.2 服务监控阅读</h4><p>（1）7色。7中不同颜色的线均代表各自含义。</p>
<p>（2）1圆。实心圆，有两种含义。</p>
<p>它的颜色变化代表微服务实例的健康程度。绿色 &lt; 黄色 &lt; 橙色 &lt; 红色</p>
<p>它的大小变化会根据实例的请求流量发生变化，流量越大，圆越大。</p>
<p>所以，可以根据颜色和大小快速发现故障实例和高流量实例。</p>
<p>（3）1线。曲线，用来记录2分钟内的流量相对变化。</p>
<p>可以通过曲线来观察流量的上升和下降趋势。</p>
<p>示例图：</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/hystrix-dashboard-01.jpg" alt="Hystrix Dashboard 监控示例图1"></p>
<p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/hystrix-dashboard-02.jpg" alt="Hystrix Dashboard 监控示例图2"><br>完整示例图：</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/hystrix-dashboard-03.jpg" alt="Hystrix Dashboard 监控示例图2"></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud Ribbon</title>
    <url>/posts/7ecbba09.html</url>
    <content><![CDATA[<h2 id="SpringCloud-Ribbon-客户端负载均衡与服务调用"><a href="#SpringCloud-Ribbon-客户端负载均衡与服务调用" class="headerlink" title="SpringCloud Ribbon 客户端负载均衡与服务调用"></a>SpringCloud Ribbon 客户端负载均衡与服务调用</h2><p>相关链接：</p>
<ul>
<li><a href="bad02d94.html">SpringCloud 微服务学习</a></li>
<li><a href="eeda118.html">RESTful 接口设计规范</a></li>
<li><a href="648d6b26.html">SpringCloud Eureka 服务注册与发现</a></li>
<li><a href="3010739f.html">SpringCloud Consul 服务注册与发现</a></li>
<li><a href="7ecbba09.html">SpringCloud Ribbon 客户端负载均衡与服务调用</a></li>
<li><a href="b27245de.html">SpringCloud OpenFeign 服务接口调用</a></li>
<li><a href="464bb413.html">SpringCloud Hystrix熔断器</a></li>
<li><a href="bc16d093.html">SpringCloud Gateway 服务网关</a></li>
<li><a href="fbbe72e1.html">SpringCloud Zuul 服务网关</a></li>
<li><a href="5b5896d1.html">Spring Cloud Config 分布式配置中心</a></li>
<li><a href="9e02a3e8.html">Spring Cloud Bus 消息总线</a></li>
<li><a href="7f3b07b1.html">SpringCloud Stream 消息驱动</a></li>
<li><a href="b99c053f.html">SpringCloud Sleuth 分布式请求链路追踪</a></li>
<li><a href="461589aa.html">SpringCloud Alibaba</a></li>
<li><a href="a46e46f8.html">SpringCloud Alibaba Nacos服务注册和配置中心</a></li>
<li><a href="5122a811.html">SpringCloud Alibaba Sentinel 实现熔断与限流</a></li>
<li><a href="fb7c74c4.html">SpringCloud Alibaba Seata 分布式事务</a></li>
</ul>
<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p>Spring Cloud Ribbon 是基于Netflix Ribbon 实现的一套客户端负载均衡工具。 </p>
<p><strong>Project Status: On Maintenance</strong></p>
<p><a href="https://github.com/Netflix/ribbon" target="_blank" rel="noopener">https://github.com/Netflix/ribbon</a></p>
<p>可能的替换方案：Spring Cloud Starter Loadbalancer</p>
<h2 id="二、Ribbon"><a href="#二、Ribbon" class="headerlink" title="二、Ribbon"></a>二、Ribbon</h2><p>Ribbon 是Netflix 发布的开源项目，主要是提供<strong>客户端负载均衡算法和服务调用</strong>。</p>
<p>负载均衡 Load Balance ：</p>
<p>将请求平摊分配到多个服务单元，从而达到系统服务的高可用。</p>
<p>常见负载均衡软件：Nginx、LVS、硬件F5等</p>
<p>Nginx 是服务器端负载均衡，客户端所有请求都会交给Nginx服务器，然后由Ninx 服务器根据分配算法实现请求分配转发。</p>
<p>Ribbon 是客户端负载均衡，在调用微服务接口时，会在服务注册中心获取注册的服务列表后缓存到客户端的JVM，从而实现在客户端实现RPC进行远程服务调用技术。</p>
<p>Ribbon核心组件IRule相关接口及均在均衡算法：</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/ribbon-work.jpg" alt="Ribbon 接口"></p>
<p><code>IRule</code>接口会根据特定算法从服务列表中选取一个要访问的服务。</p>
<p>Ribbon自带的负载均衡算法：</p>
<p>（1）轮询算法。默认的负载均衡算法，源码<code>com.netflix.loadbalancer.RoundRobinRule</code>。</p>
<p>（2）随机算法。源码<code>com.netflix.loadbalancer.RandomRule</code>。</p>
<p>（3）重试算法。先按照<code>RoundRobinRule</code>的策略轮询获取服务，如果获取服务失败则在指定时间内会进行重试。源码<code>com.netflix.loadbalancer.RetryRule</code>。</p>
<p>（4）响应权重算法。对<code>RoundRobinRule</code>的扩展，响应速度越快的实例选择权重越大，越容易被选择。源码<code>com.netflix.loadbalancer.WeightedResponseTimeRule</code>。</p>
<p>（5）最可用算法。Ribbon会先过滤掉由于多次访问故障而处于断路器跳闸状态的服务，然后选择一个并发量最小的服务。源码<code>com.netflix.loadbalancer.BestAvailableRule</code>。</p>
<p>（6）可用过滤算法。先过滤掉故障实例，再选择并发较小的实例。源码<code>com.netflix.loadbalancer.AvailabilityFilteringRule</code>。</p>
<p>（7）区域可用算法。默认规则，复合判断server所在区域的性能和server的可用性选择服务器。源码<code>com.netflix.loadbalancer.ZoneAvoidanceRule</code>。</p>
<h2 id="三、Ribbon使用"><a href="#三、Ribbon使用" class="headerlink" title="三、Ribbon使用"></a>三、Ribbon使用</h2><p><strong>用在客户端</strong></p>
<p>作为客户端的组件必定是用在客户端/调用者工程中使用。</p>
<p>默认情况下，Eureka 客户端已经封装了Ribbon 组件。官方说明<a href="https://spring.io/projects/spring-cloud-netflix" target="_blank" rel="noopener">https://spring.io/projects/spring-cloud-netflix</a></p>
<p>如果在没有封装Ribbon 的环境中使用，可以试试下面的，如果版本不行，就自己找一下maven的依赖引入即可。</p>
<h3 id="1、POM中引入依赖"><a href="#1、POM中引入依赖" class="headerlink" title="1、POM中引入依赖"></a>1、POM中引入依赖</h3><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-ribbon<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>
<h3 id="2、Config-配置。"><a href="#2、Config-配置。" class="headerlink" title="2、Config 配置。"></a>2、Config 配置。</h3><p>千万注册是调用者/消费端工程。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>config<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>client<span class="token punctuation">.</span>loadbalancer<span class="token punctuation">.</span>LoadBalanced<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>client<span class="token punctuation">.</span>RestTemplate<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationContextConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@LoadBalanced</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> RestTemplate <span class="token function">getRestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="3、RestTemplate调用"><a href="#3、RestTemplate调用" class="headerlink" title="3、RestTemplate调用"></a>3、RestTemplate调用</h3><p>Ribbon和Eureka或者Consul整合后消费端可以直接调用服务而不用再关心地址和端口号。</p>
<p>消费端的controller示例：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>controller<span class="token punctuation">;</span>

<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>client<span class="token punctuation">.</span>RestTemplate<span class="token punctuation">;</span>

<span class="token keyword">import</span> javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Resource<span class="token punctuation">;</span>

<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserConsulController</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String HTTP_MS_URL <span class="token operator">=</span> <span class="token string">"http://MS-CLOUD-USER-SERVICE"</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Resource</span> 
    <span class="token keyword">private</span> RestTemplate restTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/consumer/user/consul"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      String result <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>HTTP_MS_URL<span class="token operator">+</span><span class="token string">"/v1/user/consul"</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span></code></pre>
<p>服务端user_01的controller示例：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>controller<span class="token punctuation">;</span>

<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>client<span class="token punctuation">.</span>RestTemplate<span class="token punctuation">;</span>

<span class="token keyword">import</span> javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Resource<span class="token punctuation">;</span>

<span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserConsulController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/v1/user/consul"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

      <span class="token keyword">return</span> <span class="token string">"我是服务端user_01， 我的端口号是 8001"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span></code></pre>
<p>服务端user_02的controller示例：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>controller<span class="token punctuation">;</span>

<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>client<span class="token punctuation">.</span>RestTemplate<span class="token punctuation">;</span>

<span class="token keyword">import</span> javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Resource<span class="token punctuation">;</span>

<span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserConsulController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/v1/user/consul"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

      <span class="token keyword">return</span> <span class="token string">"我是服务端user_02， 我的端口号是 8002"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span></code></pre>
<h3 id="4、测试"><a href="#4、测试" class="headerlink" title="4、测试"></a>4、测试</h3><p>访问消费端：<a href="http://localhost:6001/consumer/user/consul" target="_blank" rel="noopener">http://localhost:6001/consumer/user/consul</a></p>
<p>默认情况下是轮询，反复访问地址，在浏览器上会交替出现下</p>
<pre class=" language-txt"><code class="language-txt">我是服务端user_01， 我的端口号是 8001</code></pre>
<p>和</p>
<pre class=" language-txt"><code class="language-txt">我是服务端user_02， 我的端口号是 8002</code></pre>
<h2 id="四、自带负载均衡规则替换"><a href="#四、自带负载均衡规则替换" class="headerlink" title="四、自带负载均衡规则替换"></a>四、自带负载均衡规则替换</h2><h3 id="1、添加自定义规则类"><a href="#1、添加自定义规则类" class="headerlink" title="1、添加自定义规则类"></a>1、添加自定义规则类</h3><p>需要注意的细节是，这个自定义的配置类一定要和springboot 启动类所在位置隔离，不能在springboot启动类的同一层级或子级目录。否则配置会被所有的Ribbon客户端共享，达不到特殊化定制目的。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>myrule<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>loadbalancer<span class="token punctuation">.</span>IRule<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>loadbalancer<span class="token punctuation">.</span>RandomRule<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MySelfRule</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> IRule <span class="token function">myRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RandomRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义为随机</span>
        <span class="token comment" spellcheck="true">//如果想自定义算法，可以在此处new  MyRule().</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="2、在启动类声明"><a href="#2、在启动类声明" class="headerlink" title="2、在启动类声明"></a>2、在启动类声明</h3><p>使用 <code>@RibbonClient</code> 注解在主启动类中，声明自定义规则</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RibbonClient</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"MS-CLOUD-USER-SERVICE"</span><span class="token punctuation">,</span>configuration <span class="token operator">=</span> MySelfRule<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span></code></pre>
<p>示例：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>myrule<span class="token punctuation">.</span>MySelfRule<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>eureka<span class="token punctuation">.</span>EnableEurekaClient<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>ribbon<span class="token punctuation">.</span>RibbonClient<span class="token punctuation">;</span>

<span class="token annotation punctuation">@EnableDiscoveryClient</span> <span class="token comment" spellcheck="true">//此处注册consul</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@RibbonClient</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"MS-CLOUD-USER-SERVICE"</span><span class="token punctuation">,</span>configuration <span class="token operator">=</span> MySelfRule<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserConsumerMain6001</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>UserConsumerMain6001<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span></code></pre>
<p><code>@EnableDiscoveryClient</code>表示此处注册<code>consul</code>服务。如果使用Eureka 使用 <code>@EnableEurekaClient</code>注解。</p>
<h3 id="3、测试"><a href="#3、测试" class="headerlink" title="3、测试"></a>3、测试</h3><p>启动测试，检查设置的随机算法<code>RandomRule</code>是否生效。</p>
<h2 id="五、自定义负载均衡"><a href="#五、自定义负载均衡" class="headerlink" title="五、自定义负载均衡"></a>五、自定义负载均衡</h2><p>需要注意的细节同上，这个自定义的类/接口一定要和springboot 启动类所在位置隔离，不能在springboot启动类的同一层级或子级目录。</p>
<h3 id="1、取消默认"><a href="#1、取消默认" class="headerlink" title="1、取消默认"></a>1、取消默认</h3><p>去掉 <code>@LoadBalanced</code>注解，取消默认的负载均衡方式。</p>
<h3 id="2、添加负载均衡接口"><a href="#2、添加负载均衡接口" class="headerlink" title="2、添加负载均衡接口"></a>2、添加负载均衡接口</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>lb<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>client<span class="token punctuation">.</span>ServiceInstance<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">LoadBalancer</span> <span class="token punctuation">{</span>
     <span class="token comment" spellcheck="true">//收集服务器总共有多少台能够提供服务的机器，并放到list里面</span>
    ServiceInstance <span class="token function">instances</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>ServiceInstance<span class="token operator">></span> serviceInstances<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span></code></pre>
<h3 id="3、添加负载均衡算法实现"><a href="#3、添加负载均衡算法实现" class="headerlink" title="3、添加负载均衡算法实现"></a>3、添加负载均衡算法实现</h3><p>重新写轮询算法。不能遗漏<code>@Component</code> 注解。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>lb<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>client<span class="token punctuation">.</span>ServiceInstance<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span>AtomicInteger<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//自定义写的轮询</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserLoadBalance</span> <span class="token keyword">implements</span> <span class="token class-name">LoadBalancer</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> AtomicInteger atomicInteger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//坐标</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> current<span class="token punctuation">;</span>
        <span class="token keyword">int</span> next<span class="token punctuation">;</span>
        <span class="token keyword">do</span> <span class="token punctuation">{</span>
            current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>atomicInteger<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            next <span class="token operator">=</span> current <span class="token operator">>=</span> Integer<span class="token punctuation">.</span>MAX_VALUE <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> current <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>atomicInteger<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//第一个参数是期望值，第二个参数是修改值</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*******第几次访问，次数next: "</span><span class="token operator">+</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> ServiceInstance <span class="token function">instances</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>ServiceInstance<span class="token operator">></span> serviceInstances<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//得到机器的列表</span>
       <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> serviceInstances<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//得到服务器的下标位置</span>
        <span class="token keyword">return</span> serviceInstances<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h2 id="六、其他"><a href="#六、其他" class="headerlink" title="六、其他"></a>六、其他</h2><p>后续遇到再补充。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud Zuul</title>
    <url>/posts/fbbe72e1.html</url>
    <content><![CDATA[<h2 id="SpringCloud-Zuul-服务网关"><a href="#SpringCloud-Zuul-服务网关" class="headerlink" title="SpringCloud Zuul 服务网关"></a>SpringCloud Zuul 服务网关</h2><p>相关链接：</p>
<ul>
<li><a href="bad02d94.html">SpringCloud 微服务学习</a></li>
<li><a href="eeda118.html">RESTful 接口设计规范</a></li>
<li><a href="648d6b26.html">SpringCloud Eureka 服务注册与发现</a></li>
<li><a href="3010739f.html">SpringCloud Consul 服务注册与发现</a></li>
<li><a href="7ecbba09.html">SpringCloud Ribbon 客户端负载均衡与服务调用</a></li>
<li><a href="b27245de.html">SpringCloud OpenFeign 服务接口调用</a></li>
<li><a href="464bb413.html">SpringCloud Hystrix熔断器</a></li>
<li><a href="bc16d093.html">SpringCloud Gateway 服务网关</a></li>
<li><a href="fbbe72e1.html">SpringCloud Zuul 服务网关</a></li>
<li><a href="5b5896d1.html">Spring Cloud Config 分布式配置中心</a></li>
<li><a href="9e02a3e8.html">Spring Cloud Bus 消息总线</a></li>
<li><a href="7f3b07b1.html">SpringCloud Stream 消息驱动</a></li>
<li><a href="b99c053f.html">SpringCloud Sleuth 分布式请求链路追踪</a></li>
<li><a href="461589aa.html">SpringCloud Alibaba</a></li>
<li><a href="a46e46f8.html">SpringCloud Alibaba Nacos服务注册和配置中心</a></li>
<li><a href="5122a811.html">SpringCloud Alibaba Sentinel 实现熔断与限流</a></li>
<li><a href="fb7c74c4.html">SpringCloud Alibaba Seata 分布式事务</a></li>
</ul>
<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p>Zuul包含主要的功能：</p>
<ul>
<li>请求路由</li>
<li>请求过滤</li>
<li>代理</li>
</ul>
<p>其中路由功能负责将外部请求转发到具体的微服务实例上，是实现外部访问统一入口的基础而过滤器功能则负责对请求的处理过程进行干预，是实现请求校验、服务聚合等功能的基础。</p>
<p>Zuul和Eureka进行整合之后，将Zuul自身作为Eureka Client注册进Eureka Server服务治理下的应用，同时从Eureka Server中获得其他微服务的消息，也即以后的访问微服务都是通过Zuul跳转后获得。</p>
<p><a href="https://github.com/Netflix/zuul/wiki/Getting-Started" target="_blank" rel="noopener">https://github.com/Netflix/zuul/wiki/Getting-Started</a></p>
<h2 id="二-、Zuul-使用"><a href="#二-、Zuul-使用" class="headerlink" title="二 、Zuul 使用"></a>二 、Zuul 使用</h2><p>创建微服务 ms-zuul-gateway</p>
<h3 id="1、引入POM依赖"><a href="#1、引入POM依赖" class="headerlink" title="1、引入POM依赖"></a>1、引入POM依赖</h3><pre class=" language-xml"><code class="language-xml">     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-eureka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-zuul<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>
<h3 id="2、修改配置"><a href="#2、修改配置" class="headerlink" title="2、修改配置"></a>2、修改配置</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span> 
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">2233</span>

<span class="token key atrule">spring</span><span class="token punctuation">:</span> 
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> ms<span class="token punctuation">-</span>zuul<span class="token punctuation">-</span>gateway

<span class="token key atrule">eureka</span><span class="token punctuation">:</span> 
  <span class="token key atrule">client</span><span class="token punctuation">:</span> 
    <span class="token key atrule">service-url</span><span class="token punctuation">:</span> 
      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7001.com<span class="token punctuation">:</span>7001/eureka<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//eureka7002.com<span class="token punctuation">:</span>7002/eureka<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//eureka7003.com<span class="token punctuation">:</span>7003/eureka  
  <span class="token key atrule">instance</span><span class="token punctuation">:</span>
    <span class="token key atrule">instance-id</span><span class="token punctuation">:</span> Zuul<span class="token punctuation">-</span>2233.com
    <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true </span>


<span class="token key atrule">info</span><span class="token punctuation">:</span>
  <span class="token key atrule">app.name</span><span class="token punctuation">:</span> xiaocai<span class="token punctuation">-</span>cloud
  <span class="token key atrule">company.name</span><span class="token punctuation">:</span> www.zhangxiaocai.com
  <span class="token key atrule">build.artifactId</span><span class="token punctuation">:</span> $project.artifactId$
  <span class="token key atrule">build.version</span><span class="token punctuation">:</span> $project.version$

</code></pre>
<p>注意添加hosts 映射：</p>
<pre class=" language-txt"><code class="language-txt">127.0.0.1  testzuul.com</code></pre>
<h3 id="3、启用Zuul"><a href="#3、启用Zuul" class="headerlink" title="3、启用Zuul"></a>3、启用Zuul</h3><p>在工程住启动类添加注解<code>@EnableZuulProxy</code></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>zuul<span class="token punctuation">.</span>EnableZuulProxy<span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableZuulProxy</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZuulGateWayApp</span>
<span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
   SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ZuulGateWayApp<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="4、启动测试"><a href="#4、启动测试" class="headerlink" title="4、启动测试"></a>4、启动测试</h3><p>启动Eureka 服务中心，启动服务提供者MS-CLOUD-USER-SERVICE</p>
<p>启动网关ms-zuul-gateway</p>
<p>测试直接访问服务提供端：</p>
<p><a href="http://localhost:6001/v1/user/get/2" target="_blank" rel="noopener">http://localhost:6001/v1/user/get/2</a></p>
<p>测试通过网关访问服务提供端：</p>
<p><a href="http://testzuul:2233/ms-cloud-user-service/v1/user/get/2" target="_blank" rel="noopener">http://testzuul:2233/ms-cloud-user-service/v1/user/get/2</a></p>
<h2 id="三-、Zuul路由访问映射规则"><a href="#三-、Zuul路由访问映射规则" class="headerlink" title="三 、Zuul路由访问映射规则"></a>三 、Zuul路由访问映射规则</h2><h3 id="1、添加代理名称"><a href="#1、添加代理名称" class="headerlink" title="1、添加代理名称"></a>1、添加代理名称</h3><p>修改配置YML文件</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">zuul</span><span class="token punctuation">:</span> 
  <span class="token key atrule">routes</span><span class="token punctuation">:</span> 
    <span class="token key atrule">mydept.serviceId</span><span class="token punctuation">:</span> ms<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>user<span class="token punctuation">-</span>service
    <span class="token key atrule">mydept.path</span><span class="token punctuation">:</span> /useropt/**</code></pre>
<p>此时可以通过网关访问服务：</p>
<p>不仅可以通过服务名：<code>http://testzuul:2233/ms-cloud-user-service/v1/user/get/2</code></p>
<p>来访问，还可以使用代理名称来访问服务：</p>
<p><code>http://testzuul:2233/useropt/v1/user/get/2</code></p>
<h3 id="2、忽略真实服务名"><a href="#2、忽略真实服务名" class="headerlink" title="2、忽略真实服务名"></a>2、忽略真实服务名</h3><p>修改配置YML文件</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">zuul</span><span class="token punctuation">:</span> 
  <span class="token key atrule">ignored-services</span><span class="token punctuation">:</span> ms<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>user<span class="token punctuation">-</span>service 
  <span class="token key atrule">routes</span><span class="token punctuation">:</span> 
    <span class="token key atrule">mydept.serviceId</span><span class="token punctuation">:</span> ms<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>user<span class="token punctuation">-</span>service
    <span class="token key atrule">mydept.path</span><span class="token punctuation">:</span> /useropt/**</code></pre>
<p><code>ignored-services</code>：表示忽略原有的微服务<code>ms-cloud-user-service</code>，不允许直接访问了。</p>
<p>如果是多个可以使用<code>&quot;*&quot;</code></p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">zuul</span><span class="token punctuation">:</span> 
  <span class="token key atrule">ignored-services</span><span class="token punctuation">:</span> *
  <span class="token key atrule">routes</span><span class="token punctuation">:</span> 
    <span class="token key atrule">mydept.serviceId</span><span class="token punctuation">:</span> ms<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>user<span class="token punctuation">-</span>service
    <span class="token key atrule">mydept.path</span><span class="token punctuation">:</span> /useropt/**</code></pre>
<h3 id="3、设置统一的公共前缀"><a href="#3、设置统一的公共前缀" class="headerlink" title="3、设置统一的公共前缀"></a>3、设置统一的公共前缀</h3><p>修改YML配置：</p>
<pre class=" language-yaml"><code class="language-yaml">
<span class="token key atrule">zuul</span><span class="token punctuation">:</span> 
  <span class="token key atrule">prefix</span><span class="token punctuation">:</span> /xiaocai
  <span class="token key atrule">ignored-services</span><span class="token punctuation">:</span> ms<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>user<span class="token punctuation">-</span>service 
  <span class="token key atrule">routes</span><span class="token punctuation">:</span> 
    <span class="token key atrule">mydept.serviceId</span><span class="token punctuation">:</span> ms<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>user<span class="token punctuation">-</span>service
    <span class="token key atrule">mydept.path</span><span class="token punctuation">:</span> /useropt/**</code></pre>
<p>此时访问服务可以带上前缀使用：</p>
<p><code>http://testzuul:2233/xiaocai/useropt/v1/user/get/2</code></p>
<h2 id="四、其他"><a href="#四、其他" class="headerlink" title="四、其他"></a>四、其他</h2><p>后续遇到有机会再补充。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud Bus</title>
    <url>/posts/9e02a3e8.html</url>
    <content><![CDATA[<h2 id="Spring-Cloud-Bus-消息总线"><a href="#Spring-Cloud-Bus-消息总线" class="headerlink" title="Spring Cloud Bus 消息总线"></a>Spring Cloud Bus 消息总线</h2><p>相关链接：</p>
<ul>
<li><a href="bad02d94.html">SpringCloud 微服务学习</a></li>
<li><a href="eeda118.html">RESTful 接口设计规范</a></li>
<li><a href="648d6b26.html">SpringCloud Eureka 服务注册与发现</a></li>
<li><a href="3010739f.html">SpringCloud Consul 服务注册与发现</a></li>
<li><a href="7ecbba09.html">SpringCloud Ribbon 客户端负载均衡与服务调用</a></li>
<li><a href="b27245de.html">SpringCloud OpenFeign 服务接口调用</a></li>
<li><a href="464bb413.html">SpringCloud Hystrix熔断器</a></li>
<li><a href="bc16d093.html">SpringCloud Gateway 服务网关</a></li>
<li><a href="fbbe72e1.html">SpringCloud Zuul 服务网关</a></li>
<li><a href="5b5896d1.html">Spring Cloud Config 分布式配置中心</a></li>
<li><a href="9e02a3e8.html">Spring Cloud Bus 消息总线</a></li>
<li><a href="7f3b07b1.html">SpringCloud Stream 消息驱动</a></li>
<li><a href="b99c053f.html">SpringCloud Sleuth 分布式请求链路追踪</a></li>
<li><a href="461589aa.html">SpringCloud Alibaba</a></li>
<li><a href="a46e46f8.html">SpringCloud Alibaba Nacos服务注册和配置中心</a></li>
<li><a href="5122a811.html">SpringCloud Alibaba Sentinel 实现熔断与限流</a></li>
<li><a href="fb7c74c4.html">SpringCloud Alibaba Seata 分布式事务</a></li>
</ul>
<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p>因为Spring Cloud config 配置修改后需要手动重启或者访问一次才能生效，即可进行动态刷新。如果微服务较多时，需要一个一个去访问刷新才能生效……</p>
<p>Spring Cloud Bus消息总线配合Spring Cloud Config使用可以实现配置的动态刷新，可以实现一次访问，处处生效。</p>
<h2 id="二、Bus"><a href="#二、Bus" class="headerlink" title="二、Bus"></a>二、Bus</h2><p>bus 是一种消息总线。</p>
<p><strong>关于消息总线</strong></p>
<p>在微服务架构系统中，通常使用轻量级的消息代理来构建一个共用的消息主题，并让系统中所有微服务实例都连上来。由于该主题产生的消息会被所有实例监听和消费，所以称为消息总线。在总线的各个实例，都可以方便地广播一些需要让其他链接在该主题上的实例都知道的消息。</p>
<p><strong>基本原理</strong></p>
<p>Config Client 实例都监听MQ中同一个Topic （默认是Spring Cloud Bus），当一个服务刷新数据的时候，它会把这个信息放入到Topic中，这样其他监听同一个Topic的服务就能得到通知，然后去更新自身的配置。</p>
<p>Spring Cloud Bus通过轻量消息代理连接各个分布的节点，会用在广播状态的变化（例如配置变化）或者其他的消息指令。Spring  Bus的一个核心思想是通过分布式的启动器对spring  boot应用进行扩展，也可以用来建立一个多个应用之间的通信频道。目前唯一实现的方式是用AMQP消息代理作为通 。</p>
<p>Spring Cloud Bus 用来将分布式系统的节点与轻量级消息连接起来，整合Java的事件处理机制和消息中间件的功能。用于管理和传播所有分布式系统间的消息，本质是利用了MQ的广播机制在分布式的系统中传播消息，可用于广播状态更改、事件推送等，也可以作为微服务间的通信通道。</p>
<p>支持消息代理：<strong>Kafka</strong>和<strong>RabbitMQ</strong>。</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/springcloud-bus.jpg" alt="消息总线Bus"></p>
<p>Spring Cloud Bus做配置更新的步骤:</p>
<ol>
<li>提交代码触发post给客户端A发送bus/refresh</li>
<li>客户端A接收到请求从Server端更新配置并且发送给Spring Cloud Bus</li>
<li>Spring Cloud bus接到消息并通知给其它客户端</li>
<li>其它客户端接收到通知，请求Server端获取最新配置</li>
<li>全部客户端均获取到最新的配置</li>
</ol>
<h2 id="三、Bus-使用"><a href="#三、Bus-使用" class="headerlink" title="三、Bus 使用"></a>三、Bus 使用</h2><h3 id="1、Bus-设计思想"><a href="#1、Bus-设计思想" class="headerlink" title="1、Bus 设计思想"></a>1、Bus 设计思想</h3><h4 id="1、触发客户端进行广播"><a href="#1、触发客户端进行广播" class="headerlink" title="1、触发客户端进行广播"></a>1、触发客户端进行广播</h4><p>利用消息总线触发一个客户端/bus/refresh,而刷新所有客户端的配置。</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/bus-refresh-01.jpg" alt="触发客户端进行广播示图"></p>
<h4 id="2、触发服务端进行广播"><a href="#2、触发服务端进行广播" class="headerlink" title="2、触发服务端进行广播"></a>2、触发服务端进行广播</h4><p>利用消息总线触发一个服务端ConfigServer的/bus/refresh端点,而刷新所有客户端的配置。</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/bus-refresh-02.jpg" alt="触发服务端进行广播示图"></p>
<h4 id="3、小结"><a href="#3、小结" class="headerlink" title="3、小结"></a>3、小结</h4><p>刷新客户端和刷新服务端，推荐刷新服务端。</p>
<p>因为刷新客户端打破了微服务的职责单一性，破坏了微服务各节点的对等性。微服务本身是业务模块，它本不应该承担配置刷新职责。如果微服务进行迁移，网络地址会发生变化，需要进行不少的修改。</p>
<h3 id="2、RabbitMQ环境配置"><a href="#2、RabbitMQ环境配置" class="headerlink" title="2、RabbitMQ环境配置"></a>2、RabbitMQ环境配置</h3><h4 id="（1）RabbitMQ-安装"><a href="#（1）RabbitMQ-安装" class="headerlink" title="（1）RabbitMQ 安装"></a>（1）RabbitMQ 安装</h4><p>RabbitMQ 的环境依赖 Erlang：</p>
<p>下载地址：<a href="http://erlang.org/download/" target="_blank" rel="noopener">http://erlang.org/download/</a></p>
<p>RabbitMQ 下载地址：<a href="https://dl.bintray.com/rabbitmq/all/rabbitmq-server/" target="_blank" rel="noopener">https://dl.bintray.com/rabbitmq/all/rabbitmq-server/</a></p>
<p>安装完成后进入RabbitMQ安装目录下的sbin目录，打开CMD窗口，运行</p>
<pre class=" language-bash"><code class="language-bash">rabbitmq-plugins <span class="token function">enable</span> rabbitmq_management</code></pre>
<p>该命令是为RabbitMQ 添加可视化插件。</p>
<p>启动RabbitMQ，可以在浏览器访问：<a href="http://172.0.0.1:15672/" target="_blank" rel="noopener">http://172.0.0.1:15672/</a></p>
<p>登录账户和密码：guest/guest</p>
<h3 id="3、Bus-动态刷新全局广播"><a href="#3、Bus-动态刷新全局广播" class="headerlink" title="3、Bus 动态刷新全局广播"></a>3、Bus 动态刷新全局广播</h3><h4 id="3-1-工程准备"><a href="#3-1-工程准备" class="headerlink" title="3.1 工程准备"></a>3.1 工程准备</h4><p>作为配置中心服务端：config-server-3344  </p>
<p>作为配置客户端：config-client-3355  </p>
<p>作为配置客户端：config-client-3366 </p>
<h4 id="3-2-1-配置中心服务端"><a href="#3-2-1-配置中心服务端" class="headerlink" title="3.2.1 配置中心服务端"></a>3.2.1 配置中心服务端</h4><h5 id="（一）相关pom依赖"><a href="#（一）相关pom依赖" class="headerlink" title="（一）相关pom依赖"></a>（一）相关pom依赖</h5><p>引入Bus模块依赖<code>spring-cloud-starter-bus-amqp</code></p>
<pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>
         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cloud2020<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.xiaocai.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>config-center-3344<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-bus-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-config-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre>
<h5 id="（二）相关配置"><a href="#（二）相关配置" class="headerlink" title="（二）相关配置"></a>（二）相关配置</h5><p>添加mq相关配置</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3344</span>

<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> config<span class="token punctuation">-</span>center
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">config</span><span class="token punctuation">:</span>
      <span class="token key atrule">server</span><span class="token punctuation">:</span>
        <span class="token key atrule">git</span><span class="token punctuation">:</span>
          <span class="token key atrule">uri</span><span class="token punctuation">:</span>  https<span class="token punctuation">:</span>//github.com/small<span class="token punctuation">-</span>rose/springcloud<span class="token punctuation">-</span>config.git          <span class="token comment" spellcheck="true">#git@github.com:small-rose/springcloud-config.git</span>
          <span class="token key atrule">search-paths</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> springcloud<span class="token punctuation">-</span>config
      <span class="token key atrule">label</span><span class="token punctuation">:</span> master

<span class="token comment" spellcheck="true"># 添加mq的配置</span>
<span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>
    <span class="token key atrule">username</span><span class="token punctuation">:</span> guest
    <span class="token key atrule">password</span><span class="token punctuation">:</span> guest

<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>
      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span>  http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>7001/eureka

<span class="token comment" spellcheck="true"># bus 刷新端点暴露</span>
<span class="token key atrule">management</span><span class="token punctuation">:</span>
  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>
    <span class="token key atrule">web</span><span class="token punctuation">:</span>
      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>
        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">'bus-refresh'</span></code></pre>
<h5 id="（三）主启动类"><a href="#（三）主启动类" class="headerlink" title="（三）主启动类"></a>（三）主启动类</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>config<span class="token punctuation">.</span>server<span class="token punctuation">.</span>EnableConfigServer<span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableConfigServer</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigCenter_3344</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ConfigCenter_3344<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>配置中心的服务基本完成。</p>
<h4 id="3-2-2-配置客户端3355"><a href="#3-2-2-配置客户端3355" class="headerlink" title="3.2.2 配置客户端3355"></a>3.2.2 配置客户端3355</h4><h5 id="（一）相关pom依赖-1"><a href="#（一）相关pom依赖-1" class="headerlink" title="（一）相关pom依赖"></a>（一）相关pom依赖</h5><p>引入mq 的依赖</p>
<pre class=" language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-bus-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        ...</code></pre>
<h5 id="（二）添加mq的配置"><a href="#（二）添加mq的配置" class="headerlink" title="（二）添加mq的配置"></a>（二）添加mq的配置</h5><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3355</span>

<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> config<span class="token punctuation">-</span>client<span class="token punctuation">-</span><span class="token number">3355</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">config</span><span class="token punctuation">:</span>
      <span class="token key atrule">label</span><span class="token punctuation">:</span> master
      <span class="token key atrule">name</span><span class="token punctuation">:</span> config
      <span class="token key atrule">profile</span><span class="token punctuation">:</span> dev
      <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">3344</span>

<span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>
    <span class="token key atrule">username</span><span class="token punctuation">:</span> guest
    <span class="token key atrule">password</span><span class="token punctuation">:</span> guest

<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>
      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7001.com<span class="token punctuation">:</span>7001/eureka

<span class="token key atrule">management</span><span class="token punctuation">:</span>
  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>
    <span class="token key atrule">web</span><span class="token punctuation">:</span>
      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>
        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">"*"</span></code></pre>
<h5 id="（三）主启动类-1"><a href="#（三）主启动类-1" class="headerlink" title="（三）主启动类"></a>（三）主启动类</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>config<span class="token punctuation">.</span>server<span class="token punctuation">.</span>EnableConfigServer<span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableConfigServer</span>
<span class="token annotation punctuation">@EnableEurekaClient</span><span class="token comment" spellcheck="true">// </span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigClient_3355</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ConfigClient_3355<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>注意：有些注解可能遗漏了，请自行补充。</p>
<h4 id="3-2-3-配置客户端3366"><a href="#3-2-3-配置客户端3366" class="headerlink" title="3.2.3 配置客户端3366"></a>3.2.3 配置客户端3366</h4><p>按照3355的步骤，再来一次，只是端口改成3366换了。</p>
<h4 id="3-2-4-动态刷新测试"><a href="#3-2-4-动态刷新测试" class="headerlink" title="3.2.4 动态刷新测试"></a>3.2.4 动态刷新测试</h4><p>启动config server 进行测试验证：</p>
<p>访问1：<a href="http://config-3344.com:3344/master/config-dev.yml" target="_blank" rel="noopener">http://config-3344.com:3344/master/config-dev.yml</a> </p>
<p>启动config-client-3355 ，测试访问：<a href="http://localhost:3355/configInfo" target="_blank" rel="noopener">http://localhost:3355/configInfo</a> 验证是否能获取配置</p>
<p>启动config-client-3366 ，测试访问：<a href="http://localhost:3366/configInfo" target="_blank" rel="noopener">http://localhost:3366/configInfo</a> 验证是否能获取配置</p>
<p>如果一切正常表示config 使用环境OK，否则需排查问题，验证config 组件环境使用正常。</p>
<p><strong>工程不要停止</strong>，再次修改config-dev.yml 的内容：</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">config</span><span class="token punctuation">:</span>
  <span class="token key atrule">info</span><span class="token punctuation">:</span> this is master config<span class="token punctuation">-</span>dev from github <span class="token punctuation">---</span> version=1.5 <span class="token punctuation">---</span> config bus
</code></pre>
<p>提交到github远程仓库。</p>
<p>此时手工发送post请求刷新端口为3344的config server工程，执行命令：</p>
<pre class=" language-bash"><code class="language-bash">curl -X POST <span class="token string">"http://localhost:3344/actuator/bus-refresh"</span></code></pre>
<p> 此时，</p>
<p>测试访问：<a href="http://localhost:3355/configInfo" target="_blank" rel="noopener">http://localhost:3355/configInfo</a> 验证是否获取到更新的配置；</p>
<p>测试访问：<a href="http://localhost:3366/configInfo" target="_blank" rel="noopener">http://localhost:3366/configInfo</a> 验证是否获取到更新的配置；</p>
<p><strong>工程不要停止</strong>，再次修改config-dev.yml 的内容可以进行反复测试验证。</p>
<h3 id="4、Bus-动态刷新定点广播"><a href="#4、Bus-动态刷新定点广播" class="headerlink" title="4、Bus 动态刷新定点广播"></a>4、Bus 动态刷新定点广播</h3><p>定点广播，是指只让某一个实例生效，其他实例不进行广播。</p>
<p>刷新的URL：<strong>http://域名或IP:配置中心的端口号/actuator/bus-refresh/{destination}</strong></p>
<p>此时/bus/refresh请求不再发送到具体的服务实例上，而是发给config server并通过destination参数类指定需要更新配置的服务或实例。</p>
<p>之前的可以继续测试，只是将post请求刷新的命令改为：</p>
<pre class=" language-bash"><code class="language-bash">curl -X POST <span class="token string">"http://localhost:3344/actuator/bus-refresh/config-client:3355"</span></code></pre>
<h3 id="5、广播通知流程"><a href="#5、广播通知流程" class="headerlink" title="5、广播通知流程"></a>5、广播通知流程</h3><p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/bus-refresh-work.jpg" alt="广播流程示图"></p>
<h2 id="四、Bus-其他"><a href="#四、Bus-其他" class="headerlink" title="四、Bus 其他"></a>四、Bus 其他</h2><p>后续学习再补充。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud Gateway</title>
    <url>/posts/bc16d093.html</url>
    <content><![CDATA[<h2 id="SpringCloud-Gateway-服务网关"><a href="#SpringCloud-Gateway-服务网关" class="headerlink" title="SpringCloud Gateway 服务网关"></a>SpringCloud Gateway 服务网关</h2><p>相关链接：</p>
<ul>
<li><a href="bad02d94.html">SpringCloud 微服务学习</a></li>
<li><a href="eeda118.html">RESTful 接口设计规范</a></li>
<li><a href="648d6b26.html">SpringCloud Eureka 服务注册与发现</a></li>
<li><a href="3010739f.html">SpringCloud Consul 服务注册与发现</a></li>
<li><a href="7ecbba09.html">SpringCloud Ribbon 客户端负载均衡与服务调用</a></li>
<li><a href="b27245de.html">SpringCloud OpenFeign 服务接口调用</a></li>
<li><a href="464bb413.html">SpringCloud Hystrix熔断器</a></li>
<li><a href="bc16d093.html">SpringCloud Gateway 服务网关</a></li>
<li><a href="fbbe72e1.html">SpringCloud Zuul 服务网关</a></li>
<li><a href="5b5896d1.html">Spring Cloud Config 分布式配置中心</a></li>
<li><a href="9e02a3e8.html">Spring Cloud Bus 消息总线</a></li>
<li><a href="7f3b07b1.html">SpringCloud Stream 消息驱动</a></li>
<li><a href="b99c053f.html">SpringCloud Sleuth 分布式请求链路追踪</a></li>
<li><a href="461589aa.html">SpringCloud Alibaba</a></li>
<li><a href="a46e46f8.html">SpringCloud Alibaba Nacos服务注册和配置中心</a></li>
<li><a href="5122a811.html">SpringCloud Alibaba Sentinel 实现熔断与限流</a></li>
<li><a href="fb7c74c4.html">SpringCloud Alibaba Seata 分布式事务</a></li>
</ul>
<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p><a href="https://github.com/Netflix/zuul/wiki" target="_blank" rel="noopener">https://github.com/Netflix/zuul/wiki</a></p>
<p>zuul 2 难产了….</p>
<p>Spring Cloud 就整了个SpringCloud Gateway</p>
<p>官方的使用说明文档：</p>
<p><a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.1.RELEASE/reference/html/" target="_blank" rel="noopener">https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.1.RELEASE/reference/html/</a></p>
<h3 id="1、基本介绍"><a href="#1、基本介绍" class="headerlink" title="1、基本介绍"></a>1、基本介绍</h3><p>Gateway 是在 spring 的生态系统圈之上构建的API 网关服务组件。</p>
<p>SpringCloud Gateway 是基于Spring5，SpringBoot 2 和 Project Reactor等技术，可以提供一种简单而有效的方式来对API进行路由管理，还提供了一些强大的过滤功能。</p>
<p>如：安全、监控、熔断、限流、重试等</p>
<p>相比较而言，Zuul 1.x 是非Reactor 模式的老版本。为了提升网关性能，Gateway  基于WebFlux 框架实现，而WebFlux框架底层使用了高性能的Reactor模式通信框架Netty。</p>
<p>Gateway   目标提供统一的路由方式，且基于Filter链的方式提供网关的基本功能。</p>
<p>SpringCloud Gateway 可以完成代理、鉴权、流量控制、熔断、日志监控等。</p>
<h3 id="2、架构角色介绍"><a href="#2、架构角色介绍" class="headerlink" title="2、架构角色介绍"></a>2、架构角色介绍</h3><p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/gateway-01.jpg" alt="Gateway在架构中的角色"></p>
<h2 id="二、SpringCloud-Gateway"><a href="#二、SpringCloud-Gateway" class="headerlink" title="二、SpringCloud Gateway"></a>二、SpringCloud Gateway</h2><h3 id="1、主要特点"><a href="#1、主要特点" class="headerlink" title="1、主要特点"></a>1、主要特点</h3><p>（1）基于Spring5，SpringBoot 2 和 Project Reactor等技术构建。</p>
<p>（2）动态路由；能够匹配任何请求属性。</p>
<p>（3）对路由进行断言（Predicate）和过滤（Filter），编写方便；</p>
<p>（4）集成Hystrix的断路器功能；</p>
<p>（5）集成Spring Cloud 服务发现功能；</p>
<p>（6）对请求进行限流；</p>
<p>（7）支持路径重写；</p>
<h3 id="2、Gateway与-Zuul"><a href="#2、Gateway与-Zuul" class="headerlink" title="2、Gateway与 Zuul"></a>2、Gateway与 Zuul</h3><p>在Spring Cloud Finchley 正式版之前官方推荐网关是Netflix 提供的Zuul，现在的最新版是 Spring Cloud Hoxton 。</p>
<table>
<thead>
<tr>
<th>Zuul</th>
<th>Gateway</th>
</tr>
</thead>
<tbody><tr>
<td>Zuul 1.x 是基于一个阻塞I/O 的API网关</td>
<td>基于Netty的非阻塞IO的API网关。</td>
</tr>
<tr>
<td>Zuul 1.x 是基于Servlet2.5 使用阻塞架构，不支持长连接（如WebSocket）<br>Zuul 的设计模式和Nginx 较像，每次I/O操作都是从工作线程中选择一个执行，请求线程被阻塞到工作线程完成，但是差别是Ngixn是C++实现，Zuul 是用Java实现的，JVM本身就有第一次加载较慢的情况，使Zuul的性能相对较差。</td>
<td>基于Spring5，SpringBoot 2 和 Project Reactor等技术构建。Gateway  基于WebFlux 框架实现，底层是非阻塞的Netty，webFux 是典型的非阻塞异步响应式框架，支持非阻塞+函数式编程。支持长连接，支持websocket。</td>
</tr>
<tr>
<td>Zuul 2.x 理念更先进，计划基于Netty 非阻塞支持长连接，但Spring Cloud 没有整合。Zuul 2比Zuul1 有较大提升。</td>
<td>Gateway 属于spring 生态圈，与spring 相关组件紧密集成，更好的组合适配，更好的开发体验。</td>
</tr>
</tbody></table>
<h3 id="3、Gateway组件"><a href="#3、Gateway组件" class="headerlink" title="3、Gateway组件"></a>3、Gateway组件</h3><p>Gateway 三个核心的概念：</p>
<ul>
<li>Route 路由。路由是构建网关的基本模块，它由ID，目标URI，一系列的断言和过滤器组成，如果断言为true则匹配该路由。</li>
<li>Predicate 断言。参考的是java8的<code>java.util.function.Predicate</code>开发人员可以匹配HTTP请求中的所有内容（例如请求头或请求参数），如果请求与断言相匹配则进行路由。</li>
<li>Filter 过滤。指的是Spring框架中GatewayFilter的实例，使用过滤器，可以在请求被路由前或者之后对请求进行修改。</li>
</ul>
<h2 id="三、Gateway-路由使用"><a href="#三、Gateway-路由使用" class="headerlink" title="三、Gateway-路由使用"></a>三、Gateway-路由使用</h2><p>新建微服务ms-cloud-gateway，端口2244</p>
<h3 id="1、引入POM依赖"><a href="#1、引入POM依赖" class="headerlink" title="1、引入POM依赖"></a>1、引入POM依赖</h3><pre class=" language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!--新增gateway--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-gateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>
<h3 id="2、添加配置"><a href="#2、添加配置" class="headerlink" title="2、添加配置"></a>2、添加配置</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">2244</span>

<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> ms<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>gateway

<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
  <span class="token key atrule">instance</span><span class="token punctuation">:</span>
    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> ms<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>gateway<span class="token punctuation">-</span>service
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>
      <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
      <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7001.com<span class="token punctuation">:</span>7001/eureka
</code></pre>
<h3 id="3、启动类"><a href="#3、启动类" class="headerlink" title="3、启动类"></a>3、启动类</h3><p>其实就是之前的Eureka 服务注册服务发现。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">;</span>


<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>eureka<span class="token punctuation">.</span>EnableEurekaClient<span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableEurekaClient</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GateWayMain2244</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span> GateWayMain2244<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="4、网关路由映射"><a href="#4、网关路由映射" class="headerlink" title="4、网关路由映射"></a>4、网关路由映射</h3><p>如果不想暴露微服务的6001端口，希望在6001外面套一层2244。</p>
<p>关于网关路由映射的配置方式，有两种方式，这里先使用YML操作方式、Java的方式参见6。</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">2244</span>

<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> ms<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>gateway
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> user_routh <span class="token comment" spellcheck="true">#路由的ID，没有固定规则但要求唯一，建议配合服务名</span>
          <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">6001   </span><span class="token comment" spellcheck="true">#匹配后提供服务的路由地址</span>
          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> Path=/v1/user/get/**   <span class="token comment" spellcheck="true">#断言,路径相匹配的进行路由</span>

        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> user_routh2
          <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">6001</span>
          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> Path=/v1/user/lb/**   <span class="token comment" spellcheck="true">#断言,路径相匹配的进行路由</span>
<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
  <span class="token key atrule">instance</span><span class="token punctuation">:</span>
    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> ms<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>gateway<span class="token punctuation">-</span>service
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>
      <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
      <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7001.com<span class="token punctuation">:</span>7001/eureka            </code></pre>
<h3 id="5、测试"><a href="#5、测试" class="headerlink" title="5、测试"></a>5、测试</h3><p>启动Eureka 注册中心，启动服务提供方，启动Gateway网关工程。</p>
<p>直接访问（不使用网关）原有地址：<a href="http://localhost:6001/v1/user/get/10" target="_blank" rel="noopener">http://localhost:6001/v1/user/get/10</a></p>
<p>通过网关访问地址：<a href="http://localhost:2244/v1/user/get/10" target="_blank" rel="noopener">http://localhost:2244/v1/user/get/10</a></p>
<h3 id="6、网关路由映射-Java版"><a href="#6、网关路由映射-Java版" class="headerlink" title="6、网关路由映射-Java版"></a>6、网关路由映射-Java版</h3><p>只需在代码中注入 <code>RouteLocator</code>的Bean即可。</p>
<p>不在YML中写，创建配置类<code>GateWayConfig</code></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>config<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>route<span class="token punctuation">.</span>RouteLocator<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>route<span class="token punctuation">.</span>builder<span class="token punctuation">.</span>RouteLocatorBuilder<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GateWayConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> RouteLocator <span class="token function">customRouteLocator</span><span class="token punctuation">(</span>RouteLocatorBuilder routeLocatorBuilder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        RouteLocatorBuilder<span class="token punctuation">.</span>Builder routes <span class="token operator">=</span> routeLocatorBuilder<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        routes<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">"path_rote_xiaocai"</span><span class="token punctuation">,</span> r <span class="token operator">-</span><span class="token operator">></span> r<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">"/xiaocai"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">"http://zhangxiaocai.com/xiaocai"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> routes<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="7、微服务名动态路由"><a href="#7、微服务名动态路由" class="headerlink" title="7、微服务名动态路由"></a>7、微服务名动态路由</h3><p>默认情况下Gateway会根据注册中心的服务列表，以注册中心上微服务名为路径创建动态路由进行转发，从而实现动态路由的功能。</p>
<p>修改YML配置：</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">2244</span>

<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> ms<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>gateway
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">locator</span><span class="token punctuation">:</span>
          <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true  </span><span class="token comment" spellcheck="true">#开启从注册中心动态创建路由的功能，利用微服务名进行路由</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> user_routh <span class="token comment" spellcheck="true">#路由的ID，没有固定规则但要求唯一，建议配合服务名</span>
          <span class="token comment" spellcheck="true">#uri: http://localhost:8001   #匹配后提供服务的路由地址</span>
          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//cloud<span class="token punctuation">-</span>payment<span class="token punctuation">-</span>service <span class="token comment" spellcheck="true"># 使用lb协议，表示启用Gateway的负载均衡功能</span>
          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> Path=/v1/user/get/**   <span class="token comment" spellcheck="true">#断言,路径相匹配的进行路由</span>

        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> user_routh2
          <span class="token comment" spellcheck="true">#uri: http://localhost:8001   #匹配后提供服务的路由地址</span>
          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//cloud<span class="token punctuation">-</span>payment<span class="token punctuation">-</span>service
          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> Path=/v1/user/lb/**   <span class="token comment" spellcheck="true">#断言,路径相匹配的进行路由</span>


<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
  <span class="token key atrule">instance</span><span class="token punctuation">:</span>
    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>gateway<span class="token punctuation">-</span>service
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>
      <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
      <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7001.com<span class="token punctuation">:</span>7001/eureka
</code></pre>
<p><code>lb://serviceName</code>是<code>spring cloud gateway</code>在微服务中自动为我们创建的负载均衡uri。</p>
<p><strong>动态路由测试</strong></p>
<p>启动Eureka 服务注册中心，启动两个服务提供者，端口分别是6001,6002，启动Gateway网关。</p>
<p><a href="http://localhost:2244/v1/user/lb" target="_blank" rel="noopener">http://localhost:2244/v1/user/lb</a></p>
<p><code>/v1/user/lb</code> 方法返回各自的端口号，负载均衡默认使用轮询算法，如果两个端口交替出现，说明Gateway的负载均衡起作用了。</p>
<h2 id="四、Gateway-断言"><a href="#四、Gateway-断言" class="headerlink" title="四、Gateway-断言"></a>四、Gateway-断言</h2><p>启动Gateway2244工程，可以看到控制台打印信息中有以下字样：</p>
<pre class=" language-txt"><code class="language-txt">Loaded RoutePredicateFactory [ xxx]</code></pre>
<p>SpringCloud Gateway 将路由匹配作为 Spring WebFlux HandlerMapping基础架构的一部分。</p>
<p>SpringCloud Gateway 包括许多内置的Route Predicate Factory ( 路由断言工厂)。所有这些Predicate 都与HTTP请求的不同属性匹配。多个Route Predicate 工厂可以通过逻辑and进行组合。</p>
<p>SpringCloud Gateway 创建Route 对象时，使用<code>RoutePredicateFactory</code> 创建 Predicate 对象，Predicate对象可以赋值给Route。</p>
<p><strong>常用Route Predicate</strong>：</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/gateway-route-predicate-factories.jpg" alt="常用的Predicate"></p>
<p>（1）After Route Predicate 在某个时间点之后断言为true，即在时间点之后访问地址开始生效；</p>
<p>时间格式为java8里的带时区的时间：</p>
<pre class=" language-java"><code class="language-java">ZonedDateTime zonedDateTime <span class="token operator">=</span> ZonedDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>zonedDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>对应的YML配置：</p>
<pre class=" language-yaml"><code class="language-yaml">
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> ms<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>gateway
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">locator</span><span class="token punctuation">:</span>
          <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true  </span><span class="token comment" spellcheck="true">#开启从注册中心动态创建路由的功能，利用微服务名进行路由</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> user_routh <span class="token comment" spellcheck="true">#路由的ID，没有固定规则但要求唯一，建议配合服务名</span>
          <span class="token comment" spellcheck="true">#uri: http://localhost:8001   #匹配后提供服务的路由地址</span>
          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//cloud<span class="token punctuation">-</span>payment<span class="token punctuation">-</span>service <span class="token comment" spellcheck="true"># 使用lb协议，表示启用Gateway的负载均衡功能</span>
          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> Path=/v1/user/get/**   <span class="token comment" spellcheck="true">#断言,路径相匹配的进行路由</span>
            <span class="token punctuation">-</span> After=2020<span class="token punctuation">-</span>09<span class="token punctuation">-</span>28T10<span class="token punctuation">:</span>59<span class="token punctuation">:</span>34.102+08<span class="token punctuation">:</span>00<span class="token punctuation">[</span>Asia/Shanghai<span class="token punctuation">]</span>
</code></pre>
<p>（2）Before Route Predicate 在某个时间点之前断言为true，即在时间点之后访问地址开始失效；</p>
<p>配置示例：</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> ms<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>gateway
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">locator</span><span class="token punctuation">:</span>
          <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true  </span><span class="token comment" spellcheck="true">#开启从注册中心动态创建路由的功能，利用微服务名进行路由</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> user_routh2
          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//cloud<span class="token punctuation">-</span>payment<span class="token punctuation">-</span>service
          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> Path=/v1/user/lb/**   <span class="token comment" spellcheck="true">#断言,路径相匹配的进行路由</span>
            <span class="token punctuation">-</span> Before=2020<span class="token punctuation">-</span>09<span class="token punctuation">-</span>28T10<span class="token punctuation">:</span>59<span class="token punctuation">:</span>34.102+08<span class="token punctuation">:</span>00<span class="token punctuation">[</span>Asia/Shanghai<span class="token punctuation">]</span></code></pre>
<p>（3）Between Route Predicate 在某个时间点之后断言为true，即在时间区间内访问地址生效；</p>
<p>配置示例：</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> ms<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>gateway
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">locator</span><span class="token punctuation">:</span>
          <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true  </span><span class="token comment" spellcheck="true">#开启从注册中心动态创建路由的功能，利用微服务名进行路由</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> user_routh2
          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//cloud<span class="token punctuation">-</span>payment<span class="token punctuation">-</span>service
          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> Path=/v1/user/lb/**   <span class="token comment" spellcheck="true">#断言,路径相匹配的进行路由</span>
            <span class="token punctuation">-</span> Between=2020<span class="token punctuation">-</span>09<span class="token punctuation">-</span>28T11<span class="token punctuation">:</span>59<span class="token punctuation">:</span>34.102+08<span class="token punctuation">:</span>00<span class="token punctuation">[</span>Asia/Shanghai<span class="token punctuation">]</span> <span class="token punctuation">,</span>  2020<span class="token punctuation">-</span>09<span class="token punctuation">-</span>28T12<span class="token punctuation">:</span>03<span class="token punctuation">:</span>34.102+08<span class="token punctuation">:</span>00<span class="token punctuation">[</span>Asia/Shanghai<span class="token punctuation">]</span></code></pre>
<p>（4）Cookie Route Predicate </p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> ms<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>gateway
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">locator</span><span class="token punctuation">:</span>
          <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true  </span><span class="token comment" spellcheck="true">#开启从注册中心动态创建路由的功能，利用微服务名进行路由</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> user_routh2
          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//cloud<span class="token punctuation">-</span>payment<span class="token punctuation">-</span>service
          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> Path=/v1/user/lb/**   <span class="token comment" spellcheck="true">#断言,路径相匹配的进行路由</span>
            <span class="token punctuation">-</span> Cookie=username<span class="token punctuation">,</span>atguigu    <span class="token comment" spellcheck="true">#并且Cookie是username=zhangshuai才能访问</span></code></pre>
<p>测试地址：</p>
<p>（5）Header Route Predicate</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> ms<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>gateway
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">locator</span><span class="token punctuation">:</span>
          <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true  </span><span class="token comment" spellcheck="true">#开启从注册中心动态创建路由的功能，利用微服务名进行路由</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> user_routh2
          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//cloud<span class="token punctuation">-</span>payment<span class="token punctuation">-</span>service
          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> Path=/v1/user/lb/**   <span class="token comment" spellcheck="true">#断言,路径相匹配的进行路由</span>
            <span class="token punctuation">-</span> Cookie=username<span class="token punctuation">,</span>atguigu    <span class="token comment" spellcheck="true">#并且Cookie是username=zhangshuai才能访问</span>
            <span class="token punctuation">-</span> Header=X<span class="token punctuation">-</span>Request<span class="token punctuation">-</span>Id<span class="token punctuation">,</span> \d+   <span class="token comment" spellcheck="true">#请求头中要有X-Request-Id属性并且值为整数的正则表达式</span></code></pre>
<p>curl  <a href="http://localhost:2244/v1/user/lb" target="_blank" rel="noopener">http://localhost:2244/v1/user/lb</a>  -H “x=Request-id:!23”</p>
<p>（6）Host Route Predicate</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> ms<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>gateway
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">locator</span><span class="token punctuation">:</span>
          <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true  </span><span class="token comment" spellcheck="true">#开启从注册中心动态创建路由的功能，利用微服务名进行路由</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> user_routh2
          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//cloud<span class="token punctuation">-</span>payment<span class="token punctuation">-</span>service
          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> Path=/v1/user/lb/**   <span class="token comment" spellcheck="true">#断言,路径相匹配的进行路由</span>
            <span class="token punctuation">-</span> Cookie=username<span class="token punctuation">,</span>atguigu    <span class="token comment" spellcheck="true">#并且Cookie是username=zhangshuai才能访问</span>
            <span class="token punctuation">-</span> Header=X<span class="token punctuation">-</span>Request<span class="token punctuation">-</span>Id<span class="token punctuation">,</span> \d+   <span class="token comment" spellcheck="true">#请求头中要有X-Request-Id属性并且值为整数的正则表达式</span>
            <span class="token punctuation">-</span> Host=**.xiaocai.com</code></pre>
<p>（7）Method Route Predicate</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> ms<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>gateway
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">locator</span><span class="token punctuation">:</span>
          <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true  </span><span class="token comment" spellcheck="true">#开启从注册中心动态创建路由的功能，利用微服务名进行路由</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> user_routh2
          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//cloud<span class="token punctuation">-</span>payment<span class="token punctuation">-</span>service
          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> Path=/v1/user/lb/**   <span class="token comment" spellcheck="true">#断言,路径相匹配的进行路由</span>
            <span class="token punctuation">-</span> Cookie=username<span class="token punctuation">,</span>atguigu    <span class="token comment" spellcheck="true">#并且Cookie是username=zhangshuai才能访问</span>
            <span class="token punctuation">-</span> Header=X<span class="token punctuation">-</span>Request<span class="token punctuation">-</span>Id<span class="token punctuation">,</span> \d+   <span class="token comment" spellcheck="true">#请求头中要有X-Request-Id属性并且值为整数的正则表达式</span>
            <span class="token punctuation">-</span> Host=**.xiaocai.com
            <span class="token punctuation">-</span> Method=GET</code></pre>
<p>（8）Path Route Predicate</p>
<p>使用最多的一个。</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">-</span> Path=/v1/user/lb/**   <span class="token comment" spellcheck="true">#断言,路径相匹配的进行路由</span></code></pre>
<p>（9）Query Route Predicate</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> ms<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>gateway
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">locator</span><span class="token punctuation">:</span>
          <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true  </span><span class="token comment" spellcheck="true">#开启从注册中心动态创建路由的功能，利用微服务名进行路由</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> user_routh2
          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//cloud<span class="token punctuation">-</span>payment<span class="token punctuation">-</span>service
          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> Path=/v1/user/lb/**   <span class="token comment" spellcheck="true">#断言,路径相匹配的进行路由</span>
            <span class="token punctuation">-</span> Cookie=username<span class="token punctuation">,</span>atguigu    <span class="token comment" spellcheck="true">#并且Cookie是username=zhangshuai才能访问</span>
            <span class="token punctuation">-</span> Header=X<span class="token punctuation">-</span>Request<span class="token punctuation">-</span>Id<span class="token punctuation">,</span> \d+   <span class="token comment" spellcheck="true">#请求头中要有X-Request-Id属性并且值为整数的正则表达式</span>
            <span class="token punctuation">-</span> Host=**.xiaocai.com
            <span class="token punctuation">-</span> Method=GET
            <span class="token punctuation">-</span> Query=username<span class="token punctuation">,</span> \d+ <span class="token comment" spellcheck="true">#要有参数名称并且是正整数才能路由</span></code></pre>
<p>Predicate就是为了实现一组匹配规则，使得请求过来找到对应的Route进行处理。</p>
<h2 id="五、Gateway-过滤"><a href="#五、Gateway-过滤" class="headerlink" title="五、Gateway-过滤"></a>五、Gateway-过滤</h2><h3 id="1、Filter简介"><a href="#1、Filter简介" class="headerlink" title="1、Filter简介"></a>1、Filter简介</h3><p>路由过滤器可用于修改进入的HTTP请求和返回的HTTP响应，路由过滤器只能指定路由进行使用。</p>
<p>SpringCloud Gateway 内置了多种路由过滤器，都是有GatewayFilter的工厂来产生。</p>
<p><strong>Filter的生命周期</strong></p>
<ul>
<li>pre 在业务逻辑之前</li>
<li>post 在业务逻辑之后</li>
</ul>
<p><strong>Filter的类型</strong></p>
<ul>
<li>单一的-GatewayFilter ，官方列举31种</li>
<li>全局的-GlobalFilter ，官方列举10种<ul>
<li><code>AddRequestHeader</code> </li>
<li><code>AddRequestParameter</code> </li>
<li><code>AddResponseHeader</code>  </li>
<li><code>DedupeResponseHeader</code> </li>
<li><code>Hystrix</code></li>
<li><code>CircuitBreaker</code></li>
<li><code>FallbackHeaders</code> </li>
<li><code>MapRequestHeader</code> </li>
<li><code>PrefixPath</code> </li>
<li><code>PreserveHostHeader</code> </li>
</ul>
</li>
</ul>
<p>官方文档说明：<a href="https://docs.spring.io/spring-cloud-gateway/docs/2.2.5.RELEASE/reference/html/#gatewayfilter-factories" target="_blank" rel="noopener">https://docs.spring.io/spring-cloud-gateway/docs/2.2.5.RELEASE/reference/html/#gatewayfilter-factories</a></p>
<p>后续在实际工作中遇到再补充，大部分基本上都可以见名知意。</p>
<h3 id="2、自定义Filter"><a href="#2、自定义Filter" class="headerlink" title="2、自定义Filter"></a>2、自定义Filter</h3><p>自定义GlobalFilter可以进行全局的日志记录，统一的网关鉴权等。</p>
<p>若要自定义全局的GlobalFilter，需要类实现两个接口<code>GlobalFilter</code>和<code>Ordered</code></p>
<p><strong>自定义全局的GlobalFilter</strong></p>
<p>示例：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>filter<span class="token punctuation">;</span>

<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>GatewayFilterChain<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>GlobalFilter<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Ordered<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpStatus<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span>StringUtils<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>server<span class="token punctuation">.</span>ServerWebExchange<span class="token punctuation">;</span>
<span class="token keyword">import</span> reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span>Mono<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyLogGateWayFilter</span> <span class="token keyword">implements</span> <span class="token class-name">GlobalFilter</span><span class="token punctuation">,</span>Ordered <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">filter</span><span class="token punctuation">(</span>ServerWebExchange exchange<span class="token punctuation">,</span> GatewayFilterChain chain<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"*********come in MyLogGateWayFilter: "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String uname <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueryParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"*****用户名为Null 非法用户,(┬＿┬)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span>HttpStatus<span class="token punctuation">.</span>NOT_ACCEPTABLE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//给人家一个回应</span>
            <span class="token keyword">return</span> exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p><strong>测试</strong></p>
<p>启动Eureka 注册中心，启动两个服务提供者，启动Gateway网关。</p>
<p>测试访问地址：<a href="http://localhost:2244/v1/user/lb?uname=gtway" target="_blank" rel="noopener">http://localhost:2244/v1/user/lb?uname=gtway</a></p>
<p>再测试路径1：<a href="http://localhost:2244/v1/user/lb" target="_blank" rel="noopener">http://localhost:2244/v1/user/lb</a></p>
<p>再测试路径2：<a href="http://localhost:2244/v1/user/lb?uname" target="_blank" rel="noopener">http://localhost:2244/v1/user/lb?uname</a></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud Config</title>
    <url>/posts/5b5896d1.html</url>
    <content><![CDATA[<h2 id="Spring-Cloud-Config-分布式配置中心"><a href="#Spring-Cloud-Config-分布式配置中心" class="headerlink" title="Spring Cloud Config 分布式配置中心"></a>Spring Cloud Config 分布式配置中心</h2><p>相关链接：</p>
<ul>
<li><a href="bad02d94.html">SpringCloud 微服务学习</a></li>
<li><a href="eeda118.html">RESTful 接口设计规范</a></li>
<li><a href="648d6b26.html">SpringCloud Eureka 服务注册与发现</a></li>
<li><a href="3010739f.html">SpringCloud Consul 服务注册与发现</a></li>
<li><a href="7ecbba09.html">SpringCloud Ribbon 客户端负载均衡与服务调用</a></li>
<li><a href="b27245de.html">SpringCloud OpenFeign 服务接口调用</a></li>
<li><a href="464bb413.html">SpringCloud Hystrix熔断器</a></li>
<li><a href="bc16d093.html">SpringCloud Gateway 服务网关</a></li>
<li><a href="fbbe72e1.html">SpringCloud Zuul 服务网关</a></li>
<li><a href="5b5896d1.html">Spring Cloud Config 分布式配置中心</a></li>
<li><a href="9e02a3e8.html">Spring Cloud Bus 消息总线</a></li>
<li><a href="7f3b07b1.html">SpringCloud Stream 消息驱动</a></li>
<li><a href="b99c053f.html">SpringCloud Sleuth 分布式请求链路追踪</a></li>
<li><a href="461589aa.html">SpringCloud Alibaba</a></li>
<li><a href="a46e46f8.html">SpringCloud Alibaba Nacos服务注册和配置中心</a></li>
<li><a href="5122a811.html">SpringCloud Alibaba Sentinel 实现熔断与限流</a></li>
<li><a href="fb7c74c4.html">SpringCloud Alibaba Seata 分布式事务</a></li>
</ul>
<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p>微服务将原本应用中的业务拆分成一个个子服务，每个服务粒度相对较小，因此系统中会出现大量服务。每个微服务都有自己的配置信息才能运行，当微服务较多的时候，有一套集中式的、动态的配置管理组件是适宜的。</p>
<p>Spring Cloud 提供了 ConfigServer 来解决这个问题。</p>
<h2 id="二、Config"><a href="#二、Config" class="headerlink" title="二、Config"></a>二、Config</h2><p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/spcl-config-work.png" alt="Config"></p>
<h3 id="1、基本信息"><a href="#1、基本信息" class="headerlink" title="1、基本信息"></a>1、基本信息</h3><p>官方：<a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-config/2.2.1.RELEASE/reference/html/" target="_blank" rel="noopener">https://cloud.spring.io/spring-cloud-static/spring-cloud-config/2.2.1.RELEASE/reference/html/</a></p>
<p>SpringCloud Config 为微服务架构中的各个微服务提供集中式的外部配置支持，配置服务器为各个不同微服务应用的所有环境提供了一个<strong>中心化的外部配置</strong>。</p>
<p> SpringCloud Config  分为<strong>服务端</strong>和<strong>客户端</strong>两个部分。</p>
<p>服务端也叫分布式配置中心，它是一个独立的微服务应用，用来连接配置服务器并为客户端获取配置信息，加密解密信息等访问接口。</p>
<p>客户端则是通过指定的配置中心来管理应用资源、以及业务相关的配置内容，并在启动的时候从配置中心获取和加载配置信息。</p>
<p>配置服务器默认采用git来存储配置信息，这样有助于对环境配进行版本管理，且可以通过git客户端工具来方便的管理和访问配置内容。由于SpringCloud Config默认使用Git来存储配置文件，同时也有其它方式，比如支持svn和本地文件，但官方最推荐的还是Git，而且使用的是http/https访问的形式。</p>
<p>服务端负责将git（svn）中存储的配置文件发布成REST接口，客户端可以从服务端REST接口获取配置。但客户端并不能主动感知到配置的变化，从而主动去获取新的配置。客户端如何去主动获取新的配置信息呢，springcloud已经给我们提供了解决方案，每个客户端通过POST方法触发各自的刷新。 </p>
<h3 id="2、主要特点"><a href="#2、主要特点" class="headerlink" title="2、主要特点"></a>2、主要特点</h3><p>（1）针对不同环境不同配置，可以动态化配置更新，如多环境部署dev/test/prod/beta/release.</p>
<p>（2）运行期间动态调整配置，可以不需要在每个服务部署机器上编写配置文件，服务会向配置中心统一拉取自己的配置信息。</p>
<p>（3）当配置发生变动时，服务无须重启即可感知配置变化并应有新的配置。</p>
<p>（4）Config将配置信息以REST接口形式暴露</p>
<p>（5）默认使用git 存储，与github整合。</p>
<h2 id="三、Config-使用"><a href="#三、Config-使用" class="headerlink" title="三、Config 使用"></a>三、Config 使用</h2><h3 id="1、Config-配置-Git"><a href="#1、Config-配置-Git" class="headerlink" title="1、Config 配置-Git"></a>1、Config 配置-Git</h3><h3 id="1-1-服务端配置"><a href="#1-1-服务端配置" class="headerlink" title="1.1 服务端配置"></a>1.1 服务端配置</h3><h4 id="（1）准备工作"><a href="#（1）准备工作" class="headerlink" title="（1）准备工作"></a>（1）准备工作</h4><p>登录github账号，在Github上新建一个名为sprincloud-config的新Repository 。</p>
<p>在本地硬盘上新建git仓库并clone刚刚的仓库，地址：<code>D:\springcloud2020</code>。</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone git@github.com/username/sprincloud-config.git</code></pre>
<p>在<code>D:\springcloud2020\sprincloud-config</code>目录新建多环境的配置文件，注意文件格式为<strong>UTF-8</strong></p>
<ul>
<li><p>config-dev.yml</p>
</li>
<li><p>config-prod.yml</p>
</li>
<li><p>config-test.yml</p>
</li>
</ul>
<p>config-dev.yml 的内容：</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">config</span><span class="token punctuation">:</span>
  <span class="token key atrule">info</span><span class="token punctuation">:</span> this is master config<span class="token punctuation">-</span>dev from github <span class="token punctuation">---</span></code></pre>
<p>config-test.yml 的内容：</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">config</span><span class="token punctuation">:</span>
  <span class="token key atrule">info</span><span class="token punctuation">:</span> this is master config<span class="token punctuation">-</span>test from github <span class="token punctuation">---</span></code></pre>
<p>config-prod.yml 的内容：</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">config</span><span class="token punctuation">:</span>
  <span class="token key atrule">info</span><span class="token punctuation">:</span> this is master config<span class="token punctuation">-</span>prod from github <span class="token punctuation">---</span></code></pre>
<p>如果需要修改可以模拟运维人员修改配置文件，进行提交。</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> add <span class="token keyword">.</span>
<span class="token function">git</span> commit -m <span class="token string">"init yml"</span>
<span class="token function">git</span> push origin master</code></pre>
<p>新建子工程cloud-config-2255，作为cloud的配置中心模块。</p>
<h4 id="（2）引入pom依赖"><a href="#（2）引入pom依赖" class="headerlink" title="（2）引入pom依赖"></a>（2）引入pom依赖</h4><pre class=" language-yaml"><code class="language-yaml">         &lt;<span class="token tag">!--</span> config server <span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">></span><span class="token scalar string">
         &lt;dependency>
            &lt;groupId>org.springframework.cloud&lt;/groupId>
            &lt;artifactId>spring-cloud-config-server&lt;/artifactId></span>
        &lt;/dependency<span class="token punctuation">></span>

        &lt;dependency<span class="token punctuation">></span>
            &lt;groupId<span class="token punctuation">></span>org.springframework.cloud&lt;/groupId<span class="token punctuation">></span>
            &lt;artifactId<span class="token punctuation">></span>spring<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>starter<span class="token punctuation">-</span>netflix<span class="token punctuation">-</span>eureka<span class="token punctuation">-</span>client&lt;/artifactId<span class="token punctuation">></span>
        &lt;/dependency<span class="token punctuation">></span>

        &lt;dependency<span class="token punctuation">></span>
            &lt;groupId<span class="token punctuation">></span>org.springframework.boot&lt;/groupId<span class="token punctuation">></span>
            &lt;artifactId<span class="token punctuation">></span>spring<span class="token punctuation">-</span>boot<span class="token punctuation">-</span>starter<span class="token punctuation">-</span>web&lt;/artifactId<span class="token punctuation">></span>
        &lt;/dependency<span class="token punctuation">></span>
        &lt;dependency<span class="token punctuation">></span>
            &lt;groupId<span class="token punctuation">></span>org.springframework.boot&lt;/groupId<span class="token punctuation">></span>
            &lt;artifactId<span class="token punctuation">></span>spring<span class="token punctuation">-</span>boot<span class="token punctuation">-</span>starter<span class="token punctuation">-</span>actuator&lt;/artifactId<span class="token punctuation">></span>
        &lt;/dependency<span class="token punctuation">></span></code></pre>
<h4 id="（3）YML配置"><a href="#（3）YML配置" class="headerlink" title="（3）YML配置"></a>（3）YML配置</h4><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">2255</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>config<span class="token punctuation">-</span>center
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">config</span><span class="token punctuation">:</span>
      <span class="token key atrule">server</span><span class="token punctuation">:</span>
        <span class="token key atrule">git</span><span class="token punctuation">:</span>
          <span class="token key atrule">uri</span><span class="token punctuation">:</span>  填写你自己的github路径
          <span class="token key atrule">search-paths</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> springcloud<span class="token punctuation">-</span>config
      <span class="token key atrule">label</span><span class="token punctuation">:</span> master
<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>
      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span>  http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>7001/eureka

</code></pre>
<h4 id="（4）启用Config服务"><a href="#（4）启用Config服务" class="headerlink" title="（4）启用Config服务"></a>（4）启用Config服务</h4><p>在主启动类上使用注解<code>@EnableConfigServer</code></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>config<span class="token punctuation">.</span>server<span class="token punctuation">.</span>EnableConfigServer<span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableConfigServer</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigCenterMain2255</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ConfigCenterMain2255 <span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>写个访问的controller</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>Controller<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Value<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span>

<span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigClientController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${config.info}"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> String configInfo<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/configInfo"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">getConfigInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> configInfo<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="（5）测试"><a href="#（5）测试" class="headerlink" title="（5）测试"></a>（5）测试</h4><p>注意：host 添加域名</p>
<pre class=" language-txt"><code class="language-txt">127.0.0.1 config-2255.com</code></pre>
<p>启动服务，访问测试：<a href="http://config-2255.com:2255/master/config-dev.yml" target="_blank" rel="noopener">http://config-2255.com:2255/master/config-dev.yml</a></p>
<p>浏览器是否打印出<code>config-dev.yml</code>的内容。</p>
<h4 id="（6）配置读取规则"><a href="#（6）配置读取规则" class="headerlink" title="（6）配置读取规则"></a>（6）配置读取规则</h4><p>官方列举：</p>
<p>http服务支持的格式</p>
<pre class=" language-txt"><code class="language-txt">/{application}/{profile}[/{label}]
/{application}-{profile}.yml
/{label}/{application}-{profile}.yml
/{application}-{profile}.properties
/{label}/{application}-{profile}.properties</code></pre>
<p>推荐使用格式：</p>
<p><code>/{label}/{application}-{profile}.yml</code></p>
<p><code>/{label}/{application}-{profile}.properties</code></p>
<p>label 只的github 仓库里的分支</p>
<p>master分支：</p>
<p><a href="http://config-2255.com:2255/master/config-dev.yml" target="_blank" rel="noopener">http://config-2255.com:2255/master/config-dev.yml</a></p>
<p><a href="http://config-2255.com:2255/master/config-test.yml" target="_blank" rel="noopener">http://config-2255.com:2255/master/config-test.yml</a></p>
<p><a href="http://config-2255.com:2255/master/config-prod.yml" target="_blank" rel="noopener">http://config-2255.com:2255/master/config-prod.yml</a></p>
<p>dev分支：</p>
<p><a href="http://config-2255.com:2255/dev/config-dev.yml" target="_blank" rel="noopener">http://config-2255.com:2255/dev/config-dev.yml</a></p>
<p><a href="http://config-2255.com:2255/dev/config-test.yml" target="_blank" rel="noopener">http://config-2255.com:2255/dev/config-test.yml</a></p>
<p><a href="http://config-2255.com:2255/dev/config-prod.yml" target="_blank" rel="noopener">http://config-2255.com:2255/dev/config-prod.yml</a></p>
<p>小结：</p>
<p><code>/{label}/{application}-{profile}.yml</code></p>
<ul>
<li>label ：分支</li>
<li>application ：服务名</li>
<li>profiles： 环境（dev/test/prod）</li>
</ul>
<h3 id="1-2-客户端配置"><a href="#1-2-客户端配置" class="headerlink" title="1.2 客户端配置"></a>1.2 客户端配置</h3><p>客户端工程是除Config Server 之外的其他微服务。 </p>
<p>新建子工程 cloud-config-client-2266</p>
<h4 id="（1）引入pom依赖"><a href="#（1）引入pom依赖" class="headerlink" title="（1）引入pom依赖"></a>（1）引入pom依赖</h4><pre class=" language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>
<h4 id="（2）新建bootstrap-yml配置"><a href="#（2）新建bootstrap-yml配置" class="headerlink" title="（2）新建bootstrap.yml配置"></a>（2）新建bootstrap.yml配置</h4><p><code>application.yml</code> 是用户级的资源配置项；</p>
<p><code>bootstrap.yml</code>是系统级的资源配置项，优先级更高。</p>
<p>Spring Cloud 会创建一个 Bootstrap Context ，作为spring 应用的 Application Context 的父上下文。初始化时，Bootstrap Context 负责从外部源加载配置属性并解析配置。这两个上下文共享一个从外部获取的 Envitonment 。</p>
<p><code>bootstrap</code> 属性有更高的优先级，默认情况下不会被本地配置覆盖。<code>Bootstrap Context</code>  和 <code>Application Context</code> 有着不同的约定，所以新增了一个<code>bootstrap.yml</code>文件，保证 <code>Bootstrap Context</code> 和 <code>Application Context</code>配置的分离。</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">2266</span>

<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> config<span class="token punctuation">-</span>client
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">config</span><span class="token punctuation">:</span>
      <span class="token key atrule">label</span><span class="token punctuation">:</span> master  <span class="token comment" spellcheck="true"># /{label}/{name}-{profile}.yml </span>
      <span class="token key atrule">name</span><span class="token punctuation">:</span> config   <span class="token comment" spellcheck="true"># /{label}/{name}-{profile}.yml</span>
      <span class="token key atrule">profile</span><span class="token punctuation">:</span> dev   <span class="token comment" spellcheck="true"># /{label}/{name}-{profile}.yml</span>
      <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">2255 </span><span class="token comment" spellcheck="true"># 配置中心地址</span>
<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>
      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7001.com<span class="token punctuation">:</span>7001/eureka
</code></pre>
<p><code>spring.cloud.config.label</code> 、<code>spring.cloud.config.name</code> 、<code>spring.cloud.config.profile</code> 三个值会按照<code>/{label}/{name}-{profile}.yml</code>的格式组合成要读取的配置文件名。</p>
<h4 id="（3）启用类和访问地址"><a href="#（3）启用类和访问地址" class="headerlink" title="（3）启用类和访问地址"></a>（3）启用类和访问地址</h4><p>启用类</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>config<span class="token punctuation">.</span>server<span class="token punctuation">.</span>EnableConfigServer<span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableConfigServer</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigClient_2266</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ConfigClient_2266<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>访问地址</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>Controller<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Value<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span>

<span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigClientController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${config.info}"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> String configInfo<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/configInfo"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">getConfigInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> configInfo<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="（4）测试"><a href="#（4）测试" class="headerlink" title="（4）测试"></a>（4）测试</h4><p>（A）修改本地仓库配置文件</p>
<p>修改本地硬盘上git仓库里的文件： <code>config-dev.yml</code> 配置并提交到GitHub中，比如加个变量xiaocai 或者版本号version=1.2</p>
<p>config-dev.yml 的内容：</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">config</span><span class="token punctuation">:</span>
  <span class="token key atrule">info</span><span class="token punctuation">:</span> this is master config<span class="token punctuation">-</span>dev from github <span class="token punctuation">---</span> version=1.2 <span class="token punctuation">---</span> xiaocai test
</code></pre>
<p>（B）启动两个工程测试</p>
<p>启动config server 进行自测</p>
<p>访问1：<a href="http://config-2255.com:2255/master/config-dev.yml" target="_blank" rel="noopener">http://config-2255.com:2255/master/config-dev.yml</a></p>
<p>访问2：<a href="http://config-2255.com:2255/master/config-test.yml" target="_blank" rel="noopener">http://config-2255.com:2255/master/config-test.yml</a></p>
<p>启动confi client ，测试访问：<a href="http://localhost:2266/configInfo" target="_blank" rel="noopener">http://localhost:2266/configInfo</a> 看是否能获取修改后的最新配置。</p>
<p><strong>工程不要停止</strong>，再次修改config-dev.yml 的内容：</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">config</span><span class="token punctuation">:</span>
  <span class="token key atrule">info</span><span class="token punctuation">:</span> this is master config<span class="token punctuation">-</span>dev from github <span class="token punctuation">---</span> version=1.3 <span class="token punctuation">---</span> xiaocai dev
</code></pre>
<p>提交到github远程仓库。</p>
<p>重新访问Config Server：<a href="http://config-2255.com:2255/master/config-dev.yml" target="_blank" rel="noopener">http://config-2255.com:2255/master/config-dev.yml</a> 会发现配置中心的配置立即更新了。</p>
<p>重新访问Config Client：<a href="http://localhost:2266/configInfo" target="_blank" rel="noopener">http://localhost:2266/configInfo</a>  会发现配置没有更新。</p>
<p>重启Config Client 之后，再次访问 <a href="http://localhost:2266/configInfo" target="_blank" rel="noopener">http://localhost:2266/configInfo</a>  配置才会更新。</p>
<h4 id="（4）Config-Client-动态刷新"><a href="#（4）Config-Client-动态刷新" class="headerlink" title="（4）Config Client 动态刷新"></a>（4）Config Client 动态刷新</h4><p>在客户端工程 cloud-config-client-2266 引入监控模块：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>
<p>修改YML配置：</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">2266</span>

<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> config<span class="token punctuation">-</span>client
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">config</span><span class="token punctuation">:</span>
      <span class="token key atrule">label</span><span class="token punctuation">:</span> master  <span class="token comment" spellcheck="true"># /{label}/{name}-{profile}.yml </span>
      <span class="token key atrule">name</span><span class="token punctuation">:</span> config   <span class="token comment" spellcheck="true"># /{label}/{name}-{profile}.yml </span>
      <span class="token key atrule">profile</span><span class="token punctuation">:</span> dev   <span class="token comment" spellcheck="true"># /{label}/{name}-{profile}.yml </span>
      <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">2255  </span><span class="token comment" spellcheck="true"># 配置中心地址</span>
<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>
      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7001.com<span class="token punctuation">:</span>7001/eureka

<span class="token comment" spellcheck="true">## 暴露健康端点，此处使用 *</span>
<span class="token key atrule">management</span><span class="token punctuation">:</span>
  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>
    <span class="token key atrule">web</span><span class="token punctuation">:</span>
      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>
        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">"*"</span>
</code></pre>
<p>添加注解<code>@RefreshScope</code> ：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>Controller<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Value<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>context<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RefreshScope<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span>

<span class="token annotation punctuation">@RefreshScope</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigClientController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${config.info}"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> String configInfo<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/configInfo"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">getConfigInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> configInfo<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>测试操作：</p>
<p>启动config server 进行自测</p>
<p>访问1：<a href="http://config-2255.com:2255/master/config-dev.yml" target="_blank" rel="noopener">http://config-2255.com:2255/master/config-dev.yml</a> </p>
<p>启动config client ，测试访问：<a href="http://localhost:2266/configInfo" target="_blank" rel="noopener">http://localhost:2266/configInfo</a> 查看</p>
<p><strong>工程不要停止</strong>，再次修改config-dev.yml 的内容：</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">config</span><span class="token punctuation">:</span>
  <span class="token key atrule">info</span><span class="token punctuation">:</span> this is master config<span class="token punctuation">-</span>dev from github <span class="token punctuation">---</span> version=1.4 <span class="token punctuation">---</span> xiaocai dev22
</code></pre>
<p>提交到github远程仓库。</p>
<p>重新访问Config Server：<a href="http://config-2255.com:2255/master/config-dev.yml" target="_blank" rel="noopener">http://config-2255.com:2255/master/config-dev.yml</a> 会发现配置中心的配置立即更新了。</p>
<p>此时手工发送post请求刷新端口为2266的config client工程，执行命令：</p>
<pre class=" language-bash"><code class="language-bash">curl -X POST <span class="token string">"http://localhost:2266/actuator/refresh"</span></code></pre>
<p>（ windows 需要自己安装curl 命令）</p>
<p>重新访问Config Client：<a href="http://localhost:2266/configInfo" target="_blank" rel="noopener">http://localhost:2266/configInfo</a>  会发现配置更新。</p>
<p><strong>工程不要停止</strong>，再次修改config-dev.yml 的内容反复以上操作进行测试验证。</p>
<h3 id="2、Config-配置-SVN"><a href="#2、Config-配置-SVN" class="headerlink" title="2、Config 配置-SVN"></a>2、Config 配置-SVN</h3><h3 id="2-1-服务端"><a href="#2-1-服务端" class="headerlink" title="2.1 服务端"></a>2.1 服务端</h3><h4 id="（1）准备工作-1"><a href="#（1）准备工作-1" class="headerlink" title="（1）准备工作"></a>（1）准备工作</h4><p>电脑安装一下下 SVN Server，官方下载地址：<a href="https://www.visualsvn.com/server/download/" target="_blank" rel="noopener">https://www.visualsvn.com/server/download/</a></p>
<p>在SVN Server 中新建一个仓库 <code>sprincloud-config</code></p>
<p>创建一个 config 目录。</p>
<p>在本地硬盘上创建一个SVN检出的文件夹 <code>D:\springcloud-svn</code></p>
<p>在目录进行SVN检出操作，SVN地址:<a href="https://DESKTOP-77P2ES4/svn/sprincloud-config/config" target="_blank" rel="noopener">https://DESKTOP-77P2ES4/svn/sprincloud-config/config</a></p>
<p>创建三个配置文件：</p>
<ul>
<li>config-dev.properties</li>
<li>config-prod.properties</li>
<li>config-test.properties</li>
</ul>
<p>特别说明：properties 格式或 yml格式都可以，最好和工程里的配置文件格式一致。</p>
<p>config-dev.properties的内容：</p>
<pre class=" language-properties"><code class="language-properties"><span class="token attr-name">config.info</span><span class="token punctuation">=</span><span class="token attr-value">this is trunk config-dev from svn server ---</span></code></pre>
<p>config-test.properties的内容：</p>
<pre class=" language-properties"><code class="language-properties"><span class="token attr-name">config.info</span><span class="token punctuation">=</span><span class="token attr-value">this is trunk config-test from svn server ---</span></code></pre>
<p>config-prod.properties 的内容：</p>
<pre class=" language-properties"><code class="language-properties"><span class="token attr-name">config.info</span><span class="token punctuation">=</span><span class="token attr-value">this is trunk config-prod from svn server ---</span></code></pre>
<p>并提交到SVN仓库。</p>
<p> 创建子工程 Config-SVN-2277 </p>
<h4 id="（2）引入依赖"><a href="#（2）引入依赖" class="headerlink" title="（2）引入依赖"></a>（2）引入依赖</h4><pre class=" language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-config-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.tmatesoft.svnkit/svnkit --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.tmatesoft.svnkit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>svnkit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.9.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>
<p>注意：这里引入了 svnkit 的依赖。</p>
<h4 id="（3）配置文件"><a href="#（3）配置文件" class="headerlink" title="（3）配置文件"></a>（3）配置文件</h4><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">8003</span>
<span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value">config-svn-2277</span>
<span class="token attr-name">spring.cloud.config.server.svn.uri</span><span class="token punctuation">=</span><span class="token attr-value">https://DESKTOP-77P2ES4/svn/sprincloud-config/config</span>
<span class="token attr-name">spring.cloud.config.server.svn.search-paths</span><span class="token punctuation">=</span>
<span class="token attr-name">spring.cloud.config.server.svn.username</span><span class="token punctuation">=</span><span class="token attr-value">xiaocai</span>
<span class="token attr-name">spring.cloud.config.server.svn.password</span><span class="token punctuation">=</span><span class="token attr-value">123456</span>
<span class="token attr-name">spring.profiles.active</span><span class="token punctuation">=</span><span class="token attr-value">subversion</span>
<span class="token attr-name">spring.cloud.config.server.default-label</span><span class="token punctuation">=</span></code></pre>
<p>注意：如果svn地址中有主分支标记 <code>trunk</code>，那么default-label=trunk，和git的相似。</p>
<h4 id="（4）启用config-服务"><a href="#（4）启用config-服务" class="headerlink" title="（4）启用config 服务"></a>（4）启用config 服务</h4><p>使用<code>@EnableConfigServer</code>注解激活即可。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>config<span class="token punctuation">.</span>server<span class="token punctuation">.</span>EnableConfigServer<span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableConfigServer</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigSVNApp_2277</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ConfigSVNApp_2277 <span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="（5）测试-1"><a href="#（5）测试-1" class="headerlink" title="（5）测试"></a>（5）测试</h4><p>启动工程，访问：<a href="http://localhost:2277/config-dev.properties" target="_blank" rel="noopener">http://localhost:2277/config-dev.properties</a> </p>
<h3 id="2-2-客户端"><a href="#2-2-客户端" class="headerlink" title="2.2 客户端"></a>2.2 客户端</h3><p>新建子工程 cloud-config-client-2288</p>
<h4 id="（1）引入pom依赖-1"><a href="#（1）引入pom依赖-1" class="headerlink" title="（1）引入pom依赖"></a>（1）引入pom依赖</h4><pre class=" language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>
<h4 id="（2）2个配置文件"><a href="#（2）2个配置文件" class="headerlink" title="（2）2个配置文件"></a>（2）2个配置文件</h4><p>需要配置两个配置文件，application.properties和bootstrap.properties</p>
<p>application.properties如下：</p>
<pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value">spring-cloud-config-client</span>
<span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">2288</span></code></pre>
<p>bootstrap.properties如下：</p>
<pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.cloud.config.name</span><span class="token punctuation">=</span><span class="token attr-value">config</span>
<span class="token attr-name">spring.cloud.config.profile</span><span class="token punctuation">=</span><span class="token attr-value">dev</span>
<span class="token comment" spellcheck="true">#配置中心地址</span>
<span class="token attr-name">spring.cloud.config.uri</span><span class="token punctuation">=</span><span class="token attr-value">http://localhost:2277/   </span>
<span class="token attr-name">spring.cloud.config.label</span><span class="token punctuation">=</span><span class="token attr-value">master</span>

<span class="token comment" spellcheck="true"># 开启端点暴露</span>
<span class="token attr-name">management.endpoints.web.exposure.include</span><span class="token punctuation">=</span><span class="token attr-value">*</span></code></pre>
<ul>
<li>spring.application.name：对应{application}部分</li>
<li>spring.cloud.config.profile：对应{profile}部分</li>
<li>spring.cloud.config.label：对应git的分支。如果配置中心使用的是本地存储，则该参数无用</li>
<li>spring.cloud.config.uri：配置中心的具体地址</li>
<li>spring.cloud.config.discovery.service-id：指定配置中心的service-id，便于扩展为高可用配置集群。</li>
</ul>
<blockquote>
<p>特别注意：上面这些与spring-cloud相关的属性必须配置在bootstrap.properties中，config部分内容才能被正确加载。因为config的相关配置会先于application.properties，而bootstrap.properties的加载也是先于application.properties。 bootstrap.properties和bootstrap.yml 相同，只是文件格式不一样。</p>
</blockquote>
<h4 id="（3）controller"><a href="#（3）controller" class="headerlink" title="（3）controller"></a>（3）controller</h4><p><code>@RefreshScope</code>注解开启自动刷新，在客户端执行/refresh的时候就会更新此类下面的变量值 ：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>Controller<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Value<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span>

<span class="token annotation punctuation">@RefreshScope</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigSVNClientController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${config.info}"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> String configInfo<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/configInfo"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">getConfigInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> configInfo<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="（4）测试-1"><a href="#（4）测试-1" class="headerlink" title="（4）测试"></a>（4）测试</h4><p>启动config svn 配置中心进行自测</p>
<p>访问1：<a href="http://config-2277.com:2277/config-dev.properties" target="_blank" rel="noopener">http://config-2277.com:2277/config-dev.properties</a> （如果这种不行就写个controller访问）</p>
<p>启动config client ，测试访问：<a href="http://localhost:2288/configInfo" target="_blank" rel="noopener">http://localhost:2288/configInfo</a> 查看</p>
<p><strong>工程不要停止</strong>，修改config-dev.properties 的内容：</p>
<pre class=" language-properties"><code class="language-properties"><span class="token attr-name">config.info</span><span class="token punctuation">=</span><span class="token attr-value">this is master config-dev from github --- version=S1.2 --- </span></code></pre>
<p>提交到SVN仓库。</p>
<p>重新访问Config Server：<a href="http://config-2277.com:2277/config-dev.properties" target="_blank" rel="noopener">http://config-2277.com:2277/config-dev.properties</a> 会发现配置中心的配置立即更新了。</p>
<p>此时手工发送post请求刷新端口为2288的config client工程，执行命令：</p>
<pre class=" language-bash"><code class="language-bash">curl -X POST <span class="token string">"http://localhost:2288/actuator/refresh"</span></code></pre>
<p>（ windows 需要自己安装curl 命令）</p>
<p>重新访问Config Client：<a href="http://localhost:2277/config-dev.properties会发现配置更新。" target="_blank" rel="noopener">http://localhost:2277/config-dev.properties会发现配置更新。</a></p>
<p><strong>工程不要停止</strong>，再次修改config-dev.properties的内容反复以上操作进行测试验证。</p>
<p>以post请求的方式来访问<a href="http://localhost:2288/configInfo" target="_blank" rel="noopener">http://localhost:2288/configInfo</a>  就会更新修改后的配置文件。 </p>
<h2 id="四、Config-其他"><a href="#四、Config-其他" class="headerlink" title="四、Config 其他"></a>四、Config 其他</h2><p>后续学习再补充。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud Eureka</title>
    <url>/posts/648d6b26.html</url>
    <content><![CDATA[<h2 id="SpringCloud-Eureka-服务注册与发现"><a href="#SpringCloud-Eureka-服务注册与发现" class="headerlink" title="SpringCloud Eureka 服务注册与发现"></a>SpringCloud Eureka 服务注册与发现</h2><p>相关链接：</p>
<ul>
<li><a href="bad02d94.html">SpringCloud 微服务学习</a></li>
<li><a href="eeda118.html">RESTful 接口设计规范</a></li>
<li><a href="648d6b26.html">SpringCloud Eureka 服务注册与发现</a></li>
<li><a href="3010739f.html">SpringCloud Consul 服务注册与发现</a></li>
<li><a href="7ecbba09.html">SpringCloud Ribbon 客户端负载均衡与服务调用</a></li>
<li><a href="b27245de.html">SpringCloud OpenFeign 服务接口调用</a></li>
<li><a href="464bb413.html">SpringCloud Hystrix熔断器</a></li>
<li><a href="bc16d093.html">SpringCloud Gateway 服务网关</a></li>
<li><a href="fbbe72e1.html">SpringCloud Zuul 服务网关</a></li>
<li><a href="5b5896d1.html">Spring Cloud Config 分布式配置中心</a></li>
<li><a href="9e02a3e8.html">Spring Cloud Bus 消息总线</a></li>
<li><a href="7f3b07b1.html">SpringCloud Stream 消息驱动</a></li>
<li><a href="b99c053f.html">SpringCloud Sleuth 分布式请求链路追踪</a></li>
<li><a href="461589aa.html">SpringCloud Alibaba</a></li>
<li><a href="a46e46f8.html">SpringCloud Alibaba Nacos服务注册和配置中心</a></li>
<li><a href="5122a811.html">SpringCloud Alibaba Sentinel 实现熔断与限流</a></li>
<li><a href="fb7c74c4.html">SpringCloud Alibaba Seata 分布式事务</a></li>
</ul>
<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p><code>Eureka</code>是<code>Netflix</code>的一个子模块，也是核心模块之一。</p>
<p><code>Eureka</code>是一个基于REST的服务，用于定位服务，以实现微服务中间层服务发现和故障转移。</p>
<p>服务注册与发现对于微服务架构来说是非常重要的，有了服务发现与注册，只需要使用服务的标识符，就可以访问到服务，而不需要修改服务调用的配置文件了。</p>
<p>功能类似于<code>dubbo</code>的注册中心，比如<code>Zookeeper</code>。</p>
<p><code>Eureka</code> 原是<code>Spring Cloud</code> 体系中最核心、默认的注册中心组件。</p>
<p><code>Spring Cloud Eureka</code> 是对 <code>Netflix</code> 公司的<code>Eureka</code>的二次封装，它实现了服务治理的功能，<code>Spring Cloud Eureka</code>提供服务端与客户端，服务端即是<code>Eureka</code>服务注册中心，客户端完成微服务向Eureka服务的注册与发现。服务端和客户端均采用Java语言编写。</p>
<p>##不过好像这个东西已经<strong>停更维护</strong>了，但是工作可能会遇到，有必要学习了解一下。</p>
<h2 id="二、Eureka"><a href="#二、Eureka" class="headerlink" title="二、Eureka"></a>二、Eureka</h2><p>Eureka 采用了 C-S 的设计架构。</p>
<p>Eureka Server 作为服务注册功能的服务器，它是服务注册中心。</p>
<p>而系统中的其他微服务，作为 Eureka 的客户端连接到 Eureka Server并维持心跳连接。这样系统的维护人员就可以通过 Eureka Server 来监控系统中各个微服务是否正常运行。</p>
<p>SpringCloud 的一些其他模块（比如Zuul）就可以通过 Eureka Server 来发现系统中的其他微服务，并执行相关的逻辑。</p>
<p>Eureka包含两个重要组件：<code>Eureka Server</code>和 <code>Eureka Client</code><br><code>Eureka Server</code>提供服务注册服务，各个节点启动后，会在<code>Eureka Server</code>中进行注册，这样<code>Eureka Server</code>中的服务注册表中将会存储所有可用服务节点的信息，服务节点的信息可以在界面中直观的展示。</p>
<p><code>Eureka Client</code>是一个Java客户端，用于简化<code>Eureka Server</code>的交互，客户端同时也具备一个内置的、使用轮询(round-robin)负载算法的负载均衡器。在应用启动后，将会向<code>Eureka Server</code>发送心跳(默认周期为30秒)。如果<code>Eureka Server</code>在多个心跳周期内没有接收到某个节点的心跳，<code>Eureka Server</code>将会从服务注册表中把这个服务节点移除（默认90秒），这是Eureka的<strong>Renew: 服务续约</strong> 机制。</p>
<p><code>Eureka Server</code>注册中心服务端主要对外提供了三个功能：</p>
<p><strong>服务注册</strong><br> 服务提供者启动时，会通过 Eureka Client 向 Eureka Server 注册信息，Eureka Server 会存储该服务的信息，Eureka Server 内部有二层缓存机制来维护整个注册表</p>
<p><strong>提供注册表</strong><br> 服务消费者在调用服务时，如果 Eureka Client 没有缓存注册表的话，会从 Eureka Server 获取最新的注册表</p>
<p><strong>同步状态</strong><br> Eureka Client 通过注册、心跳机制和 Eureka Server 同步当前客户端的状态。</p>
<p>另外Eureka还有</p>
<p><strong>Eviction 服务剔除</strong><br> 当 Eureka Client 和 Eureka Server 不再有心跳时，Eureka Server 会将该服务实例从服务注册列表中删除，即服务剔除。</p>
<p><strong>Cancel: 服务下线</strong><br> Eureka Client 在程序关闭时向 Eureka Server 发送取消请求。 发送请求后，该客户端实例信息将从 Eureka Server 的实例注册表中删除。</p>
<p> Eureka 原理：</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/eureka-work.jpg" alt="Eureka 原理图"></p>
<p> 与dubbo类似：<img src="/medias/loading-animated.gif" data-original="/images/springcloud/dubbo-work.png" alt="Dubbo 原理图"></p>
<p>从Eureka 工作原理图可以看出 Eureka 有三个重要的角色：</p>
<ul>
<li>Eureka Server  提供服务注册于发现；</li>
<li>Eureka Provider 服务提供方将服务注册到Eureka Server ，从而使消费方使用；</li>
<li>Eureka Comsumer 服务消费方从Eureka Server获取测试服务列表，消费服务；</li>
</ul>
<h2 id="三、Eureka使用"><a href="#三、Eureka使用" class="headerlink" title="三、Eureka使用"></a>三、Eureka使用</h2><p>注意：更多用法参考官网：<a href="https://docs.spring.io/spring-cloud-netflix/docs/2.2.5.RELEASE/reference/html/" target="_blank" rel="noopener">https://docs.spring.io/spring-cloud-netflix/docs/2.2.5.RELEASE/reference/html/</a></p>
<h3 id="1、作为服务端"><a href="#1、作为服务端" class="headerlink" title="1、作为服务端"></a>1、作为服务端</h3><p>作为服务注册中心的Eureka Server 工程使用：</p>
<p>（1）POM中引入依赖</p>
<pre class=" language-xml"><code class="language-xml">   <span class="token comment" spellcheck="true">&lt;!--eureka-server服务端 --></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-eureka-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>
<p>（2）Config 配置</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">7001</span>

<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
  <span class="token key atrule">instance</span><span class="token punctuation">:</span>
    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> localhost <span class="token comment" spellcheck="true">#eureka服务端的实例名称</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true">#false表示不向注册中心注册自己。</span>
    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span>
    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>
      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//$<span class="token punctuation">{</span>eureka.instance.hostname<span class="token punctuation">}</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>server.port<span class="token punctuation">}</span>/eureka/        <span class="token comment" spellcheck="true">#设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址。</span></code></pre>
<p>（3）开启 <code>Eureka Server</code> 服务</p>
<p>使用注解 <code>@EnableEurekaServer</code> 开启<code>EurekaServer</code>服务。</p>
<p>示例：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>eureka<span class="token punctuation">.</span>server<span class="token punctuation">.</span>EnableEurekaServer<span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableEurekaServer</span><span class="token comment" spellcheck="true">//EurekaServer服务器端启动类,接受其它微服务注册进来</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EurekaServer7001_App</span>
<span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
       SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>EurekaServer7001_App<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="2、作为客户端"><a href="#2、作为客户端" class="headerlink" title="2、作为客户端"></a>2、作为客户端</h3><p>作为服务提供者的Eureka Client 工程使用：</p>
<p>（1）POM引入依赖</p>
<pre class=" language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!-- 将微服务provider侧注册进eureka --></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-eureka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>
<p>（2）Config 配置</p>
<p>作为客服端需要补充Eureka客服端的配置：</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> ms<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>eureka<span class="token punctuation">-</span>provider 

<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#客户端注册进eureka服务列表内</span>
    <span class="token key atrule">service-url</span><span class="token punctuation">:</span> 
      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>7001/eureka
  <span class="token key atrule">instance</span><span class="token punctuation">:</span>
    <span class="token key atrule">instance-id</span><span class="token punctuation">:</span> eureka<span class="token punctuation">-</span>provider7001  <span class="token comment" spellcheck="true"># 可以自定义服务名称展示</span>
    <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 访问路径可以显示IP  </span>
</code></pre>
<p>（3）开启 <code>Eureka Client</code>服务。</p>
<p>使用注解 <code>@EnableEurekaClient</code> 开启<code>EurekaClient</code>服务。</p>
<p>示例：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>eureka<span class="token punctuation">.</span>EnableEurekaClient<span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableEurekaClient</span> <span class="token comment" spellcheck="true">//本服务启动后会自动注册进eureka服务中</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EurekaClientProvider8001_App</span>
<span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
   SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>EurekaClientProvider8001_App<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="3、测试"><a href="#3、测试" class="headerlink" title="3、测试"></a>3、测试</h3><p>（1）先启动Eureka Server 工程</p>
<p>（2）访问：<a href="http://localhost:7001" target="_blank" rel="noopener">http://localhost:7001</a></p>
<p>（3）如果看到相应服务列表存在<code>ms-cloud-eureka-provider</code>则注册成功。</p>
<h3 id="4、微服务info详细信息"><a href="#4、微服务info详细信息" class="headerlink" title="4、微服务info详细信息"></a>4、微服务info详细信息</h3><p>（1）、客服端pom补充</p>
<pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!-- 健康监控 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>
<p>（2）、父工程补充</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>finalName</span><span class="token punctuation">></span></span>microservicecloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>finalName</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-resources-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delimiters</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delimit</span><span class="token punctuation">></span></span>$<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delimit</span><span class="token punctuation">></span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delimiters</span><span class="token punctuation">></span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre>
<p>（3）、客户端配置补充</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">info</span><span class="token punctuation">:</span>
  <span class="token key atrule">app.name</span><span class="token punctuation">:</span> atguigu<span class="token punctuation">-</span>microservicecloud
  <span class="token key atrule">company.name</span><span class="token punctuation">:</span> www.atguigu.com
  <span class="token key atrule">build.artifactId</span><span class="token punctuation">:</span> $project.artifactId$
  <span class="token key atrule">build.version</span><span class="token punctuation">:</span> $project.version$</code></pre>
<h2 id="五、Eureka-自我保护"><a href="#五、Eureka-自我保护" class="headerlink" title="五、Eureka 自我保护"></a>五、Eureka 自我保护</h2><h3 id="1、现象"><a href="#1、现象" class="headerlink" title="1、现象"></a>1、现象</h3><p>关闭服务提供方的客户端，刷新测试时的访问页面，会出现红字。</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/eureka-protect.jpg" alt=""></p>
<p><strong>Eureka Server 触发自我保护机制后，页面会出现提示</strong>。</p>
<h3 id="2、保护机制"><a href="#2、保护机制" class="headerlink" title="2、保护机制"></a>2、保护机制</h3><p>Eureka 自我保护机制，会出现：</p>
<p>（1）即某个微服务不可用了，eureka不会立刻进行服务剔除，依旧会对该微服务的信息进行保存。</p>
<p>（2）Eureka 仍然能够接受新服务的注册和查询请求，但是不会被同步到其它节点上。 </p>
<p>（3）当网络稳定或服务恢复后时，当前实例新的注册信息会被同步到其它节点中。</p>
<p>Eureka 自我保护机制是为了防止误杀服务而提供的一个机制。当个别客户端出现心跳失联时，则认为是客户端的问题，剔除掉客户端；当  Eureka 捕获到大量的心跳失败时，则认为可能是网络问题，进入自我保护机制；当客户端心跳恢复时，Eureka 会自动退出自我保护机制。</p>
<p>如果在保护期内刚好这个服务提供者非正常下线了，此时服务消费者就会拿到一个无效的服务实例，即会调用失败。对于这个问题需要服务消费者端要有一些容错机制，如重试，断路器等。</p>
<p><strong>通过在 Eureka Server 配置如下参数，开启或者关闭保护机制，生产环境建议打开：</strong></p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">eureka</span><span class="token punctuation">:</span>
  <span class="token key atrule">server</span><span class="token punctuation">:</span>
    <span class="token key atrule">enable-self-preservation</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre>
<h2 id="六、Eureka-集群"><a href="#六、Eureka-集群" class="headerlink" title="六、Eureka 集群"></a>六、Eureka 集群</h2><h3 id="1、相关概念原理"><a href="#1、相关概念原理" class="headerlink" title="1、相关概念原理"></a>1、相关概念原理</h3><p>Eureka 集群：由多台Eureka Server 组成的集群，Eureka 集群中的多台Eureka Server会相互注册，多台Eureka Server相互之间不分主从，各个节点地位平等。每个 Eureka Server 同时也是 Eureka Client 。 </p>
<p>Eureka Server通过相互注册来提高可用，每个节点需要添加一个或多个有效的<code>serice-url</code> 指向其他节点。</p>
<p> 如果某台 Eureka Server 宕机，Eureka Client 的请求会自动切换到新的 Eureka Server  节点。当宕机的服务器重新恢复后，Eureka  会再次将其纳入到服务器集群管理之中。当节点开始接受客户端请求时，所有的操作都会进行节点间复制，将请求复制到其它 Eureka Server  当前所知的所有节点中。 </p>
<p>Eureka 集群Server 同步基本原则：只要有一条边将节点连接，就可以进行信息传播与同步。所以，如果存在多个节点，只需要将节点之间两两连接起来形成通路，那么其它注册中心都可以共享信息。 多个 Eureka Server 之间通过 P2P 的方式完成服务注册表的同步。 </p>
<p>Eureka Server 集群之间的状态是采用异步方式同步的，所以不保证节点间的状态一定是一致的，不过基本能保证最终状态是一致的。 </p>
<p>Eureka 集群是为了保障注册中心的稳定性和高可用性。反应出Eureka 是满足CAP中的AP。</p>
<h3 id="2、配置"><a href="#2、配置" class="headerlink" title="2、配置"></a>2、配置</h3><p>（1）在Eureka 集群里，作为<code>ureka Server</code>册中心的同时也是作为<code>Eureka client</code> ，每个<code>Eureka Server</code> 需要相互注册。<code>service-url</code> 需要写多个注册地址，多个地址以逗号分隔<code>&quot;,&quot;</code></p>
<p>示例：如作为<code>ureka Server</code>其中之一的<code>eureka7001.com</code>的配置，也要作为<code>Eureka Client</code>向其他几个注册中心注册。</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">eureka</span><span class="token punctuation">:</span> 
  <span class="token key atrule">instance</span><span class="token punctuation">:</span>
    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> eureka7001.com <span class="token comment" spellcheck="true">#eureka服务端的实例名称</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span> 
    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">false     </span><span class="token comment" spellcheck="true">#false表示不向注册中心注册自己。</span>
    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">false     </span><span class="token comment" spellcheck="true">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span>
    <span class="token key atrule">service-url</span><span class="token punctuation">:</span> 
      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7002.com<span class="token punctuation">:</span>7002/eureka/<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//eureka7003.com<span class="token punctuation">:</span>7003/eureka/</code></pre>
<p>（2）在Eureka 集群里，作为服务提供者的<code>Eureka client</code>，每个<code>Eureka Client</code> 需要注册多个<code>ureka Server</code>。<code>service-url</code> 需要写多个注册中心的地址，以逗号<code>&quot;,&quot;</code>分隔。</p>
<p>示例：如作为<code>ureka Client</code>其中之一的<code>eureka7001.com</code>的配置，为保证高可用要向所有注册中心注册。</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> ms<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>eureka<span class="token punctuation">-</span>provider 

<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#客户端注册进eureka服务列表内</span>
    <span class="token key atrule">service-url</span><span class="token punctuation">:</span> 
      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7001<span class="token punctuation">:</span>7001/eureka<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//eureka7002.com<span class="token punctuation">:</span>7002/eureka/<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//eureka7003.com<span class="token punctuation">:</span>7003/eureka/
  <span class="token key atrule">instance</span><span class="token punctuation">:</span>
    <span class="token key atrule">instance-id</span><span class="token punctuation">:</span> eureka<span class="token punctuation">-</span>provider7001  <span class="token comment" spellcheck="true"># 可以自定义服务名称展示</span>
    <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 访问路径可以显示IP  </span></code></pre>
<h2 id="七、其他"><a href="#七、其他" class="headerlink" title="七、其他"></a>七、其他</h2><p>后续遇到的问题，后续再补充。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud 微服务学习</title>
    <url>/posts/bad02d94.html</url>
    <content><![CDATA[<h2 id="SpringCloud-微服务学习"><a href="#SpringCloud-微服务学习" class="headerlink" title="SpringCloud 微服务学习"></a>SpringCloud 微服务学习</h2><p>相关链接：</p>
<ul>
<li><a href="bad02d94.html">SpringCloud 微服务学习</a></li>
<li><a href="eeda118.html">RESTful 接口设计规范</a></li>
<li><a href="648d6b26.html">SpringCloud Eureka 服务注册与发现</a></li>
<li><a href="3010739f.html">SpringCloud Consul 服务注册与发现</a></li>
<li><a href="7ecbba09.html">SpringCloud Ribbon 客户端负载均衡与服务调用</a></li>
<li><a href="b27245de.html">SpringCloud OpenFeign 服务接口调用</a></li>
<li><a href="464bb413.html">SpringCloud Hystrix熔断器</a></li>
<li><a href="bc16d093.html">SpringCloud Gateway 服务网关</a></li>
<li><a href="fbbe72e1.html">SpringCloud Zuul 服务网关</a></li>
<li><a href="5b5896d1.html">Spring Cloud Config 分布式配置中心</a></li>
<li><a href="9e02a3e8.html">Spring Cloud Bus 消息总线</a></li>
<li><a href="7f3b07b1.html">SpringCloud Stream 消息驱动</a></li>
<li><a href="b99c053f.html">SpringCloud Sleuth 分布式请求链路追踪</a></li>
<li><a href="461589aa.html">SpringCloud Alibaba</a></li>
<li><a href="a46e46f8.html">SpringCloud Alibaba Nacos服务注册和配置中心</a></li>
<li><a href="5122a811.html">SpringCloud Alibaba Sentinel 实现熔断与限流</a></li>
<li><a href="fb7c74c4.html">SpringCloud Alibaba Seata 分布式事务</a></li>
</ul>
<h2 id="一、关于微服务"><a href="#一、关于微服务" class="headerlink" title="一、关于微服务"></a>一、关于微服务</h2><h3 id="1、马丁福勒"><a href="#1、马丁福勒" class="headerlink" title="1、马丁福勒"></a>1、马丁福勒</h3><p>微服务提出人，马丁.福勒（Martin Fowler） 这样描述微服务：<br>论文网址： <a href="https://martinfowler.com/articles/microservices.html" target="_blank" rel="noopener">https://martinfowler.com/articles/microservices.html</a></p>
<blockquote>
<p>微服务架构是⼀种架构模式，它提倡将单⼀应⽤程序划分成⼀组⼩的服务，服务之间互相协调、互相配合，为⽤户提供最终价值。每个服务运⾏在其独⽴的进程中，服务与服务间采⽤轻量级的通信机制互相协作（通常是基于HTTP协议的RESTful API）。每个服务都围绕着具体业务进⾏构建，并且能够被独⽴的部署到⽣产环境、类⽣产环境等。另外，应当尽量避免统⼀的、集中式的服务管理机制，对具体的⼀个服务⽽⾔，应根据业务上下⽂，选择合适的语⾔、⼯具对其进⾏构建。</p>
</blockquote>
<h3 id="2、定义与思想"><a href="#2、定义与思想" class="headerlink" title="2、定义与思想"></a>2、定义与思想</h3><p>强调的是服务的大小，它关注的是某一个点，是具体解决某一个问题的实际服务请求对应服务的一个服务应用，可以看作Eclipse里面的一个个微服务工程/或者Module。</p>
<p>微服务化的核心就是将传统的一站式应用，根据业务拆分成一个一个的服务，彻底地去耦合,每一个微服务提供单个业务功能的服务，一个服务做一件事，从技术角度看就是一种小而独立的处理过程，类似进程概念，能够自行单独启动或销毁，拥有自己独立的数据库。</p>
<p>微服务核心思路就是分而治之。</p>
<p>对于微服务中的服务可以这么理解：服务是一个可以独立运行、提供范围有限的功能（可以是业务功能，也有可能是非业务功能）的组件。</p>
<h3 id="3、优缺点"><a href="#3、优缺点" class="headerlink" title="3、优缺点"></a>3、优缺点</h3><p>微服务架构的优缺点</p>
<table>
<thead>
<tr>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody><tr>
<td>松耦合（一系列的小服务集合）</td>
<td>可用性降低（远程调用可能会不稳定，善处链路雪崩）</td>
</tr>
<tr>
<td>抽象（调用某服务才能修改数据）</td>
<td>分布式事务棘手</td>
</tr>
<tr>
<td>独立（独立编译、打包、部署）</td>
<td>全能对象阻碍业务拆分（某些对象参与较多业务模块）</td>
</tr>
<tr>
<td>更高可用性和弹性（各自上下线）</td>
<td>学习难度曲线加大</td>
</tr>
<tr>
<td></td>
<td>组织架构变更</td>
</tr>
</tbody></table>
<h3 id="4、交互原则"><a href="#4、交互原则" class="headerlink" title="4、交互原则"></a>4、交互原则</h3><p>微服务交互主流基本原则：</p>
<p>（1）使用REST协议，并使用HTTP作为服务调用协议，使用标准动词（GET/PUT/POST/DELETE）</p>
<p>（2）使用URI表达出要解决的问题、提供的方法、资源与资源的关系</p>
<p>（3）使用JSON数据格式（轻量级数据格式、自带序列化和反序列化）</p>
<p>（4）使用HTTP标准状态码</p>
<h3 id="5、微服务架构"><a href="#5、微服务架构" class="headerlink" title="5、微服务架构"></a>5、微服务架构</h3><p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/micro-services-work.jpg" alt="微服务架构"></p>
<h3 id="6、主要技术栈"><a href="#6、主要技术栈" class="headerlink" title="6、主要技术栈"></a>6、主要技术栈</h3><p>微服务的主要技术栈：</p>
<table>
<thead>
<tr>
<th>微服务条目</th>
<th>主流技术</th>
</tr>
</thead>
<tbody><tr>
<td>服务开发</td>
<td>Springboot、Spring、SpringMVC</td>
</tr>
<tr>
<td>服务配置与管理</td>
<td>Netflix公司的Archaius、阿里的Diamond等</td>
</tr>
<tr>
<td>服务注册与发现</td>
<td>Eureka、Consul、Zookeeper、Nacos等</td>
</tr>
<tr>
<td>服务调用</td>
<td>Rest、RPC、gRPC</td>
</tr>
<tr>
<td>服务熔断器</td>
<td>Hystrix、sentinel、Envoy等</td>
</tr>
<tr>
<td>负载均衡</td>
<td>Ribbon、Nginx等</td>
</tr>
<tr>
<td>服务接口调用(客户端调用服务的简化工具)</td>
<td>Feign等</td>
</tr>
<tr>
<td>消息队列</td>
<td>Kafka、RabbitMQ、ActiveMQ等</td>
</tr>
<tr>
<td>服务配置中心管理</td>
<td>SpringCloudConfig、Nacos、Chef等</td>
</tr>
<tr>
<td>服务路由（API网关）</td>
<td>Zuul、Geteway等</td>
</tr>
<tr>
<td>服务监控</td>
<td>Zabbix、Nagios、Metrics、Spectator等</td>
</tr>
<tr>
<td>全链路追踪</td>
<td>Zipkin，Brave、Dapper等</td>
</tr>
<tr>
<td>服务部署</td>
<td>Docker、OpenStack、Kubernetes等</td>
</tr>
<tr>
<td>数据流操作开发包</td>
<td>SpringCloud Stream（封装与Redis,Rabbit、Kafka等发送接收消息）</td>
</tr>
<tr>
<td>事件消息总线</td>
<td>Spring Cloud Bus、Nacos等</td>
</tr>
<tr>
<td>……</td>
<td></td>
</tr>
</tbody></table>
<h2 id="二、关于SpringCloud"><a href="#二、关于SpringCloud" class="headerlink" title="二、关于SpringCloud"></a>二、关于SpringCloud</h2><h3 id="1、SpringCloud干什么的"><a href="#1、SpringCloud干什么的" class="headerlink" title="1、SpringCloud干什么的"></a>1、SpringCloud干什么的</h3><p>SpringCloud，是基于SpringBoot提供了一套微服务解决方案，包括服务注册与发现，配置中心，全链路监控，服务网关，负载均衡，熔断器等组件，除了基于NetFlix的开源组件做高度抽象封装之外，还有一些选型中立的开源组件。</p>
<p>SpringCloud利用SpringBoot的开发便利性巧妙地简化了分布式系统基础设施的开发，SpringCloud为开发人员提供了快速构建分布式系统的一些工具，包括配置管理、服务发现、断路器、路由、微代理、事件总线、全局锁、决策竞选、分布式会话等等,它们都可以用SpringBoot的开发风格做到一键启动和部署。</p>
<p>SpringCloud 即分布式微服务架构下的一站式解决方案，是各个微服务架构落地技术的集合体，俗称微服务全家桶。</p>
<h3 id="2、与spring-boot"><a href="#2、与spring-boot" class="headerlink" title="2、与spring boot"></a>2、与spring boot</h3><p><strong>SpringCloud与SpringBoot</strong></p>
<p>SpringBoot专注于快速方便的开发单个个体微服务。</p>
<p>SpringCloud是关注全局的微服务协调整理治理框架，它将SpringBoot开发的一个个单体微服务整合并管理起来，<br>为各个微服务之间提供，配置管理、服务发现、断路器、路由、微代理、事件总线、全局锁、决策竞选、分布式会话等等集成服务</p>
<p>SpringBoot可以离开SpringCloud独立使用开发项目，但是SpringCloud离不开SpringBoot，属于依赖的关系.</p>
<p>SpringBoot专注于快速、方便的开发单个微服务个体，SpringCloud关注全局的服务治理框架。</p>
<h3 id="3、与Dubbo相比"><a href="#3、与Dubbo相比" class="headerlink" title="3、与Dubbo相比"></a>3、与Dubbo相比</h3><p><strong>Dubbo与SpringCloud</strong></p>
<p>Dubbo是高性能 RPC 的分布式服务，SpringCloud采用的是基于HTTP的REST方式。</p>
<p>SpringCloud提供了一整套的解决方案，Dubbo需要自己进行组装。</p>
<p>因为Dubbo还不够熟悉，对后续再补充。</p>
<h2 id="三、SpringCloud"><a href="#三、SpringCloud" class="headerlink" title="三、SpringCloud"></a>三、SpringCloud</h2><h3 id="1、主要网站"><a href="#1、主要网站" class="headerlink" title="1、主要网站"></a>1、主要网站</h3><p><strong>SpringCloud 官网</strong> <a href="https://spring.io/projects/spring-cloud" target="_blank" rel="noopener">https://spring.io/projects/spring-cloud</a></p>
<p><strong>SpringCloud 中文网</strong> <a href="http://springcloud.cc/" target="_blank" rel="noopener">http://springcloud.cc/</a></p>
<p><strong>SpringCloud 中文社区</strong> <a href="http://springcloud.cn/" target="_blank" rel="noopener">http://springcloud.cn/</a></p>
<h3 id="2、SpringCloud-版本选择"><a href="#2、SpringCloud-版本选择" class="headerlink" title="2、SpringCloud 版本选择"></a>2、SpringCloud 版本选择</h3><p>SpringCloud 版本不是数字表示，是以字母命名，Axxx、Bxxx、Cxxx…..</p>
<p>当前的最新版本是：Spring Cloud Hoxton.SR8 </p>
<p>搭配spring Boot的版本是2.2或2.3</p>
<p>以下推荐搭配表：</p>
<table class="tableblock frame-all grid-all stretch">
<caption class="title">SpringCloud与SpringBoot 搭配</caption>
<colgroup>
<col style="width: 60%;">
<col style="width: 40%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Release Train</th>
<th class="tableblock halign-left valign-top">Boot Version</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="https://github.com/spring-projects/spring-cloud/wiki/Spring-Cloud-Hoxton-Release-Notes" target="_blank" rel="noopener">Hoxton</a></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">2.2.x, 2.3.x (Starting with SR5)</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="https://github.com/spring-projects/spring-cloud/wiki/Spring-Cloud-Greenwich-Release-Notes" target="_blank" rel="noopener">Greenwich</a></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">2.1.x</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="https://github.com/spring-projects/spring-cloud/wiki/Spring-Cloud-Finchley-Release-Notes" target="_blank" rel="noopener">Finchley</a></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">2.0.x</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="https://github.com/spring-projects/spring-cloud/wiki/Spring-Cloud-Edgware-Release-Notes" target="_blank" rel="noopener">Edgware</a></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">1.5.x</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="https://github.com/spring-projects/spring-cloud/wiki/Spring-Cloud-Dalston-Release-Notes" target="_blank" rel="noopener">Dalston</a></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">1.5.x</p></td>
</tr>
</tbody>
</table>

<h3 id="3、代码结构"><a href="#3、代码结构" class="headerlink" title="3、代码结构"></a>3、代码结构</h3><p>有多个微服务，会有SpringBoot工程，springboot 较多的maven 依赖都是一致的，防止子工程引入依赖版本不一致问题，使用统一的父工程进行管理。</p>
<p>父工程 <code>pom.xml</code></p>
<pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.xiaocai.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cloud2020<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>


  <span class="token comment" spellcheck="true">&lt;!-- 统一管理jar包版本 --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>junit.version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>junit.version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>log4j.version</span><span class="token punctuation">></span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>log4j.version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lombok.version</span><span class="token punctuation">></span></span>1.16.18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lombok.version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mysql.version</span><span class="token punctuation">></span></span>5.1.47<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mysql.version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>druid.version</span><span class="token punctuation">></span></span>1.1.16<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>druid.version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mybatis.spring.boot.version</span><span class="token punctuation">></span></span>1.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mybatis.spring.boot.version</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>

  <span class="token comment" spellcheck="true">&lt;!-- 子模块继承之后，提供作用：锁定版本+子modlue不用写groupId和version  --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
      <span class="token comment" spellcheck="true">&lt;!--spring boot 2.2.2--></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
      <span class="token comment" spellcheck="true">&lt;!--spring cloud Hoxton.SR1--></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>Hoxton.SR8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
      <span class="token comment" spellcheck="true">&lt;!--spring cloud alibaba 2.2.0.RELEASE--></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-alibaba-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${mysql.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${druid.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${mybatis.spring.boot.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${junit.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${log4j.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${lombok.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fork</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fork</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>addResources</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>addResources</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span>
</code></pre>
<p>父工程创建完成执行<code>mvn:install</code>将父工程发布到仓库方便子工程继承。</p>
<p>子工程的 <code>pom.xml</code>根据需要引入依赖即可，可以省略版本号。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud Sleuth</title>
    <url>/posts/b99c053f.html</url>
    <content><![CDATA[<h2 id="SpringCloud-Sleuth-分布式请求链路追踪"><a href="#SpringCloud-Sleuth-分布式请求链路追踪" class="headerlink" title="SpringCloud Sleuth 分布式请求链路追踪"></a>SpringCloud Sleuth 分布式请求链路追踪</h2><p>相关链接：</p>
<ul>
<li><a href="bad02d94.html">SpringCloud 微服务学习</a></li>
<li><a href="eeda118.html">RESTful 接口设计规范</a></li>
<li><a href="648d6b26.html">SpringCloud Eureka 服务注册与发现</a></li>
<li><a href="3010739f.html">SpringCloud Consul 服务注册与发现</a></li>
<li><a href="7ecbba09.html">SpringCloud Ribbon 客户端负载均衡与服务调用</a></li>
<li><a href="b27245de.html">SpringCloud OpenFeign 服务接口调用</a></li>
<li><a href="464bb413.html">SpringCloud Hystrix熔断器</a></li>
<li><a href="bc16d093.html">SpringCloud Gateway 服务网关</a></li>
<li><a href="fbbe72e1.html">SpringCloud Zuul 服务网关</a></li>
<li><a href="5b5896d1.html">Spring Cloud Config 分布式配置中心</a></li>
<li><a href="9e02a3e8.html">Spring Cloud Bus 消息总线</a></li>
<li><a href="7f3b07b1.html">SpringCloud Stream 消息驱动</a></li>
<li><a href="b99c053f.html">SpringCloud Sleuth 分布式请求链路追踪</a></li>
<li><a href="461589aa.html">SpringCloud Alibaba</a></li>
<li><a href="a46e46f8.html">SpringCloud Alibaba Nacos服务注册和配置中心</a></li>
<li><a href="5122a811.html">SpringCloud Alibaba Sentinel 实现熔断与限流</a></li>
<li><a href="fb7c74c4.html">SpringCloud Alibaba Seata 分布式事务</a></li>
</ul>
<h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><p>在微服务架构中，一个有客户端发起的请求在后端系统可能会经过多个不同发服务器节点来调用协同产生出最后的请求结果。调用示例如图：</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/sleuth-demo-01.jpg" alt="服务调用示例"></p>
<p>每个请求都会形成一条服务的分布式服务调用链路，链路中的任何一环出现高延迟或错都会引起整个请求最后的失败。如何快速定位失败是一个问题。</p>
<p>于是，Spring Cloud Sleuth出现了，它提供了一套完整的服务链路跟踪的解决方案。</p>
<p>官方：<a href="https://github.com/spring-cloud/spring-cloud-sleuth" target="_blank" rel="noopener">https://github.com/spring-cloud/spring-cloud-sleuth</a></p>
<h2 id="二、Sleuth"><a href="#二、Sleuth" class="headerlink" title="二、Sleuth"></a>二、Sleuth</h2><h3 id="1、基本概念"><a href="#1、基本概念" class="headerlink" title="1、基本概念"></a>1、基本概念</h3><p>Spring Cloud Sleuth提供了一套完整的服务链路跟踪的解决方案。它在整个分布式系统中能跟踪一个用户请求的过程(包括数据采集，数据传输，数据存储，数据分析，数据可视化)，捕获这些跟踪数据，就能构建微服务的整个调用链的视图，这是调试和监控微服务的关键工具。 </p>
<p>在分布式系统中提供追踪解决方案并且兼容支持了zipkin。</p>
<p>Spring Cloud Sleuth是对Zipkin的一个封装，对于Span、Trace等信息的生成、接入HTTP Request，以及向Zipkin Server发送采集信息等全部自动完成。</p>
<p>Spring Cloud Sleuth的调用链路图 ：</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/sleuth-work-01.png" alt="Spring Cloud Sleuth"></p>
<p>表示请求链路，一条链路通过Trace Id 唯一标识，Span 标识发起的请求信息，各Span 通过parent id 关联起来。</p>
<p>Trace：类似于树结构的Span集合，表示一条调用链路，存在唯一标识；</p>
<p>span：表示调用链路来源，通俗的理解span就是一次请求信息；</p>
<h3 id="2、特点"><a href="#2、特点" class="headerlink" title="2、特点"></a>2、特点</h3><p>Spring Cloud Sleuth有4个特点</p>
<table>
<thead>
<tr>
<th>特点</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>提供链路追踪</td>
<td>通过sleuth可以很清楚的看出一个请求经过了哪些服务， 可以方便的理清服务局的调用关系</td>
</tr>
<tr>
<td>性能分析</td>
<td>通过sleuth可以很方便的看出每个采集请求的耗时， 分析出哪些服务调用比较耗时，当服务调用的耗时 随着请求量的增大而增大时，也可以对服务的扩容提 供一定的提醒作用</td>
</tr>
<tr>
<td>数据分析 优化链路</td>
<td>对于频繁地调用一个服务，或者并行地调用等， 可以针对业务做一些优化措施</td>
</tr>
<tr>
<td>可视化</td>
<td>对于程序未捕获的异常，可以在zipkpin界面上看到</td>
</tr>
</tbody></table>
<h3 id="3、Zipkin"><a href="#3、Zipkin" class="headerlink" title="3、Zipkin"></a>3、Zipkin</h3><p>Spring Cloud 从F版开始不需要自己构建Zipkin Server，调用jar包即可。</p>
<p>Zipkin 地址：<a href="https://dl.bintray.com/openzipkin/maven/io/zipkin/java/zipkin-server/" target="_blank" rel="noopener">https://dl.bintray.com/openzipkin/maven/io/zipkin/java/zipkin-server/</a></p>
<p>Zipkin版本：zipkin-server-xx.xx.x.exec.jar</p>
<p>启动 Zipkin 服务：</p>
<pre class=" language-bash"><code class="language-bash">java -jar zipkin-server-2.12.9-exec.jar</code></pre>
<p>访问Web：<a href="http://localhost:9411/zipkin/" target="_blank" rel="noopener">http://localhost:9411/zipkin/</a></p>
<h2 id="三、案例"><a href="#三、案例" class="headerlink" title="三、案例"></a>三、案例</h2><h3 id="1、服务提供端"><a href="#1、服务提供端" class="headerlink" title="1、服务提供端"></a>1、服务提供端</h3><p>Eureka Server 使用之前的。</p>
<p>新建子工程：sleuth-provider-6060</p>
<h4 id="（1）引入pom依赖"><a href="#（1）引入pom依赖" class="headerlink" title="（1）引入pom依赖"></a>（1）引入pom依赖</h4><pre class=" language-xml"><code class="language-xml">        <span class="token comment" spellcheck="true">&lt;!--包含了sleuth+zipkin--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-zipkin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>
<h4 id="（2）YML-配置"><a href="#（2）YML-配置" class="headerlink" title="（2）YML 配置"></a>（2）YML 配置</h4><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6060</span>


<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> provider<span class="token punctuation">-</span>service<span class="token punctuation">-</span><span class="token number">6060</span>
  <span class="token key atrule">zipkin</span><span class="token punctuation">:</span>
    <span class="token key atrule">base-url</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">9411</span>
  <span class="token key atrule">sleuth</span><span class="token punctuation">:</span>
    <span class="token key atrule">sampler</span><span class="token punctuation">:</span>
    <span class="token key atrule">probability</span><span class="token punctuation">:</span> <span class="token number">1</span>
  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource
    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> org.gjt.mm.mysql.Driver
    <span class="token key atrule">url</span><span class="token punctuation">:</span> 
    <span class="token key atrule">username</span><span class="token punctuation">:</span> root
    <span class="token key atrule">password</span><span class="token punctuation">:</span> 

<span class="token key atrule">mybatis</span><span class="token punctuation">:</span>
  <span class="token key atrule">mapperLocations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mapper/*.xml
  <span class="token key atrule">type-aliases-package</span><span class="token punctuation">:</span> com.xiaocai.springcloud.entities


<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">fetchRegistry</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>
      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7001.com<span class="token punctuation">:</span>7001/eureka<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//eureka7002.com<span class="token punctuation">:</span>7002/eureka  <span class="token comment" spellcheck="true">#集群版</span>
  <span class="token key atrule">instance</span><span class="token punctuation">:</span>
    <span class="token key atrule">instance-id</span><span class="token punctuation">:</span> provider<span class="token punctuation">-</span><span class="token number">6060</span>
    <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
</code></pre>
<h4 id="（3）提供方controller"><a href="#（3）提供方controller" class="headerlink" title="（3）提供方controller"></a>（3）提供方controller</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>controller<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>entities<span class="token punctuation">.</span>CommonResult<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>entities<span class="token punctuation">.</span>User<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>service<span class="token punctuation">.</span>UserService<span class="token punctuation">;</span>
<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Value<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>client<span class="token punctuation">.</span>ServiceInstance<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>*<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>client<span class="token punctuation">.</span>discovery<span class="token punctuation">.</span>DiscoveryClient<span class="token punctuation">;</span>

<span class="token keyword">import</span> javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Resource<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span>


<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserProviderController</span>
<span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${server.port}"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> String serverPort<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> DiscoveryClient discoveryClient<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/v1/user/create"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> CommonResult <span class="token function">create</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> User user<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"*****插入结果："</span><span class="token operator">+</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span>result <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"插入数据库成功,serverPort: "</span><span class="token operator">+</span>serverPort<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token punctuation">(</span><span class="token number">444</span><span class="token punctuation">,</span><span class="token string">"插入数据库失败"</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/v1/user/get/{id}"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> CommonResult<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getUserById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Long id<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        User user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">getUserById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span>user <span class="token operator">!=</span> null<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"查询成功,serverPort:  "</span><span class="token operator">+</span>serverPort<span class="token punctuation">,</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token punctuation">(</span><span class="token number">444</span><span class="token punctuation">,</span><span class="token string">"没有对应记录,查询ID: "</span><span class="token operator">+</span>id<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/v1/user/zipkin"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">userZipkin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">" i'am userzipkin server fall back，welcome to xiaocai ~"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="2、服务消费端"><a href="#2、服务消费端" class="headerlink" title="2、服务消费端"></a>2、服务消费端</h3><p>新建子工程：sleuth-consumer-6061</p>
<h4 id="（1）引入pom依赖-1"><a href="#（1）引入pom依赖-1" class="headerlink" title="（1）引入pom依赖"></a>（1）引入pom依赖</h4><pre class=" language-xml"><code class="language-xml">        <span class="token comment" spellcheck="true">&lt;!--包含了sleuth+zipkin--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-zipkin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>
<h4 id="（2）YML-配置-1"><a href="#（2）YML-配置-1" class="headerlink" title="（2）YML 配置"></a>（2）YML 配置</h4><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6061</span>


<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> consumer<span class="token punctuation">-</span>service<span class="token punctuation">-</span><span class="token number">6061</span>
  <span class="token key atrule">zipkin</span><span class="token punctuation">:</span>
    <span class="token key atrule">base-url</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">9411</span>
  <span class="token key atrule">sleuth</span><span class="token punctuation">:</span>
    <span class="token key atrule">sampler</span><span class="token punctuation">:</span>
    <span class="token key atrule">probability</span><span class="token punctuation">:</span> <span class="token number">1</span>
  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource
    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> org.gjt.mm.mysql.Driver
    <span class="token key atrule">url</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#mysql 链接url</span>
    <span class="token key atrule">username</span><span class="token punctuation">:</span> root
    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#mysql密码</span>

<span class="token key atrule">mybatis</span><span class="token punctuation">:</span>
  <span class="token key atrule">mapperLocations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mapper/*.xml
  <span class="token key atrule">type-aliases-package</span><span class="token punctuation">:</span> com.xiaocai.springcloud.entities


<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">fetchRegistry</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>
      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7001.com<span class="token punctuation">:</span>7001/eureka<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//eureka7002.com<span class="token punctuation">:</span>7002/eureka  <span class="token comment" spellcheck="true">#集群版</span>
  <span class="token key atrule">instance</span><span class="token punctuation">:</span>
    <span class="token key atrule">instance-id</span><span class="token punctuation">:</span> consumer<span class="token punctuation">-</span><span class="token number">6061</span>
    <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
</code></pre>
<h4 id="（3）调用方controller"><a href="#（3）调用方controller" class="headerlink" title="（3）调用方controller"></a>（3）调用方controller</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>controller<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>entities<span class="token punctuation">.</span>CommonResult<span class="token punctuation">;</span>
<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Value<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>client<span class="token punctuation">.</span>ServiceInstance<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>*<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>client<span class="token punctuation">.</span>discovery<span class="token punctuation">.</span>DiscoveryClient<span class="token punctuation">;</span>

<span class="token keyword">import</span> javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Resource<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span>


<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserConsumerController</span>
<span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Resource</span>
     <span class="token keyword">private</span> RestTemplate restTemplate ；

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/consumer/user/zipkin"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">paymentZipkin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        String result <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token string">"http://localhost:6060"</span><span class="token operator">+</span><span class="token string">"/v1/user/zipkin/"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span></code></pre>
<h3 id="3、启动测试"><a href="#3、启动测试" class="headerlink" title="3、启动测试"></a>3、启动测试</h3><p>启动eureka7001，启动sleuth-provider-6060，启动sleuth-consumer-6061;</p>
<p>访问地址调用服务：<a href="http://localhost:6061/consumer/user/zipkin" target="_blank" rel="noopener">http://localhost:6061/consumer/user/zipkin</a></p>
<p>使用浏览器访问：<a href="http://localhost:9411/zipkin/" target="_blank" rel="noopener">http://localhost:9411/zipkin/</a></p>
<p>选择服务，查看依赖关系，就可以展示调用链路过程。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud Alibaba</title>
    <url>/posts/461589aa.html</url>
    <content><![CDATA[<h2 id="SpringCloud-Alibaba"><a href="#SpringCloud-Alibaba" class="headerlink" title="SpringCloud Alibaba"></a>SpringCloud Alibaba</h2><p>相关链接：</p>
<ul>
<li><a href="bad02d94.html">SpringCloud 微服务学习</a></li>
<li><a href="eeda118.html">RESTful 接口设计规范</a></li>
<li><a href="648d6b26.html">SpringCloud Eureka 服务注册与发现</a></li>
<li><a href="3010739f.html">SpringCloud Consul 服务注册与发现</a></li>
<li><a href="7ecbba09.html">SpringCloud Ribbon 客户端负载均衡与服务调用</a></li>
<li><a href="b27245de.html">SpringCloud OpenFeign 服务接口调用</a></li>
<li><a href="464bb413.html">SpringCloud Hystrix熔断器</a></li>
<li><a href="bc16d093.html">SpringCloud Gateway 服务网关</a></li>
<li><a href="fbbe72e1.html">SpringCloud Zuul 服务网关</a></li>
<li><a href="5b5896d1.html">Spring Cloud Config 分布式配置中心</a></li>
<li><a href="9e02a3e8.html">Spring Cloud Bus 消息总线</a></li>
<li><a href="7f3b07b1.html">SpringCloud Stream 消息驱动</a></li>
<li><a href="b99c053f.html">SpringCloud Sleuth 分布式请求链路追踪</a></li>
<li><a href="461589aa.html">SpringCloud Alibaba</a></li>
<li><a href="a46e46f8.html">SpringCloud Alibaba Nacos服务注册和配置中心</a></li>
<li><a href="5122a811.html">SpringCloud Alibaba Sentinel 实现熔断与限流</a></li>
<li><a href="fb7c74c4.html">SpringCloud Alibaba Seata 分布式事务</a></li>
</ul>
<h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><p>Spring Cloud Netflix项目进入维护模式。<a href="https://spring.io/blog/2018/12/12/spring-cloud-greenwich-rc1-available-now" target="_blank" rel="noopener">查看官方说明</a></p>
<p>SpringCloud alibaba 出现了。</p>
<p>官方介绍：<a href="https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md" target="_blank" rel="noopener">https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md</a></p>
<p>Spring Cloud Alibaba 致力于提供微服务开发的一站式解决方案。此项目包含开发分布式应用微服务的必需组件，方便开发者通过 Spring Cloud 编程模型轻松使用这些组件来开发分布式应用服务。 </p>
<p>相关文档：<a href="https://spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html" target="_blank" rel="noopener">https://spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html</a> </p>
<h2 id="二、SpringCloud-Alibaba"><a href="#二、SpringCloud-Alibaba" class="headerlink" title="二、SpringCloud Alibaba"></a>二、SpringCloud Alibaba</h2><h3 id="1、主要功能"><a href="#1、主要功能" class="headerlink" title="1、主要功能"></a>1、主要功能</h3><ul>
<li><strong>服务限流降级</strong>：默认支持 WebServlet、WebFlux,  OpenFeign、RestTemplate、Spring Cloud Gateway, Zuul, Dubbo 和 RocketMQ  限流降级功能的接入，可以在运行时通过控制台实时修改限流降级规则，还支持查看限流降级 Metrics 监控。</li>
<li><strong>服务注册与发现</strong>：适配 Spring Cloud 服务注册与发现标准，默认集成了 Ribbon 的支持。</li>
<li><strong>分布式配置管理</strong>：支持分布式系统中的外部化配置，配置更改时自动刷新。</li>
<li><strong>消息驱动能力</strong>：基于 Spring Cloud Stream 为微服务应用构建消息驱动能力。</li>
<li><strong>分布式事务</strong>：使用 @GlobalTransactional 注解， 高效并且对业务零侵入地解决分布式事务问题。。</li>
<li><strong>阿里云对象存储</strong>：阿里云提供的海量、安全、低成本、高可靠的云存储服务。支持在任何应用、任何时间、任何地点存储和访问任意类型的数据。</li>
<li><strong>分布式任务调度</strong>：提供秒级、精准、高可靠、高可用的定时（基于 Cron 表达式）任务调度服务。同时提供分布式的任务执行模型，如网格任务。网格任务支持海量子任务均匀分配到所有 Worker（schedulerx-client）上执行。</li>
<li><strong>阿里云短信服务</strong>：覆盖全球的短信服务，友好、高效、智能的互联化通讯能力，帮助企业迅速搭建客户触达通道。</li>
</ul>
<h3 id="2、相关组件"><a href="#2、相关组件" class="headerlink" title="2、相关组件"></a>2、相关组件</h3><p><strong>Sentinel</strong>：把流量作为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。</p>
<p><strong>Nacos</strong>：一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。</p>
<p><strong>RocketMQ</strong>：一款开源的分布式消息系统，基于高可用分布式集群技术，提供低延时的、高可靠的消息发布与订阅服务。</p>
<p><strong>Dubbo</strong>：Apache Dubbo™ 是一款高性能 Java RPC 框架。</p>
<p><strong>Seata</strong>：阿里巴巴开源产品，一个易于使用的高性能微服务分布式事务解决方案。</p>
<p><strong>Alibaba Cloud OSS</strong>: 阿里云对象存储服务（Object Storage Service，简称 OSS），是阿里云提供的海量、安全、低成本、高可靠的云存储服务。您可以在任何应用、任何时间、任何地点存储和访问任意类型的数据。</p>
<p><strong>Alibaba Cloud SchedulerX</strong>: 阿里中间件团队开发的一款分布式任务调度产品，提供秒级、精准、高可靠、高可用的定时（基于 Cron 表达式）任务调度服务。</p>
<p><strong>Alibaba Cloud SMS</strong>: 覆盖全球的短信服务，友好、高效、智能的互联化通讯能力，帮助企业迅速搭建客户触达通道。</p>
<h3 id="3、引入依赖"><a href="#3、引入依赖" class="headerlink" title="3、引入依赖"></a>3、引入依赖</h3><p>如果需要使用已发布的版本，在 <code>dependencyManagement</code> 中添加如下配置。</p>
<pre><code>&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;
            &lt;artifactId&gt;spring-cloud-alibaba-dependencies&lt;/artifactId&gt;
            &lt;version&gt;2.2.3.RELEASE&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;</code></pre><p>然后在 <code>dependencies</code> 中添加自己所需使用的依赖即可使用。</p>
<h3 id="4、版本适配"><a href="#4、版本适配" class="headerlink" title="4、版本适配"></a>4、版本适配</h3><p>项目的版本号格式为 <code>x.x.x</code> 的形式，其中 x 的数值类型为数字，从 0 开始取值，且不限于 <code>0 ~ 9</code>这个范围。项目处于孵化器阶段时，第一位版本号固定使用 0，即版本号为 <code>0.x.x</code> 的格式。</p>
<p>由于 <code>Spring Boot 1.x.x</code> 和 <code>Spring Boot 2.x.x</code>在 Actuator 模块的接口和注解有很大的变更，且  spring-cloud-commons 从 <code>1.x.x</code> 版本升级到 <code>2.0.0</code> 版本也有较大的变更，因此我们采取跟 SpringBoot  版本号一致的版本:</p>
<ul>
<li>1.5.x 版本适用于 Spring Boot 1.5.x</li>
<li>2.0.x 版本适用于 Spring Boot 2.0.x</li>
<li>2.1.x 版本适用于 Spring Boot 2.1.x</li>
<li>2.2.x 版本适用于 Spring Boot 2.2.x</li>
</ul>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud Seata</title>
    <url>/posts/fb7c74c4.html</url>
    <content><![CDATA[<h2 id="SpringCloud-Alibaba-Seata-分布式事务"><a href="#SpringCloud-Alibaba-Seata-分布式事务" class="headerlink" title="SpringCloud Alibaba Seata 分布式事务"></a>SpringCloud Alibaba Seata 分布式事务</h2><p>相关链接：</p>
<ul>
<li><a href="bad02d94.html">SpringCloud 微服务学习</a></li>
<li><a href="eeda118.html">RESTful 接口设计规范</a></li>
<li><a href="648d6b26.html">SpringCloud Eureka 服务注册与发现</a></li>
<li><a href="3010739f.html">SpringCloud Consul 服务注册与发现</a></li>
<li><a href="7ecbba09.html">SpringCloud Ribbon 客户端负载均衡与服务调用</a></li>
<li><a href="b27245de.html">SpringCloud OpenFeign 服务接口调用</a></li>
<li><a href="464bb413.html">SpringCloud Hystrix熔断器</a></li>
<li><a href="bc16d093.html">SpringCloud Gateway 服务网关</a></li>
<li><a href="fbbe72e1.html">SpringCloud Zuul 服务网关</a></li>
<li><a href="5b5896d1.html">Spring Cloud Config 分布式配置中心</a></li>
<li><a href="9e02a3e8.html">Spring Cloud Bus 消息总线</a></li>
<li><a href="7f3b07b1.html">SpringCloud Stream 消息驱动</a></li>
<li><a href="b99c053f.html">SpringCloud Sleuth 分布式请求链路追踪</a></li>
<li><a href="461589aa.html">SpringCloud Alibaba</a></li>
<li><a href="a46e46f8.html">SpringCloud Alibaba Nacos服务注册和配置中心</a></li>
<li><a href="5122a811.html">SpringCloud Alibaba Sentinel 实现熔断与限流</a></li>
<li><a href="fb7c74c4.html">SpringCloud Alibaba Seata 分布式事务</a></li>
</ul>
<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p>单体应用拆分成多个业务单元的微服务，每个微服务内部的数据一致性由微服务自身的本地事务来保证，但是整个系统的全局的数据一致性问题随之产生。</p>
<p>比如：一次业务操作需要跨多个数据源或需要跨多个系统进行远程调用，就会产生分布式事务问题。</p>
<p>Seata 是一款开源的分布式事务解决方案。</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/seata-work-01.jpg" alt="架构图"></p>
<h2 id="二、Seata"><a href="#二、Seata" class="headerlink" title="二、Seata"></a>二、Seata</h2><h3 id="1、主要内容"><a href="#1、主要内容" class="headerlink" title="1、主要内容"></a>1、主要内容</h3><p><strong>官网</strong></p>
<p>Seata 官网：<a href="http://seata.io/zh-cn/" target="_blank" rel="noopener">http://seata.io/zh-cn/</a></p>
<p>发布说明或下载地址：<a href="https://github.com/seata/seata/releases" target="_blank" rel="noopener">https://github.com/seata/seata/releases</a></p>
<p>参数配置：<a href="https://seata.io/zh-cn/docs/user/configurations.html" target="_blank" rel="noopener">https://seata.io/zh-cn/docs/user/configurations.html</a></p>
<p><strong>主要内容</strong></p>
<p>Seata是一款开源的分布式事务解决方案，致力于在微服务架构下提供高性能和简单易用的分布式事务服务。</p>
<p>Seata 将为用户提供了 AT、TCC、SAGA 和 XA 事务模式，为用户打造一站式的分布式解决方案。 </p>
<p><strong>AT 模式</strong> 默认的事务模式。</p>
<p><strong>前提</strong></p>
<ul>
<li>基于支持本地 ACID 事务的关系型数据库。</li>
<li>Java 应用，通过 JDBC 访问数据库。</li>
</ul>
<p><strong>整体机制</strong></p>
<p>两阶段提交协议的演变：</p>
<ul>
<li>一阶段：业务数据和回滚日志记录在同一个本地事务中提交，释放本地锁和连接资源。</li>
<li>二阶段：<ul>
<li>提交异步化，非常快速地完成。</li>
<li>回滚通过一阶段的回滚日志进行反向补偿。</li>
</ul>
</li>
</ul>
<p><strong>写隔离</strong></p>
<ul>
<li>一阶段本地事务提交前，需要确保先拿到 <strong>全局锁</strong> 。</li>
<li>拿不到 <strong>全局锁</strong> ，不能提交本地事务。</li>
<li>拿 <strong>全局锁</strong> 的尝试被限制在一定范围内，超出范围将放弃，并回滚本地事务，释放本地锁。</li>
</ul>
<p>示例：<a href="https://seata.io/zh-cn/docs/overview/what-is-seata.html" target="_blank" rel="noopener">https://seata.io/zh-cn/docs/overview/what-is-seata.html</a></p>
<p><strong>使用 AT 模式需要的注意事项</strong></p>
<ul>
<li>每个业务库中必须包含 undo_log 表，若与分库分表组件联用，分库不分表。 </li>
<li>AT模式支持的数据库有：MySQL、Oracle、PostgreSQL和 TiDB。 </li>
<li>注解开启分布式事务时，若默认服务 provider 端加入 consumer 端的事务，provider 可不标注注解。但是，provider 同样需要相应的依赖和配置，仅可省略注解。 </li>
<li>使用注解开启分布式事务时，若要求事务回滚，必须将异常抛出到事务的发起方，被事务发起方的 @GlobalTransactional 注解感知到。provide 直接抛出异常 或 定义错误码由 consumer 判断再抛出异常。 </li>
</ul>
<p>更多参考：<a href="https://seata.io/zh-cn/docs/overview/faq.html" target="_blank" rel="noopener">官方FAQ</a> </p>
<p>Seata 分布式事务有全局事务和分支事务的划分</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/seata-work-02.png" alt="全局事务和分支事务"></p>
<h3 id="2、Seata-事务模型"><a href="#2、Seata-事务模型" class="headerlink" title="2、Seata 事务模型"></a>2、Seata 事务模型</h3><p>分布式事务处理模型：<strong>1个ID +3个组件</strong></p>
<p>1个ID： </p>
<ul>
<li>全局事务Transaction ID ：XID</li>
</ul>
<p>3个组件：</p>
<ul>
<li><strong>TC (Transaction Coordinator) - 事务协调者：</strong> 维护全局和分支事务的状态，驱动全局事务提交或回滚。</li>
<li><strong>TM (Transaction Manager) - 事务管理器：</strong> 定义全局事务的范围：负责开启一个全局事务，最终发起提交或回滚全局事务。</li>
<li><strong>RM (Resource Manager) - 资源管理器：</strong> 管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。</li>
</ul>
<h3 id="3、Seata-事务过程"><a href="#3、Seata-事务过程" class="headerlink" title="3、Seata 事务过程"></a>3、Seata 事务过程</h3><p>分布式事务处理过程：</p>
<p>（1）TM事务管理器 向 TC 事务协调器 申请开启一个全局事务，全局事务创建成功并生成一个全局唯一的XID；</p>
<p>（2）XID 在微服务调用链路的上下文中传播；</p>
<p>（3）RM资源管理器 向 TC事务协调器注册分支事务，将其纳入XID对应全局事务的管辖；</p>
<p>（4）TM事务管理器 向 TC事务协调器 发起针对XID的全局提交或回滚的决议；</p>
<p>（5）TC事务协调器 调度XID 下管辖的全部分支事务完成提交或回滚请求。</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/seata-work-03.png" alt="分布式事务处理过程"></p>
<h3 id="4、使用"><a href="#4、使用" class="headerlink" title="4、使用"></a>4、使用</h3><p>Spring 本地事务使用的是 <code>@Transactional</code> 。</p>
<p>seata 全局事务使用的是注解 <code>@GlobalTransactional</code> 。</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/seata-work-04.jpg" alt="分布式事务处理过程"></p>
<h2 id="三、Seata-Server安装"><a href="#三、Seata-Server安装" class="headerlink" title="三、Seata Server安装"></a>三、Seata Server安装</h2><p>Seata-Server安装步骤：</p>
<h3 id="1、下载"><a href="#1、下载" class="headerlink" title="1、下载"></a>1、下载</h3><p>下载地址：<a href="http://seata.io/zh-cn/blog/download.html" target="_blank" rel="noopener">http://seata.io/zh-cn/blog/download.html</a></p>
<p>下载地址：<a href="https://github.com/seata/seata/releases" target="_blank" rel="noopener">https://github.com/seata/seata/releases</a></p>
<p>其实都是从github的release 那里下载的。</p>
<p> github下载较慢的话，可以使用下载器或者代下载来提速。下载完成后，将<code>nacos-server-1.3.0.zip</code>解压到指定目录。</p>
<h3 id="2、修改配置"><a href="#2、修改配置" class="headerlink" title="2、修改配置"></a>2、修改配置</h3><p><strong>（1）file.conf</strong></p>
<p>修改<code>conf</code>目录下的<code>file.conf</code>配置文件。</p>
<p>主要修改：</p>
<ul>
<li>自定义事务组名称；</li>
<li>事务日志存储模式为db；</li>
<li>数据库连接信息。</li>
</ul>
<p>file.conf 原始文件：</p>
<p>server 模块，新的版本可能没有这个模块了，如果没有先忽略。这里主要是修改事务组的名字。</p>
<pre class=" language-txt"><code class="language-txt"> vgroup_mapping.my_test_tx_group = "xiaocai_tx_group"</code></pre>
<p>store模块：</p>
<pre class=" language-txt"><code class="language-txt">mode = "db"</code></pre>
<p>db 模块中修改数据库连接：</p>
<pre class=" language-j"><code class="language-j">url <span class="token verb keyword">=</span> <span class="token conjunction variable">"</span>jdbc<span class="token conjunction variable">:</span>mysql<span class="token conjunction variable">:</span><span class="token adverb builtin">/</span><span class="token adverb builtin">/</span><span class="token number">127.0</span><span class="token conjunction variable">.</span><span class="token number">0</span><span class="token conjunction variable">.</span><span class="token verb keyword">1:</span><span class="token number">3306</span><span class="token adverb builtin">/</span>seata<span class="token conjunction variable">"</span>
user <span class="token verb keyword">=</span> <span class="token conjunction variable">"</span>root<span class="token conjunction variable">"</span>
password <span class="token verb keyword">=</span> <span class="token conjunction variable">"</span>自己的密码<span class="token conjunction variable">"</span></code></pre>
<p><strong>（2）registry.conf</strong></p>
<p>修改<code>seata-server-1.3.0/seata/conf</code>目录下的<code>registry.conf</code>配置文件，主要是为了指明注册中心，测试为nacos，及修改nacos连接信息。</p>
<p>registry 注册类型改为：</p>
<pre class=" language-txt"><code class="language-txt">type = "nacos"</code></pre>
<p>nacos 模块：</p>
<pre class=" language-txt"><code class="language-txt">  nacos {
    application = "seata-server"
    serverAddr = "127.0.0.1:8848"
    group = "SEATA_GROUP"
    namespace = ""
    cluster = "default"
    username = ""
    password = ""
  }</code></pre>
<h3 id="3、数据库初始化"><a href="#3、数据库初始化" class="headerlink" title="3、数据库初始化"></a>3、数据库初始化</h3><p>mysql57 新建数据库 seata ，然后执行初始化建表脚本。</p>
<p>建表脚本<code>db_store.sql</code>在<code>/seata-server-1.3.0/seata/conf</code>目录里面。</p>
<h3 id="4、启动服务"><a href="#4、启动服务" class="headerlink" title="4、启动服务"></a>4、启动服务</h3><p>先启动Nacos，再启动Seata 服务。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>各厂商数据库字段的Java类型和JDBC类型对应关系</title>
    <url>/posts/dc390855.html</url>
    <content><![CDATA[<p>常见数据库字段的Java类型和JDBC类型对应关系</p>
<a id="more"></a>

<p><img src="/medias/loading-animated.gif" data-original="/images/db_jdbcType.jpg" alt="Image text"></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Mybatis</tag>
        <tag>DB</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud Sentinel</title>
    <url>/posts/5122a811.html</url>
    <content><![CDATA[<h2 id="SpringCloud-Alibaba-Sentinel-实现熔断与限流"><a href="#SpringCloud-Alibaba-Sentinel-实现熔断与限流" class="headerlink" title="SpringCloud Alibaba Sentinel 实现熔断与限流"></a>SpringCloud Alibaba Sentinel 实现熔断与限流</h2><p>相关链接：</p>
<ul>
<li><a href="bad02d94.html">SpringCloud 微服务学习</a></li>
<li><a href="eeda118.html">RESTful 接口设计规范</a></li>
<li><a href="648d6b26.html">SpringCloud Eureka 服务注册与发现</a></li>
<li><a href="3010739f.html">SpringCloud Consul 服务注册与发现</a></li>
<li><a href="7ecbba09.html">SpringCloud Ribbon 客户端负载均衡与服务调用</a></li>
<li><a href="b27245de.html">SpringCloud OpenFeign 服务接口调用</a></li>
<li><a href="464bb413.html">SpringCloud Hystrix熔断器</a></li>
<li><a href="bc16d093.html">SpringCloud Gateway 服务网关</a></li>
<li><a href="fbbe72e1.html">SpringCloud Zuul 服务网关</a></li>
<li><a href="5b5896d1.html">Spring Cloud Config 分布式配置中心</a></li>
<li><a href="9e02a3e8.html">Spring Cloud Bus 消息总线</a></li>
<li><a href="7f3b07b1.html">SpringCloud Stream 消息驱动</a></li>
<li><a href="b99c053f.html">SpringCloud Sleuth 分布式请求链路追踪</a></li>
<li><a href="461589aa.html">SpringCloud Alibaba</a></li>
<li><a href="a46e46f8.html">SpringCloud Alibaba Nacos服务注册和配置中心</a></li>
<li><a href="5122a811.html">SpringCloud Alibaba Sentinel 实现熔断与限流</a></li>
<li><a href="fb7c74c4.html">SpringCloud Alibaba Seata 分布式事务</a></li>
</ul>
<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><h3 id="1、背景"><a href="#1、背景" class="headerlink" title="1、背景"></a>1、背景</h3><p>随着服务在系统之间的分布越来越重要，可靠性变得越来越重要。Sentinel是一个功能强大的流控制组件，以“流”为突破口，涵盖流量控制、并发限制、电路中断、自适应系统保护等多个领域，保证微服务的可靠性。</p>
<ul>
<li>2012 年，Sentinel 诞生，主要功能为入口流量控制。</li>
<li>2013-2017 年，Sentinel 在阿里巴巴集团内部迅速发展，成为基础技术模块，覆盖了所有的核心场景。Sentinel 也因此积累了大量的流量归整场景以及生产实践。</li>
<li>2018 年，Sentinel 开源，并持续演进。</li>
<li>2019 年，Sentinel 朝着多语言扩展的方向不断探索，推出 <a href="https://github.com/alibaba/sentinel-cpp" target="_blank" rel="noopener">C++ 原生版本</a>，同时针对 Service Mesh 场景也推出了 <a href="https://github.com/alibaba/Sentinel/tree/master/sentinel-cluster/sentinel-cluster-server-envoy-rls" target="_blank" rel="noopener">Envoy 集群流量控制支持</a>，以解决 Service Mesh 架构下多语言限流的问题。</li>
<li>2020 年，推出 <a href="https://github.com/alibaba/sentinel-golang" target="_blank" rel="noopener">Sentinel Go 版本</a>，继续朝着云原生方向演进。</li>
</ul>
<h3 id="2、官方地址"><a href="#2、官方地址" class="headerlink" title="2、官方地址"></a>2、官方地址</h3><p>Sentinel 项目地址 ：<a href="https://github.com/alibaba/Sentinel" target="_blank" rel="noopener">https://github.com/alibaba/Sentinel</a></p>
<p>官网地址：<a href="https://sentinelguard.io/zh-cn/" target="_blank" rel="noopener">https://sentinelguard.io/zh-cn/</a></p>
<p>官方介绍：<a href="https://sentinelguard.io/zh-cn/docs/introduction.html" target="_blank" rel="noopener">https://sentinelguard.io/zh-cn/docs/introduction.html</a></p>
<p><strong>官方指南</strong>：<a href="https://github.com/alibaba/Sentinel/wiki/%E6%96%B0%E6%89%8B%E6%8C%87%E5%8D%97" target="_blank" rel="noopener">https://github.com/alibaba/Sentinel/wiki/%E6%96%B0%E6%89%8B%E6%8C%87%E5%8D%97</a></p>
<p>下载地址：<a href="https://github.com/alibaba/Sentinel/releases" target="_blank" rel="noopener">https://github.com/alibaba/Sentinel/releases</a></p>
<p><strong>Spring Cloud 官方</strong>：<a href="https://spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html#_spring_cloud_alibaba_sentinel" target="_blank" rel="noopener">https://spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html#_spring_cloud_alibaba_sentinel</a></p>
<h2 id="二、Sentinel"><a href="#二、Sentinel" class="headerlink" title="二、Sentinel"></a>二、Sentinel</h2><h3 id="1、Sentinel-基本概念"><a href="#1、Sentinel-基本概念" class="headerlink" title="1、Sentinel 基本概念"></a>1、Sentinel 基本概念</h3><p><strong>资源</strong></p>
<p>资源是 Sentinel 的关键概念。它可以是 Java 应用程序中的任何内容，例如，由应用程序提供的服务，或由应用程序调用的其它应用提供的服务，甚至可以是一段代码。在接下来的文档中，我们都会用资源来描述代码块。</p>
<p>只要通过 Sentinel API 定义的代码，就是资源，能够被 Sentinel 保护起来。大部分情况下，可以使用方法签名，URL，甚至服务名称作为资源名来标示资源。</p>
<p><strong>规则</strong></p>
<p>围绕资源的实时状态设定的规则，可以包括流量控制规则、熔断降级规则以及系统保护规则。所有规则可以动态实时调整。</p>
<p><strong>Sentinel 使用</strong></p>
<p>Sentinel 的使用可以分为两个部分:</p>
<ul>
<li>核心库（Java 客户端）：不依赖任何框架/库，能够运行于 Java 7 及以上的版本的运行时环境，同时对 Dubbo / Spring Cloud 等框架也有较好的支持（见 <a href="https://github.com/alibaba/Sentinel/wiki/%E4%B8%BB%E6%B5%81%E6%A1%86%E6%9E%B6%E7%9A%84%E9%80%82%E9%85%8D" target="_blank" rel="noopener">主流框架适配</a>）。</li>
<li>控制台（Dashboard）：控制台主要负责管理推送规则、监控、集群限流分配管理、机器发现等。</li>
</ul>
<p><strong>主要特征</strong></p>
<p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/sentinel-module.jpg" alt="Sentinel"></p>
<h3 id="2、Sentinel-功能和设计理念"><a href="#2、Sentinel-功能和设计理念" class="headerlink" title="2、Sentinel 功能和设计理念"></a>2、Sentinel 功能和设计理念</h3><h3 id="2-1-流量控制"><a href="#2-1-流量控制" class="headerlink" title="2.1 流量控制"></a>2.1 流量控制</h3><p>流量控制在网络传输中是一个常用的概念，它用于调整网络包的发送数据。然而，从系统稳定性角度考虑，在处理请求的速度上，也有非常多的讲究。任意时间到来的请求往往是随机不可控的，而系统的处理能力是有限的。我们需要根据系统的处理能力对流量进行控制。Sentinel  作为一个调配器，可以根据需要把随机的请求调整成合适的形状，如下图所示：</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/sentinel-flow-overview.jpg" alt="Sentinel 流量 "></p>
<p>流量控制有以下几个角度:</p>
<ul>
<li>资源的调用关系，例如资源的调用链路，资源和资源之间的关系；</li>
<li>运行指标，例如 QPS、线程池、系统负载等；</li>
<li>控制的效果，例如直接限流、冷启动、排队等。</li>
</ul>
<p>Sentinel 的设计理念是可以自由选择控制的角度，并进行灵活组合，从而达到想要的效果。</p>
<h3 id="2-2-熔断降级"><a href="#2-2-熔断降级" class="headerlink" title="2.2 熔断降级"></a>2.2 熔断降级</h3><p><strong>什么是熔断降级</strong></p>
<p>除了流量控制以外，降低调用链路中的不稳定资源也是 Sentinel 的使命之一。由于调用关系的复杂性，如果调用链路中的某个资源出现了不稳定，最终会导致请求发生堆积。这个问题和 <a href="https://github.com/Netflix/Hystrix/wiki#what-problem-does-hystrix-solve" target="_blank" rel="noopener">Hystrix</a> 里面描述的问题是一样的。</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/sentinel-work-hystrix.png" alt="熔断降级"></p>
<p>Sentinel 和 Hystrix 的原则是一致的: 当调用链路中某个资源出现不稳定，例如，表现为 timeout，异常比例升高的时候，则对这个资源的调用进行限制，并让请求快速失败，避免影响到其它的资源，最终产生雪崩的效果。</p>
<p><strong>熔断降级设计理念</strong></p>
<p>在限制的手段上，Sentinel 和 Hystrix 采取了完全不一样的方法。</p>
<p>Hystrix 通过<a href="https://github.com/Netflix/Hystrix/wiki/How-it-Works#benefits-of-thread-pools" target="_blank" rel="noopener">线程池</a>的方式，来对依赖(在我们的概念中对应资源)进行了隔离。这样做的好处是资源和资源之间做到了最彻底的隔离。缺点是除了增加了线程切换的成本，还需要预先给各个资源做线程池大小的分配。</p>
<p>Sentinel 对这个问题采取了两种手段:</p>
<ul>
<li>通过并发线程数进行限制</li>
</ul>
<p>和资源池隔离的方法不同，Sentinel  通过限制资源并发线程的数量，来减少不稳定资源对其它资源的影响。这样不但没有线程切换的损耗，也不需要您预先分配线程池的大小。当某个资源出现不稳定的情况下，例如响应时间变长，对资源的直接影响就是会造成线程数的逐步堆积。当线程数在特定资源上堆积到一定的数量之后，对该资源的新请求就会被拒绝。堆积的线程完成任务后才开始继续接收请求。</p>
<ul>
<li>通过响应时间对资源进行降级</li>
</ul>
<p>除了对并发线程数进行控制以外，Sentinel 还可以通过响应时间来快速降级不稳定的资源。当依赖的资源出现响应时间过长后，所有对该资源的访问都会被直接拒绝，直到过了指定的时间窗口之后才重新恢复。</p>
<h3 id="2-3-系统负载保护"><a href="#2-3-系统负载保护" class="headerlink" title="2.3 系统负载保护"></a>2.3 系统负载保护</h3><p>Sentinel 同时提供<a href="https://sentinelguard.io/zh-cn/docs/system-adaptive-protection.html" target="_blank" rel="noopener">系统维度的自适应保护能力</a>。防止雪崩，是系统防护中重要的一环。当系统负载较高的时候，如果还持续让请求进入，可能会导致系统崩溃，无法响应。在集群环境下，网络负载均衡会把本应这台机器承载的流量转发到其它的机器上去。如果这个时候其它的机器也处在一个边缘状态的时候，这个增加的流量就会导致这台机器也崩溃，最后导致整个集群不可用。</p>
<p>针对这个情况，Sentinel 提供了对应的保护机制，让系统的入口流量和系统的负载达到一个平衡，保证系统在能力范围之内处理最多的请求。</p>
<h2 id="三、Sentinel-控制台"><a href="#三、Sentinel-控制台" class="headerlink" title="三、Sentinel 控制台"></a>三、Sentinel 控制台</h2><p>下载地址：<a href="https://github.com/alibaba/Sentinel/releases" target="_blank" rel="noopener">https://github.com/alibaba/Sentinel/releases</a></p>
<p>下载到本地 sentinel-dashboard-1.8.0.jar</p>
<p><strong>注意：</strong></p>
<p>（1）sentinel 控制台需要 java8环境</p>
<p>（2）sentinel 使用的是8080端口。</p>
<p>启动命令：</p>
<pre class=" language-bash"><code class="language-bash">java -jar sentinel-dashboard-1.8.0.jar</code></pre>
<p>启动之后访问sentinel 控制台地址：<a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a></p>
<p>登录账户/密码：sentinel/sentinel</p>
<h2 id="四、Sentinel-案例"><a href="#四、Sentinel-案例" class="headerlink" title="四、Sentinel 案例"></a>四、Sentinel 案例</h2><p>更多的例子可以参考: <a href="https://github.com/alibaba/Sentinel/tree/master/sentinel-demo" target="_blank" rel="noopener">Sentinel Demo 集锦</a> </p>
<p>创建微服务sentinel-service-8401 。</p>
<h3 id="1、引入POM依赖"><a href="#1、引入POM依赖" class="headerlink" title="1、引入POM依赖"></a>1、引入POM依赖</h3><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>
         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cloud2020<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.xiaocai.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>sentinel-service-8401<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.csp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>sentinel-datasource-nacos<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-sentinel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cn.hutool<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hutool-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.6.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre>
<h3 id="2、YML配置"><a href="#2、YML配置" class="headerlink" title="2、YML配置"></a>2、YML配置</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8401</span>

<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> sentinel<span class="token punctuation">-</span>service
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>
    <span class="token key atrule">sentinel</span><span class="token punctuation">:</span>
      <span class="token key atrule">transport</span><span class="token punctuation">:</span>
        <span class="token key atrule">dashboard</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8080</span>
        <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8719  </span><span class="token comment" spellcheck="true">#默认8719，假如被占用了会自动从8719开始依次+1扫描。直至找到未被占用的端口</span>

<span class="token key atrule">management</span><span class="token punctuation">:</span>
  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>
    <span class="token key atrule">web</span><span class="token punctuation">:</span>
      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>
        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">'*'</span>
</code></pre>
<h3 id="3、主启动类"><a href="#3、主启动类" class="headerlink" title="3、主启动类"></a>3、主启动类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>alibaba<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>client<span class="token punctuation">.</span>discovery<span class="token punctuation">.</span>EnableDiscoveryClient<span class="token punctuation">;</span>


<span class="token annotation punctuation">@EnableDiscoveryClient</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SentinelServiceApp8401</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SentinelServiceApp8401<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="4、业务类"><a href="#4、业务类" class="headerlink" title="4、业务类"></a>4、业务类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>controller<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span>

<span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FlowLimitController</span>
<span class="token punctuation">{</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/v1/order/all/list"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"------order all"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/v1/order/history/list"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">history</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">return</span> <span class="token string">"------order history"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span></code></pre>
<h3 id="5、测试"><a href="#5、测试" class="headerlink" title="5、测试"></a>5、测试</h3><p>启动Nacos 服务，端口8848，<a href="http://localhost:8848/nacos/#/login" target="_blank" rel="noopener">http://localhost:8848/nacos/#/login</a></p>
<p>启动Sentinel 服务，端口8080；启动控制台：<code>java -jar sentinel-dashboard-1.7.2.jar</code>，控制台的访问地址：<a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> 用户名密码：sentinel/sentinel</p>
<p>启动微服务 sentinel-service-8401。</p>
<p><strong>Sentinel采用的懒加载机制，如果要在Sentinel 控制台查看，需要先访问一次服务。</strong></p>
<p>访问地址：<a href="http://localhost:8401/v1/order/all/list" target="_blank" rel="noopener">http://localhost:8401/v1/order/all/list</a></p>
<p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/sentinel-web-demo-01.jpg" alt="服务启动"></p>
<h2 id="五、流控规则"><a href="#五、流控规则" class="headerlink" title="五、流控规则"></a>五、流控规则</h2><h3 id="1、流控元素"><a href="#1、流控元素" class="headerlink" title="1、流控元素"></a>1、流控元素</h3><p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/sentinel-liukong-demo-01.png" alt="添加流控规则"></p>
<p>资源名：唯一名称</p>
<p>针对来源：sentinel 可以针对调用进行限流，添加微服务名，默认default（不区分来源）</p>
<p>阈值类型/单机阈值：</p>
<ul>
<li>QPS 每秒的请求数据，当调用该资源API的QPS达到阈值的时候，进行限流</li>
<li>线程数，当调用该api的线程达到阈值的时候，进行限流</li>
<li>流控模式：<ul>
<li>直接：api达到限流条件时，直接限流</li>
<li>关联：当关联的资源达到阈值时，就限流自己</li>
<li>链路：只记录指定链路上的流量，指定资源从入口资源进入的流量如果达到阈值就进行限流。api级别的针对来源的限流。</li>
</ul>
</li>
<li>是否集群：本次测试非集群。</li>
<li>流控效果：<ul>
<li>快速失败：直接失败、返回抛出的异常，系统默认设置。</li>
<li>Warm Up：预热模式，根据codeFactor（冷加载因子，默认是3）从阈值除以codeFactor，经过预热时长后，才达到设置的QPS阈值</li>
<li>排队等待：匀速排队，让请求以匀速的速度通过，阈值类型必须设置为QPS，否则无效。</li>
</ul>
</li>
</ul>
<h3 id="1、流量控制规则"><a href="#1、流量控制规则" class="headerlink" title="1、流量控制规则"></a>1、流量控制规则</h3><table>
<thead>
<tr>
<th>field</th>
<th>说明</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>resource</td>
<td>资源名，限流规则的作用对象如具体的url</td>
<td></td>
</tr>
<tr>
<td>count</td>
<td>限流阀值，超过这个值就会触发</td>
<td></td>
</tr>
<tr>
<td>grade</td>
<td>阈值类型，QPS或者线程数</td>
<td>QPS</td>
</tr>
<tr>
<td>limitApp</td>
<td>流控针对的调用来源</td>
<td>default，代表不区分调用来源</td>
</tr>
<tr>
<td>strategy</td>
<td>判断是根据资源本身还是根据其它关联资源（refResource）还是根据链路入口</td>
<td>根据资源本身</td>
</tr>
<tr>
<td>controlBehavior</td>
<td>流控效果（直接拒绝/排队等待/慢启动）</td>
<td>直接拒绝</td>
</tr>
</tbody></table>
<p>同一个资源可以同时有多个限流规则。</p>
<h3 id="2、流控模式"><a href="#2、流控模式" class="headerlink" title="2、流控模式"></a>2、流控模式</h3><p>（1）直接模式</p>
<p>在微服务里新流控规则，资源名：<code>/v1/order/all/list</code></p>
<p>针对来源默认，阈值类型QPS，单机阈值 2，流控模式选直接，流控效果快速失败</p>
<p>快速刷新访问：<a href="http://localhost:8401/v1/order/all/list" target="_blank" rel="noopener">http://localhost:8401/v1/order/all/list</a> ，查看效果。</p>
<pre class=" language-txt"><code class="language-txt">Blocked by Sentinel (flow limiting)</code></pre>
<p>（2）关联模式</p>
<p>当关联的资源达到阈值时，就限流自己。当资源A关联的资源B达到了阈值，资源A将被限流。</p>
<p>在微服务里新流控规则，资源名：<code>/v1/order/all/list</code></p>
<p>针对来源默认，阈值类型QPS，单机阈值 2，</p>
<p>流控模式选关联，关联资源<code>/v1/order/history/list</code> ，流控效果快速失败。</p>
<p>保存设置。</p>
<p>快速刷新访问资源B：<a href="http://localhost:8401/v1/order/history/list" target="_blank" rel="noopener">http://localhost:8401/v1/order/history/list</a>  ，也可以使用postman模拟并发密集访问，在postman里新建多线程集合组，将访问地址添加进新的线程组，点击Run 执行，使得大批量线程高并发访问资源B。</p>
<p>然后访问资源A：<a href="http://localhost:8401/v1/order/all/list" target="_blank" rel="noopener">http://localhost:8401/v1/order/all/list</a> </p>
<p>资源A 被流控：</p>
<pre class=" language-txt"><code class="language-txt">Blocked by Sentinel (flow limiting)</code></pre>
<p>（3）链路模式</p>
<p><strong>链路流控模式指的是，当从某个接口过来的资源达到限流条件时，开启限流；它的功能有点类似于针对 来源配置项，区别在于：针对来源是针对上级微服务，而链路流控是针对上级接口，也就是说它的粒度 更细。</strong></p>
<p>“流控规则”菜单，添加流控规则，填写资源名：<code>/v1/order/all/list</code><br> 以QPS为例，填写单机阈值为1<br> 高级选项，流控模式选择“链路”<br> 入口资源处填写的应为<code>/order/all/list</code>的入口资源地址，即sentinel_web_servlet_context<br> 流控效果以“快速失败”为例<br> 点击新增。<br>测试发送请求：<a href="http://localhost8401/order/all/list" target="_blank" rel="noopener">http://localhost8401/order/all/list</a> 时，如果1秒内请求次数超过1次，就会自动触发限流。<br>此外，通过其他微服务模块请求资源 <code>/order/all/list</code>时，如果1秒内请求次数超过1次，同样会触发限流。</p>
<p>流控模式为“链路模式”下的配置就此完成。</p>
<p>实际上，链路的控制指的就是对一条链路的访问进行控制。</p>
<p>资源 A —&gt; 资源B  —&gt;  资源C</p>
<p>资源 A —&gt; 资源D  —&gt;  资源E</p>
<p>此时对资源A进行限流，实际上是对资源A之后的资源B、资源C、资源D 、资源E也一同进行限流。资源A对于后续资源（B/C/D/E）来说就入口资源。</p>
<h3 id="3、流控效果"><a href="#3、流控效果" class="headerlink" title="3、流控效果"></a>3、流控效果</h3><p>（1）直接模式</p>
<p><strong>直接拒绝</strong>（<code>RuleConstant.CONTROL_BEHAVIOR_DEFAULT</code>）方式是默认的流量控制方式，当QPS超过任意规则的阈值后，新的请求就会被立即拒绝，拒绝方式为抛出<strong>FlowException</strong>。这种方式适用于对系统处理能力确切已知的情况下，比如通过压测确定了系统的准确水位时。</p>
<p>官方的Demo参见 <a href="https://github.com/alibaba/Sentinel/blob/master/sentinel-demo/sentinel-demo-basic/src/main/java/com/alibaba/csp/sentinel/demo/flow/FlowQpsDemo.java" target="_blank" rel="noopener">FlowQpsDemo</a>。</p>
<p><a href="https://github.com/alibaba/Sentinel/wiki/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6#%E7%9B%B4%E6%8E%A5%E6%8B%92%E7%BB%9D" target="_blank" rel="noopener">官方文档关于排队等待</a> </p>
<p>（2）预热</p>
<p>系统初始化的默认阈值为10 / 3，即为3，也就是刚开始的时候阈值只有3，当经过5s后，阈值才慢慢提高到10；</p>
<p>Warm Up（<code>RuleConstant.CONTROL_BEHAVIOR_WARM_UP</code>）方式，即预热/冷启动方式。当系统长期处于低水位的情况下，当流量突然增加时，直接把系统拉升到高水位可能瞬间把系统压垮。通过”冷启动”，让通过的流量缓慢增加，在一定时间内逐渐增加到阈值上限，给冷系统一个预热的时间，避免冷系统被压垮。详细文档可以参考 <a href="https://github.com/alibaba/Sentinel/wiki/%E9%99%90%E6%B5%81---%E5%86%B7%E5%90%AF%E5%8A%A8" target="_blank" rel="noopener">流量控制 - Warm Up 文档</a>，具体的例子可以参见 <a href="https://github.com/alibaba/Sentinel/blob/master/sentinel-demo/sentinel-demo-basic/src/main/java/com/alibaba/csp/sentinel/demo/flow/WarmUpFlowDemo.java" target="_blank" rel="noopener">WarmUpFlowDemo</a>。</p>
<p><a href="https://github.com/alibaba/Sentinel/wiki/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6#warm-up" target="_blank" rel="noopener">官方文档关于预热Warm Up</a> </p>
<p>根据<code>codeFactor</code>（冷加载因子，默认为3）的值，即请求 QPS 从 <code>threshold / 3</code> 开始，经预热时长逐渐升至设定的 QPS 阈值 ;</p>
<p>源码位置：<strong>com.alibaba.csp.sentinel.slots.block.flow.controller.WarmUpController</strong></p>
<p>应用场景：秒杀系统的开启瞬间，会有很多流量上来，很可能会把系统打挂，预热方式就是为了保护系统，可以慢慢的把流量放进来，慢慢的把阈值增长到设定值；</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/sentinel-warmup-work.png" alt="预热模式"></p>
<p>（3）排队等待</p>
<p>匀速排队（<code>RuleConstant.CONTROL_BEHAVIOR_RATE_LIMITER</code>）方式会严格控制请求通过的间隔时间，也即是让请求以均匀的速度通过，对应的是漏桶算法。 </p>
<p>匀速排队，让请求以均匀的速度通过，阈值类型必须设置成<code>QPS</code>，否则无效。</p>
<p>“流控规则”菜单，添加流控规则，填写资源名：<code>/v1/order/all/list</code><br>以QPS为例，填写单机阈值为1，高级选项，流控模式选择“直接”，流控效果以“排队等待”，点击新增。</p>
<p>设置的含义：<code>/v1/order/all/list</code>每秒1次请求，QPS大于1后，再有请求就排队，等待超时时间为20000毫秒；</p>
<p>这种方式主要用于处理间隔性突发的流量，例如消息队列。想象一下这样的场景，在某一秒有大量的请求到来，而接下来的几秒则处于空闲状态，我们希望系统能够在接下来的空闲期间逐渐处理这些请求，而不是在第一秒直接拒绝多余的请求。</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/sentinel-paidui-work.png" alt="排队等待"></p>
<p>这种方式主要用于处理间隔性突发的流量，例如消息队列。想象一下这样的场景，在某一秒有大量的请求到来，而接下来的几秒则处于空闲状态，我们希望系统能够在接下来的空闲期间逐渐处理这些请求，而不是在第一秒直接拒绝多余的请求。</p>
<blockquote>
<p>注意：匀速排队模式暂时不支持 QPS &gt; 1000 的场景。</p>
</blockquote>
<p>源码位置：<strong>com.alibaba.csp.sentinel.slots.block.flow.controller.RateLimiterController</strong></p>
<p><a href="https://github.com/alibaba/Sentinel/wiki/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6#%E5%8C%80%E9%80%9F%E6%8E%92%E9%98%9F" target="_blank" rel="noopener">官方文档关于排队等待</a> </p>
<h3 id="4、按资源名称限流"><a href="#4、按资源名称限流" class="headerlink" title="4、按资源名称限流"></a>4、按资源名称限流</h3><p>在sentinel-service-8401 的业务类添加</p>
<pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/byResource"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"byResource"</span><span class="token punctuation">,</span>blockHandler <span class="token operator">=</span> <span class="token string">"handleException"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">byResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"按资源名称限流测试--正常返回"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> String <span class="token function">handleException</span><span class="token punctuation">(</span>BlockException exception<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"按资源名称限流测试--自定义返回，服务降级"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p>添加流控规则：</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/sentinel-byresource-demo-01.png" alt="添加流控规则">注意资源名没有<code>/</code> ，上述配置表示1秒钟内查询次数大于1，就会触发降级，进入<code>handleException</code>快速失败返回。</p>
<p>添加成功后</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/sentinel-byresource-demo-02.png" alt="添加流控规则"></p>
<p>测试步骤：</p>
<p>启动之后，访问测试地址：<a href="http://localhost:8401/byResource" target="_blank" rel="noopener">http://localhost:8401/byResource</a></p>
<p>每秒访问一次，正常返回。</p>
<p>快速刷新，或者使用jmeter并发测试，返回了自己定义的限流处理信息：</p>
<pre class=" language-txt"><code class="language-txt">按资源名称限流测试--自定义返回，服务降级</code></pre>
<h3 id="5、按URL限流"><a href="#5、按URL限流" class="headerlink" title="5、按URL限流"></a>5、按URL限流</h3><p>在sentinel-service-8401 的业务类添加</p>
<pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/rateLimit/byUrl"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"byUrl"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">byUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"按url限流测试OK"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/sentinel-byUrl-demo-01.png" alt="添加流控规则"></p>
<p>注意：按URL限流前面有<code>/</code> 。</p>
<p>测试快速刷新：<a href="http://localhost:8401/rateLimit/byUrl" target="_blank" rel="noopener">http://localhost:8401/rateLimit/byUrl</a></p>
<pre class=" language-txt"><code class="language-txt">Blocked by Sentinel (flow limiting)</code></pre>
<h3 id="6、自定义限流"><a href="#6、自定义限流" class="headerlink" title="6、自定义限流"></a>6、自定义限流</h3><p>创建自定义限流处理类：<code>CustomerBlockHandler</code>类用于自定义限流处理逻辑。</p>
<p>CustomerBlockHandler 类：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>myhandler<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>csp<span class="token punctuation">.</span>sentinel<span class="token punctuation">.</span>slots<span class="token punctuation">.</span>block<span class="token punctuation">.</span>BlockException<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerBlockHandler</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">handleException</span><span class="token punctuation">(</span>BlockException exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"自定义限流处理信息....CustomerBlockHandler"</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>业务代码块：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/rateLimit/customerBlockHandler"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"customerBlockHandler"</span><span class="token punctuation">,</span>
        blockHandlerClass <span class="token operator">=</span> CustomerBlockHandler<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>
        blockHandler <span class="token operator">=</span> <span class="token string">"handlerException2"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> String <span class="token function">customerBlockHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span>  <span class="token string">"按自定义限流正常返回"</span> <span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>启动服务，调用一次：<a href="http://localhost:8401/rateLimit/customerBlockHandler" target="_blank" rel="noopener">http://localhost:8401/rateLimit/customerBlockHandler</a></p>
<h3 id="7、-SentinelResource"><a href="#7、-SentinelResource" class="headerlink" title="7、@SentinelResource"></a>7、@SentinelResource</h3><p><code>@SentinelResource</code> </p>
<p>@SentinelResource 用于定义资源，并提供可选的异常处理和 fallback 配置项。 @SentinelResource 注解包含以下属性：</p>
<ul>
<li><p>value：资源名称，必需项（不能为空）</p>
</li>
<li><p>entryType：entry 类型，可选项（默认为 EntryType.OUT）</p>
</li>
<li><p>blockHandler / blockHandlerClass: blockHandler 对应处理 BlockException 的函数名称，可选项。blockHandler 函数访问范围需要是 public，返回类型需要与原方法相匹配，参数类型需要和原方法相匹配并且最后加一个额外的参数，类型为 BlockException。blockHandler 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，则可以指定 blockHandlerClass 为对应的类的 Class 对象，注意对应的函数必需为 static 函数，否则无法解析。</p>
</li>
<li><p>fallback / fallbackClass：fallback 函数名称，可选项，用于在抛出异常的时候提供 fallback 处理逻辑。fallback 函数可以针对所有类型的异常（除了 exceptionsToIgnore 里面排除掉的异常类型）进行处理。fallback 函数签名和位置要求：</p>
<ul>
<li><p>返回值类型必须与原函数返回值类型一致；</p>
</li>
<li><p>方法参数列表需要和原函数一致，或者可以额外多一个 Throwable 类型的参数用于接收对应的异常。</p>
<p>fallback 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，则可以指定 fallbackClass 为对应的类的 Class 对象，注意对应的函数必需为 static 函数，否则无法解析。</p>
</li>
</ul>
</li>
<li><p>defaultFallback（since 1.6.0）：默认的 fallback 函数名称，可选项，通常用于通用的 fallback 逻辑（即可以用于很多服务或方法）。默认 fallback 函数可以针对所有类型的异常（除了 exceptionsToIgnore 里面排除掉的异常类型）进行处理。若同时配置了 fallback 和 defaultFallback，则只有 fallback 会生效。defaultFallback 函数签名要求：</p>
<ul>
<li><p>返回值类型必须与原函数返回值类型一致；</p>
</li>
<li><p>方法参数列表需要为空，或者可以额外多一个 Throwable 类型的参数用于接收对应的异常。</p>
<p>defaultFallback 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，则可以指定 fallbackClass 为对应的类的 Class 对象，注意对应的函数必需为 static 函数，否则无法解析。</p>
</li>
</ul>
</li>
<li><p>exceptionsToIgnore（since 1.6.0）：用于指定哪些异常被排除掉，不会计入异常统计中，也不会进入 fallback 逻辑中，而是会原样抛出。</p>
<p>  注：1.6.0 之前的版本 fallback 函数只针对降级异常（DegradeException）进行处理，不能针对业务异常进行处理。</p>
</li>
</ul>
<p>特别地，若 blockHandler 和 fallback 都进行了配置，则被限流降级而抛出 BlockException 时只会进入 blockHandler 处理逻辑。若未配置 blockHandler、fallback 和 defaultFallback，则被限流降级时会将 BlockException 直接抛出（若方法本身未定义 throws BlockException 则会被 JVM 包装一层 UndeclaredThrowableException）。</p>
<p>更多说明：<a href="https://github.com/alibaba/Sentinel/wiki/%E6%B3%A8%E8%A7%A3%E6%94%AF%E6%8C%81" target="_blank" rel="noopener">https://github.com/alibaba/Sentinel/wiki/%E6%B3%A8%E8%A7%A3%E6%94%AF%E6%8C%81</a></p>
<p>Sentinel主要有三个核心API</p>
<ul>
<li>SphU定义资源</li>
<li>Tracer定义统计</li>
<li>ContextUtil定义了上下文</li>
</ul>
<h2 id="六、熔断降级规则"><a href="#六、熔断降级规则" class="headerlink" title="六、熔断降级规则"></a>六、熔断降级规则</h2><p>Sentinel 熔断降级会在调用链路中某个资源出现不稳定状态（超时/异常比例升高）时，对该资源进行限流，让请求快速失败，避免影响到其他的资源而导致级联错误。当资源被降级后，在接下来的降级时间窗口之内，对该资源的调用都自动熔断（默认行为是抛出<code>DegradeException</code>）。</p>
<p>Sentinel 熔断降级和 Hystrix 熔断降级相比，Sentinel 熔断降级没有半开状态。</p>
<h3 id="1、基本降级元素"><a href="#1、基本降级元素" class="headerlink" title="1、基本降级元素"></a>1、基本降级元素</h3><p>特别说明：这里的使用的1.8的截图，所以熔断策略里出现了 <strong>“慢调用比例”</strong> 替换了旧版的 <strong>“RT”</strong>。</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/sentinel-jiangji-demo-01.png" alt="降级规则元素"></p>
<p>资源名：唯一名称</p>
<p>降级策略：</p>
<ul>
<li>RT - 平均响应时间；</li>
<li>异常比例，秒级；</li>
<li>异常数，分钟数；</li>
</ul>
<h3 id="2、熔断降级规则"><a href="#2、熔断降级规则" class="headerlink" title="2、熔断降级规则"></a>2、熔断降级规则</h3><p>熔断降级规则（DegradeRule）包含下面几个重要的属性：</p>
<table>
<thead>
<tr>
<th>Field</th>
<th>说明</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>resource</td>
<td>资源名，即规则的作用对象</td>
<td></td>
</tr>
<tr>
<td>grade</td>
<td>熔断策略，支持慢调用比例/异常比例/异常数策略</td>
<td>慢调用比例</td>
</tr>
<tr>
<td>count</td>
<td>慢调用比例模式下为慢调用临界 RT（超出该值计为慢调用）；异常比例/异常数模式下为对应的阈值</td>
<td></td>
</tr>
<tr>
<td>timeWindow</td>
<td>熔断时长，单位为 s</td>
<td></td>
</tr>
<tr>
<td>minRequestAmount</td>
<td>熔断触发的最小请求数，请求数小于该值时即使异常比率超出阈值也不会熔断（1.7.0 引入）</td>
<td>5</td>
</tr>
<tr>
<td>statIntervalMs</td>
<td>统计时长（单位为 ms），如 60*1000 代表分钟级（1.8.0 引入）</td>
<td>1000 ms</td>
</tr>
<tr>
<td>slowRatioThreshold</td>
<td>慢调用比例阈值，仅慢调用比例模式有效（1.8.0 引入）</td>
<td></td>
</tr>
</tbody></table>
<h4 id="（1）RT-平均响应时间"><a href="#（1）RT-平均响应时间" class="headerlink" title="（1）RT - 平均响应时间"></a>（1）RT - 平均响应时间</h4><p>RT - 平均响应时间（DEGRADE_DRADE_RT）：RT以秒为单位，平均响应时间超出阈值（（DegradeRule 中的count，以ms 为单位）且在实际窗口内的请求大于或等于5，两个条件同时满足后触发降级。窗口期结束后关闭断路器。RT 最大4900 更大的需要配置使用需要配置：</p>
<pre class=" language-properties"><code class="language-properties"><span class="token attr-name">-Dcsp.sentinel.statistic.max.rt</span><span class="token punctuation">=</span><span class="token attr-value">XXX </span></code></pre>
<p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/sentinel-rt-01.png" alt="RT 流程"></p>
<p>代码：</p>
<pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/testD"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">rtTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span> 
            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token punctuation">}</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"rtTest 测试 RT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token string">"------rtTest-----"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p>模拟测试，可以使用jmeter进行压力测试。新建线程组，线程数手指成10，Ramp-Up Period 设置1，循环设置永远。</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/sentinel-rt-02.png" alt="RT -测试"></p>
<p>后续停止jemeter ，再次访问，资源恢复访问。</p>
<p>1.8之后策略更换为<strong>慢调用比例</strong>。</p>
<h4 id="（2）异常比例"><a href="#（2）异常比例" class="headerlink" title="（2）异常比例"></a>（2）异常比例</h4><p>异常比例（DEGRADE_GRADE_EXCEPTION_RATIO）：秒级。 当资源每秒请求量QPS 大于或等于5 且 异常比例（每秒异常总数占通过量的比值）超过阈值（DegradeRule 中的count）时，触发降级，资源进入降级状态；时间窗口（DegradeRule 中的 timewindow，以s为单位）结束后，关闭降级。</p>
<p>异常比例的阈值范围是[0.0 , 1.0] ，代表 0% - 100%。</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/sentinel-expcetion-01.jpg" alt="异常比例 流程"></p>
<p>测试代码：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/testD"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">testD</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"testD 测试 异常比例"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"------testD-----"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p>降级规则设置：</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/sentinel-expcetion-02.jpg" alt="异常比例设置"></p>
<p>测试说明：</p>
<p>按上述配置，使用浏览器访问，因为写了 10/0 ，所以每次访问都会报错。</p>
<p>使用jmeter 测试</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/sentinel-expcetion-03.jpg" alt="jmeter 测试"></p>
<p>jmeter 测试，直接高并发请求，多次调用达到配置条件后，微服务不再报错，而是提示降级。</p>
<h4 id="（3）异常数"><a href="#（3）异常数" class="headerlink" title="（3）异常数"></a>（3）异常数</h4><p>异常数：分钟级，（分钟统计的）异常数超过阈值时触发降级；时间窗口结束后，关闭降级。</p>
<p>异常数（<code>DEGRADE_GRADE_EXCEPTION_COUNT</code>）：当资源近1分钟的异常数目超过阈值之后会进行熔断降级。注意由于统计时间是分钟基本，时间窗口要大于或等于60秒。</p>
<p>若 <code>timeWindow</code> 小于60秒，结束熔断之后仍有可能再进入熔断状态。</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/sentinel-expcetion-04.jpg" alt="异常数 流程"></p>
<p>测试代码：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/testE"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> String <span class="token function">testE</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"testE 测试异常数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">"------testE 测试异常数 ------"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> </code></pre>
<p>降级规则设置</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/sentinel-expcetion-05.jpg" alt="降级规则设置"></p>
<h3 id="3、自定义降级提示"><a href="#3、自定义降级提示" class="headerlink" title="3、自定义降级提示"></a>3、自定义降级提示</h3><p>返回的异常打到了前台用户界面看不到，不友好。</p>
<p>错误类<code>com.alibaba.csp.sentinel.slots.block.BlockException</code></p>
<p>因为需要自定义。</p>
<p>自定义降级提示信息：使用<code>@SentinelResource</code> 注解。</p>
<p>示例</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/testHotKey"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"testHotKey"</span><span class="token punctuation">,</span>blockHandler <span class="token operator">=</span> <span class="token string">"deal_testHotKey"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> String <span class="token function">testHotKey</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"p1"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> String p1<span class="token punctuation">,</span>
                         <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"p2"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> String p2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//int age = 10/0;</span>
    <span class="token keyword">return</span> <span class="token string">"------testHotKey"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> String <span class="token function">deal_testHotKey</span> <span class="token punctuation">(</span>String p1<span class="token punctuation">,</span> String p2<span class="token punctuation">,</span> BlockException exception<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">"------deal_testHotKey ----user words "</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span></code></pre>
<p>此时熔断降级时使用 <code>deal_testHotKey</code> 的方法返回。</p>
<p>需要注意的是：<code>@SentinelResource</code> 注解的降级只负责sentinel 控制台配置的规则的降级。针对异常，<code>@SentinelResource</code> 注解不负责。</p>
<h3 id="4、服务降级-fallback-案例"><a href="#4、服务降级-fallback-案例" class="headerlink" title="4、服务降级+fallback 案例"></a>4、服务降级+fallback 案例</h3><p>sentinel + ribbon + openFeign + fallback</p>
<p>启动 nacos 和 sentinel 服务。</p>
<p>先加入Ribbon。</p>
<h3 id="4-1-准备两个服务提供端"><a href="#4-1-准备两个服务提供端" class="headerlink" title="4.1 准备两个服务提供端"></a>4.1 准备两个服务提供端</h3><p>sentinel-provider-service-9003</p>
<p>sentinel-provider-service-9004</p>
<h4 id="4-1-1-引入pom依赖"><a href="#4-1-1-引入pom依赖" class="headerlink" title="4.1.1 引入pom依赖"></a>4.1.1 引入pom依赖</h4><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!--SpringCloud ailibaba nacos --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- SpringBoot整合Web组件 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!--日常通用jar包配置--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre>
<h4 id="4-1-2-YML配置"><a href="#4-1-2-YML配置" class="headerlink" title="4.1.2 YML配置"></a>4.1.2 YML配置</h4><p>YML配置：</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9003</span>

<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> nacos<span class="token punctuation">-</span>provider<span class="token punctuation">-</span>service
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848 </span><span class="token comment" spellcheck="true">#配置Nacos地址</span>

<span class="token key atrule">management</span><span class="token punctuation">:</span>
  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>
    <span class="token key atrule">web</span><span class="token punctuation">:</span>
      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>
        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">'*'</span></code></pre>
<h4 id="4-1-3-启动类"><a href="#4-1-3-启动类" class="headerlink" title="4.1.3 启动类"></a>4.1.3 启动类</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>alibaba<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>client<span class="token punctuation">.</span>discovery<span class="token punctuation">.</span>EnableDiscoveryClient<span class="token punctuation">;</span>


<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableDiscoveryClient</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProviderServiceApp_9003</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ProviderServiceApp_9003<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="4-1-4-业务类"><a href="#4-1-4-业务类" class="headerlink" title="4.1.4 业务类"></a>4.1.4 业务类</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>controller<span class="token punctuation">;</span>


<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>entities<span class="token punctuation">.</span>CommonResult<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>entities<span class="token punctuation">.</span>User<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Value<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PathVariable<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span>


<span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserProviderController</span>
<span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${server.port}"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> String serverPort<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> HashMap<span class="token operator">&lt;</span>Long<span class="token punctuation">,</span> User<span class="token operator">></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span><span class="token punctuation">{</span>
        hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>1L<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>1L<span class="token punctuation">,</span><span class="token string">"zhangxiaocai"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>2L<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>2L<span class="token punctuation">,</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>3L<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>3L<span class="token punctuation">,</span><span class="token string">"lisi"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/v1/getUser/{id}"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> CommonResult<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Long id<span class="token punctuation">)</span><span class="token punctuation">{</span>
        User user <span class="token operator">=</span> hashMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        CommonResult<span class="token operator">&lt;</span>User<span class="token operator">></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"from mysql,serverPort:  "</span><span class="token operator">+</span>serverPort<span class="token punctuation">,</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="4-1-5-测试"><a href="#4-1-5-测试" class="headerlink" title="4.1.5 测试"></a>4.1.5 测试</h4><p>测试访问：<a href="http://localhost:9003/v1/getUser/1" target="_blank" rel="noopener">http://localhost:9003/v1/getUser/1</a></p>
<p>属性sentinel 出现微服务。</p>
<h4 id="4-1-6-第二个工程"><a href="#4-1-6-第二个工程" class="headerlink" title="4.1.6 第二个工程"></a>4.1.6 第二个工程</h4><p>跟上述步骤一致，改下端口号。</p>
<h3 id="4-2-准备一个消费端"><a href="#4-2-准备一个消费端" class="headerlink" title="4.2 准备一个消费端"></a>4.2 准备一个消费端</h3><p> sentinel-consumer-9009，使用Ribbon</p>
<h4 id="4-2-1-引入pom依赖"><a href="#4-2-1-引入pom依赖" class="headerlink" title="4.2.1 引入pom依赖"></a>4.2.1 引入pom依赖</h4><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>
         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cloud2020<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.xiaocai.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>sentinel-consumer-9009<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-sentinel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre>
<h4 id="4-2-2-相关配置"><a href="#4-2-2-相关配置" class="headerlink" title="4.2.2 相关配置"></a>4.2.2 相关配置</h4><p>YML配置：</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9009</span>


<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> nacos<span class="token punctuation">-</span>consumer<span class="token punctuation">-</span>service
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>
    <span class="token key atrule">sentinel</span><span class="token punctuation">:</span>
      <span class="token key atrule">transport</span><span class="token punctuation">:</span>
        <span class="token key atrule">dashboard</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8080</span>
        <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8719</span>

<span class="token key atrule">service-url</span><span class="token punctuation">:</span>
  <span class="token key atrule">nacos-user-service</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//nacos<span class="token punctuation">-</span>provider<span class="token punctuation">-</span>service
</code></pre>
<p>java 配置类：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>config<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>client<span class="token punctuation">.</span>loadbalancer<span class="token punctuation">.</span>LoadBalanced<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>client<span class="token punctuation">.</span>RestTemplate<span class="token punctuation">;</span>


<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationContextConfig</span>
<span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@LoadBalanced</span>
    <span class="token keyword">public</span> RestTemplate <span class="token function">getRestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>使用 Ribbon 负载均衡</p>
<h4 id="4-2-3-启动类"><a href="#4-2-3-启动类" class="headerlink" title="4.2.3 启动类"></a>4.2.3 启动类</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>alibaba<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>client<span class="token punctuation">.</span>discovery<span class="token punctuation">.</span>EnableDiscoveryClient<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>openfeign<span class="token punctuation">.</span>EnableFeignClients<span class="token punctuation">;</span>


<span class="token annotation punctuation">@EnableDiscoveryClient</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsumerNacosApp_9009</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ConsumerNacosApp_9009<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="4-2-4-业务类"><a href="#4-2-4-业务类" class="headerlink" title="4.2.4 业务类"></a>4.2.4 业务类</h4><p>controller 类：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>controller<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>csp<span class="token punctuation">.</span>sentinel<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>SentinelResource<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>csp<span class="token punctuation">.</span>sentinel<span class="token punctuation">.</span>slots<span class="token punctuation">.</span>block<span class="token punctuation">.</span>BlockException<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>entities<span class="token punctuation">.</span>CommonResult<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>entities<span class="token punctuation">.</span>User<span class="token punctuation">;</span>

<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PathVariable<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>client<span class="token punctuation">.</span>RestTemplate<span class="token punctuation">;</span>

<span class="token keyword">import</span> javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Resource<span class="token punctuation">;</span>


<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CircleBreakerController</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String SERVICE_URL <span class="token operator">=</span> <span class="token string">"http://nacos-provider-service"</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> RestTemplate restTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/consumer/fallback/{id}"</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true">//@SentinelResource(value = "fallback") //没有配置</span>
    <span class="token comment" spellcheck="true">//@SentinelResource(value = "fallback",fallback = "handlerFallback") //fallback只负责业务异常</span>
    <span class="token comment" spellcheck="true">//@SentinelResource(value = "fallback",blockHandler = "blockHandler") //blockHandler只负责sentinel控制台配置违规</span>
    <span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"fallback"</span><span class="token punctuation">,</span>fallback <span class="token operator">=</span> <span class="token string">"handlerFallback"</span><span class="token punctuation">,</span>blockHandler <span class="token operator">=</span> <span class="token string">"blockHandler"</span><span class="token punctuation">,</span>
            exceptionsToIgnore <span class="token operator">=</span> <span class="token punctuation">{</span>IllegalArgumentException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> CommonResult<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">fallback</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        CommonResult<span class="token operator">&lt;</span>User<span class="token operator">></span> result <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>SERVICE_URL <span class="token operator">+</span> <span class="token string">"/v1/getUser/"</span><span class="token operator">+</span>id<span class="token punctuation">,</span> CommonResult<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span> <span class="token punctuation">(</span><span class="token string">"IllegalArgumentException,非法参数异常...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span> <span class="token punctuation">(</span><span class="token string">"NullPointerException,该ID没有对应记录,空指针异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//fallback</span>
    <span class="token keyword">public</span> CommonResult <span class="token function">handlerFallback</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span>  Long id<span class="token punctuation">,</span>Throwable e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span><span class="token string">"null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">444</span><span class="token punctuation">,</span><span class="token string">"异常备选响应handlerFallback,exception内容  "</span><span class="token operator">+</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//blockHandler</span>
    <span class="token keyword">public</span> CommonResult <span class="token function">blockHandler</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span>  Long id<span class="token punctuation">,</span>BlockException blockException<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span><span class="token string">"null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">445</span><span class="token punctuation">,</span><span class="token string">"blockHandler-sentinel 限流,无此流水: blockException  "</span><span class="token operator">+</span>blockException<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="4-2-5-测试"><a href="#4-2-5-测试" class="headerlink" title="4.2.5 测试"></a>4.2.5 测试</h4><p>测试访问：<a href="http://localhost:9009/consumer/fallback/1" target="_blank" rel="noopener">http://localhost:9009/consumer/fallback/1</a></p>
<p>刷新sentinel 出现微服务。</p>
<p>可以分别使用以下四个配置进行测试，访问，并查看异常和负载均衡效果。</p>
<p>配置一：</p>
<pre><code>@SentinelResource(value = &quot;fallback&quot;) //没有配置</code></pre><p>重启后测试访问一：</p>
<ul>
<li><a href="http://localhost:9009/consumer/fallback/1" target="_blank" rel="noopener">http://localhost:9009/consumer/fallback/1</a></li>
<li><a href="http://localhost:9009/consumer/fallback/4" target="_blank" rel="noopener">http://localhost:9009/consumer/fallback/4</a></li>
<li><a href="http://localhost:9009/consumer/fallback/5" target="_blank" rel="noopener">http://localhost:9009/consumer/fallback/5</a></li>
</ul>
<p>配置二：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"fallback"</span><span class="token punctuation">,</span>fallback <span class="token operator">=</span> <span class="token string">"handlerFallback"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//fallback只负责业务异常</span></code></pre>
<p>重启后测试访问二：</p>
<ul>
<li><a href="http://localhost:9009/consumer/fallback/5" target="_blank" rel="noopener">http://localhost:9009/consumer/fallback/5</a></li>
</ul>
<p>配置三：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"fallback"</span><span class="token punctuation">,</span>blockHandler <span class="token operator">=</span> <span class="token string">"blockHandler"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//blockHandler只负责sentinel控制台配置违规    </span></code></pre>
<p>重启后，进行简单的QPS限流测试，资源名：<code>9/consumer/fallback</code> ，限流阈值1等，方便模拟即可。</p>
<p>测试访问三：</p>
<ul>
<li><a href="http://localhost:9009/consumer/fallback/1" target="_blank" rel="noopener">http://localhost:9009/consumer/fallback/1</a></li>
<li><a href="http://localhost:9009/consumer/fallback/4" target="_blank" rel="noopener">http://localhost:9009/consumer/fallback/4</a></li>
<li><a href="http://localhost:9009/consumer/fallback/5" target="_blank" rel="noopener">http://localhost:9009/consumer/fallback/5</a></li>
</ul>
<p>配置四：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"fallback"</span><span class="token punctuation">,</span>fallback <span class="token operator">=</span> <span class="token string">"handlerFallback"</span><span class="token punctuation">,</span>blockHandler <span class="token operator">=</span> <span class="token string">"blockHandler"</span><span class="token punctuation">,</span> exceptionsToIgnore <span class="token operator">=</span> <span class="token punctuation">{</span>IllegalArgumentException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<p>重启后测试访问四：</p>
<ul>
<li><a href="http://localhost:9009/consumer/fallback/4" target="_blank" rel="noopener">http://localhost:9009/consumer/fallback/4</a></li>
<li><a href="http://localhost:9009/consumer/fallback/5" target="_blank" rel="noopener">http://localhost:9009/consumer/fallback/5</a></li>
</ul>
<p>已经加入Ribbon，再加入Feign。</p>
<h3 id="4-3-Feign的加入"><a href="#4-3-Feign的加入" class="headerlink" title="4.3 Feign的加入"></a>4.3 Feign的加入</h3><p>在消费端工程添加 Feign 的支持。</p>
<h4 id="4-3-1-引入POM依赖"><a href="#4-3-1-引入POM依赖" class="headerlink" title="4.3.1 引入POM依赖"></a>4.3.1 引入POM依赖</h4><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>
<h4 id="4-3-2-追加Feign的支持"><a href="#4-3-2-追加Feign的支持" class="headerlink" title="4.3.2 追加Feign的支持"></a>4.3.2 追加Feign的支持</h4><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#对Feign的支持</span>
<span class="token key atrule">feign</span><span class="token punctuation">:</span>
  <span class="token key atrule">sentinel</span><span class="token punctuation">:</span>
    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre>
<h4 id="4-3-3-添加Feign封装接口"><a href="#4-3-3-添加Feign封装接口" class="headerlink" title="4.3.3 添加Feign封装接口"></a>4.3.3 添加Feign封装接口</h4><p><code>ProviderUserService</code> 接口：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>service<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>entities<span class="token punctuation">.</span>CommonResult<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>entities<span class="token punctuation">.</span>User<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>openfeign<span class="token punctuation">.</span>FeignClient<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PathVariable<span class="token punctuation">;</span>


<span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"nacos-provider-service"</span><span class="token punctuation">,</span>fallback <span class="token operator">=</span> ProviderUserFallbackService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ProviderUserService</span>
<span class="token punctuation">{</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/v1/getUser/{id}"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> CommonResult<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Long id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> </code></pre>
<p>fallback 对应的服务降级支持类<code>ProviderUserFallbackService</code>：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>service<span class="token punctuation">;</span>


<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>entities<span class="token punctuation">.</span>CommonResult<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>entities<span class="token punctuation">.</span>User<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>


<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProviderUserFallbackService</span> <span class="token keyword">implements</span> <span class="token class-name">ProviderUserService</span>
<span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> CommonResult<span class="token operator">&lt;</span>Payment<span class="token operator">></span> <span class="token function">getUser</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">44444</span><span class="token punctuation">,</span><span class="token string">"服务降级返回,---PaymentFallbackService"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Payment</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span><span class="token string">"errorSerial"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="4-3-4-主启动类"><a href="#4-3-4-主启动类" class="headerlink" title="4.3.4 主启动类"></a>4.3.4 主启动类</h4><p>主启动类追加 Feign 支持的注解<code>@EnableFeignClients</code> ：</p>
<pre class=" language-java"><code class="language-java"> <span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>alibaba<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>client<span class="token punctuation">.</span>discovery<span class="token punctuation">.</span>EnableDiscoveryClient<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>openfeign<span class="token punctuation">.</span>EnableFeignClients<span class="token punctuation">;</span>


<span class="token annotation punctuation">@EnableDiscoveryClient</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableFeignClients</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsumerNacosApp_9009</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ConsumerNacosApp_9009<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="4-3-5-追加controller-测试入口"><a href="#4-3-5-追加controller-测试入口" class="headerlink" title="4.3.5 追加controller 测试入口"></a>4.3.5 追加controller 测试入口</h4><p><code>CircleBreakerController</code>  追加测试feign的调用入口：</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// OpenFeign</span>
<span class="token annotation punctuation">@Resource</span>
<span class="token keyword">private</span> ProviderUserService providerUserService<span class="token punctuation">;</span>

<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/consumer/openfeign/{id}"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> CommonResult<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> providerUserService<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="4-3-6-测试验证"><a href="#4-3-6-测试验证" class="headerlink" title="4.3.6 测试验证"></a>4.3.6 测试验证</h4><p>重启服务访问。</p>
<p>Feign 的测试验证：<a href="http://lcoalhost:9009/consumer/openfeign/1" target="_blank" rel="noopener">http://lcoalhost:9009/consumer/openfeign/1</a></p>
<p>Feign 的测试验证：<a href="http://lcoalhost:9009/consumer/getUser/1" target="_blank" rel="noopener">http://lcoalhost:9009/consumer/getUser/1</a></p>
<p>测试消费端9009调用服务端9003，此时故意关闭9003微服务提供者，看消费侧自动降级，不会被耗死。</p>
<h3 id="5、熔断降级框架比较"><a href="#5、熔断降级框架比较" class="headerlink" title="5、熔断降级框架比较"></a>5、熔断降级框架比较</h3><table>
<thead>
<tr>
<th>比较项</th>
<th>Sentinel</th>
<th>Hystrix</th>
<th>resilience4j</th>
</tr>
</thead>
<tbody><tr>
<td>隔离策略</td>
<td>信号量隔离（并发线程数限流）</td>
<td>线程池隔离/信号量隔离</td>
<td>信号量隔离</td>
</tr>
<tr>
<td>熔断降级策略</td>
<td>基于响应时间、异常比例、异常数</td>
<td>基于异常比例</td>
<td>基于异常比例、响应时间</td>
</tr>
<tr>
<td>实时统计实现</td>
<td>滑动窗口（LeapArray）</td>
<td>滑动窗口（RxJava）</td>
<td>Ring Bit Buffer</td>
</tr>
<tr>
<td>动态规则配置</td>
<td>支持多种数据源</td>
<td>支持多种数据源</td>
<td>有限支持</td>
</tr>
<tr>
<td>扩展性</td>
<td>多个扩展点</td>
<td>插件的形式</td>
<td>接口形式</td>
</tr>
<tr>
<td>基于注解支持</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
</tr>
<tr>
<td>限流</td>
<td>基于QPS/调用关系限流</td>
<td>有限支持</td>
<td>Rate Limiter</td>
</tr>
<tr>
<td>流量整形</td>
<td>支持预热模式、匀速器模式、预热排队模式</td>
<td>不支持</td>
<td>简单的Rate Limiter 模式</td>
</tr>
<tr>
<td>系统自适应</td>
<td>支持</td>
<td>不支持</td>
<td>不支持</td>
</tr>
<tr>
<td>控制台</td>
<td>提供开销即用的控制台，可以配置规则、查看秒级监控、机器发现</td>
<td>简单的监控查看</td>
<td>不提供控制台，可 对接其他监控系统</td>
</tr>
</tbody></table>
<h2 id="七、热点限流"><a href="#七、热点限流" class="headerlink" title="七、热点限流"></a>七、热点限流</h2><p>热点即经常访问的数据。很多时候我们希望统计某个热点数据中访问频次最高的 Top K 数据，并对其访问进行限制。比如：</p>
<ul>
<li>商品 ID 为参数，统计一段时间内最常购买的商品 ID 并进行限制</li>
<li>用户 ID 为参数，针对一段时间内频繁访问的用户 ID 进行限制</li>
</ul>
<p>热点参数限流会统计传入参数中的热点参数，并根据配置的限流阈值与模式，对包含热点参数的资源调用进行限流。热点参数限流可以看做是一种特殊的流量控制，仅对包含热点参数的资源调用生效。</p>
<p>Sentinel 利用 LRU 策略统计最近最常访问的热点参数，结合令牌桶算法来进行参数级别的流控。热点参数限流支持集群模式。</p>
<h3 id="1、热点参数规则"><a href="#1、热点参数规则" class="headerlink" title="1、热点参数规则"></a>1、热点参数规则</h3><p>热点参数规则（<code>ParamFlowRule</code>）类似于流量控制规则（<code>FlowRule</code>）：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>resource</td>
<td>资源名，必填</td>
<td></td>
</tr>
<tr>
<td>count</td>
<td>限流阈值，必填</td>
<td></td>
</tr>
<tr>
<td>grade</td>
<td>限流模式</td>
<td>QPS 模式</td>
</tr>
<tr>
<td>durationInSec</td>
<td>统计窗口时间长度（单位为秒），1.6.0 版本开始支持</td>
<td>1s</td>
</tr>
<tr>
<td>controlBehavior</td>
<td>流控效果（支持快速失败和匀速排队模式），1.6.0 版本开始支持</td>
<td>快速失败</td>
</tr>
<tr>
<td>maxQueueingTimeMs</td>
<td>最大排队等待时长（仅在匀速排队模式生效），1.6.0 版本开始支持</td>
<td>0ms</td>
</tr>
<tr>
<td>paramIdx</td>
<td>热点参数的索引，必填，对应 <code>SphU.entry(xxx, args)</code> 中的参数索引位置</td>
<td></td>
</tr>
<tr>
<td>paramFlowItemList</td>
<td>参数例外项，可以针对指定的参数值单独设置限流阈值，不受前面 <code>count</code> 阈值的限制。<strong>仅支持基本类型和字符串类型</strong></td>
<td></td>
</tr>
<tr>
<td>clusterMode</td>
<td>是否是集群参数流控规则</td>
<td><code>false</code></td>
</tr>
<tr>
<td>clusterConfig</td>
<td>集群流控相关配置</td>
<td></td>
</tr>
</tbody></table>
<p>主要元素</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/sentinel-redian-demo-01.png" alt="热点规则设置"></p>
<h3 id="2、参数限流"><a href="#2、参数限流" class="headerlink" title="2、参数限流"></a>2、参数限流</h3><p>资源请求中含有某个位置的参数时进行限流。</p>
<p>测试代码同上：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/testHotKey"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"testHotKey"</span><span class="token punctuation">,</span>blockHandler <span class="token operator">=</span> <span class="token string">"deal_testHotKey"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> String <span class="token function">testHotKey</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"p1"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> String p1<span class="token punctuation">,</span>
                         <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"p2"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> String p2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//int age = 10/0;</span>
    <span class="token keyword">return</span> <span class="token string">"------testHotKey"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> String <span class="token function">deal_testHotKey</span> <span class="token punctuation">(</span>String p1<span class="token punctuation">,</span> String p2<span class="token punctuation">,</span> BlockException exception<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">"------deal_testHotKey ----user words "</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span></code></pre>
<p>热点限流配置：</p>
<p>参数索引：0</p>
<p>流控模式：QPS</p>
<p>阈值：1</p>
<p>是否集群：否</p>
<p>是否例外项：无</p>
<p>演示：方法testHostKey里面第一个参数只要QPS超过每秒1次，马上降级处理。</p>
<p>测试快速刷新访问1：<a href="http://localhost:8401/testHotKey?p1=abc" target="_blank" rel="noopener">http://localhost:8401/testHotKey?p1=abc</a>   限流</p>
<p>测试快速刷新访问2：<a href="http://localhost:8401/testHotKey?p1=abc&amp;p2=33" target="_blank" rel="noopener">http://localhost:8401/testHotKey?p1=abc&amp;p2=33</a>  限流</p>
<p>测试快速刷新访问3：<a href="http://localhost:8401/testHotKey?p2=33" target="_blank" rel="noopener">http://localhost:8401/testHotKey?p2=33</a>   不限流</p>
<h3 id="3、参数例外项"><a href="#3、参数例外项" class="headerlink" title="3、参数例外项"></a>3、参数例外项</h3><p>p1参数当它是某个特殊值时，它的限流值和平时不一样。</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/sentinel-params-liwai-01.jpg" alt="参数例外项设置"></p>
<p>规则解释：</p>
<p>当p1等于5的时候，阈值变为200。<a href="http://localhost:8401/testHotKey?p1=5" target="_blank" rel="noopener">http://localhost:8401/testHotKey?p1=5</a></p>
<p>当p1不等于5的时候，阈值就是平常的1。<a href="http://localhost:8401/testHotKey?p1=2" target="_blank" rel="noopener">http://localhost:8401/testHotKey?p1=2</a></p>
<h2 id="八、系统规则"><a href="#八、系统规则" class="headerlink" title="八、系统规则"></a>八、系统规则</h2><p>系统保护规则是从应用级别的入口流量进行控制，从单台机器的 load、CPU 使用率、平均 RT、入口 QPS 和并发线程数等几个维度监控应用指标，让系统尽可能跑在最大吞吐量的同时保证系统整体的稳定性。</p>
<p>系统保护规则是应用整体维度的，而不是资源维度的，并且<strong>仅对入口流量生效</strong>。入口流量指的是进入应用的流量（<code>EntryType.IN</code>），比如 Web 服务或 Dubbo 服务端接收的请求，都属于入口流量。</p>
<p>系统规则支持以下的模式：</p>
<ul>
<li><strong>Load 自适应</strong>（仅对 Linux/Unix-like 机器生效）：系统的 load1 作为启发指标，进行自适应系统保护。当系统 load1 超过设定的启发值，且系统当前的并发线程数超过估算的系统容量时才会触发系统保护（BBR 阶段）。系统容量由系统的 <code>maxQps * minRt</code> 估算得出。设定参考值一般是 <code>CPU cores * 2.5</code>。</li>
<li><strong>CPU usage</strong>（1.5.0+ 版本）：当系统 CPU 使用率超过阈值即触发系统保护（取值范围 0.0-1.0），比较灵敏。</li>
<li><strong>平均 RT</strong>：当单台机器上所有入口流量的平均 RT 达到阈值即触发系统保护，单位是毫秒。</li>
<li><strong>并发线程数</strong>：当单台机器上所有入口流量的并发线程数达到阈值即触发系统保护。</li>
<li><strong>入口 QPS</strong>：当单台机器上所有入口流量的 QPS 达到阈值即触发系统保护。</li>
</ul>
<p>示例：</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/sentinel-system-rule-demo-01.png" alt="系统规则设置"></p>
<p><strong>原理</strong></p>
<p>先用经典图来镇楼:</p>
<p><img src="/medias/loading-animated.gif" data-original="https://user-images.githubusercontent.com/9434884/50813887-bff10300-1352-11e9-9201-437afea60a5a.png" alt="TCP-BBR-pipe"></p>
<p>我们把系统处理请求的过程想象为一个水管，到来的请求是往这个水管灌水，当系统处理顺畅的时候，请求不需要排队，直接从水管中穿过，这个请求的RT是最短的；反之，当请求堆积的时候，那么处理请求的时间则会变为：排队时间 + 最短处理时间。</p>
<ul>
<li>推论一:  如果我们能够保证水管里的水量，能够让水顺畅的流动，则不会增加排队的请求；也就是说，这个时候的系统负载不会进一步恶化。</li>
</ul>
<p>我们用 T 来表示(水管内部的水量)，用RT来表示请求的处理时间，用P来表示进来的请求数，那么一个请求从进入水管道到从水管出来，这个水管会存在 <code>P * RT</code>　个请求。换一句话来说，当 <code>T ≈ QPS * Avg(RT)</code> 的时候，我们可以认为系统的处理能力和允许进入的请求个数达到了平衡，系统的负载不会进一步恶化。</p>
<p>接下来的问题是，水管的水位是可以达到了一个平衡点，但是这个平衡点只能保证水管的水位不再继续增高，但是还面临一个问题，就是在达到平衡点之前，这个水管里已经堆积了多少水。如果之前水管的水已经在一个量级了，那么这个时候系统允许通过的水量可能只能缓慢通过，RT会大，之前堆积在水管里的水会滞留；反之，如果之前的水管水位偏低，那么又会浪费了系统的处理能力。</p>
<ul>
<li>推论二:　当保持入口的流量是水管出来的流量的最大的值的时候，可以最大利用水管的处理能力。</li>
</ul>
<p>然而，和 TCP BBR 的不一样的地方在于，还需要用一个系统负载的值（load1）来激发这套机制启动。</p>
<blockquote>
<p>注：这种系统自适应算法对于低 load 的请求，它的效果是一个“兜底”的角色。<strong>对于不是应用本身造成的 load 高的情况（如其它进程导致的不稳定的情况），效果不明显。</strong></p>
</blockquote>
<h2 id="九、规则持久化"><a href="#九、规则持久化" class="headerlink" title="九、规则持久化"></a>九、规则持久化</h2><p>第三节已经说明了sentinel 控制台的使用。</p>
<h3 id="1、Sentinel-配置持久化"><a href="#1、Sentinel-配置持久化" class="headerlink" title="1、Sentinel 配置持久化"></a>1、Sentinel 配置持久化</h3><p>但是在测试过程中，微服务重启，之前配置的Sentinel规则就消失了，说明之前的规则配置都是临时的，但是在生产环境需要将配置规则进行持久化，不可能每次重启微服务都要去配置一次。</p>
<p>如何持久化？</p>
<p>将限流配置规则持久化进Nacos保存，只要刷新8401某个rest地址，sentinel控制台的流控规则就能看到，只要Nacos里面的配置不删除，针对8401上Sentinel上的流控规则持续有效。</p>
<h3 id="2、案例"><a href="#2、案例" class="headerlink" title="2、案例"></a>2、案例</h3><p>修改sentinel-service-8401</p>
<h3 id="2-1-引入pom-依赖"><a href="#2-1-引入pom-依赖" class="headerlink" title="2.1 引入pom 依赖"></a>2.1 引入pom 依赖</h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.csp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>sentinel-datasource-nacos<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>
<h3 id="2-2-YML配置添加数据源"><a href="#2-2-YML配置添加数据源" class="headerlink" title="2.2 YML配置添加数据源"></a>2.2 YML配置添加数据源</h3><p>追加数据源的配置</p>
<pre><code>spring:
   cloud:
    sentinel:
    datasource:
     ds1:
      nacos:
        server-addr:localhost:8848
        dataid:${spring.application.name}
        groupid:DEFAULT_GROUP
        data-type:json
            rule-type:flow</code></pre><p>完整的YML配置：</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8401</span>

<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> sentinel<span class="token punctuation">-</span>service
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>
    <span class="token key atrule">sentinel</span><span class="token punctuation">:</span>
      <span class="token key atrule">transport</span><span class="token punctuation">:</span>
        <span class="token key atrule">dashboard</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8080</span>
        <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8719  </span><span class="token comment" spellcheck="true">#默认8719，假如被占用了会自动从8719开始依次+1扫描。直至找到未被占用的端口</span>
        <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
          <span class="token key atrule">ds1</span><span class="token punctuation">:</span>
            <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
              <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>
              <span class="token key atrule">dataId</span><span class="token punctuation">:</span> sentinel<span class="token punctuation">-</span>service
              <span class="token key atrule">groupId</span><span class="token punctuation">:</span> DEFAULT_GROUP
              <span class="token key atrule">data-type</span><span class="token punctuation">:</span> json
              <span class="token key atrule">rule-type</span><span class="token punctuation">:</span> flow  

<span class="token key atrule">management</span><span class="token punctuation">:</span>
  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>
    <span class="token key atrule">web</span><span class="token punctuation">:</span>
      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>
        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">'*'</span>

<span class="token key atrule">feign</span><span class="token punctuation">:</span>
  <span class="token key atrule">sentinel</span><span class="token punctuation">:</span>
    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 激活Sentinel对Feign的支持</span>
</code></pre>
<h3 id="2-3-Nacos-业务规则配置"><a href="#2-3-Nacos-业务规则配置" class="headerlink" title="2.3 Nacos 业务规则配置"></a>2.3 Nacos 业务规则配置</h3><p>添加配置：</p>
<p>内容解析：</p>
<pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
         <span class="token property">"resource"</span><span class="token operator">:</span> <span class="token string">"/retaLimit/byUrl"</span><span class="token punctuation">,</span>
         <span class="token property">"limitApp"</span><span class="token operator">:</span> <span class="token string">"default"</span><span class="token punctuation">,</span>
         <span class="token property">"grade"</span><span class="token operator">:</span>   <span class="token number">1</span><span class="token punctuation">,</span>
         <span class="token property">"count"</span><span class="token operator">:</span>   <span class="token number">1</span><span class="token punctuation">,</span>
         <span class="token property">"strategy"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
         <span class="token property">"controlBehavior"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
         <span class="token property">"clusterMode"</span><span class="token operator">:</span> <span class="token boolean">false</span>    
    <span class="token punctuation">}</span>
<span class="token punctuation">]</span></code></pre>
<h3 id="2-4-测试"><a href="#2-4-测试" class="headerlink" title="2.4 测试"></a>2.4 测试</h3><p>启动8401，访问地址：<a href="http://localhost:8401/rateLimit/byUrl" target="_blank" rel="noopener">http://localhost:8401/rateLimit/byUrl</a></p>
<p>刷新sentinel发现业务规则出现。</p>
<p>快速刷新访问地址：<a href="http://localhost:8401/rateLimit/byUrl" target="_blank" rel="noopener">http://localhost:8401/rateLimit/byUrl</a></p>
<pre class=" language-txt"><code class="language-txt"></code></pre>
<p>停止端口为8401的服务，再看sentinel 控制台，规则没有了。</p>
<p>重新启动端口为8401的服务，再看sentinel控制台，规则可能不会立即出现，再次刷新访问地址：<a href="http://localhost:8401/rateLimit/byUrl" target="_blank" rel="noopener">http://localhost:8401/rateLimit/byUrl</a></p>
<p>重新配置出现了，说明持久化验证通过。</p>
<h2 id="十、新版Sentinel"><a href="#十、新版Sentinel" class="headerlink" title="十、新版Sentinel"></a>十、新版Sentinel</h2><p><strong>Sentinel在1.8.0版本对熔断降级做了大的调整，可以定义任意时长的熔断时间，引入了半开启恢复支持。</strong></p>
<h3 id="1、熔断状态"><a href="#1、熔断状态" class="headerlink" title="1、熔断状态"></a>1、熔断状态</h3><p>熔断有三种状态，分别为OPEN、HALF_OPEN、CLOSED。</p>
<table>
<thead>
<tr>
<th>状态</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>OPEN</td>
<td>表示熔断开启，拒绝所有请求</td>
</tr>
<tr>
<td>HALF_OPEN</td>
<td>探测恢复状态，如果接下来的一个请求顺利通过则结束熔断，否则继续熔断</td>
</tr>
<tr>
<td>CLOSED</td>
<td>表示熔断关闭，请求顺利通过</td>
</tr>
</tbody></table>
<h3 id="2、熔断策略"><a href="#2、熔断策略" class="headerlink" title="2、熔断策略"></a>2、熔断策略</h3><p>熔断降级支持慢调用比例、异常比例、异常数三种熔断策略。先明确下面两个概念：<strong>慢调用</strong>：指耗时大于阈值RT的请求称为慢调用，阈值RT由用户设置</p>
<p><strong>最小请求数</strong>：允许通过的最小请求数量，在最小请求数量内不发生熔断，由用户设置</p>
<h4 id="（1）慢调用比例"><a href="#（1）慢调用比例" class="headerlink" title="（1）慢调用比例"></a>（1）慢调用比例</h4><table>
<thead>
<tr>
<th><strong>属性</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>最大RT</td>
<td>需要设置的阈值，超过该值则为慢应用</td>
</tr>
<tr>
<td>比例阈值</td>
<td>慢调用占所有的调用的比率，范围：[0~1]</td>
</tr>
<tr>
<td>熔断时长</td>
<td>在这段时间内发生熔断、拒绝所有请求</td>
</tr>
<tr>
<td>最小请求数</td>
<td>即允许通过的最小请求数，在该数量内不发生熔断</td>
</tr>
</tbody></table>
<p><strong>执行逻辑</strong></p>
<p>熔断（OPEN）：请求数大于最小请求数并且慢调用的比率大于比例阈值则发生熔断，熔断时长为用户自定义设置。</p>
<p>探测（HALFOPEN）：当熔断过了定义的熔断时长，状态由熔断（OPEN）变为探测（HALFOPEN）。</p>
<ul>
<li>如果接下来的一个请求小于最大RT，说明慢调用已经恢复，结束熔断，状态由探测（HALF_OPEN）变更为关闭（CLOSED）</li>
<li>如果接下来的一个请求大于最大RT，说明慢调用未恢复，继续熔断，熔断时长保持一致</li>
</ul>
<h4 id="（2）异常比例-1"><a href="#（2）异常比例-1" class="headerlink" title="（2）异常比例"></a>（2）异常比例</h4><p>通过计算异常比例与设置阈值对比的一种策略。</p>
<table>
<thead>
<tr>
<th><strong>属性</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>异常比例阈值</td>
<td>异常比例=发生异常的请求数÷请求总数取值范围：[0~1]</td>
</tr>
<tr>
<td>熔断时长</td>
<td>在这段时间内发生熔断、拒绝所有请求</td>
</tr>
<tr>
<td>最小请求数</td>
<td>即允许通过的最小请求数，在该数量内不发生熔断</td>
</tr>
</tbody></table>
<p><strong>执行逻辑</strong></p>
<p>熔断（OPEN）：当请求数大于最小请求并且异常比例大于设置的阈值时触发熔断，熔断时长由用户设置。</p>
<p>探测（HALFOPEN）：当超过熔断时长时，由熔断（OPEN）转为探测（HALFOPEN）</p>
<ul>
<li>如果接下来的一个请求未发生错误，说明应用恢复，结束熔断，状态由探测（HALF_OPEN）变更为关闭（CLOSED）</li>
<li>如果接下来的一个请求继续发生错误，说明应用未恢复，继续熔断，熔断时长保持一致</li>
</ul>
<h4 id="（3）异常数-1"><a href="#（3）异常数-1" class="headerlink" title="（3）异常数"></a>（3）异常数</h4><p>通过计算发生异常的请求数与设置阈值对比的一种策略。</p>
<table>
<thead>
<tr>
<th><strong>属性</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>异常数</td>
<td>请求发生异常的数量</td>
</tr>
<tr>
<td>熔断时长</td>
<td>在这段时间内发生熔断、拒绝所有请求</td>
</tr>
<tr>
<td>最小请求数</td>
<td>即允许通过的最小请求数，在该数量内不发生熔断</td>
</tr>
</tbody></table>
<p><strong>执行逻辑</strong></p>
<p>熔断（OPEN）：当请求数大于最小请求并且异常数量大于设置的阈值时触发熔断，熔断时长由用户设置。探测（HALFOPEN）：当超过熔断时长时，由熔断（OPEN）转为探测（HALFOPEN）</p>
<ul>
<li>如果接下来的一个请求未发生错误，说明应用恢复，结束熔断，状态由探测（HALF_OPEN）变更为关闭（CLOSED）</li>
<li>如果接下来的一个请求继续发生错误，说明应用未恢复，继续熔断，熔断时长保持一致</li>
</ul>
<h3 id="4、规则参数说明"><a href="#4、规则参数说明" class="headerlink" title="4、规则参数说明"></a>4、规则参数说明</h3><p>熔断降级DegradeRule中的属性进行说明</p>
<table>
<thead>
<tr>
<th><strong>属性</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>resource</td>
<td>资源名称</td>
</tr>
<tr>
<td>grade</td>
<td>降级策略 0:慢调用比例 1:异常比例 2:异常数量</td>
</tr>
<tr>
<td>count</td>
<td>用户设置的阈值，根据不同的策略分别表示最大RT、异常比例阈值、异常数阈值</td>
</tr>
<tr>
<td>timeWindow</td>
<td>熔断时长</td>
</tr>
<tr>
<td>minRequestAmount</td>
<td>最小请求数，默认为5</td>
</tr>
<tr>
<td>slowRatioThreshold</td>
<td>慢调用比率阈值，默认为1.0</td>
</tr>
<tr>
<td>statIntervalMs</td>
<td>熔断时长，默认为1秒</td>
</tr>
</tbody></table>
<p> 1.慢调用策略</p>
<pre><code>[
    {
        &quot;count&quot;: 3000,
        &quot;grade&quot;: 0,
        &quot;limitApp&quot;: &quot;default&quot;,
        &quot;minRequestAmount&quot;: 100,
        &quot;resource&quot;: &quot;/v1/test1&quot;,
        &quot;slowRatioThreshold&quot;: 0.5,
        &quot;statIntervalMs&quot;: 1000,
        &quot;timeWindow&quot;: 5
    }
]</code></pre><p>2.异常比例</p>
<pre><code>{
    &quot;count&quot;: 0.3,
    &quot;grade&quot;: 1,
    &quot;limitApp&quot;: &quot;default&quot;,
    &quot;minRequestAmount&quot;: 200,
    &quot;resource&quot;: &quot;degrade02&quot;,
    &quot;slowRatioThreshold&quot;: 1,
    &quot;statIntervalMs&quot;: 1000,
    &quot;timeWindow&quot;: 5
}</code></pre><p>3.异常数</p>
<pre><code>{
    &quot;count&quot;: 1000,
    &quot;grade&quot;: 2,
    &quot;limitApp&quot;: &quot;default&quot;,
    &quot;minRequestAmount&quot;: 300,
    &quot;resource&quot;: &quot;degrade03&quot;,
    &quot;slowRatioThreshold&quot;: 1,
    &quot;statIntervalMs&quot;: 1000,
    &quot;timeWindow&quot;: 5
}</code></pre><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>Thymeleaf 内置对象</title>
    <url>/posts/44478111.html</url>
    <content><![CDATA[<h2 id="Thymeleaf-内置对象"><a href="#Thymeleaf-内置对象" class="headerlink" title="Thymeleaf  内置对象"></a>Thymeleaf  内置对象</h2><p>Thymeleaf 的内置对象主要有三类</p>
<ul>
<li>请求/会话属性的Web上下文命名空间对象</li>
<li>Web 上下文对象</li>
<li>内置工具对象</li>
</ul>
<h2 id="一-请求-会话属性等"><a href="#一-请求-会话属性等" class="headerlink" title="一. 请求/会话属性等"></a>一. 请求/会话属性等</h2><p>请求/会话属性等的Web上下文命名空间对象。如下</p>
<h3 id="ctx"><a href="#ctx" class="headerlink" title="#ctx"></a>#ctx</h3><p><code>org.thymeleaf.context.IContext</code> API提供</p>
<pre><code>${#ctx.locale}
${#ctx.variableNames}
</code></pre><p><code>class org.thymeleaf.context.IWebContext</code> API提供</p>
<pre><code>${#ctx.request}
${#ctx.response}
${#ctx.session}
${#ctx.servletContext}
</code></pre><h3 id="locale"><a href="#locale" class="headerlink" title="#locale"></a>#locale</h3><p>直接访问java.util.Locale与当前请求关联。</p>
<pre><code>${#locale}</code></pre><h3 id="param"><a href="#param" class="headerlink" title="param"></a>param</h3><p>不是上下文对象，而是作为变量添加到上下文中的映射，不使用#来访问它们。param类似名称空间。</p>
<p><code>org.thymeleaf.context.WebRequestParamsVariablesMap</code> API提供</p>
<pre><code>${param.foo}
${param.fooArray[0]}
${param.size()}
${param.isEmpty()}
${param.containsKey(&#39;foo&#39;)}
</code></pre><h3 id="session"><a href="#session" class="headerlink" title="session"></a>session</h3><p><code>org.thymeleaf.context.WebSessionVariablesMap</code> 提供API</p>
<pre><code>${session.foo} // Retrieves the session atttribute &#39;foo&#39;
${session.size()}
${session.isEmpty()}
${session.containsKey(&#39;foo&#39;)}</code></pre><h3 id="application"><a href="#application" class="headerlink" title="application"></a>application</h3><p>用于检索 <code>application/servlet</code>上下文属性。</p>
<pre><code>${application.foo} // Retrieves the ServletContext atttribute &#39;foo&#39;
${application.size()}
${application.isEmpty()}
${application.containsKey(&#39;foo&#39;)}</code></pre><h2 id="二-Web-上下文对象"><a href="#二-Web-上下文对象" class="headerlink" title="二. Web 上下文对象"></a>二. Web 上下文对象</h2><p>Web 上下文对象。如下：</p>
<h3 id="request"><a href="#request" class="headerlink" title="#request :"></a>#request :</h3><p>直接访问 <code>javax.servlet.http.HttpServletRequest</code> 对象与当前请求关联</p>
<pre><code>${#request.getAttribute(&#39;foo&#39;)}
${#request.getParameter(&#39;foo&#39;)}
${#request.getContextPath()}
${#request.getRequestName()}
</code></pre><h3 id="session-1"><a href="#session-1" class="headerlink" title="#session :"></a>#session :</h3><p>直接访问 <code>javax.servlet.http.HttpSession</code> 对象与当前请求关联</p>
<pre><code>${#session.getAttribute(&#39;foo&#39;)}
${#session.id}
${#session.lastAccessedTime}
</code></pre><h3 id="servletContext"><a href="#servletContext" class="headerlink" title="#servletContext :"></a>#servletContext :</h3><p>直接访问 <code>javax.servlet.ServletContext</code> 对象与当前请求关联</p>
<pre><code>${#servletContext.getAttribute(&#39;foo&#39;)}
${#servletContext.contextPath}
</code></pre><h2 id="三-内置工具对象"><a href="#三-内置工具对象" class="headerlink" title="三. 内置工具对象"></a>三. 内置工具对象</h2><h3 id="1-Execution-Info"><a href="#1-Execution-Info" class="headerlink" title="1. Execution Info"></a>1. Execution Info</h3><p><code>#execInfo</code> ：提供有关在Thymeleaf 内部正在处理的模板的有用信息标准表达式。</p>
<p>由 <code>org.thymeleaf.expression.ExecutionInfo</code> 提供的API</p>
<pre><code>/*
* Return the name and mode of the &#39;leaf&#39; template. This means the template
* from where the events being processed were parsed. So if this piece of
* code is not in the root template &quot;A&quot; but on a fragment being inserted
* into &quot;A&quot; from another template called &quot;B&quot;, this will return &quot;B&quot; as a
* name, and B&#39;s mode as template mode.
*/
${#execInfo.templateName}
${#execInfo.templateMode}
/*
* Return the name and mode of the &#39;root&#39; template. This means the template
* that the template engine was originally asked to process. So if this
* piece of code is not in the root template &quot;A&quot; but on a fragment being
* inserted into &quot;A&quot; from another template called &quot;B&quot;, this will still
* return &quot;A&quot; and A&#39;s template mode.
*/
${#execInfo.processedTemplateName}
${#execInfo.processedTemplateMode}
/*
* Return the stacks (actually, List&lt;String&gt; or List&lt;TemplateMode&gt;) of
* templates being processed. The first element will be the
* &#39;processedTemplate&#39; (the root one), the last one will be the &#39;leaf&#39;
* template, and in the middle all the fragments inserted in nested
* manner to reach the leaf from the root will appear.
*/
${#execInfo.templateNames}
${#execInfo.templateModes}
/*
* Return the stack of templates being processed similarly (and in the
* same order) to &#39;templateNames&#39; and &#39;templateModes&#39;, but returning
* a List&lt;TemplateData&gt; with the full template metadata.
*/
${#execInfo.templateStack}</code></pre><h3 id="2-Messages"><a href="#2-Messages" class="headerlink" title="2. Messages"></a>2. Messages</h3><p><code>#message</code> ：在变量表达式中获取外部化消息的工具方法。也是使用 <code>#{ }</code> 语法。</p>
<p>由 <code>org.thymeleaf.expression.Messages</code> 提供API。    </p>
<pre><code>/*
* Obtain externalized messages. Can receive a single key, a key plus arguments,
* or an array/list/set of keys (in which case it will return an array/list/set of
* externalized messages).
* If a message is not found, a default message (like &#39;??msgKey??&#39;) is returned.
*/
${#messages.msg(&#39;msgKey&#39;)}
${#messages.msg(&#39;msgKey&#39;, param1)}
${#messages.msg(&#39;msgKey&#39;, param1, param2)}
${#messages.msg(&#39;msgKey&#39;, param1, param2, param3)}
${#messages.msgWithParams(&#39;msgKey&#39;, new Object[] {param1, param2, param3, param4})}
${#messages.arrayMsg(messageKeyArray)}
${#messages.listMsg(messageKeyList)}
${#messages.setMsg(messageKeySet)}
/*
* Obtain externalized messages or null. Null is returned instead of a default
* message if a message for the specified key is not found.
*/
${#messages.msgOrNull(&#39;msgKey&#39;)}
${#messages.msgOrNull(&#39;msgKey&#39;, param1)}
${#messages.msgOrNull(&#39;msgKey&#39;, param1, param2)}
${#messages.msgOrNull(&#39;msgKey&#39;, param1, param2, param3)}
${#messages.msgOrNullWithParams(&#39;msgKey&#39;, new Object[] {param1, param2, param3, param4})}
${#messages.arrayMsgOrNull(messageKeyArray)}
${#messages.listMsgOrNull(messageKeyList)}
${#messages.setMsgOrNull(messageKeySet)}</code></pre><h3 id="3-URI-URL"><a href="#3-URI-URL" class="headerlink" title="3. URI/URL"></a>3. URI/URL</h3><p><code>#uris</code>：用于在 Thymeleaf 标准表达式中进行URI/URL操作的工具对象。</p>
<p>比如:URL参数中有特殊字符可以进行转义或取消转义，中文乱码可以进行编码转码。</p>
<p>由 <code>org.thymeleaf.expression.Uris</code> 提供API。</p>
<pre><code>/*
* Escape/Unescape as a URI/URL path
*/
${#uris.escapePath(uri)}
${#uris.escapePath(uri, encoding)}
${#uris.unescapePath(uri)}
${#uris.unescapePath(uri, encoding)}
/*
* Escape/Unescape as a URI/URL path segment (between &#39;/&#39; symbols)
*/
${#uris.escapePathSegment(uri)}
${#uris.escapePathSegment(uri, encoding)}
${#uris.unescapePathSegment(uri)}
${#uris.unescapePathSegment(uri, encoding)}
/*
* Escape/Unescape as a Fragment Identifier (#frag)
*/
${#uris.escapeFragmentId(uri)}
${#uris.escapeFragmentId(uri, encoding)}
${#uris.unescapeFragmentId(uri)}
${#uris.unescapeFragmentId(uri, encoding)}
/*
* Escape/Unescape as a Query Parameter (?var=value)
*/
${#uris.escapeQueryParam(uri)}
${#uris.escapeQueryParam(uri, encoding)}
${#uris.unescapeQueryParam(uri)}
${#uris.unescapeQueryParam(uri, encoding)}</code></pre><h3 id="4-Conversions"><a href="#4-Conversions" class="headerlink" title="4. Conversions"></a>4. Conversions</h3><p><code>#conversions</code>：允许在模板的任何点执行转换服务。</p>
<p>由 <code>org.thymeleaf.expression.Conversions</code> 提供API。</p>
<pre><code>/*
* Execute the desired conversion of the &#39;object&#39; value into the
* specified class.
*/
${#conversions.convert(object, &#39;java.util.TimeZone&#39;)}
${#conversions.convert(object, targetClass)}</code></pre><h3 id="5-Dates"><a href="#5-Dates" class="headerlink" title="5. Dates"></a>5. Dates</h3><p><code>#dates</code> :  其实就和 <code>java.util.Date</code>对象的工具方法类似。</p>
<p>由 <code>org.thymeleaf.expression.Dates</code> 提供API。</p>
<pre><code>/*
* 格式化成 标准区域格式时间
* 支持 arrays, lists or sets 操作
*/
${#dates.format(date)}
${#dates.arrayFormat(datesArray)}
${#dates.listFormat(datesList)}
${#dates.setFormat(datesSet)}
/*
* 格式化成  ISO8601时间
* 支持 arrays, lists or sets 操作
*/
${#dates.formatISO(date)}
${#dates.arrayFormatISO(datesArray)}
${#dates.listFormatISO(datesList)}
${#dates.setFormatISO(datesSet)}
/*
* 格式化日期时间成自定义的格式
* 支持 arrays, lists or sets 操作
*/
${#dates.format(date, &#39;dd/MMM/yyyy HH:mm&#39;)}
${#dates.arrayFormat(datesArray, &#39;dd/MMM/yyyy HH:mm&#39;)}
${#dates.listFormat(datesList, &#39;dd/MMM/yyyy HH:mm&#39;)}
${#dates.setFormat(datesSet, &#39;dd/MMM/yyyy HH:mm&#39;)}
/*
* 获取日期属性
* 支持 arrays, lists or sets 操作
*/
${#dates.day(date)} // also arrayDay(...), listDay(...), etc.
${#dates.month(date)} // also arrayMonth(...), listMonth(...), etc.
${#dates.monthName(date)} // also arrayMonthName(...), listMonthName(...), etc.
${#dates.monthNameShort(date)} // also arrayMonthNameShort(...), listMonthNameShort(...), etc.
${#dates.year(date)} // also arrayYear(...), listYear(...), etc.
${#dates.dayOfWeek(date)} // also arrayDayOfWeek(...), listDayOfWeek(...), etc.
${#dates.dayOfWeekName(date)} // also arrayDayOfWeekName(...), listDayOfWeekName(...), etc.
${#dates.dayOfWeekNameShort(date)} // also arrayDayOfWeekNameShort(...), listDayOfWeekNameShort(...), etc.
${#dates.hour(date)} // also arrayHour(...), listHour(...), etc.
${#dates.minute(date)} // also arrayMinute(...), listMinute(...), etc.
${#dates.second(date)} // also arraySecond(...), listSecond(...), etc.
${#dates.millisecond(date)} // also arrayMillisecond(...), listMillisecond(...), etc.
/*
* 使用自带组件创建日期 (java.util.Date) 对象
*/
${#dates.create(year,month,day)}
${#dates.create(year,month,day,hour,minute)}
${#dates.create(year,month,day,hour,minute,second)}
${#dates.create(year,month,day,hour,minute,second,millisecond)}
/*
* 使用自带组件创建当前日期或时间 (java.util.Date)
*/
${#dates.createNow()}
${#dates.createNowForTimeZone()}
/*
* 使用自带组件创建当前日期 (java.util.Date)，时间是00:00
*/
${#dates.createToday()}
${#dates.createTodayForTimeZone()}</code></pre><h3 id="6-Calendar"><a href="#6-Calendar" class="headerlink" title="6. Calendar"></a>6. Calendar</h3><p><code>#calendar</code> ：类似 <code>#dates</code> ，但是是 <code>java.util.Calendar</code> 对象。</p>
<p>由 <code>class org.thymeleaf.expression.Calendars</code> 提供API。</p>
<pre><code>/*
* Format calendar with the standard locale format
* Also works with arrays, lists or sets
*/
${#calendars.format(cal)}
${#calendars.arrayFormat(calArray)}
${#calendars.listFormat(calList)}
${#calendars.setFormat(calSet)}
/*
* Format calendar with the ISO8601 format
* Also works with arrays, lists or sets
*/
${#calendars.formatISO(cal)}
${#calendars.arrayFormatISO(calArray)}
${#calendars.listFormatISO(calList)}
${#calendars.setFormatISO(calSet)}
/*
* Format calendar with the specified pattern
* Also works with arrays, lists or sets
*/
${#calendars.format(cal, &#39;dd/MMM/yyyy HH:mm&#39;)}
${#calendars.arrayFormat(calArray, &#39;dd/MMM/yyyy HH:mm&#39;)}
${#calendars.listFormat(calList, &#39;dd/MMM/yyyy HH:mm&#39;)}
${#calendars.setFormat(calSet, &#39;dd/MMM/yyyy HH:mm&#39;)}
/*
* 获取日历属性
* Also works with arrays, lists or sets
*/
${#calendars.day(date)} // also arrayDay(...), listDay(...), etc.
${#calendars.month(date)} // also arrayMonth(...), listMonth(...), etc.
${#calendars.monthName(date)} // also arrayMonthName(...), listMonthName(...), etc.
${#calendars.monthNameShort(date)} // also arrayMonthNameShort(...), listMonthNameShort(...), etc.
${#calendars.year(date)} // also arrayYear(...), listYear(...), etc.
${#calendars.dayOfWeek(date)} // also arrayDayOfWeek(...), listDayOfWeek(...), etc.
${#calendars.dayOfWeekName(date)} // also arrayDayOfWeekName(...), listDayOfWeekName(...), etc.
${#calendars.dayOfWeekNameShort(date)} // also arrayDayOfWeekNameShort(...), listDayOfWeekNameShort(...), etc.
${#calendars.hour(date)} // also arrayHour(...), listHour(...), etc.
${#calendars.minute(date)} // also arrayMinute(...), listMinute(...), etc.
${#calendars.second(date)} // also arraySecond(...), listSecond(...), etc.
${#calendars.millisecond(date)} // also arrayMillisecond(...), listMillisecond(...), etc.
/*
* Create calendar (java.util.Calendar) objects from its components
*/
${#calendars.create(year,month,day)}
${#calendars.create(year,month,day)}
${#calendars.create(year,month,day,hour,minute)}
${#calendars.create(year,month,day,hour,minute,second)}
${#calendars.create(year,month,day,hour,minute,second,millisecond)}
${#calendars.createForTimeZone(year,month,day,timeZone)}
${#calendars.createForTimeZone(year,month,day,hour,minute,timeZone)}
${#calendars.createForTimeZone(year,month,day,hour,minute,second,timeZone)}
${#calendars.createForTimeZone(year,month,day,hour,minute,second,millisecond,timeZone)}
/*
* 创建当前日期和时间的日历对象(java.util.Calendar) 
*/
${#calendars.createNow()}
${#calendars.createNowForTimeZone()}
/*
*   创建当前日期 (time set to 00:00)的日历对象(java.util.Calendar) 
*/
${#calendars.createToday()}
${#calendars.createTodayForTimeZone()}</code></pre><h3 id="7-Numbers"><a href="#7-Numbers" class="headerlink" title="7. Numbers"></a>7. Numbers</h3><p><code>#numbers</code> ：数字对象的工具对象方法。</p>
<p><code>org.thymeleaf.expression.Numbers</code> 提供API。</p>
<p> integer 类型格式化</p>
<pre><code>/*
* Set minimum integer digits.
* Also works with arrays, lists or sets
*/
${#numbers.formatInteger(num,3)}
${#numbers.arrayFormatInteger(numArray,3)}
${#numbers.listFormatInteger(numList,3)}
${#numbers.setFormatInteger(numSet,3)}
/*
* Set minimum integer digits and thousands separator:
* &#39;POINT&#39;, &#39;COMMA&#39;, &#39;WHITESPACE&#39;, &#39;NONE&#39; or &#39;DEFAULT&#39; (by locale).
* Also works with arrays, lists or sets
*/
${#numbers.formatInteger(num,3,&#39;POINT&#39;)}
${#numbers.arrayFormatInteger(numArray,3,&#39;POINT&#39;)}
${#numbers.listFormatInteger(numList,3,&#39;POINT&#39;)}
${#numbers.setFormatInteger(numSet,3,&#39;POINT&#39;)}</code></pre><p>decimal   类型格式化</p>
<pre><code>/*
* Set minimum integer digits and (exact) decimal digits.
* Also works with arrays, lists or sets
*/
${#numbers.formatDecimal(num,3,2)}
${#numbers.arrayFormatDecimal(numArray,3,2)}
${#numbers.listFormatDecimal(numList,3,2)}
${#numbers.setFormatDecimal(numSet,3,2)}
/*
* Set minimum integer digits and (exact) decimal digits, and also decimal separator.
* Also works with arrays, lists or sets
*/
${#numbers.formatDecimal(num,3,2,&#39;COMMA&#39;)}
${#numbers.arrayFormatDecimal(numArray,3,2,&#39;COMMA&#39;)}
${#numbers.listFormatDecimal(numList,3,2,&#39;COMMA&#39;)}
${#numbers.setFormatDecimal(numSet,3,2,&#39;COMMA&#39;)}
/*
* Set minimum integer digits and (exact) decimal digits, and also thousands and
* decimal separator.
* Also works with arrays, lists or sets
*/
${#numbers.formatDecimal(num,3,&#39;POINT&#39;,2,&#39;COMMA&#39;)}
${#numbers.arrayFormatDecimal(numArray,3,&#39;POINT&#39;,2,&#39;COMMA&#39;)}
${#numbers.listFormatDecimal(numList,3,&#39;POINT&#39;,2,&#39;COMMA&#39;)}
${#numbers.setFormatDecimal(numSet,3,&#39;POINT&#39;,2,&#39;COMMA&#39;)}</code></pre><p>货币格式化：</p>
<pre><code>${#numbers.formatCurrency(num)}
${#numbers.arrayFormatCurrency(numArray)}
${#numbers.listFormatCurrency(numList)}
${#numbers.setFormatCurrency(numSet)}</code></pre><p>百分百格式化：</p>
<pre><code>${#numbers.formatPercent(num)}
${#numbers.arrayFormatPercent(numArray)}
${#numbers.listFormatPercent(numList)}
${#numbers.setFormatPercent(numSet)}</code></pre><p>设置最小整数位数和（精确）小数位数。</p>
<pre><code>${#numbers.formatPercent(num, 3, 2)}
${#numbers.arrayFormatPercent(numArray, 3, 2)}
${#numbers.listFormatPercent(numList, 3, 2)}
${#numbers.setFormatPercent(numSet, 3, 2)}</code></pre><p>创建一个从x到y整数序列（数组）</p>
<pre><code>${#numbers.sequence(from,to)}
${#numbers.sequence(from,to,step)}</code></pre><h3 id="8-Strings"><a href="#8-Strings" class="headerlink" title="8. Strings"></a>8. Strings</h3><p><code>#strings</code> : 字符串对象实用工具对象。</p>
<p>由 <code>org.thymeleaf.expression.Strings</code> 提供API。</p>
<p>Null安全的转字符串：</p>
<pre><code>${#strings.toString(obj)} // also array*, list* and set*</code></pre><p>判断是否为空</p>
<pre><code>/*
* Check whether a String is empty (or null). Performs a trim() operation before check
* Also works with arrays, lists or sets
*/
${#strings.isEmpty(name)}
${#strings.arrayIsEmpty(nameArr)}
${#strings.listIsEmpty(nameList)}
${#strings.setIsEmpty(nameSet)}</code></pre><p>带默认值的判空</p>
<pre><code>/*
* Perform an &#39;isEmpty()&#39; check on a string and return it if false, defaulting to
* another specified string if true.
* Also works with arrays, lists or sets
*/
${#strings.defaultString(text,default)}
${#strings.arrayDefaultString(textArr,default)}
${#strings.listDefaultString(textList,default)}
${#strings.setDefaultString(textSet,default)}</code></pre><p>判断片段是否包含指定字符串</p>
<pre><code>/*
* Check whether a fragment is contained in a String
* Also works with arrays, lists or sets
*/
${#strings.contains(name,&#39;ez&#39;)} // also array*, list* and set*
${#strings.containsIgnoreCase(name,&#39;ez&#39;)} // also array*, list* and set*</code></pre><p>判断以某字符串开始或结束：</p>
<pre><code>/*
* Check whether a String starts or ends with a fragment
* Also works with arrays, lists or sets
*/
${#strings.startsWith(name,&#39;Don&#39;)} // also array*, list* and set*
${#strings.endsWith(name,endingFragment)} // also array*, list* and set*</code></pre><p>字符串截取相关：</p>
<pre><code>/*
* Substring-related operations
* Also works with arrays, lists or sets
*/
${#strings.indexOf(name,frag)} // also array*, list* and set*
${#strings.substring(name,3,5)} // also array*, list* and set*
${#strings.substringAfter(name,prefix)} // also array*, list* and set*
${#strings.substringBefore(name,suffix)} // also array*, list* and set*
${#strings.replace(name,&#39;las&#39;,&#39;ler&#39;)} // also array*, list* and set*</code></pre><p>字符串追加：</p>
<pre><code>/*
* Append and prepend
* Also works with arrays, lists or sets
*/
${#strings.prepend(str,prefix)} // also array*, list* and set*
${#strings.append(str,suffix)} // also array*, list* and set*</code></pre><p>字符串大小写转换</p>
<pre><code>/*
* Change case
* Also works with arrays, lists or sets
*/
${#strings.toUpperCase(name)} // also array*, list* and set*
${#strings.toLowerCase(name)} // also array*, list* and set*</code></pre><p>字符串分割或连接</p>
<pre><code>/*
* Split and join
*/
${#strings.arrayJoin(namesArray,&#39;,&#39;)}
${#strings.listJoin(namesList,&#39;,&#39;)}
${#strings.setJoin(namesSet,&#39;,&#39;)}
${#strings.arraySplit(namesStr,&#39;,&#39;)} // returns String[]
${#strings.listSplit(namesStr,&#39;,&#39;)} // returns List&lt;String&gt;
${#strings.setSplit(namesStr,&#39;,&#39;)} // returns Set&lt;String&gt;</code></pre><p>去空格：</p>
<pre><code>/*
* Trim
* Also works with arrays, lists or sets
*/
${#strings.trim(str)} // also array*, list* and set*</code></pre><p>计算字符串长度：</p>
<pre><code>/*
* Compute length
* Also works with arrays, lists or sets
*/
${#strings.length(str)} // also array*, list* and set*</code></pre><p>缩写文本使其最大大小为n。如果文本更大，它将被剪辑并以“…”结尾</p>
<pre><code>${#strings.abbreviate(str,10)} // also array*, list* and set*</code></pre><p>将字符串第一个字符转换为大写或小写</p>
<pre><code>${#strings.capitalize(str)} // also array*, list* and set*
${#strings.unCapitalize(str)} // also array*, list* and set*</code></pre><p>将字符串中每个单词的第一个字符转换为大写</p>
<pre><code>${#strings.capitalizeWords(str)} // also array*, list* and set*
${#strings.capitalizeWords(str,delimiters)} // also array*, list* and set*</code></pre><p>字符串转义</p>
<pre><code>${#strings.escapeXml(str)} // also array*, list* and set*
${#strings.escapeJava(str)} // also array*, list* and set*
${#strings.escapeJavaScript(str)} // also array*, list* and set*
Page 98 of 106${#strings.escapeJavaScript(str)} // also array*, list* and set*
${#strings.unescapeJava(str)} // also array*, list* and set*
${#strings.unescapeJavaScript(str)} // also array*, list* and set*</code></pre><p>Null-Safe 的比较和串联 </p>
<pre><code>${#strings.equals(first, second)}
${#strings.equalsIgnoreCase(first, second)}
${#strings.concat(values...)}
${#strings.concatReplaceNulls(nullValue, values...)}</code></pre><p>随机数</p>
<pre><code>${#strings.randomAlphanumeric(count)}</code></pre><h3 id="9-Objects"><a href="#9-Objects" class="headerlink" title="9.Objects"></a>9.Objects</h3><p><code>#objects</code> ：对象的常用工具方法。</p>
<p><code>org.thymeleaf.expression.Objects</code> 提供API。</p>
<pre><code>/*
* Return obj if it is not null, and default otherwise
* Also works with arrays, lists or sets
*/
${#objects.nullSafe(obj,default)}
${#objects.arrayNullSafe(objArray,default)}
${#objects.listNullSafe(objList,default)}
${#objects.setNullSafe(objSet,default)}</code></pre><h3 id="10-Booleans"><a href="#10-Booleans" class="headerlink" title="10. Booleans"></a>10. Booleans</h3><p><code>#booleans</code> ：布尔运算的实用方法。</p>
<p><code>org.thymeleaf.expression.Bool</code> 提供API。</p>
<pre><code>/*
* Evaluate a condition in the same way that it would be evaluated in a th:if tag
* (see conditional evaluation chapter afterwards).
* Also works with arrays, lists or sets
*/
${#bools.isTrue(obj)}
${#bools.arrayIsTrue(objArray)}
${#bools.listIsTrue(objList)}
${#bools.setIsTrue(objSet)}
/*
* Evaluate with negation
* Also works with arrays, lists or sets
*/
${#bools.isFalse(cond)}
${#bools.arrayIsFalse(condArray)}
${#bools.listIsFalse(condList)}
${#bools.setIsFalse(condSet)}
/*
* Evaluate and apply AND operator
* Receive an array, a list or a set as parameter
*/
${#bools.arrayAnd(condArray)}
${#bools.listAnd(condList)}
${#bools.setAnd(condSet)}
/*
* Evaluate and apply OR operator
* Receive an array, a list or a set as parameter
*/
${#bools.arrayOr(condArray)}
${#bools.listOr(condList)}
${#bools.setOr(condSet)}Arrays
</code></pre><h3 id="11-Arrays"><a href="#11-Arrays" class="headerlink" title="11. Arrays"></a>11. Arrays</h3><p><code>#arrays</code> ： 数组工具对象。</p>
<p><code>org.thymeleaf.expression.Arrays</code>  提供API。</p>
<pre><code>/*
* Converts to array, trying to infer array component class.
* Note that if resulting array is empty, or if the elements
* of the target object are not all of the same class,
* this method will return Object[].
*/
${#arrays.toArray(object)}
/*
* Convert to arrays of the specified component class.
*/
${#arrays.toStringArray(object)}
${#arrays.toIntegerArray(object)}
${#arrays.toLongArray(object)}
${#arrays.toDoubleArray(object)}
${#arrays.toFloatArray(object)}
${#arrays.toBooleanArray(object)}
/*
* Compute length
*/
${#arrays.length(array)}
/*
* Check whether array is empty
*/
${#arrays.isEmpty(array)}
/*
* Check if element or elements are contained in array
*/
${#arrays.contains(array, element)}
${#arrays.containsAll(array, elements)}</code></pre><h3 id="12-Lists"><a href="#12-Lists" class="headerlink" title="12. Lists"></a>12. Lists</h3><p><code>#Lists</code> ： List 集合工具对象。</p>
<p><code>org.thymeleaf.expression.Lists</code>  提供API。</p>
<pre><code>/*
* Converts to list
*/
${#lists.toList(object)}
/*
* Compute size
*/
${#lists.size(list)}
/*
* Check whether list is empty
*/
${#lists.isEmpty(list)}
/*
* Check if element or elements are contained in list
*/
${#lists.contains(list, element)}
${#lists.containsAll(list, elements)}
/*
* Sort a copy of the given list. The members of the list must implement
* comparable or you must define a comparator.
*/
${#lists.sort(list)}
${#lists.sort(list, comparator)}</code></pre><h3 id="13-Sets"><a href="#13-Sets" class="headerlink" title="13. Sets"></a>13. Sets</h3><p><code>#Sets</code> ： Sets 集合工具对象。</p>
<p><code>org.thymeleaf.expression.Sets</code>  提供API。</p>
<pre><code>/*
* Converts to set
*/
${#sets.toSet(object)}
/*
* Compute size
*/
${#sets.size(set)}
/*
* Check whether set is empty
*/
${#sets.isEmpty(set)}
/*
* Check if element or elements are contained in set
*/
${#sets.contains(set, element)}
${#sets.containsAll(set, elements)}</code></pre><h3 id="14-Maps"><a href="#14-Maps" class="headerlink" title="14. Maps"></a>14. Maps</h3><p><code>#Maps</code> ： Maps 集合工具对象。</p>
<p><code>org.thymeleaf.expression.Maps</code>  提供API。</p>
<pre><code>/*
* Compute size
*/
${#maps.size(map)}
/*
* Check whether map is empty
*/
${#maps.isEmpty(map)}
/*
* Check if key/s or value/s are contained in maps
*/
${#maps.containsKey(map, key)}
${#maps.containsAllKeys(map, keys)}
${#maps.containsValue(map, value)}
${#maps.containsAllValues(map, value)}</code></pre><h3 id="15-Aggregates"><a href="#15-Aggregates" class="headerlink" title="15. Aggregates"></a>15. Aggregates</h3><p><code>#Aggregates</code> ： 在数组或集合上创建聚合的实用方法。</p>
<p><code>org.thymeleaf.expression.Aggregates</code>  提供聚合API。</p>
<pre><code>/*
* Compute sum. Returns null if array or collection is empty
*/
${#aggregates.sum(array)}
${#aggregates.sum(collection)}
/*
* Compute average. Returns null if array or collection is empty
*/
${#aggregates.avg(array)}
${#aggregates.avg(collection)}</code></pre><h3 id="16-Ids"><a href="#16-Ids" class="headerlink" title="16. Ids"></a>16. Ids</h3><p><code>#Ids</code>：处理可能重复的id属性的实用方法（例如，作为迭代的结果）。</p>
<p><code>org.thymeleaf.expression.Aggregates.Ids</code>  提供API。</p>
<pre><code>/*
* Normally used in th:id attributes, for appending a counter to the id attribute value
* so that it remains unique even when involved in an iteration process.
*/
${#ids.seq(&#39;someId&#39;)}
/*
* Normally used in th:for attributes in &lt;label&gt; tags, so that these labels can refer to Ids
* generated by means if the #ids.seq(...) function.
* *
Depending on whether the &lt;label&gt; goes before or after the element with the #ids.seq(...)
* function, the &quot;next&quot; (label goes before &quot;seq&quot;) or the &quot;prev&quot; function (label goes after
* &quot;seq&quot;) function should be called.
*/
${#ids.next(&#39;someId&#39;)}
${#ids.prev(&#39;someId&#39;)}</code></pre><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>Thymeleaf</tag>
      </tags>
  </entry>
  <entry>
    <title>Fontawesome 图标样例</title>
    <url>/posts/ff8ce404.html</url>
    <content><![CDATA[<h2 id="Fontawesome-图标样例"><a href="#Fontawesome-图标样例" class="headerlink" title="Fontawesome 图标样例"></a>Fontawesome 图标样例</h2><p>图标库官网：<a href="https://fontawesome.dashgame.com/" target="_blank" rel="noopener">https://fontawesome.dashgame.com/</a></p>
<p>如果不想做多余工作，只想简单的在 matery 主题换图标，那么以下可以显示出的都是可以更换的。</p>
<h2 id="图标样例"><a href="#图标样例" class="headerlink" title="图标样例"></a>图标样例</h2><div class="container" >
    <div class="row fontawesome-icon-list">
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-500px" ></i> fa fa-500px</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-accessible-icon" ></i> fa fa-accessible-icon</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-accusoft" ></i> fa fa-accusoft</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-acquisitions-incorporated" ></i> fa fa-acquisitions-incorporated</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-ad" ></i> fa fa-ad</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-address-book" ></i> fa fa-address-book</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-address-card" ></i> fa fa-address-card</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-adjust" ></i> fa fa-adjust</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-adn" ></i> fa fa-adn</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-adobe" ></i> fa fa-adobe</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-adversal" ></i> fa fa-adversal</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-affiliatetheme" ></i> fa fa-affiliatetheme</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-air-freshener" ></i> fa fa-air-freshener</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-airbnb" ></i> fa fa-airbnb</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-algolia" ></i> fa fa-algolia</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-align-center" ></i> fa fa-align-center</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-align-justify" ></i> fa fa-align-justify</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-align-left" ></i> fa fa-align-left</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-align-right" ></i> fa fa-align-right</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-alipay" ></i> fa fa-alipay</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-allergies" ></i> fa fa-allergies</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-amazon" ></i> fa fa-amazon</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-amazon-pay" ></i> fa fa-amazon-pay</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-ambulance" ></i> fa fa-ambulance</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-american-sign-language-interpreting" ></i> fa fa-american-sign-language-interpreting</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-amilia" ></i> fa fa-amilia</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-anchor" ></i> fa fa-anchor</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-android" ></i> fa fa-android</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-angellist" ></i> fa fa-angellist</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-angle-double-down" ></i> fa fa-angle-double-down</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-angle-double-left" ></i> fa fa-angle-double-left</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-angle-double-right" ></i> fa fa-angle-double-right</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-angle-double-up" ></i> fa fa-angle-double-up</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-angle-down" ></i> fa fa-angle-down</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-angle-left" ></i> fa fa-angle-left</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-angle-right" ></i> fa fa-angle-right</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-angle-up" ></i> fa fa-angle-up</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-angry" ></i> fa fa-angry</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-angrycreative" ></i> fa fa-angrycreative</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-angular" ></i> fa fa-angular</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-ankh" ></i> fa fa-ankh</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-app-store" ></i> fa fa-app-store</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-app-store-ios" ></i> fa fa-app-store-ios</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-apper" ></i> fa fa-apper</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-apple" ></i> fa fa-apple</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-apple-alt" ></i> fa fa-apple-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-apple-pay" ></i> fa fa-apple-pay</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-archive" ></i> fa fa-archive</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-archway" ></i> fa fa-archway</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-arrow-alt-circle-down" ></i> fa fa-arrow-alt-circle-down</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-arrow-alt-circle-left" ></i> fa fa-arrow-alt-circle-left</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-arrow-alt-circle-right" ></i> fa fa-arrow-alt-circle-right</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-arrow-alt-circle-up" ></i> fa fa-arrow-alt-circle-up</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-arrow-circle-down" ></i> fa fa-arrow-circle-down</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-arrow-circle-left" ></i> fa fa-arrow-circle-left</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-arrow-circle-right" ></i> fa fa-arrow-circle-right</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-arrow-circle-up" ></i> fa fa-arrow-circle-up</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-arrow-down" ></i> fa fa-arrow-down</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-arrow-left" ></i> fa fa-arrow-left</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-arrow-right" ></i> fa fa-arrow-right</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-arrow-up" ></i> fa fa-arrow-up</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-arrows-alt" ></i> fa fa-arrows-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-arrows-alt-h" ></i> fa fa-arrows-alt-h</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-arrows-alt-v" ></i> fa fa-arrows-alt-v</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-artstation" ></i> fa fa-artstation</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-assistive-listening-systems" ></i> fa fa-assistive-listening-systems</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-asterisk" ></i> fa fa-asterisk</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-asymmetrik" ></i> fa fa-asymmetrik</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-at" ></i> fa fa-at</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-atlas" ></i> fa fa-atlas</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-atlassian" ></i> fa fa-atlassian</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-atom" ></i> fa fa-atom</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-audible" ></i> fa fa-audible</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-audio-description" ></i> fa fa-audio-description</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-autoprefixer" ></i> fa fa-autoprefixer</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-avianex" ></i> fa fa-avianex</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-aviato" ></i> fa fa-aviato</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-award" ></i> fa fa-award</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-aws" ></i> fa fa-aws</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-baby" ></i> fa fa-baby</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-baby-carriage" ></i> fa fa-baby-carriage</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-backspace" ></i> fa fa-backspace</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-backward" ></i> fa fa-backward</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-bacon" ></i> fa fa-bacon</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-balance-scale" ></i> fa fa-balance-scale</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-balance-scale-left" ></i> fa fa-balance-scale-left</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-balance-scale-right" ></i> fa fa-balance-scale-right</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-ban" ></i> fa fa-ban</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-band-aid" ></i> fa fa-band-aid</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-bandcamp" ></i> fa fa-bandcamp</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-barcode" ></i> fa fa-barcode</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-bars" ></i> fa fa-bars</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-baseball-ball" ></i> fa fa-baseball-ball</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-basketball-ball" ></i> fa fa-basketball-ball</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-bath" ></i> fa fa-bath</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-battery-empty" ></i> fa fa-battery-empty</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-battery-full" ></i> fa fa-battery-full</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-battery-half" ></i> fa fa-battery-half</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-battery-quarter" ></i> fa fa-battery-quarter</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-battery-three-quarters" ></i> fa fa-battery-three-quarters</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-battle-net" ></i> fa fa-battle-net</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-bed" ></i> fa fa-bed</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-beer" ></i> fa fa-beer</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-behance" ></i> fa fa-behance</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-behance-square" ></i> fa fa-behance-square</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-bell" ></i> fa fa-bell</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-bell-slash" ></i> fa fa-bell-slash</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-bezier-curve" ></i> fa fa-bezier-curve</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-bible" ></i> fa fa-bible</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-bicycle" ></i> fa fa-bicycle</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-biking" ></i> fa fa-biking</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-bimobject" ></i> fa fa-bimobject</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-binoculars" ></i> fa fa-binoculars</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-biohazard" ></i> fa fa-biohazard</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-birthday-cake" ></i> fa fa-birthday-cake</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-bitbucket" ></i> fa fa-bitbucket</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-bitcoin" ></i> fa fa-bitcoin</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-bity" ></i> fa fa-bity</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-black-tie" ></i> fa fa-black-tie</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-blackberry" ></i> fa fa-blackberry</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-blender" ></i> fa fa-blender</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-blender-phone" ></i> fa fa-blender-phone</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-blind" ></i> fa fa-blind</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-blog" ></i> fa fa-blog</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-blogger" ></i> fa fa-blogger</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-blogger-b" ></i> fa fa-blogger-b</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-bluetooth" ></i> fa fa-bluetooth</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-bluetooth-b" ></i> fa fa-bluetooth-b</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-bold" ></i> fa fa-bold</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-bolt" ></i> fa fa-bolt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-bomb" ></i> fa fa-bomb</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-bone" ></i> fa fa-bone</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-bong" ></i> fa fa-bong</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-book" ></i> fa fa-book</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-book-dead" ></i> fa fa-book-dead</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-book-medical" ></i> fa fa-book-medical</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-book-open" ></i> fa fa-book-open</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-book-reader" ></i> fa fa-book-reader</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-bookmark" ></i> fa fa-bookmark</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-bootstrap" ></i> fa fa-bootstrap</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-border-all" ></i> fa fa-border-all</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-border-none" ></i> fa fa-border-none</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-border-style" ></i> fa fa-border-style</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-bowling-ball" ></i> fa fa-bowling-ball</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-box" ></i> fa fa-box</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-box-open" ></i> fa fa-box-open</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-boxes" ></i> fa fa-boxes</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-braille" ></i> fa fa-braille</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-brain" ></i> fa fa-brain</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-bread-slice" ></i> fa fa-bread-slice</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-briefcase" ></i> fa fa-briefcase</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-briefcase-medical" ></i> fa fa-briefcase-medical</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-broadcast-tower" ></i> fa fa-broadcast-tower</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-broom" ></i> fa fa-broom</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-brush" ></i> fa fa-brush</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-btc" ></i> fa fa-btc</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-buffer" ></i> fa fa-buffer</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-bug" ></i> fa fa-bug</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-building" ></i> fa fa-building</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-bullhorn" ></i> fa fa-bullhorn</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-bullseye" ></i> fa fa-bullseye</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-burn" ></i> fa fa-burn</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-buromobelexperte" ></i> fa fa-buromobelexperte</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-bus" ></i> fa fa-bus</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-bus-alt" ></i> fa fa-bus-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-business-time" ></i> fa fa-business-time</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-buy-n-large" ></i> fa fa-buy-n-large</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-buysellads" ></i> fa fa-buysellads</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-calculator" ></i> fa fa-calculator</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-calendar" ></i> fa fa-calendar</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-calendar-alt" ></i> fa fa-calendar-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-calendar-check" ></i> fa fa-calendar-check</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-calendar-day" ></i> fa fa-calendar-day</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-calendar-minus" ></i> fa fa-calendar-minus</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-calendar-plus" ></i> fa fa-calendar-plus</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-calendar-times" ></i> fa fa-calendar-times</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-calendar-week" ></i> fa fa-calendar-week</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-camera" ></i> fa fa-camera</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-camera-retro" ></i> fa fa-camera-retro</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-campground" ></i> fa fa-campground</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-canadian-maple-leaf" ></i> fa fa-canadian-maple-leaf</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-candy-cane" ></i> fa fa-candy-cane</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-cannabis" ></i> fa fa-cannabis</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-capsules" ></i> fa fa-capsules</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-car" ></i> fa fa-car</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-car-alt" ></i> fa fa-car-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-car-battery" ></i> fa fa-car-battery</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-car-crash" ></i> fa fa-car-crash</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-car-side" ></i> fa fa-car-side</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-caret-down" ></i> fa fa-caret-down</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-caret-left" ></i> fa fa-caret-left</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-caret-right" ></i> fa fa-caret-right</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-caret-square-down" ></i> fa fa-caret-square-down</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-caret-square-left" ></i> fa fa-caret-square-left</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-caret-square-right" ></i> fa fa-caret-square-right</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-caret-square-up" ></i> fa fa-caret-square-up</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-caret-up" ></i> fa fa-caret-up</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-carrot" ></i> fa fa-carrot</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-cart-arrow-down" ></i> fa fa-cart-arrow-down</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-cart-plus" ></i> fa fa-cart-plus</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-cash-register" ></i> fa fa-cash-register</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-cat" ></i> fa fa-cat</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-cc-amazon-pay" ></i> fa fa-cc-amazon-pay</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-cc-amex" ></i> fa fa-cc-amex</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-cc-apple-pay" ></i> fa fa-cc-apple-pay</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-cc-diners-club" ></i> fa fa-cc-diners-club</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-cc-discover" ></i> fa fa-cc-discover</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-cc-jcb" ></i> fa fa-cc-jcb</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-cc-mastercard" ></i> fa fa-cc-mastercard</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-cc-paypal" ></i> fa fa-cc-paypal</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-cc-stripe" ></i> fa fa-cc-stripe</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-cc-visa" ></i> fa fa-cc-visa</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-centercode" ></i> fa fa-centercode</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-centos" ></i> fa fa-centos</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-certificate" ></i> fa fa-certificate</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-chair" ></i> fa fa-chair</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-chalkboard" ></i> fa fa-chalkboard</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-chalkboard-teacher" ></i> fa fa-chalkboard-teacher</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-charging-station" ></i> fa fa-charging-station</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-chart-area" ></i> fa fa-chart-area</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-chart-bar" ></i> fa fa-chart-bar</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-chart-line" ></i> fa fa-chart-line</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-chart-pie" ></i> fa fa-chart-pie</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-check" ></i> fa fa-check</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-check-circle" ></i> fa fa-check-circle</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-check-double" ></i> fa fa-check-double</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-check-square" ></i> fa fa-check-square</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-cheese" ></i> fa fa-cheese</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-chess" ></i> fa fa-chess</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-chess-bishop" ></i> fa fa-chess-bishop</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-chess-board" ></i> fa fa-chess-board</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-chess-king" ></i> fa fa-chess-king</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-chess-knight" ></i> fa fa-chess-knight</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-chess-pawn" ></i> fa fa-chess-pawn</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-chess-queen" ></i> fa fa-chess-queen</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-chess-rook" ></i> fa fa-chess-rook</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-chevron-circle-down" ></i> fa fa-chevron-circle-down</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-chevron-circle-left" ></i> fa fa-chevron-circle-left</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-chevron-circle-right" ></i> fa fa-chevron-circle-right</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-chevron-circle-up" ></i> fa fa-chevron-circle-up</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-chevron-down" ></i> fa fa-chevron-down</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-chevron-left" ></i> fa fa-chevron-left</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-chevron-right" ></i> fa fa-chevron-right</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-chevron-up" ></i> fa fa-chevron-up</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-child" ></i> fa fa-child</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-chrome" ></i> fa fa-chrome</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-chromecast" ></i> fa fa-chromecast</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-church" ></i> fa fa-church</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-circle" ></i> fa fa-circle</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-circle-notch" ></i> fa fa-circle-notch</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-city" ></i> fa fa-city</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-clinic-medical" ></i> fa fa-clinic-medical</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-clipboard" ></i> fa fa-clipboard</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-clipboard-check" ></i> fa fa-clipboard-check</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-clipboard-list" ></i> fa fa-clipboard-list</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-clock" ></i> fa fa-clock</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-clone" ></i> fa fa-clone</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-closed-captioning" ></i> fa fa-closed-captioning</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-cloud" ></i> fa fa-cloud</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-cloud-download-alt" ></i> fa fa-cloud-download-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-cloud-meatball" ></i> fa fa-cloud-meatball</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-cloud-moon" ></i> fa fa-cloud-moon</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-cloud-moon-rain" ></i> fa fa-cloud-moon-rain</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-cloud-rain" ></i> fa fa-cloud-rain</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-cloud-showers-heavy" ></i> fa fa-cloud-showers-heavy</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-cloud-sun" ></i> fa fa-cloud-sun</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-cloud-sun-rain" ></i> fa fa-cloud-sun-rain</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-cloud-upload-alt" ></i> fa fa-cloud-upload-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-cloudscale" ></i> fa fa-cloudscale</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-cloudsmith" ></i> fa fa-cloudsmith</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-cloudversify" ></i> fa fa-cloudversify</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-cocktail" ></i> fa fa-cocktail</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-code" ></i> fa fa-code</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-code-branch" ></i> fa fa-code-branch</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-codepen" ></i> fa fa-codepen</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-codiepie" ></i> fa fa-codiepie</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-coffee" ></i> fa fa-coffee</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-cog" ></i> fa fa-cog</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-cogs" ></i> fa fa-cogs</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-coins" ></i> fa fa-coins</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-columns" ></i> fa fa-columns</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-comment" ></i> fa fa-comment</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-comment-alt" ></i> fa fa-comment-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-comment-dollar" ></i> fa fa-comment-dollar</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-comment-dots" ></i> fa fa-comment-dots</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-comment-medical" ></i> fa fa-comment-medical</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-comment-slash" ></i> fa fa-comment-slash</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-comments" ></i> fa fa-comments</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-comments-dollar" ></i> fa fa-comments-dollar</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-compact-disc" ></i> fa fa-compact-disc</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-compass" ></i> fa fa-compass</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-compress" ></i> fa fa-compress</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-compress-arrows-alt" ></i> fa fa-compress-arrows-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-concierge-bell" ></i> fa fa-concierge-bell</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-confluence" ></i> fa fa-confluence</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-connectdevelop" ></i> fa fa-connectdevelop</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-contao" ></i> fa fa-contao</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-cookie" ></i> fa fa-cookie</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-cookie-bite" ></i> fa fa-cookie-bite</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-copy" ></i> fa fa-copy</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-copyright" ></i> fa fa-copyright</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-cotton-bureau" ></i> fa fa-cotton-bureau</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-couch" ></i> fa fa-couch</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-cpanel" ></i> fa fa-cpanel</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-creative-commons" ></i> fa fa-creative-commons</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-creative-commons-by" ></i> fa fa-creative-commons-by</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-creative-commons-nc" ></i> fa fa-creative-commons-nc</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-creative-commons-nc-eu" ></i> fa fa-creative-commons-nc-eu</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-creative-commons-nc-jp" ></i> fa fa-creative-commons-nc-jp</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-creative-commons-nd" ></i> fa fa-creative-commons-nd</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-creative-commons-pd" ></i> fa fa-creative-commons-pd</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-creative-commons-pd-alt" ></i> fa fa-creative-commons-pd-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-creative-commons-remix" ></i> fa fa-creative-commons-remix</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-creative-commons-sa" ></i> fa fa-creative-commons-sa</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-creative-commons-sampling" ></i> fa fa-creative-commons-sampling</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-creative-commons-sampling-plus" ></i> fa fa-creative-commons-sampling-plus</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-creative-commons-share" ></i> fa fa-creative-commons-share</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-creative-commons-zero" ></i> fa fa-creative-commons-zero</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-credit-card" ></i> fa fa-credit-card</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-critical-role" ></i> fa fa-critical-role</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-crop" ></i> fa fa-crop</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-crop-alt" ></i> fa fa-crop-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-cross" ></i> fa fa-cross</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-crosshairs" ></i> fa fa-crosshairs</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-crow" ></i> fa fa-crow</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-crown" ></i> fa fa-crown</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-crutch" ></i> fa fa-crutch</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-css3" ></i> fa fa-css3</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-css3-alt" ></i> fa fa-css3-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-cube" ></i> fa fa-cube</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-cubes" ></i> fa fa-cubes</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-cut" ></i> fa fa-cut</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-cuttlefish" ></i> fa fa-cuttlefish</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-d-and-d" ></i> fa fa-d-and-d</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-d-and-d-beyond" ></i> fa fa-d-and-d-beyond</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-dashcube" ></i> fa fa-dashcube</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-database" ></i> fa fa-database</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-deaf" ></i> fa fa-deaf</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-delicious" ></i> fa fa-delicious</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-democrat" ></i> fa fa-democrat</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-deploydog" ></i> fa fa-deploydog</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-deskpro" ></i> fa fa-deskpro</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-desktop" ></i> fa fa-desktop</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-dev" ></i> fa fa-dev</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-deviantart" ></i> fa fa-deviantart</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-dharmachakra" ></i> fa fa-dharmachakra</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-dhl" ></i> fa fa-dhl</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-diagnoses" ></i> fa fa-diagnoses</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-diaspora" ></i> fa fa-diaspora</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-dice" ></i> fa fa-dice</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-dice-d20" ></i> fa fa-dice-d20</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-dice-d6" ></i> fa fa-dice-d6</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-dice-five" ></i> fa fa-dice-five</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-dice-four" ></i> fa fa-dice-four</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-dice-one" ></i> fa fa-dice-one</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-dice-six" ></i> fa fa-dice-six</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-dice-three" ></i> fa fa-dice-three</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-dice-two" ></i> fa fa-dice-two</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-digg" ></i> fa fa-digg</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-digital-ocean" ></i> fa fa-digital-ocean</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-digital-tachograph" ></i> fa fa-digital-tachograph</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-directions" ></i> fa fa-directions</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-discord" ></i> fa fa-discord</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-discourse" ></i> fa fa-discourse</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-divide" ></i> fa fa-divide</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-dizzy" ></i> fa fa-dizzy</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-dna" ></i> fa fa-dna</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-dochub" ></i> fa fa-dochub</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-docker" ></i> fa fa-docker</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-dog" ></i> fa fa-dog</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-dollar-sign" ></i> fa fa-dollar-sign</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-dolly" ></i> fa fa-dolly</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-dolly-flatbed" ></i> fa fa-dolly-flatbed</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-donate" ></i> fa fa-donate</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-door-closed" ></i> fa fa-door-closed</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-door-open" ></i> fa fa-door-open</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-dot-circle" ></i> fa fa-dot-circle</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-dove" ></i> fa fa-dove</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-download" ></i> fa fa-download</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-draft2digital" ></i> fa fa-draft2digital</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-drafting-compass" ></i> fa fa-drafting-compass</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-dragon" ></i> fa fa-dragon</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-draw-polygon" ></i> fa fa-draw-polygon</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-dribbble" ></i> fa fa-dribbble</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-dribbble-square" ></i> fa fa-dribbble-square</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-dropbox" ></i> fa fa-dropbox</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-drum" ></i> fa fa-drum</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-drum-steelpan" ></i> fa fa-drum-steelpan</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-drumstick-bite" ></i> fa fa-drumstick-bite</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-drupal" ></i> fa fa-drupal</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-dumbbell" ></i> fa fa-dumbbell</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-dumpster" ></i> fa fa-dumpster</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-dumpster-fire" ></i> fa fa-dumpster-fire</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-dungeon" ></i> fa fa-dungeon</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-dyalog" ></i> fa fa-dyalog</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-earlybirds" ></i> fa fa-earlybirds</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-ebay" ></i> fa fa-ebay</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-edge" ></i> fa fa-edge</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-edit" ></i> fa fa-edit</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-egg" ></i> fa fa-egg</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-eject" ></i> fa fa-eject</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-elementor" ></i> fa fa-elementor</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-ellipsis-h" ></i> fa fa-ellipsis-h</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-ellipsis-v" ></i> fa fa-ellipsis-v</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-ello" ></i> fa fa-ello</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-ember" ></i> fa fa-ember</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-empire" ></i> fa fa-empire</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-envelope" ></i> fa fa-envelope</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-envelope-open" ></i> fa fa-envelope-open</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-envelope-open-text" ></i> fa fa-envelope-open-text</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-envelope-square" ></i> fa fa-envelope-square</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-envira" ></i> fa fa-envira</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-equals" ></i> fa fa-equals</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-eraser" ></i> fa fa-eraser</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-erlang" ></i> fa fa-erlang</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-ethereum" ></i> fa fa-ethereum</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-ethernet" ></i> fa fa-ethernet</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-etsy" ></i> fa fa-etsy</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-euro-sign" ></i> fa fa-euro-sign</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-evernote" ></i> fa fa-evernote</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-exchange-alt" ></i> fa fa-exchange-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-exclamation" ></i> fa fa-exclamation</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-exclamation-circle" ></i> fa fa-exclamation-circle</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-exclamation-triangle" ></i> fa fa-exclamation-triangle</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-expand" ></i> fa fa-expand</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-expand-arrows-alt" ></i> fa fa-expand-arrows-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-expeditedssl" ></i> fa fa-expeditedssl</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-external-link-alt" ></i> fa fa-external-link-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-external-link-square-alt" ></i> fa fa-external-link-square-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-eye" ></i> fa fa-eye</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-eye-dropper" ></i> fa fa-eye-dropper</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-eye-slash" ></i> fa fa-eye-slash</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-facebook" ></i> fa fa-facebook</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-facebook-f" ></i> fa fa-facebook-f</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-facebook-messenger" ></i> fa fa-facebook-messenger</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-facebook-square" ></i> fa fa-facebook-square</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-fan" ></i> fa fa-fan</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-fantasy-flight-games" ></i> fa fa-fantasy-flight-games</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-fast-backward" ></i> fa fa-fast-backward</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-fast-forward" ></i> fa fa-fast-forward</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-fax" ></i> fa fa-fax</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-feather" ></i> fa fa-feather</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-feather-alt" ></i> fa fa-feather-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-fedex" ></i> fa fa-fedex</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-fedora" ></i> fa fa-fedora</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-female" ></i> fa fa-female</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-fighter-jet" ></i> fa fa-fighter-jet</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-figma" ></i> fa fa-figma</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-file" ></i> fa fa-file</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-file-alt" ></i> fa fa-file-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-file-archive" ></i> fa fa-file-archive</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-file-audio" ></i> fa fa-file-audio</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-file-code" ></i> fa fa-file-code</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-file-contract" ></i> fa fa-file-contract</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-file-csv" ></i> fa fa-file-csv</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-file-download" ></i> fa fa-file-download</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-file-excel" ></i> fa fa-file-excel</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-file-export" ></i> fa fa-file-export</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-file-image" ></i> fa fa-file-image</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-file-import" ></i> fa fa-file-import</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-file-invoice" ></i> fa fa-file-invoice</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-file-invoice-dollar" ></i> fa fa-file-invoice-dollar</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-file-medical" ></i> fa fa-file-medical</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-file-medical-alt" ></i> fa fa-file-medical-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-file-pdf" ></i> fa fa-file-pdf</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-file-powerpoint" ></i> fa fa-file-powerpoint</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-file-prescription" ></i> fa fa-file-prescription</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-file-signature" ></i> fa fa-file-signature</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-file-upload" ></i> fa fa-file-upload</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-file-video" ></i> fa fa-file-video</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-file-word" ></i> fa fa-file-word</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-fill" ></i> fa fa-fill</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-fill-drip" ></i> fa fa-fill-drip</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-film" ></i> fa fa-film</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-filter" ></i> fa fa-filter</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-fingerprint" ></i> fa fa-fingerprint</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-fire" ></i> fa fa-fire</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-fire-alt" ></i> fa fa-fire-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-fire-extinguisher" ></i> fa fa-fire-extinguisher</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-firefox" ></i> fa fa-firefox</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-first-aid" ></i> fa fa-first-aid</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-first-order" ></i> fa fa-first-order</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-first-order-alt" ></i> fa fa-first-order-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-firstdraft" ></i> fa fa-firstdraft</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-fish" ></i> fa fa-fish</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-fist-raised" ></i> fa fa-fist-raised</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-flag" ></i> fa fa-flag</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-flag-checkered" ></i> fa fa-flag-checkered</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-flag-usa" ></i> fa fa-flag-usa</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-flask" ></i> fa fa-flask</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-flickr" ></i> fa fa-flickr</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-flipboard" ></i> fa fa-flipboard</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-flushed" ></i> fa fa-flushed</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-fly" ></i> fa fa-fly</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-folder" ></i> fa fa-folder</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-folder-minus" ></i> fa fa-folder-minus</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-folder-open" ></i> fa fa-folder-open</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-folder-plus" ></i> fa fa-folder-plus</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-font" ></i> fa fa-font</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-font-awesome" ></i> fa fa-font-awesome</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-font-awesome-alt" ></i> fa fa-font-awesome-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-font-awesome-flag" ></i> fa fa-font-awesome-flag</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-font-awesome-logo-full" ></i> fa fa-font-awesome-logo-full</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-fonticons" ></i> fa fa-fonticons</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-fonticons-fi" ></i> fa fa-fonticons-fi</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-football-ball" ></i> fa fa-football-ball</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-fort-awesome" ></i> fa fa-fort-awesome</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-fort-awesome-alt" ></i> fa fa-fort-awesome-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-forumbee" ></i> fa fa-forumbee</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-forward" ></i> fa fa-forward</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-foursquare" ></i> fa fa-foursquare</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-free-code-camp" ></i> fa fa-free-code-camp</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-freebsd" ></i> fa fa-freebsd</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-frog" ></i> fa fa-frog</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-frown" ></i> fa fa-frown</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-frown-open" ></i> fa fa-frown-open</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-fulcrum" ></i> fa fa-fulcrum</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-funnel-dollar" ></i> fa fa-funnel-dollar</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-futbol" ></i> fa fa-futbol</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-galactic-republic" ></i> fa fa-galactic-republic</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-galactic-senate" ></i> fa fa-galactic-senate</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-gamepad" ></i> fa fa-gamepad</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-gas-pump" ></i> fa fa-gas-pump</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-gavel" ></i> fa fa-gavel</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-gem" ></i> fa fa-gem</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-genderless" ></i> fa fa-genderless</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-get-pocket" ></i> fa fa-get-pocket</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-gg" ></i> fa fa-gg</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-gg-circle" ></i> fa fa-gg-circle</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-ghost" ></i> fa fa-ghost</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-gift" ></i> fa fa-gift</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-gifts" ></i> fa fa-gifts</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-git" ></i> fa fa-git</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-git-alt" ></i> fa fa-git-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-git-square" ></i> fa fa-git-square</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-github" ></i> fa fa-github</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-github-alt" ></i> fa fa-github-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-github-square" ></i> fa fa-github-square</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-gitkraken" ></i> fa fa-gitkraken</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-gitlab" ></i> fa fa-gitlab</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-gitter" ></i> fa fa-gitter</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-glass-cheers" ></i> fa fa-glass-cheers</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-glass-martini" ></i> fa fa-glass-martini</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-glass-martini-alt" ></i> fa fa-glass-martini-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-glass-whiskey" ></i> fa fa-glass-whiskey</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-glasses" ></i> fa fa-glasses</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-glide" ></i> fa fa-glide</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-glide-g" ></i> fa fa-glide-g</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-globe" ></i> fa fa-globe</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-globe-africa" ></i> fa fa-globe-africa</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-globe-americas" ></i> fa fa-globe-americas</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-globe-asia" ></i> fa fa-globe-asia</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-globe-europe" ></i> fa fa-globe-europe</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-gofore" ></i> fa fa-gofore</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-golf-ball" ></i> fa fa-golf-ball</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-goodreads" ></i> fa fa-goodreads</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-goodreads-g" ></i> fa fa-goodreads-g</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-google" ></i> fa fa-google</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-google-drive" ></i> fa fa-google-drive</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-google-play" ></i> fa fa-google-play</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-google-plus" ></i> fa fa-google-plus</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-google-plus-g" ></i> fa fa-google-plus-g</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-google-plus-square" ></i> fa fa-google-plus-square</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-google-wallet" ></i> fa fa-google-wallet</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-gopuram" ></i> fa fa-gopuram</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-graduation-cap" ></i> fa fa-graduation-cap</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-gratipay" ></i> fa fa-gratipay</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-grav" ></i> fa fa-grav</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-greater-than" ></i> fa fa-greater-than</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-greater-than-equal" ></i> fa fa-greater-than-equal</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-grimace" ></i> fa fa-grimace</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-grin" ></i> fa fa-grin</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-grin-alt" ></i> fa fa-grin-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-grin-beam" ></i> fa fa-grin-beam</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-grin-beam-sweat" ></i> fa fa-grin-beam-sweat</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-grin-hearts" ></i> fa fa-grin-hearts</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-grin-squint" ></i> fa fa-grin-squint</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-grin-squint-tears" ></i> fa fa-grin-squint-tears</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-grin-stars" ></i> fa fa-grin-stars</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-grin-tears" ></i> fa fa-grin-tears</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-grin-tongue" ></i> fa fa-grin-tongue</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-genderless" ></i> fa fa-genderless</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-get-pocket" ></i> fa fa-get-pocket</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-gg" ></i> fa fa-gg</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-gg-circle" ></i> fa fa-gg-circle</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-ghost" ></i> fa fa-ghost</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-gift" ></i> fa fa-gift</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-gifts" ></i> fa fa-gifts</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-git" ></i> fa fa-git</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-git-alt" ></i> fa fa-git-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-git-square" ></i> fa fa-git-square</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-github" ></i> fa fa-github</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-github-alt" ></i> fa fa-github-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-github-square" ></i> fa fa-github-square</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-gitkraken" ></i> fa fa-gitkraken</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-gitlab" ></i> fa fa-gitlab</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-gitter" ></i> fa fa-gitter</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-glass-cheers" ></i> fa fa-glass-cheers</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-glass-martini" ></i> fa fa-glass-martini</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-glass-martini-alt" ></i> fa fa-glass-martini-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-glass-whiskey" ></i> fa fa-glass-whiskey</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-glasses" ></i> fa fa-glasses</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-glide" ></i> fa fa-glide</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-glide-g" ></i> fa fa-glide-g</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-globe" ></i> fa fa-globe</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-globe-africa" ></i> fa fa-globe-africa</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-globe-americas" ></i> fa fa-globe-americas</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-globe-asia" ></i> fa fa-globe-asia</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-globe-europe" ></i> fa fa-globe-europe</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-gofore" ></i> fa fa-gofore</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-golf-ball" ></i> fa fa-golf-ball</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-goodreads" ></i> fa fa-goodreads</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-goodreads-g" ></i> fa fa-goodreads-g</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-google" ></i> fa fa-google</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-google-drive" ></i> fa fa-google-drive</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-google-play" ></i> fa fa-google-play</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-google-plus" ></i> fa fa-google-plus</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-google-plus-g" ></i> fa fa-google-plus-g</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-google-plus-square" ></i> fa fa-google-plus-square</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-google-wallet" ></i> fa fa-google-wallet</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-gopuram" ></i> fa fa-gopuram</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-graduation-cap" ></i> fa fa-graduation-cap</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-gratipay" ></i> fa fa-gratipay</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-grav" ></i> fa fa-grav</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-greater-than" ></i> fa fa-greater-than</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-greater-than-equal" ></i> fa fa-greater-than-equal</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-grimace" ></i> fa fa-grimace</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-grin" ></i> fa fa-grin</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-grin-alt" ></i> fa fa-grin-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-grin-beam" ></i> fa fa-grin-beam</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-grin-beam-sweat" ></i> fa fa-grin-beam-sweat</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-grin-hearts" ></i> fa fa-grin-hearts</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-grin-squint" ></i> fa fa-grin-squint</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-grin-squint-tears" ></i> fa fa-grin-squint-tears</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-grin-stars" ></i> fa fa-grin-stars</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-grin-tears" ></i> fa fa-grin-tears</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-grin-tongue" ></i> fa fa-grin-tongue</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-grin-tongue-squint" ></i> fa fa-grin-tongue-squint</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-grin-tongue-wink" ></i> fa fa-grin-tongue-wink</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-grin-wink" ></i> fa fa-grin-wink</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-grip-horizontal" ></i> fa fa-grip-horizontal</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-grip-lines" ></i> fa fa-grip-lines</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-grip-lines-vertical" ></i> fa fa-grip-lines-vertical</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-grip-vertical" ></i> fa fa-grip-vertical</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-gripfire" ></i> fa fa-gripfire</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-grunt" ></i> fa fa-grunt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-guitar" ></i> fa fa-guitar</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-gulp" ></i> fa fa-gulp</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-h-square" ></i> fa fa-h-square</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-hacker-news" ></i> fa fa-hacker-news</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-hacker-news-square" ></i> fa fa-hacker-news-square</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-hackerrank" ></i> fa fa-hackerrank</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-hamburger" ></i> fa fa-hamburger</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-hammer" ></i> fa fa-hammer</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-hamsa" ></i> fa fa-hamsa</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-hand-holding" ></i> fa fa-hand-holding</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-hand-holding-heart" ></i> fa fa-hand-holding-heart</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-hand-holding-usd" ></i> fa fa-hand-holding-usd</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-hand-lizard" ></i> fa fa-hand-lizard</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-hand-middle-finger" ></i> fa fa-hand-middle-finger</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-hand-paper" ></i> fa fa-hand-paper</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-hand-peace" ></i> fa fa-hand-peace</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-hand-point-down" ></i> fa fa-hand-point-down</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-hand-point-left" ></i> fa fa-hand-point-left</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-hand-point-right" ></i> fa fa-hand-point-right</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-hand-point-up" ></i> fa fa-hand-point-up</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-hand-pointer" ></i> fa fa-hand-pointer</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-hand-rock" ></i> fa fa-hand-rock</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-hand-scissors" ></i> fa fa-hand-scissors</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-hand-spock" ></i> fa fa-hand-spock</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-hands" ></i> fa fa-hands</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-hands-helping" ></i> fa fa-hands-helping</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-handshake" ></i> fa fa-handshake</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-hanukiah" ></i> fa fa-hanukiah</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-hard-hat" ></i> fa fa-hard-hat</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-hashtag" ></i> fa fa-hashtag</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-hat-cowboy" ></i> fa fa-hat-cowboy</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-hat-cowboy-side" ></i> fa fa-hat-cowboy-side</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-hat-wizard" ></i> fa fa-hat-wizard</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-haykal" ></i> fa fa-haykal</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-hdd" ></i> fa fa-hdd</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-heading" ></i> fa fa-heading</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-headphones" ></i> fa fa-headphones</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-headphones-alt" ></i> fa fa-headphones-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-headset" ></i> fa fa-headset</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-heart" ></i> fa fa-heart</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-heart-broken" ></i> fa fa-heart-broken</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-heartbeat" ></i> fa fa-heartbeat</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-helicopter" ></i> fa fa-helicopter</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-highlighter" ></i> fa fa-highlighter</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-hiking" ></i> fa fa-hiking</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-hippo" ></i> fa fa-hippo</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-hips" ></i> fa fa-hips</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-hire-a-helper" ></i> fa fa-hire-a-helper</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-history" ></i> fa fa-history</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-hockey-puck" ></i> fa fa-hockey-puck</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-holly-berry" ></i> fa fa-holly-berry</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-home" ></i> fa fa-home</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-hooli" ></i> fa fa-hooli</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-hornbill" ></i> fa fa-hornbill</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-horse" ></i> fa fa-horse</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-horse-head" ></i> fa fa-horse-head</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-hospital" ></i> fa fa-hospital</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-hospital-alt" ></i> fa fa-hospital-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-hospital-symbol" ></i> fa fa-hospital-symbol</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-hot-tub" ></i> fa fa-hot-tub</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-hotdog" ></i> fa fa-hotdog</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-hotel" ></i> fa fa-hotel</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-hotjar" ></i> fa fa-hotjar</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-hourglass" ></i> fa fa-hourglass</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-hourglass-end" ></i> fa fa-hourglass-end</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-hourglass-half" ></i> fa fa-hourglass-half</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-hourglass-start" ></i> fa fa-hourglass-start</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-house-damage" ></i> fa fa-house-damage</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-houzz" ></i> fa fa-houzz</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-hryvnia" ></i> fa fa-hryvnia</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-html5" ></i> fa fa-html5</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-hubspot" ></i> fa fa-hubspot</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-i-cursor" ></i> fa fa-i-cursor</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-ice-cream" ></i> fa fa-ice-cream</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-icicles" ></i> fa fa-icicles</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-icons" ></i> fa fa-icons</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-id-badge" ></i> fa fa-id-badge</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-id-card" ></i> fa fa-id-card</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-id-card-alt" ></i> fa fa-id-card-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-igloo" ></i> fa fa-igloo</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-image" ></i> fa fa-image</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-images" ></i> fa fa-images</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-imdb" ></i> fa fa-imdb</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-inbox" ></i> fa fa-inbox</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-indent" ></i> fa fa-indent</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-industry" ></i> fa fa-industry</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-infinity" ></i> fa fa-infinity</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-info" ></i> fa fa-info</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-info-circle" ></i> fa fa-info-circle</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-instagram" ></i> fa fa-instagram</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-intercom" ></i> fa fa-intercom</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-internet-explorer" ></i> fa fa-internet-explorer</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-invision" ></i> fa fa-invision</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-ioxhost" ></i> fa fa-ioxhost</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-italic" ></i> fa fa-italic</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-itch-io" ></i> fa fa-itch-io</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-itunes" ></i> fa fa-itunes</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-itunes-note" ></i> fa fa-itunes-note</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-java" ></i> fa fa-java</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-jedi" ></i> fa fa-jedi</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-jedi-order" ></i> fa fa-jedi-order</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-jenkins" ></i> fa fa-jenkins</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-jira" ></i> fa fa-jira</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-joget" ></i> fa fa-joget</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-joint" ></i> fa fa-joint</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-joomla" ></i> fa fa-joomla</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-journal-whills" ></i> fa fa-journal-whills</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-js" ></i> fa fa-js</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-js-square" ></i> fa fa-js-square</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-jsfiddle" ></i> fa fa-jsfiddle</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-kaaba" ></i> fa fa-kaaba</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-kaggle" ></i> fa fa-kaggle</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-key" ></i> fa fa-key</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-keybase" ></i> fa fa-keybase</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-keyboard" ></i> fa fa-keyboard</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-keycdn" ></i> fa fa-keycdn</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-khanda" ></i> fa fa-khanda</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-kickstarter" ></i> fa fa-kickstarter</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-kickstarter-k" ></i> fa fa-kickstarter-k</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-kiss" ></i> fa fa-kiss</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-kiss-beam" ></i> fa fa-kiss-beam</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-kiss-wink-heart" ></i> fa fa-kiss-wink-heart</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-kiwi-bird" ></i> fa fa-kiwi-bird</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-korvue" ></i> fa fa-korvue</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-landmark" ></i> fa fa-landmark</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-language" ></i> fa fa-language</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-laptop" ></i> fa fa-laptop</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-laptop-code" ></i> fa fa-laptop-code</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-laptop-medical" ></i> fa fa-laptop-medical</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-laravel" ></i> fa fa-laravel</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-lastfm" ></i> fa fa-lastfm</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-lastfm-square" ></i> fa fa-lastfm-square</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-laugh" ></i> fa fa-laugh</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-laugh-beam" ></i> fa fa-laugh-beam</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-laugh-squint" ></i> fa fa-laugh-squint</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-laugh-wink" ></i> fa fa-laugh-wink</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-layer-group" ></i> fa fa-layer-group</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-leaf" ></i> fa fa-leaf</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-leanpub" ></i> fa fa-leanpub</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-lemon" ></i> fa fa-lemon</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-less" ></i> fa fa-less</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-less-than" ></i> fa fa-less-than</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-less-than-equal" ></i> fa fa-less-than-equal</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-level-down-alt" ></i> fa fa-level-down-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-level-up-alt" ></i> fa fa-level-up-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-life-ring" ></i> fa fa-life-ring</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-lightbulb" ></i> fa fa-lightbulb</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-line" ></i> fa fa-line</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-link" ></i> fa fa-link</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-linkedin" ></i> fa fa-linkedin</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-linkedin-in" ></i> fa fa-linkedin-in</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-linode" ></i> fa fa-linode</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-linux" ></i> fa fa-linux</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-lira-sign" ></i> fa fa-lira-sign</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-list" ></i> fa fa-list</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-list-alt" ></i> fa fa-list-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-list-ol" ></i> fa fa-list-ol</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-list-ul" ></i> fa fa-list-ul</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-location-arrow" ></i> fa fa-location-arrow</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-lock" ></i> fa fa-lock</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-lock-open" ></i> fa fa-lock-open</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-long-arrow-alt-down" ></i> fa fa-long-arrow-alt-down</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-long-arrow-alt-left" ></i> fa fa-long-arrow-alt-left</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-long-arrow-alt-right" ></i> fa fa-long-arrow-alt-right</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-long-arrow-alt-up" ></i> fa fa-long-arrow-alt-up</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-low-vision" ></i> fa fa-low-vision</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-luggage-cart" ></i> fa fa-luggage-cart</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-lyft" ></i> fa fa-lyft</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-magento" ></i> fa fa-magento</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-magic" ></i> fa fa-magic</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-magnet" ></i> fa fa-magnet</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-mail-bulk" ></i> fa fa-mail-bulk</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-mailchimp" ></i> fa fa-mailchimp</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-male" ></i> fa fa-male</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-mandalorian" ></i> fa fa-mandalorian</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-map" ></i> fa fa-map</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-map-marked" ></i> fa fa-map-marked</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-map-marked-alt" ></i> fa fa-map-marked-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-map-marker" ></i> fa fa-map-marker</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-map-marker-alt" ></i> fa fa-map-marker-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-map-pin" ></i> fa fa-map-pin</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-map-signs" ></i> fa fa-map-signs</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-markdown" ></i> fa fa-markdown</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-marker" ></i> fa fa-marker</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-mars" ></i> fa fa-mars</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-mars-double" ></i> fa fa-mars-double</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-mars-stroke" ></i> fa fa-mars-stroke</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-mars-stroke-h" ></i> fa fa-mars-stroke-h</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-mars-stroke-v" ></i> fa fa-mars-stroke-v</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-mask" ></i> fa fa-mask</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-mastodon" ></i> fa fa-mastodon</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-maxcdn" ></i> fa fa-maxcdn</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-mdb" ></i> fa fa-mdb</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-medal" ></i> fa fa-medal</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-medapps" ></i> fa fa-medapps</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-medium" ></i> fa fa-medium</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-medium-m" ></i> fa fa-medium-m</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-medkit" ></i> fa fa-medkit</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-medrt" ></i> fa fa-medrt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-meetup" ></i> fa fa-meetup</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-megaport" ></i> fa fa-megaport</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-meh" ></i> fa fa-meh</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-meh-blank" ></i> fa fa-meh-blank</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-meh-rolling-eyes" ></i> fa fa-meh-rolling-eyes</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-memory" ></i> fa fa-memory</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-mendeley" ></i> fa fa-mendeley</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-menorah" ></i> fa fa-menorah</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-mercury" ></i> fa fa-mercury</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-meteor" ></i> fa fa-meteor</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-microchip" ></i> fa fa-microchip</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-microphone" ></i> fa fa-microphone</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-microphone-alt" ></i> fa fa-microphone-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-microphone-alt-slash" ></i> fa fa-microphone-alt-slash</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-microphone-slash" ></i> fa fa-microphone-slash</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-microscope" ></i> fa fa-microscope</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-microsoft" ></i> fa fa-microsoft</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-minus" ></i> fa fa-minus</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-minus-circle" ></i> fa fa-minus-circle</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-minus-square" ></i> fa fa-minus-square</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-mitten" ></i> fa fa-mitten</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-mix" ></i> fa fa-mix</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-mixcloud" ></i> fa fa-mixcloud</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-mizuni" ></i> fa fa-mizuni</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-mobile" ></i> fa fa-mobile</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-mobile-alt" ></i> fa fa-mobile-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-modx" ></i> fa fa-modx</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-monero" ></i> fa fa-monero</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-money-bill" ></i> fa fa-money-bill</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-money-bill-alt" ></i> fa fa-money-bill-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-money-bill-wave" ></i> fa fa-money-bill-wave</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-money-bill-wave-alt" ></i> fa fa-money-bill-wave-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-money-check" ></i> fa fa-money-check</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-money-check-alt" ></i> fa fa-money-check-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-monument" ></i> fa fa-monument</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-moon" ></i> fa fa-moon</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-mortar-pestle" ></i> fa fa-mortar-pestle</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-mosque" ></i> fa fa-mosque</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-motorcycle" ></i> fa fa-motorcycle</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-mountain" ></i> fa fa-mountain</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-mouse" ></i> fa fa-mouse</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-mouse-pointer" ></i> fa fa-mouse-pointer</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-mug-hot" ></i> fa fa-mug-hot</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-music" ></i> fa fa-music</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-napster" ></i> fa fa-napster</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-neos" ></i> fa fa-neos</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-network-wired" ></i> fa fa-network-wired</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-neuter" ></i> fa fa-neuter</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-newspaper" ></i> fa fa-newspaper</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-nimblr" ></i> fa fa-nimblr</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-node" ></i> fa fa-node</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-node-js" ></i> fa fa-node-js</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-not-equal" ></i> fa fa-not-equal</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-notes-medical" ></i> fa fa-notes-medical</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-npm" ></i> fa fa-npm</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-ns8" ></i> fa fa-ns8</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-nutritionix" ></i> fa fa-nutritionix</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-object-group" ></i> fa fa-object-group</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-object-ungroup" ></i> fa fa-object-ungroup</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-odnoklassniki" ></i> fa fa-odnoklassniki</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-odnoklassniki-square" ></i> fa fa-odnoklassniki-square</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-oil-can" ></i> fa fa-oil-can</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-old-republic" ></i> fa fa-old-republic</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-om" ></i> fa fa-om</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-opencart" ></i> fa fa-opencart</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-openid" ></i> fa fa-openid</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-opera" ></i> fa fa-opera</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-optin-monster" ></i> fa fa-optin-monster</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-orcid" ></i> fa fa-orcid</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-osi" ></i> fa fa-osi</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-otter" ></i> fa fa-otter</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-outdent" ></i> fa fa-outdent</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-page4" ></i> fa fa-page4</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-pagelines" ></i> fa fa-pagelines</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-pager" ></i> fa fa-pager</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-paint-brush" ></i> fa fa-paint-brush</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-paint-roller" ></i> fa fa-paint-roller</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-palette" ></i> fa fa-palette</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-palfed" ></i> fa fa-palfed</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-pallet" ></i> fa fa-pallet</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-paper-plane" ></i> fa fa-paper-plane</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-paperclip" ></i> fa fa-paperclip</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-parachute-box" ></i> fa fa-parachute-box</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-paragraph" ></i> fa fa-paragraph</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-parking" ></i> fa fa-parking</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-passport" ></i> fa fa-passport</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-pastafarianism" ></i> fa fa-pastafarianism</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-paste" ></i> fa fa-paste</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-patreon" ></i> fa fa-patreon</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-pause" ></i> fa fa-pause</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-pause-circle" ></i> fa fa-pause-circle</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-paw" ></i> fa fa-paw</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-paypal" ></i> fa fa-paypal</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-peace" ></i> fa fa-peace</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-pen" ></i> fa fa-pen</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-pen-alt" ></i> fa fa-pen-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-pen-fancy" ></i> fa fa-pen-fancy</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-pen-nib" ></i> fa fa-pen-nib</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-pen-square" ></i> fa fa-pen-square</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-pencil-alt" ></i> fa fa-pencil-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-pencil-ruler" ></i> fa fa-pencil-ruler</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-penny-arcade" ></i> fa fa-penny-arcade</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-people-carry" ></i> fa fa-people-carry</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-pepper-hot" ></i> fa fa-pepper-hot</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-percent" ></i> fa fa-percent</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-percentage" ></i> fa fa-percentage</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-periscope" ></i> fa fa-periscope</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-person-booth" ></i> fa fa-person-booth</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-phabricator" ></i> fa fa-phabricator</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-phoenix-framework" ></i> fa fa-phoenix-framework</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-phoenix-squadron" ></i> fa fa-phoenix-squadron</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-phone" ></i> fa fa-phone</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-phone-alt" ></i> fa fa-phone-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-phone-slash" ></i> fa fa-phone-slash</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-phone-square" ></i> fa fa-phone-square</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-phone-square-alt" ></i> fa fa-phone-square-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-phone-volume" ></i> fa fa-phone-volume</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-photo-video" ></i> fa fa-photo-video</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-php" ></i> fa fa-php</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-pied-piper" ></i> fa fa-pied-piper</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-pied-piper-alt" ></i> fa fa-pied-piper-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-pied-piper-hat" ></i> fa fa-pied-piper-hat</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-pied-piper-pp" ></i> fa fa-pied-piper-pp</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-piggy-bank" ></i> fa fa-piggy-bank</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-pills" ></i> fa fa-pills</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-pinterest" ></i> fa fa-pinterest</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-pinterest-p" ></i> fa fa-pinterest-p</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-pinterest-square" ></i> fa fa-pinterest-square</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-pizza-slice" ></i> fa fa-pizza-slice</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-place-of-worship" ></i> fa fa-place-of-worship</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-plane" ></i> fa fa-plane</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-plane-arrival" ></i> fa fa-plane-arrival</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-plane-departure" ></i> fa fa-plane-departure</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-play" ></i> fa fa-play</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-play-circle" ></i> fa fa-play-circle</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-playstation" ></i> fa fa-playstation</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-plug" ></i> fa fa-plug</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-plus" ></i> fa fa-plus</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-plus-circle" ></i> fa fa-plus-circle</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-plus-square" ></i> fa fa-plus-square</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-podcast" ></i> fa fa-podcast</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-poll" ></i> fa fa-poll</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-poll-h" ></i> fa fa-poll-h</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-poo" ></i> fa fa-poo</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-poo-storm" ></i> fa fa-poo-storm</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-poop" ></i> fa fa-poop</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-portrait" ></i> fa fa-portrait</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-pound-sign" ></i> fa fa-pound-sign</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-power-off" ></i> fa fa-power-off</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-pray" ></i> fa fa-pray</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-praying-hands" ></i> fa fa-praying-hands</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-prescription" ></i> fa fa-prescription</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-prescription-bottle" ></i> fa fa-prescription-bottle</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-prescription-bottle-alt" ></i> fa fa-prescription-bottle-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-print" ></i> fa fa-print</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-procedures" ></i> fa fa-procedures</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-product-hunt" ></i> fa fa-product-hunt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-project-diagram" ></i> fa fa-project-diagram</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-pushed" ></i> fa fa-pushed</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-puzzle-piece" ></i> fa fa-puzzle-piece</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-python" ></i> fa fa-python</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-qq" ></i> fa fa-qq</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-qrcode" ></i> fa fa-qrcode</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-question" ></i> fa fa-question</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-question-circle" ></i> fa fa-question-circle</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-quidditch" ></i> fa fa-quidditch</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-quinscape" ></i> fa fa-quinscape</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-quora" ></i> fa fa-quora</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-quote-left" ></i> fa fa-quote-left</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-quote-right" ></i> fa fa-quote-right</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-quran" ></i> fa fa-quran</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-r-project" ></i> fa fa-r-project</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-radiation" ></i> fa fa-radiation</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-radiation-alt" ></i> fa fa-radiation-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-rainbow" ></i> fa fa-rainbow</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-random" ></i> fa fa-random</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-raspberry-pi" ></i> fa fa-raspberry-pi</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-ravelry" ></i> fa fa-ravelry</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-react" ></i> fa fa-react</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-reacteurope" ></i> fa fa-reacteurope</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-readme" ></i> fa fa-readme</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-rebel" ></i> fa fa-rebel</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-receipt" ></i> fa fa-receipt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-record-vinyl" ></i> fa fa-record-vinyl</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-recycle" ></i> fa fa-recycle</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-red-river" ></i> fa fa-red-river</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-reddit" ></i> fa fa-reddit</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-reddit-alien" ></i> fa fa-reddit-alien</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-reddit-square" ></i> fa fa-reddit-square</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-redhat" ></i> fa fa-redhat</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-redo" ></i> fa fa-redo</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-redo-alt" ></i> fa fa-redo-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-registered" ></i> fa fa-registered</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-remove-format" ></i> fa fa-remove-format</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-renren" ></i> fa fa-renren</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-reply" ></i> fa fa-reply</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-reply-all" ></i> fa fa-reply-all</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-replyd" ></i> fa fa-replyd</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-republican" ></i> fa fa-republican</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-researchgate" ></i> fa fa-researchgate</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-resolving" ></i> fa fa-resolving</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-restroom" ></i> fa fa-restroom</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-retweet" ></i> fa fa-retweet</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-rev" ></i> fa fa-rev</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-ribbon" ></i> fa fa-ribbon</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-ring" ></i> fa fa-ring</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-road" ></i> fa fa-road</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-robot" ></i> fa fa-robot</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-rocket" ></i> fa fa-rocket</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-rocketchat" ></i> fa fa-rocketchat</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-rockrms" ></i> fa fa-rockrms</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-route" ></i> fa fa-route</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-rss" ></i> fa fa-rss</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-rss-square" ></i> fa fa-rss-square</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-ruble-sign" ></i> fa fa-ruble-sign</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-ruler" ></i> fa fa-ruler</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-ruler-combined" ></i> fa fa-ruler-combined</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-ruler-horizontal" ></i> fa fa-ruler-horizontal</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-ruler-vertical" ></i> fa fa-ruler-vertical</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-running" ></i> fa fa-running</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-rupee-sign" ></i> fa fa-rupee-sign</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-sad-cry" ></i> fa fa-sad-cry</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-sad-tear" ></i> fa fa-sad-tear</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-safari" ></i> fa fa-safari</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-salesforce" ></i> fa fa-salesforce</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-sass" ></i> fa fa-sass</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-satellite" ></i> fa fa-satellite</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-satellite-dish" ></i> fa fa-satellite-dish</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-save" ></i> fa fa-save</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-schlix" ></i> fa fa-schlix</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-school" ></i> fa fa-school</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-screwdriver" ></i> fa fa-screwdriver</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-scribd" ></i> fa fa-scribd</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-scroll" ></i> fa fa-scroll</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-sd-card" ></i> fa fa-sd-card</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-search" ></i> fa fa-search</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-search-dollar" ></i> fa fa-search-dollar</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-search-location" ></i> fa fa-search-location</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-search-minus" ></i> fa fa-search-minus</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-search-plus" ></i> fa fa-search-plus</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-searchengin" ></i> fa fa-searchengin</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-seedling" ></i> fa fa-seedling</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-sellcast" ></i> fa fa-sellcast</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-sellsy" ></i> fa fa-sellsy</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-server" ></i> fa fa-server</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-servicestack" ></i> fa fa-servicestack</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-shapes" ></i> fa fa-shapes</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-share" ></i> fa fa-share</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-share-alt" ></i> fa fa-share-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-share-alt-square" ></i> fa fa-share-alt-square</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-share-square" ></i> fa fa-share-square</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-shekel-sign" ></i> fa fa-shekel-sign</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-shield-alt" ></i> fa fa-shield-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-ship" ></i> fa fa-ship</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-shipping-fast" ></i> fa fa-shipping-fast</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-shirtsinbulk" ></i> fa fa-shirtsinbulk</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-shoe-prints" ></i> fa fa-shoe-prints</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-shopping-bag" ></i> fa fa-shopping-bag</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-shopping-basket" ></i> fa fa-shopping-basket</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-shopping-cart" ></i> fa fa-shopping-cart</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-shopware" ></i> fa fa-shopware</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-shower" ></i> fa fa-shower</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-shuttle-van" ></i> fa fa-shuttle-van</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-sign" ></i> fa fa-sign</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-sign-in-alt" ></i> fa fa-sign-in-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-sign-language" ></i> fa fa-sign-language</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-sign-out-alt" ></i> fa fa-sign-out-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-signal" ></i> fa fa-signal</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-signature" ></i> fa fa-signature</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-sim-card" ></i> fa fa-sim-card</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-simplybuilt" ></i> fa fa-simplybuilt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-sistrix" ></i> fa fa-sistrix</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-sitemap" ></i> fa fa-sitemap</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-sith" ></i> fa fa-sith</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-skating" ></i> fa fa-skating</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-sketch" ></i> fa fa-sketch</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-skiing" ></i> fa fa-skiing</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-skiing-nordic" ></i> fa fa-skiing-nordic</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-skull" ></i> fa fa-skull</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-skull-crossbones" ></i> fa fa-skull-crossbones</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-skyatlas" ></i> fa fa-skyatlas</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-skype" ></i> fa fa-skype</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-slack" ></i> fa fa-slack</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-slack-hash" ></i> fa fa-slack-hash</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-slash" ></i> fa fa-slash</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-sleigh" ></i> fa fa-sleigh</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-sliders-h" ></i> fa fa-sliders-h</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-slideshare" ></i> fa fa-slideshare</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-smile" ></i> fa fa-smile</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-smile-beam" ></i> fa fa-smile-beam</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-smile-wink" ></i> fa fa-smile-wink</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-smog" ></i> fa fa-smog</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-smoking" ></i> fa fa-smoking</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-smoking-ban" ></i> fa fa-smoking-ban</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-sms" ></i> fa fa-sms</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-snapchat" ></i> fa fa-snapchat</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-snapchat-ghost" ></i> fa fa-snapchat-ghost</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-snapchat-square" ></i> fa fa-snapchat-square</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-snowboarding" ></i> fa fa-snowboarding</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-snowflake" ></i> fa fa-snowflake</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-snowman" ></i> fa fa-snowman</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-snowplow" ></i> fa fa-snowplow</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-socks" ></i> fa fa-socks</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-solar-panel" ></i> fa fa-solar-panel</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-sort" ></i> fa fa-sort</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-sort-alpha-down" ></i> fa fa-sort-alpha-down</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-sort-alpha-down-alt" ></i> fa fa-sort-alpha-down-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-sort-alpha-up" ></i> fa fa-sort-alpha-up</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-sort-alpha-up-alt" ></i> fa fa-sort-alpha-up-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-sort-amount-down" ></i> fa fa-sort-amount-down</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-sort-amount-down-alt" ></i> fa fa-sort-amount-down-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-sort-amount-up" ></i> fa fa-sort-amount-up</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-sort-amount-up-alt" ></i> fa fa-sort-amount-up-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-sort-down" ></i> fa fa-sort-down</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-sort-numeric-down" ></i> fa fa-sort-numeric-down</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-sort-numeric-down-alt" ></i> fa fa-sort-numeric-down-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-sort-numeric-up" ></i> fa fa-sort-numeric-up</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-sort-numeric-up-alt" ></i> fa fa-sort-numeric-up-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-sort-up" ></i> fa fa-sort-up</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-soundcloud" ></i> fa fa-soundcloud</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-sourcetree" ></i> fa fa-sourcetree</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-spa" ></i> fa fa-spa</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-space-shuttle" ></i> fa fa-space-shuttle</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-speakap" ></i> fa fa-speakap</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-speaker-deck" ></i> fa fa-speaker-deck</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-spell-check" ></i> fa fa-spell-check</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-spider" ></i> fa fa-spider</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-spinner" ></i> fa fa-spinner</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-splotch" ></i> fa fa-splotch</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-spotify" ></i> fa fa-spotify</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-spray-can" ></i> fa fa-spray-can</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-square" ></i> fa fa-square</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-square-full" ></i> fa fa-square-full</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-square-root-alt" ></i> fa fa-square-root-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-squarespace" ></i> fa fa-squarespace</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-stack-exchange" ></i> fa fa-stack-exchange</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-stack-overflow" ></i> fa fa-stack-overflow</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-stackpath" ></i> fa fa-stackpath</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-stamp" ></i> fa fa-stamp</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-star" ></i> fa fa-star</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-star-and-crescent" ></i> fa fa-star-and-crescent</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-star-half" ></i> fa fa-star-half</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-star-half-alt" ></i> fa fa-star-half-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-star-of-david" ></i> fa fa-star-of-david</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-star-of-life" ></i> fa fa-star-of-life</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-staylinked" ></i> fa fa-staylinked</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-steam" ></i> fa fa-steam</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-steam-square" ></i> fa fa-steam-square</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-steam-symbol" ></i> fa fa-steam-symbol</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-step-backward" ></i> fa fa-step-backward</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-step-forward" ></i> fa fa-step-forward</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-stethoscope" ></i> fa fa-stethoscope</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-sticker-mule" ></i> fa fa-sticker-mule</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-sticky-note" ></i> fa fa-sticky-note</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-stop" ></i> fa fa-stop</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-stop-circle" ></i> fa fa-stop-circle</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-stopwatch" ></i> fa fa-stopwatch</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-store" ></i> fa fa-store</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-store-alt" ></i> fa fa-store-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-strava" ></i> fa fa-strava</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-stream" ></i> fa fa-stream</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-street-view" ></i> fa fa-street-view</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-strikethrough" ></i> fa fa-strikethrough</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-stripe" ></i> fa fa-stripe</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-stripe-s" ></i> fa fa-stripe-s</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-stroopwafel" ></i> fa fa-stroopwafel</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-studiovinari" ></i> fa fa-studiovinari</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-stumbleupon" ></i> fa fa-stumbleupon</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-stumbleupon-circle" ></i> fa fa-stumbleupon-circle</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-subscript" ></i> fa fa-subscript</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-subway" ></i> fa fa-subway</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-suitcase" ></i> fa fa-suitcase</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-suitcase-rolling" ></i> fa fa-suitcase-rolling</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-sun" ></i> fa fa-sun</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-superpowers" ></i> fa fa-superpowers</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-superscript" ></i> fa fa-superscript</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-supple" ></i> fa fa-supple</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-surprise" ></i> fa fa-surprise</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-suse" ></i> fa fa-suse</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-swatchbook" ></i> fa fa-swatchbook</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-swift" ></i> fa fa-swift</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-swimmer" ></i> fa fa-swimmer</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-swimming-pool" ></i> fa fa-swimming-pool</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-symfony" ></i> fa fa-symfony</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-synagogue" ></i> fa fa-synagogue</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-sync" ></i> fa fa-sync</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-sync-alt" ></i> fa fa-sync-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-syringe" ></i> fa fa-syringe</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-table" ></i> fa fa-table</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-table-tennis" ></i> fa fa-table-tennis</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-tablet" ></i> fa fa-tablet</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-tablet-alt" ></i> fa fa-tablet-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-tablets" ></i> fa fa-tablets</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-tachometer-alt" ></i> fa fa-tachometer-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-tag" ></i> fa fa-tag</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-tags" ></i> fa fa-tags</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-tape" ></i> fa fa-tape</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-tasks" ></i> fa fa-tasks</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-taxi" ></i> fa fa-taxi</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-teamspeak" ></i> fa fa-teamspeak</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-teeth" ></i> fa fa-teeth</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-teeth-open" ></i> fa fa-teeth-open</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-telegram" ></i> fa fa-telegram</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-telegram-plane" ></i> fa fa-telegram-plane</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-temperature-high" ></i> fa fa-temperature-high</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-temperature-low" ></i> fa fa-temperature-low</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-tencent-weibo" ></i> fa fa-tencent-weibo</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-tenge" ></i> fa fa-tenge</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-terminal" ></i> fa fa-terminal</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-text-height" ></i> fa fa-text-height</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-text-width" ></i> fa fa-text-width</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-th" ></i> fa fa-th</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-th-large" ></i> fa fa-th-large</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-th-list" ></i> fa fa-th-list</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-the-red-yeti" ></i> fa fa-the-red-yeti</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-theater-masks" ></i> fa fa-theater-masks</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-themeco" ></i> fa fa-themeco</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-themeisle" ></i> fa fa-themeisle</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-thermometer" ></i> fa fa-thermometer</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-thermometer-empty" ></i> fa fa-thermometer-empty</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-thermometer-full" ></i> fa fa-thermometer-full</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-thermometer-half" ></i> fa fa-thermometer-half</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-thermometer-quarter" ></i> fa fa-thermometer-quarter</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-thermometer-three-quarters" ></i> fa fa-thermometer-three-quarters</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-think-peaks" ></i> fa fa-think-peaks</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-thumbs-down" ></i> fa fa-thumbs-down</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-thumbs-up" ></i> fa fa-thumbs-up</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-thumbtack" ></i> fa fa-thumbtack</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-ticket-alt" ></i> fa fa-ticket-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-times" ></i> fa fa-times</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-times-circle" ></i> fa fa-times-circle</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-tint" ></i> fa fa-tint</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-tint-slash" ></i> fa fa-tint-slash</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-tired" ></i> fa fa-tired</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-toggle-off" ></i> fa fa-toggle-off</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-toggle-on" ></i> fa fa-toggle-on</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-toilet" ></i> fa fa-toilet</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-toilet-paper" ></i> fa fa-toilet-paper</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-toolbox" ></i> fa fa-toolbox</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-tools" ></i> fa fa-tools</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-tooth" ></i> fa fa-tooth</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-torah" ></i> fa fa-torah</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-torii-gate" ></i> fa fa-torii-gate</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-tractor" ></i> fa fa-tractor</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-trade-federation" ></i> fa fa-trade-federation</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-trademark" ></i> fa fa-trademark</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-traffic-light" ></i> fa fa-traffic-light</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-train" ></i> fa fa-train</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-tram" ></i> fa fa-tram</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-transgender" ></i> fa fa-transgender</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-transgender-alt" ></i> fa fa-transgender-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-trash" ></i> fa fa-trash</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-trash-alt" ></i> fa fa-trash-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-trash-restore" ></i> fa fa-trash-restore</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-trash-restore-alt" ></i> fa fa-trash-restore-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-tree" ></i> fa fa-tree</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-trello" ></i> fa fa-trello</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-tripadvisor" ></i> fa fa-tripadvisor</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-trophy" ></i> fa fa-trophy</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-truck" ></i> fa fa-truck</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-truck-loading" ></i> fa fa-truck-loading</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-truck-monster" ></i> fa fa-truck-monster</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-truck-moving" ></i> fa fa-truck-moving</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-truck-pickup" ></i> fa fa-truck-pickup</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-tshirt" ></i> fa fa-tshirt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-tty" ></i> fa fa-tty</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-tumblr" ></i> fa fa-tumblr</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-tumblr-square" ></i> fa fa-tumblr-square</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-tv" ></i> fa fa-tv</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-twitch" ></i> fa fa-twitch</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-twitter" ></i> fa fa-twitter</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-twitter-square" ></i> fa fa-twitter-square</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-typo3" ></i> fa fa-typo3</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-uber" ></i> fa fa-uber</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-ubuntu" ></i> fa fa-ubuntu</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-uikit" ></i> fa fa-uikit</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-umbraco" ></i> fa fa-umbraco</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-umbrella" ></i> fa fa-umbrella</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-umbrella-beach" ></i> fa fa-umbrella-beach</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-underline" ></i> fa fa-underline</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-undo" ></i> fa fa-undo</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-undo-alt" ></i> fa fa-undo-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-uniregistry" ></i> fa fa-uniregistry</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-universal-access" ></i> fa fa-universal-access</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-university" ></i> fa fa-university</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-unlink" ></i> fa fa-unlink</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-unlock" ></i> fa fa-unlock</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-unlock-alt" ></i> fa fa-unlock-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-untappd" ></i> fa fa-untappd</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-upload" ></i> fa fa-upload</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-ups" ></i> fa fa-ups</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-usb" ></i> fa fa-usb</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-user" ></i> fa fa-user</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-user-alt" ></i> fa fa-user-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-user-alt-slash" ></i> fa fa-user-alt-slash</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-user-astronaut" ></i> fa fa-user-astronaut</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-user-check" ></i> fa fa-user-check</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-user-circle" ></i> fa fa-user-circle</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-user-clock" ></i> fa fa-user-clock</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-user-cog" ></i> fa fa-user-cog</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-user-edit" ></i> fa fa-user-edit</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-user-friends" ></i> fa fa-user-friends</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-user-graduate" ></i> fa fa-user-graduate</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-user-injured" ></i> fa fa-user-injured</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-user-lock" ></i> fa fa-user-lock</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-user-md" ></i> fa fa-user-md</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-user-minus" ></i> fa fa-user-minus</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-user-ninja" ></i> fa fa-user-ninja</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-user-nurse" ></i> fa fa-user-nurse</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-user-plus" ></i> fa fa-user-plus</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-user-secret" ></i> fa fa-user-secret</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-user-shield" ></i> fa fa-user-shield</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-user-slash" ></i> fa fa-user-slash</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-user-tag" ></i> fa fa-user-tag</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-user-tie" ></i> fa fa-user-tie</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-user-times" ></i> fa fa-user-times</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-users" ></i> fa fa-users</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-users-cog" ></i> fa fa-users-cog</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-usps" ></i> fa fa-usps</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-ussunnah" ></i> fa fa-ussunnah</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-utensil-spoon" ></i> fa fa-utensil-spoon</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-utensils" ></i> fa fa-utensils</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-vaadin" ></i> fa fa-vaadin</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-vector-square" ></i> fa fa-vector-square</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-venus" ></i> fa fa-venus</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-venus-double" ></i> fa fa-venus-double</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-venus-mars" ></i> fa fa-venus-mars</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-viacoin" ></i> fa fa-viacoin</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-viadeo" ></i> fa fa-viadeo</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-viadeo-square" ></i> fa fa-viadeo-square</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-vial" ></i> fa fa-vial</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-vials" ></i> fa fa-vials</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-viber" ></i> fa fa-viber</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-video" ></i> fa fa-video</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-video-slash" ></i> fa fa-video-slash</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-vihara" ></i> fa fa-vihara</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-vimeo" ></i> fa fa-vimeo</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-vimeo-square" ></i> fa fa-vimeo-square</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-vimeo-v" ></i> fa fa-vimeo-v</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-vine" ></i> fa fa-vine</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-vk" ></i> fa fa-vk</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-vnv" ></i> fa fa-vnv</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-voicemail" ></i> fa fa-voicemail</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-volleyball-ball" ></i> fa fa-volleyball-ball</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-volume-down" ></i> fa fa-volume-down</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-volume-mute" ></i> fa fa-volume-mute</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-volume-off" ></i> fa fa-volume-off</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-volume-up" ></i> fa fa-volume-up</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-vote-yea" ></i> fa fa-vote-yea</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-vr-cardboard" ></i> fa fa-vr-cardboard</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-vuejs" ></i> fa fa-vuejs</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-walking" ></i> fa fa-walking</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-wallet" ></i> fa fa-wallet</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-warehouse" ></i> fa fa-warehouse</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-water" ></i> fa fa-water</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-wave-square" ></i> fa fa-wave-square</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-waze" ></i> fa fa-waze</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-weebly" ></i> fa fa-weebly</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-weibo" ></i> fa fa-weibo</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-weight" ></i> fa fa-weight</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-weight-hanging" ></i> fa fa-weight-hanging</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-weixin" ></i> fa fa-weixin</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-whatsapp" ></i> fa fa-whatsapp</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-whatsapp-square" ></i> fa fa-whatsapp-square</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-wheelchair" ></i> fa fa-wheelchair</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-whmcs" ></i> fa fa-whmcs</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-wifi" ></i> fa fa-wifi</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-wikipedia-w" ></i> fa fa-wikipedia-w</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-wind" ></i> fa fa-wind</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-window-close" ></i> fa fa-window-close</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-window-maximize" ></i> fa fa-window-maximize</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-window-minimize" ></i> fa fa-window-minimize</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-window-restore" ></i> fa fa-window-restore</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-windows" ></i> fa fa-windows</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-wine-bottle" ></i> fa fa-wine-bottle</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-wine-glass" ></i> fa fa-wine-glass</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-wine-glass-alt" ></i> fa fa-wine-glass-alt</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-wix" ></i> fa fa-wix</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-wizards-of-the-coast" ></i> fa fa-wizards-of-the-coast</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-wolf-pack-battalion" ></i> fa fa-wolf-pack-battalion</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-won-sign" ></i> fa fa-won-sign</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-wordpress" ></i> fa fa-wordpress</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-wordpress-simple" ></i> fa fa-wordpress-simple</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-wpbeginner" ></i> fa fa-wpbeginner</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-wpexplorer" ></i> fa fa-wpexplorer</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-wpforms" ></i> fa fa-wpforms</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-wpressr" ></i> fa fa-wpressr</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-wrench" ></i> fa fa-wrench</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-x-ray" ></i> fa fa-x-ray</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-xbox" ></i> fa fa-xbox</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-xing" ></i> fa fa-xing</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-xing-square" ></i> fa fa-xing-square</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-y-combinator" ></i> fa fa-y-combinator</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-yahoo" ></i> fa fa-yahoo</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-yammer" ></i> fa fa-yammer</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-yandex" ></i> fa fa-yandex</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-yandex-international" ></i> fa fa-yandex-international</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-yarn" ></i> fa fa-yarn</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-yelp" ></i> fa fa-yelp</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-yen-sign" ></i> fa fa-yen-sign</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-yin-yang" ></i> fa fa-yin-yang</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-yoast" ></i> fa fa-yoast</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-youtube" ></i> fa fa-youtube</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-youtube-square" ></i> fa fa-youtube-square</div>
        <div class="fa-hover col s4 m4 l4 "><i class="fa fa-zhihu" ></i> fa fa-zhihu</div>
    </div>
</div>    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud Alibaba Nacos</title>
    <url>/posts/a46e46f8.html</url>
    <content><![CDATA[<h2 id="SpringCloud-Alibaba-Nacos服务注册和配置中心"><a href="#SpringCloud-Alibaba-Nacos服务注册和配置中心" class="headerlink" title="SpringCloud Alibaba Nacos服务注册和配置中心"></a>SpringCloud Alibaba Nacos服务注册和配置中心</h2><p>相关链接：</p>
<ul>
<li><a href="bad02d94.html">SpringCloud 微服务学习</a></li>
<li><a href="eeda118.html">RESTful 接口设计规范</a></li>
<li><a href="648d6b26.html">SpringCloud Eureka 服务注册与发现</a></li>
<li><a href="3010739f.html">SpringCloud Consul 服务注册与发现</a></li>
<li><a href="7ecbba09.html">SpringCloud Ribbon 客户端负载均衡与服务调用</a></li>
<li><a href="b27245de.html">SpringCloud OpenFeign 服务接口调用</a></li>
<li><a href="464bb413.html">SpringCloud Hystrix熔断器</a></li>
<li><a href="bc16d093.html">SpringCloud Gateway 服务网关</a></li>
<li><a href="fbbe72e1.html">SpringCloud Zuul 服务网关</a></li>
<li><a href="5b5896d1.html">Spring Cloud Config 分布式配置中心</a></li>
<li><a href="9e02a3e8.html">Spring Cloud Bus 消息总线</a></li>
<li><a href="7f3b07b1.html">SpringCloud Stream 消息驱动</a></li>
<li><a href="b99c053f.html">SpringCloud Sleuth 分布式请求链路追踪</a></li>
<li><a href="461589aa.html">SpringCloud Alibaba</a></li>
<li><a href="a46e46f8.html">SpringCloud Alibaba Nacos服务注册和配置中心</a></li>
<li><a href="5122a811.html">SpringCloud Alibaba Sentinel 实现熔断与限流</a></li>
<li><a href="fb7c74c4.html">SpringCloud Alibaba Seata 分布式事务</a></li>
</ul>
<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p>Nacos ：Nacos：Dynamic Naming and Configuration Service，服务注册与配置中心。</p>
<p>Na : Naming 缩写，</p>
<p>Co ：Configuration 缩写，</p>
<p>S ：Service 缩写</p>
<p><strong>相关网站</strong></p>
<p>gitHub项目地址：<a href="https://github.com/alibaba/Nacos" target="_blank" rel="noopener">https://github.com/alibaba/Nacos</a></p>
<p>Nacos 官网：<a href="https://nacos.io/zh-cn/index.html" target="_blank" rel="noopener">https://nacos.io/zh-cn/index.html</a></p>
<p>Github 地址：<a href="https://spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html#_spring_cloud_alibaba_nacos_discovery" target="_blank" rel="noopener">https://spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html#_spring_cloud_alibaba_nacos_discovery</a></p>
<h2 id="二、Nacos"><a href="#二、Nacos" class="headerlink" title="二、Nacos"></a>二、Nacos</h2><h3 id="1、基本概念"><a href="#1、基本概念" class="headerlink" title="1、基本概念"></a>1、基本概念</h3><p>Nacos是用构建微服务应用的动态服务发现，配置管理和服务管理中心。是服务注册中心和服务配置中心的组合。</p>
<p>Nacos = Eureka + Config +Bus .</p>
<p>Nacos 内置Ribbon，可以用于消费端的负载均衡。</p>
<h3 id="2、主要功能："><a href="#2、主要功能：" class="headerlink" title="2、主要功能："></a>2、主要功能：</h3><p>（1）替代 Eureka 成为服务注册中心。</p>
<p>（2）替代 Config 成为服务配置中心。</p>
<p>（3）动态DNS服务</p>
<p>（4）服务及其元数据管理</p>
<h3 id="3、服务注册中心比较"><a href="#3、服务注册中心比较" class="headerlink" title="3、服务注册中心比较"></a>3、服务注册中心比较</h3><p>简单比较</p>
<p>注意：参考时间（2019-2020）</p>
<table>
<thead>
<tr>
<th>服务注册与发现</th>
<th>CAP模型</th>
<th>Web 界面</th>
<th>社区活跃度</th>
</tr>
</thead>
<tbody><tr>
<td>Eureka</td>
<td>AP</td>
<td>支持</td>
<td>低</td>
</tr>
<tr>
<td>Zookeeper</td>
<td>CP</td>
<td>不支持</td>
<td>中</td>
</tr>
<tr>
<td>Consul</td>
<td>CP</td>
<td>支持</td>
<td>高</td>
</tr>
<tr>
<td>Nacos</td>
<td>AP</td>
<td>支持</td>
<td>高</td>
</tr>
</tbody></table>
<p>特性比较：</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/nacos-compare-01.jpg" alt="Nacos 比较"></p>
<p>服务发现比较：</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/nacos-compare-02.jpg" alt="Nacos 比较"></p>
<p>Nacos 支持AP模式和CP模式切换。</p>
<p>一般而言，不需要存储服务级别的信息且服务实例是通过Nacos-client 注册，并且能保持心跳进行上报，就可以选择AP模式，即高可用-分区容错模式。AP模式为了服务高可用，减弱了一致性，因为AP模式只支持注册临时实例。当前主流服务Spring Cloud 和 Dubbo 服务都适用于AP模式。</p>
<p>如果要存储服务级别的信息或存储配置信息，那么CP是必须的，K8S服务和DNS服务适用于CP模式，即强一致-分区容错模式。CP模式为了数据一致，降低了服务的高可用性，CP模式支持注册持久化实例，此时以Raft 协议为集群运行模式，该模式下注册实例前必须先注册服务，如果服务不存在则返回错误。</p>
<p>Nacos 切换模式命令为：</p>
<pre class=" language-bash"><code class="language-bash">curl -X PUT <span class="token string">'<span class="token variable">$NACOS_SERVER</span>:8848/nacos/v1/ns/operator/switches?entry=serverMode&amp;value=CP'</span></code></pre>
<h2 id="三、Nacos-安装"><a href="#三、Nacos-安装" class="headerlink" title="三、Nacos 安装"></a>三、Nacos 安装</h2><h3 id="1、准备条件"><a href="#1、准备条件" class="headerlink" title="1、准备条件"></a>1、准备条件</h3><p>安装 JDK1.8 和 Maven 3 </p>
<h3 id="2、下载"><a href="#2、下载" class="headerlink" title="2、下载"></a>2、下载</h3><p>gitHub 下载地址：<a href="https://github.com/alibaba/nacos/releases" target="_blank" rel="noopener">https://github.com/alibaba/nacos/releases</a></p>
<p>下载之后解压安装包即可，Windows 直接运行bin目录的startup.cmd，Linux 直接运行bin目录的startup.sh。</p>
<p>启动成功后访问web界面：<a href="http://localhost:8848/nacos" target="_blank" rel="noopener">http://localhost:8848/nacos</a></p>
<p>登录账户/密码：nacos/nacos</p>
<p>登录之后进入系统：</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/nacos-web-demo-01.jpg" alt="Nacos Web 控制台"></p>
<h2 id="四、简单实例"><a href="#四、简单实例" class="headerlink" title="四、简单实例"></a>四、简单实例</h2><p>官方实例：<a href="https://nacos.io/zh-cn/docs/quick-start-spring-cloud.html" target="_blank" rel="noopener">https://nacos.io/zh-cn/docs/quick-start-spring-cloud.html</a></p>
<h3 id="1、作为服务注册中心"><a href="#1、作为服务注册中心" class="headerlink" title="1、作为服务注册中心"></a>1、作为服务注册中心</h3><p>创建3个工程，2个作为服务提供端，1个作为服务消费端。</p>
<p>服务端：nacos-provider-6070，nacos-provider-6071</p>
<p>客户端：nacos-consumer-6080</p>
<h3 id="1-1、服务提供端"><a href="#1-1、服务提供端" class="headerlink" title="1.1、服务提供端"></a>1.1、服务提供端</h3><h4 id="（1）引入POM依赖"><a href="#（1）引入POM依赖" class="headerlink" title="（1）引入POM依赖"></a>（1）引入POM依赖</h4><p>父工程：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--spring cloud alibaba 2.1.0.RELEASE--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-alibaba-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>
<p>服务端工程POM依赖：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.62<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre>
<h4 id="（2）YML配置"><a href="#（2）YML配置" class="headerlink" title="（2）YML配置"></a>（2）YML配置</h4><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6070</span>

<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> nacos<span class="token punctuation">-</span>user<span class="token punctuation">-</span>provider
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848 </span><span class="token comment" spellcheck="true">#配置Nacos地址</span>

<span class="token key atrule">management</span><span class="token punctuation">:</span>
  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>
    <span class="token key atrule">web</span><span class="token punctuation">:</span>
      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>
        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">'*'</span></code></pre>
<h4 id="（3）主启动类"><a href="#（3）主启动类" class="headerlink" title="（3）主启动类"></a>（3）主启动类</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>alibaba<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>client<span class="token punctuation">.</span>discovery<span class="token punctuation">.</span>EnableDiscoveryClient<span class="token punctuation">;</span>

<span class="token annotation punctuation">@EnableDiscoveryClient</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NacosProvider_6070</span> <span class="token punctuation">{</span> 
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>NacosProvider_6070<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>controller 业务类：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>controller<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Value<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PathVariable<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span>


<span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserProviderController</span>
<span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${server.port}"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> String serverPort<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/v1/user/nacos/{id}"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"nacos registry, serverPort: "</span><span class="token operator">+</span> serverPort<span class="token operator">+</span><span class="token string">"\t id"</span><span class="token operator">+</span>id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="（4）第二个服务提供端"><a href="#（4）第二个服务提供端" class="headerlink" title="（4）第二个服务提供端"></a>（4）第二个服务提供端</h4><p>为了模拟消费端的负载均衡效果，按上述步骤，再建一个服务提供端，端口为6071。</p>
<h4 id="（5）测试服务注册"><a href="#（5）测试服务注册" class="headerlink" title="（5）测试服务注册"></a>（5）测试服务注册</h4><p>启动工程，进行访问地址：<a href="http://lcoalhost:6070/v1/provider/nacos/1" target="_blank" rel="noopener">http://lcoalhost:6070/v1/provider/nacos/1</a></p>
<p>查看Nacos控制台，点击“服务列表”，如果看到微服务名<code>nacos-user-provider</code>说明服务注册成功。</p>
<h3 id="1-2、服务消费端"><a href="#1-2、服务消费端" class="headerlink" title="1.2、服务消费端"></a>1.2、服务消费端</h3><h4 id="（1）引入POM依赖-1"><a href="#（1）引入POM依赖-1" class="headerlink" title="（1）引入POM依赖"></a>（1）引入POM依赖</h4><p>父工程依赖已经引入。</p>
<p>服务端工程POM依赖：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.62<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre>
<h4 id="（2）配置相关"><a href="#（2）配置相关" class="headerlink" title="（2）配置相关"></a>（2）配置相关</h4><p>YML 配置：</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6080</span>


<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> nacos<span class="token punctuation">-</span>consumer<span class="token punctuation">-</span><span class="token number">6080</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>


<span class="token key atrule">service-url</span><span class="token punctuation">:</span>
  <span class="token key atrule">nacos-user-service</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//nacos<span class="token punctuation">-</span>user<span class="token punctuation">-</span>provider
</code></pre>
<p>Java 配置：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>config<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>client<span class="token punctuation">.</span>loadbalancer<span class="token punctuation">.</span>LoadBalanced<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>client<span class="token punctuation">.</span>RestTemplate<span class="token punctuation">;</span>


<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationContextConfig</span>
<span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@LoadBalanced</span> <span class="token comment" spellcheck="true">//Ribbon 负载均衡</span>
    <span class="token keyword">public</span> RestTemplate <span class="token function">getRestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="（3）主启动类-1"><a href="#（3）主启动类-1" class="headerlink" title="（3）主启动类"></a>（3）主启动类</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>alibaba<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>client<span class="token punctuation">.</span>discovery<span class="token punctuation">.</span>EnableDiscoveryClient<span class="token punctuation">;</span>

<span class="token annotation punctuation">@EnableDiscoveryClient</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NacosConsumer_6080</span> <span class="token punctuation">{</span> 
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>NacosConsumer_6080<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>controller 业务类：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>controller<span class="token punctuation">;</span>

<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Value<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PathVariable<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>client<span class="token punctuation">.</span>RestTemplate<span class="token punctuation">;</span>

<span class="token keyword">import</span> javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Resource<span class="token punctuation">;</span>


<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserNacosConsumerController</span>
<span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> RestTemplate restTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${service-url.nacos-user-service}"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> String serverURL<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/consumer/user/nacos/{id}"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">paymentInfo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Long id<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>serverURL<span class="token operator">+</span><span class="token string">"/v1/user/nacos/"</span><span class="token operator">+</span>id<span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span></code></pre>
<h4 id="（4）测试服务调用"><a href="#（4）测试服务调用" class="headerlink" title="（4）测试服务调用"></a>（4）测试服务调用</h4><p>启动工程后，查看Nacos控制台，点击“服务列表”，如果看到微服务名<code>nacos-consumer-6080</code>说明服务注册成功。</p>
<p>服务注册成功后，进行访问地址：<a href="http://lcoalhost:6080/consumer/user/nacos/11" target="_blank" rel="noopener">http://lcoalhost:6080/consumer/user/nacos/11</a> 模拟服务消费端调用服务，多此点击查看，验证是否符合Ribbon的负载均衡效果。</p>
<h3 id="2、作为配置中心"><a href="#2、作为配置中心" class="headerlink" title="2、作为配置中心"></a>2、作为配置中心</h3><p>将Nacos 服务作为配置中心 Nacos Server，那么需要创建Nacos Client 工程，从配置中心拉取自己的配置。创建2个nacos 客户端：nacos-client-6090，nacos-client-6091</p>
<h3 id="2-1-创建客户端"><a href="#2-1-创建客户端" class="headerlink" title="2.1 创建客户端"></a>2.1 创建客户端</h3><h4 id="（1）引入POM依赖-2"><a href="#（1）引入POM依赖-2" class="headerlink" title="（1）引入POM依赖"></a>（1）引入POM依赖</h4><p>父工程已经引入。</p>
<p>服务端工程POM依赖，需要引入config模块。</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!--nacos-config--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!--nacos-discovery--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!--web + actuator--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!--一般基础配置--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre>
<h4 id="（2）YML配置-1"><a href="#（2）YML配置-1" class="headerlink" title="（2）YML配置"></a>（2）YML配置</h4><p>和Config Client 的原理一样，写两个配置，application.yml 和 bootstrap.yml，bootstrap.yml 文件加载的优先级要高于 application.yml 文件。</p>
<p>（A）bootstrap.yml 文件内容</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6090</span>

<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> nacos<span class="token punctuation">-</span>config<span class="token punctuation">-</span>client
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848 </span><span class="token comment" spellcheck="true">#服务注册中心地址</span>
      <span class="token key atrule">config</span><span class="token punctuation">:</span>
        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848 </span><span class="token comment" spellcheck="true">#配置中心地址</span>
        <span class="token key atrule">file-extension</span><span class="token punctuation">:</span> yaml <span class="token comment" spellcheck="true">#指定yaml格式的配置</span>
</code></pre>
<p>（B）application.yml 文件内容</p>
<pre class=" language-java"><code class="language-java">spring<span class="token operator">:</span>
  profiles<span class="token operator">:</span>
    active<span class="token operator">:</span> dev</code></pre>
<h4 id="（3）主启动类-2"><a href="#（3）主启动类-2" class="headerlink" title="（3）主启动类"></a>（3）主启动类</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>alibaba<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>client<span class="token punctuation">.</span>discovery<span class="token punctuation">.</span>EnableDiscoveryClient<span class="token punctuation">;</span>


<span class="token annotation punctuation">@EnableDiscoveryClient</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NacosConfigClient_6090</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>NacosConfigClient_6090<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>controller 业务类：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>controller<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Value<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>context<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RefreshScope<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span>


<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RefreshScope</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigClientController</span>
<span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${config.info}"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> String configInfo<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/config/info"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">getConfigInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> configInfo<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> </code></pre>
<p>通过 Spring Cloud 原生注解 <code>@RefreshScope</code> 实现配置自动更新。</p>
<h4 id="（4）在Nacos中添加配置"><a href="#（4）在Nacos中添加配置" class="headerlink" title="（4）在Nacos中添加配置"></a>（4）在Nacos中添加配置</h4><p>Nacos 作为配置中心，Nacos Client 会从配置中心拉取配置，所以需要在Nacos 的配置中心添加配置。</p>
<p><strong>Nacos 配置匹配规则</strong>：</p>
<p>之前在<code>bootstrap.yml</code>配置了 <code>spring.application.name</code> ，是因为它是构成 Nacos 配置管理 <code>dataId</code>字段的一部分。</p>
<p>在 Nacos Spring Cloud 中，<code>dataId</code> 的完整格式如下：</p>
<pre class=" language-txt"><code class="language-txt">${prefix}-${spring.profiles.active}.${file-extension}</code></pre>
<ul>
<li><p><code>prefix</code> 默认为 <code>spring.application.name</code> 的值，也可以通过配置项 <code>spring.cloud.nacos.config.prefix</code>来配置。</p>
</li>
<li><p><code>spring.profiles.active</code> 即为当前环境对应的 profile，详情可以参考 <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-profiles.html#boot-features-profiles" target="_blank" rel="noopener">Spring Boot文档</a>。 <strong>注意：当 spring.profiles.active 为空时，对应的连接符 - 也将不存在，dataId 的拼接格式变成</strong></p>
</li>
<li><pre><code>${prefix}.${file-extension}</code></pre></li>
<li><p><code>file-exetension</code> 为配置内容的数据格式，可以通过配置项 <code>spring.cloud.nacos.config.file-extension</code> 来配置。目前只支持 <code>properties</code> 和 <code>yaml</code> 类型。</p>
</li>
</ul>
<p><strong>常用配置文件格式</strong>：</p>
<pre class=" language-txt"><code class="language-txt">${spring.application.name}-${spring.profiles.active}.${file-extension}</code></pre>
<p>打开Nacos控制台：</p>
<p>点击”服务列表”—打开表格右上角的加号”+”，出现添加配置页面：</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/nacos-config-demo-01.jpg" alt=""></p>
<p>设置DataId，参考公式</p>
<pre class=" language-txt"><code class="language-txt">${spring.application.name}-${spring.profiles.active}.${file-extension}</code></pre>
<p>从配置文件中可以找到：</p>
<ul>
<li>spring.application.name 的值是 nacos-config-client</li>
<li>spring.profiles.active 的值是 dev</li>
<li>file-extension 的值是 yaml</li>
</ul>
<p>所以DataId 的值是：<code>nacos-config-client-dev.yaml</code></p>
<h4 id="（5）测试拉取配置"><a href="#（5）测试拉取配置" class="headerlink" title="（5）测试拉取配置"></a>（5）测试拉取配置</h4><p>注意，需要先在Nacos 控制台-“配置管理”-“配置管理”的栏目下有没有对应的yaml配置文件，如果没有请先添加。</p>
<p>启动工程nacos-config-client:6090，进行访问地址：<a href="http://lcoalhost:6090//config/info" target="_blank" rel="noopener">http://lcoalhost:6090//config/info</a></p>
<p>修改下Nacos中的yaml配置文件内容，再次调用刚才的访问地址：<a href="http://lcoalhost:6090//config/info，会发现配置已经刷新。" target="_blank" rel="noopener">http://lcoalhost:6090//config/info，会发现配置已经刷新。</a></p>
<h3 id="3、Nacos配置中心分类配置"><a href="#3、Nacos配置中心分类配置" class="headerlink" title="3、Nacos配置中心分类配置"></a>3、Nacos配置中心分类配置</h3><p>在实际开发中，会有多个项目、多个环境问题。</p>
<p>dev开发环境/test测试环境/prod生产环境</p>
<p>Nacos 可以保证指定环境启动时，服务能正确读取到Nacos 配置中心里相应的环境配置文件。</p>
<p>Nacos 设计：</p>
<p><strong>Namespace + Group + Data Id</strong></p>
<p>Namespace 是用于区分部署环境，Group 和 Data Id 逻辑上区别两个目标对象。</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/nacos-config-data-model.jpg" alt="Nacos 分组配置模型"></p>
<p>默认情况下：</p>
<p><strong>Namespace=public，Group=DEFAULT_GROUP，Cluster=DEFAULT</strong></p>
<p>Namespace 主要是用来实现隔离。</p>
<p>如有三个环境：开发环境、测试环境、生产环境。此时可以创建三个Namespace，不同的Namespace之间是隔离的。</p>
<p>Group 默认是DEFAULT_GROUP，Group 可以把不同的服务划分到同一个组。</p>
<p>Service 是微服务，一个Service 可以包含多个Cluster（集群），Nacos 默认Cluster是DEFAULT，Cluster是对指定微服务的一个虚拟划分（逻辑划分）。比如为了容灾，将Service微服务分别部署在北京机房和上海机房，北京机房的Service微服务取个集群名称BJ，上海机房的Service微服务取个集群名称SH。</p>
<p>Instance 微服务实例。</p>
<p>使用三个进行多环境配置方案：</p>
<h3 id="3-1-Data-Id-方案"><a href="#3-1-Data-Id-方案" class="headerlink" title="3.1 Data Id 方案"></a>3.1 Data Id 方案</h3><p>Spring Boot 通过<code>spring.profile.active</code>属性就能进行多环境下配置文件的读取。因此可以指定<code>spring.profile.active</code>和配置文件的DataID来使不同环境下读取不同的配置。</p>
<p>配置方案：<strong>默认空间+默认分组+不同环境的DataID</strong></p>
<p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/nacos-config-demo-dataId.jpg" alt="DataId 方案示例"></p>
<h3 id="3-2-Group-方案"><a href="#3-2-Group-方案" class="headerlink" title="3.2 Group 方案"></a>3.2 Group 方案</h3><p>通过Group实现环境区分。</p>
<p>在Nacos控制台新建两个不同的Group，分别为TEST_GROUP和DEV_GROUP。</p>
<p>然后新建配置文件DataID，此时Data Id 格式为：<code>${spring.application.name}.${file-extension}</code></p>
<p>在<code>boostrap.yml</code> 的config下增加一条group的配置，值可配置为<code>DEV_GROUP</code>或<code>TEST_GROUP</code></p>
<pre class=" language-YAML"><code class="language-YAML">server:
  port: 6090

spring:
  application:
    name: nacos-config-client
  cloud:
    nacos:
      discovery:
        server-addr: localhost:8848 #服务注册中心地址
      config:
        server-addr: localhost:8848 #配置中心地址
        file-extension: yaml #指定yaml格式的配置
        group: DEV_GROUP</code></pre>
<h3 id="3-3-Namespace-方案"><a href="#3-3-Namespace-方案" class="headerlink" title="3.3 Namespace 方案"></a>3.3 Namespace 方案</h3><p>Nacos 控制台-“命名空间”-新建两个不同的命名空间dev和test。</p>
<p>进入服务管理-服务列表查看，列举了命名空间如图</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/nacos-config-demo-namespace.jpg" alt="Namespace 示例"></p>
<p>在对应的命名空间内添加配置，可以在不同的组创建配置。</p>
<p>在<code>boostrap.yml</code> 的config下增加一条namespace的配置，值对应命名空间的ID值。</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6090</span>

<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> nacos<span class="token punctuation">-</span>config<span class="token punctuation">-</span>client
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848 </span><span class="token comment" spellcheck="true">#服务注册中心地址</span>
      <span class="token key atrule">config</span><span class="token punctuation">:</span>
        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848 </span><span class="token comment" spellcheck="true">#配置中心地址</span>
        <span class="token key atrule">file-extension</span><span class="token punctuation">:</span> yaml <span class="token comment" spellcheck="true">#指定yaml格式的配置</span>
        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> 3c5e51ab<span class="token punctuation">-</span>9904<span class="token punctuation">-</span>4485<span class="token punctuation">-</span>884a<span class="token punctuation">-</span>5bfbc1285910
        <span class="token key atrule">group</span><span class="token punctuation">:</span> DEV_GROUP</code></pre>
<p>application.yml 文件：</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>
    <span class="token key atrule">active</span><span class="token punctuation">:</span> dev</code></pre>
<p>那么此时，服务启动之后，拉取的配置是namespace 的id 为 <code>3c5e51ab-9904-4485-884a-5bfbc1285910</code> 即dev 的命名空间，Group 为 DEV_GROUP 下的，Data id 为 dev 环境的配置文件。</p>
<p>此时使用了三级分组。</p>
<h2 id="五、Nacos-集群和配置持久化"><a href="#五、Nacos-集群和配置持久化" class="headerlink" title="五、Nacos 集群和配置持久化"></a>五、Nacos 集群和配置持久化</h2><p>官方说明：<a href="https://nacos.io/zh-cn/docs/cluster-mode-quick-start.html" target="_blank" rel="noopener">https://nacos.io/zh-cn/docs/cluster-mode-quick-start.html</a></p>
<h3 id="1、集群部署架构图"><a href="#1、集群部署架构图" class="headerlink" title="1、集群部署架构图"></a>1、集群部署架构图</h3><p>因此开源的时候推荐用户把所有服务列表放到一个vip下面，然后挂到一个域名下面</p>
<p><a href="http://ip1" target="_blank" rel="noopener">http://ip1</a>:port/openAPI  直连ip模式，机器挂则需要修改ip才可以使用。</p>
<p><a href="http://VIP" target="_blank" rel="noopener">http://VIP</a>:port/openAPI  挂载VIP模式，直连vip即可，下面挂server真实ip，可读性不好。</p>
<p><a href="http://nacos.com" target="_blank" rel="noopener">http://nacos.com</a>:port/openAPI  域名 + VIP模式，可读性好，而且换ip方便，推荐模式</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/nacos-config-cluster.jpg" alt="Nacos 架构图"></p>
<p>在百度找了一张图：</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/nacos-config-cluster-demo.jpg" alt="Nacos 架构图"></p>
<h3 id="2、部署方式"><a href="#2、部署方式" class="headerlink" title="2、部署方式"></a>2、部署方式</h3><p>官方地址：<a href="https://nacos.io/zh-cn/docs/deployment.html" target="_blank" rel="noopener">https://nacos.io/zh-cn/docs/deployment.html</a></p>
<p>三种部署模式：</p>
<ul>
<li>单机模式 - 用于测试和单机试用。</li>
<li>集群模式 - 用于生产环境，确保高可用。</li>
<li>多集群模式 - 用于多数据中心场景。</li>
</ul>
<h3 id="2-1-单机模式下运行Nacos"><a href="#2-1-单机模式下运行Nacos" class="headerlink" title="2.1 单机模式下运行Nacos"></a>2.1 <strong>单机模式下运行Nacos</strong></h3><p><strong>Linux/Unix/Mac</strong></p>
<ul>
<li>Standalone 表示是单机模式： <code>sh startup.sh  -m standalone</code></li>
</ul>
<p><strong>Windows</strong></p>
<ul>
<li>执行<code>cmd startup.cmd</code> 或者双击 startup.cmd 文件。</li>
</ul>
<p><strong>单机模式支持mysql</strong></p>
<p>在0.7版本之前，在单机模式时nacos默认使用自带嵌入式数据库（derby）实现数据的存储，不方便观察数据存储的基本情况。0.7版本增加了支持mysql数据源能力，从derby 切换使用mysql具体的操作步骤：</p>
<ul>
<li>1.安装mysql数据库，版本要求：5.6.5+</li>
<li>2.初始化mysql数据库，数据库初始化文件：nacos-mysql.sql，可以在<code>/nacos/conf</code>目录下找到sql脚本</li>
<li>3.修改<code>conf/application.properties</code>文件，增加支持mysql数据源配置（目前只支持mysql），文件末尾添加mysql数据源的url、用户名和密码。</li>
</ul>
<pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.datasource.platform</span><span class="token punctuation">=</span><span class="token attr-value">mysql</span>

<span class="token attr-name">db.num</span><span class="token punctuation">=</span><span class="token attr-value">1</span>
<span class="token attr-name">db.url.0</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://192.168.100.125:3306/nacos_devtest?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true</span>
<span class="token attr-name">db.user</span><span class="token punctuation">=</span><span class="token attr-value">root</span>
<span class="token attr-name">db.password</span><span class="token punctuation">=</span><span class="token attr-value">123456</span></code></pre>
<h3 id="2-2-集群模式下运行Nacos"><a href="#2-2-集群模式下运行Nacos" class="headerlink" title="2.2 集群模式下运行Nacos"></a>2.2 集群模式下运行Nacos</h3><h3 id="2-2-1-预备环境准备"><a href="#2-2-1-预备环境准备" class="headerlink" title="2.2.1. 预备环境准备"></a>2.2.1. 预备环境准备</h3><p>官网说明，请确保是在环境中安装使用:</p>
<ol>
<li>64 bit OS  Linux/Unix/Mac，推荐使用Linux系统。</li>
<li>64 bit JDK 1.8+；<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">下载</a>.<a href="https://docs.oracle.com/cd/E19182-01/820-7851/inst_cli_jdk_javahome_t/" target="_blank" rel="noopener">配置</a>。</li>
<li>Maven 3.2.x+；<a href="https://maven.apache.org/download.cgi" target="_blank" rel="noopener">下载</a>.<a href="https://maven.apache.org/settings.html" target="_blank" rel="noopener">配置</a>。</li>
<li>3个或3个以上Nacos节点才能构成集群。</li>
</ol>
<h3 id="2-2-2-下载安装包"><a href="#2-2-2-下载安装包" class="headerlink" title="2.2.2.下载安装包"></a>2.2.2.下载安装包</h3><p>两种方式来获取 Nacos。</p>
<p>（1）从 Github 上下载源码方式</p>
<p>下载地址：<a href="https://github.com/alibaba/nacos/releases/download/" target="_blank" rel="noopener">https://github.com/alibaba/nacos/releases/download/</a></p>
<p>选择一个版本下载后进行编译。</p>
<pre><code>unzip nacos-source.zip
cd nacos/
mvn -Prelease-nacos clean install -U  
cd nacos/distribution/target/nacos-server-1.3.0/nacos/bin</code></pre><p>（2）下载编译后压缩包方式</p>
<p>下载编译后压缩包方式：<a href="https://github.com/alibaba/nacos/releases/download/" target="_blank" rel="noopener">https://github.com/alibaba/nacos/releases/download/</a></p>
<ul>
<li>windows： <a href="https://github.com/alibaba/nacos/releases/download/1.3.0/nacos-server-1.3.0.zip" target="_blank" rel="noopener">zip包</a> </li>
<li>Linux：<a href="https://github.com/alibaba/nacos/releases/download/1.3.0/nacos-server-1.3.0.tar.gz" target="_blank" rel="noopener">tar.gz包</a> </li>
</ul>
<p>下载后解压：</p>
<pre><code>unzip nacos-server-1.3.0.zip 或者 tar -xvf nacos-server-1.3.0.tar.gz
cd nacos/bin</code></pre><h3 id="2-2-3-集群环境搭建"><a href="#2-2-3-集群环境搭建" class="headerlink" title="2.2.3.集群环境搭建"></a>2.2.3.集群环境搭建</h3><p>（1）环境准备</p>
<p>Linux Centos </p>
<p>Nacos 集群环境需要3个或3个以上Nacos节点才能构成集群。</p>
<p>下载地址：<a href="https://github.com/alibaba/nacos/releases/tag/1.1.4" target="_blank" rel="noopener">https://github.com/alibaba/nacos/releases/tag/1.1.4</a></p>
<p>解压后安装。</p>
<p>安装并配置Mysql 57 ，执行<code>nacos-mysql.sql</code>，Linux 如果不想使用命令，也可以使用mysql客户端工具连接后执行。执行之后会有Nacos 的配置表。</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/nacos-mysql-config-table.jpg" alt="脚本执行完成的表"></p>
<p>（2）修改配置</p>
<p>修改<code>nacos/conf/application.properties</code>配置：</p>
<pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.datasource.platform</span><span class="token punctuation">=</span><span class="token attr-value">mysql</span>

<span class="token attr-name">db.num</span><span class="token punctuation">=</span><span class="token attr-value">1</span>
<span class="token attr-name">db.url.0</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://192.168.100.125:3306/nacos_config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true</span>
<span class="token attr-name">db.user</span><span class="token punctuation">=</span><span class="token attr-value">root</span>
<span class="token attr-name">db.password</span><span class="token punctuation">=</span><span class="token attr-value">12345</span>
</code></pre>
<p>mysql  授权远程访问</p>
<pre class=" language-bash"><code class="language-bash">GRANT ALL PRIVILEGES ON *.* TO <span class="token string">'root'</span>@<span class="token string">'%'</span> IDENTIFIED BY <span class="token string">'123456'</span> WITH GRANT OPTION<span class="token punctuation">;</span>
flush privileges<span class="token punctuation">;</span></code></pre>
<p>（3）集群配置cluster.conf</p>
<p>3台nacos机器的不同服务端口号，比如：8801,8802,8803</p>
<p>备份集群配置：</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">cp</span> cluster.conf   cluster.conf.bk</code></pre>
<p>配置集群：</p>
<pre class=" language-bash"><code class="language-bash">vim cluster.conf </code></pre>
<p>文件内容：</p>
<pre class=" language-txt"><code class="language-txt">192.168.100.125:8801
192.168.100.125:8802
192.168.100.125:8803</code></pre>
<p>注意：IP不能写<code>127.0.0.1</code>,必须是Linux命令<code>hostname -i</code>能够识别的IP</p>
<p>（4）修改启动脚本start.sh</p>
<p>编辑Nacos的启动脚本<code>startup.sh</code>，使它能够接受不同的启动端口。</p>
<p>找到<code>nacos/bin</code>目录下<code>startup.sh</code>文件</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/nacos-cluster-update-start-sh-01.jpg" alt="修改对比图1"></p>
<p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/nacos-cluster-update-start-sh-02.jpg" alt="修改对比图2"></p>
<p>（4）启动集群</p>
<p>进入 <code>nacos/bin</code>目录，带上端口分别启动：</p>
<pre class=" language-bash"><code class="language-bash">./startup.sh -p 8801
./startup.sh -p 8802
./startup.sh -p 8803</code></pre>
<p>（5）nginx配置</p>
<p>Nginx 作为负载均衡器，修改nginx的配置文件：</p>
<pre><code>...

upstream cluster{                                                        
    server 127.0.0.1:3333;
    server 127.0.0.1:4444;
    server 127.0.0.1:5555;
}

http{
    ...

    server{

        listen 8888;
        server_name localhost;
        location /{
             proxy_pass http://cluster;
        }                                            
    }
}</code></pre><p>检查并重新加载nginx 配置</p>
<pre class=" language-bash"><code class="language-bash">nginx -t
nginx -s reload</code></pre>
<p>（6）测试</p>
<p>通过Nginx 访问Nacos ：<a href="https://192.168.100.125:8888/nacos/#/login" target="_blank" rel="noopener">https://192.168.100.125:8888/nacos/#/login</a></p>
<p>在控制台新建配置后发布，然后连接mysql是否写入新增加的配置，如果写入成功说明配置持久化成功。</p>
<h2 id="六、其他"><a href="#六、其他" class="headerlink" title="六、其他"></a>六、其他</h2><p>后续学习再补充。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>定时任务之Spring Task</title>
    <url>/posts/5a5ab620.html</url>
    <content><![CDATA[<h2 id="定时任务之Spring-Task"><a href="#定时任务之Spring-Task" class="headerlink" title="定时任务之Spring Task"></a>定时任务之Spring Task</h2><blockquote>
<p>本文主要记录学习Spring Task的相关内容。<br>  整理于2020-06-25，最后更新2020-07-18。</p>
</blockquote>
<h2 id="一、简述"><a href="#一、简述" class="headerlink" title="一、简述"></a>一、简述</h2><blockquote>
<p>Spring 3.0以后推出的定时器类调度工具，Spring Task是一个轻量级的quartz。</p>
<p>配置简单，功能较为齐全，在实际项目中经常会用到。</p>
<p>spring task在spring-context的模块中，无需单独引入。</p>
<p>spring task支持xml配置、注解配置、java配置三种方式。本文分别演示3种不同的使用方式。</p>
</blockquote>
<p>关于调度的实现方式主要有三种：</p>
<p>（1）Java自带的Api有个Timer类和TimerTask类。</p>
<p>（2）Spring自带的Spring Task调度工具。</p>
<p>（3）Quartz（读阔子）开源框架，功能强大，使用起来稍显复杂。</p>
<p>本文主要记录第二种。其他两种请参考文章底部相关文章。</p>
<p>在开始之前需要说明是一个定时任务的几个组件：</p>
<p>（A）执行的任务类；</p>
<p>（B）触发任务的触发器；</p>
<p>（C）管理任务的任务调度器。</p>
<p>后续配置都是以这三点为中心进行的。</p>
<h2 id="二-Spring-Task-使用方式"><a href="#二-Spring-Task-使用方式" class="headerlink" title="二 Spring Task 使用方式"></a>二 Spring Task 使用方式</h2><h3 id="1、XML方法"><a href="#1、XML方法" class="headerlink" title="1、XML方法"></a>1、XML方法</h3><p>XML算是比较传统的方式，需要手工配置</p>
<p>实例：</p>
<p>执行的任务类：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>job<span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token keyword">static</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>System<span class="token punctuation">.</span>out<span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserTask</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" this is  user task "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>XML配置：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userTask<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xiaocai.job.TaskTest<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">task:</span>scheduled-tasks</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">task:</span>scheduled</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userTask<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doSomething<span class="token punctuation">"</span></span> <span class="token attr-name">cron</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0/5 * * * * ?<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">task:</span>scheduled-tasks</span><span class="token punctuation">></span></span></code></pre>
<p>cron就是执行表达式：<code>0/5 * * * * ?</code>表示每5s执行一次。</p>
<p><strong>参数说明：</strong></p>
<p><code>scheduled-tasks</code> ：调度任务池，可以定义多个任务task，这里指定了一个任务task。</p>
<p><code>scheduled</code>：可以理解为一个调度实例。其中：<code>ref</code>表示调度的执行任务类，<code>method</code>表示执行任务类中的调度的方法；<code>cron</code>调度执行时间频次表达式，一般顺序是，<code>秒 分 时 日 月 周 年</code>，年通常都会省略。具体的表达式规则，单独参考《定时任务Cron的使用》。</p>
<p><code>task</code>中用于指定时间频率的方式主要有：</p>
<p>（1）<code>cron</code> 定时表达式模式。</p>
<p>（2）fixed-rate：固定频次执行。单位毫秒，每隔指定时间执行一次</p>
<p>（3）fixed-delay：固定延迟执行。单位毫秒，上次执行任务完成后，间隔指定时间后执行下次任务。</p>
<p>（4）initial-delay：首次执行延迟。单位毫秒，第一次执行任务的时候，延迟指定时间再执行。</p>
<blockquote>
<p>spring task 默认使用的是同步模式，即上次任务执行完后，才会执行下次任务。上述时间频率只有在非同步模式下才会完全符合，在同步模式下，实际计算方式为：<br> <strong>fixed-rate</strong> ：任务的实际执行时间+fixedRate时间之后，执行下次任务<br> <strong>fixed-delay</strong>：任务的实际执行时间如果小于fixedDelay，则时间间隔为fixedDelay；如果任务的实际执行时间大于fixedDelay，则上次任务执行完后，立即执行下一次任务。</p>
</blockquote>
<p><strong>适用场景</strong></p>
<p>适合的定时任务，比较稳定、不经常变化，操作，日志要求不严格。</p>
<h3 id="2、注解配置"><a href="#2、注解配置" class="headerlink" title="2、注解配置"></a>2、注解配置</h3><p>执行任务类：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>job<span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token keyword">static</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>System<span class="token punctuation">.</span>out<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserTask</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>cron <span class="token operator">=</span> <span class="token string">"0 0/5 * * * ?"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Async</span><span class="token punctuation">(</span><span class="token string">"executor"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomethingAnnotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" this is  user task for Annotation "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>配置方式分有XML和无XML。</p>
<p>（A）有XML的配置：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 定时任务配置 scheduler 注解方式  --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">task:</span>executor</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>executor<span class="token punctuation">"</span></span> <span class="token attr-name">pool-size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">task:</span>scheduler</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scheduler<span class="token punctuation">"</span></span> <span class="token attr-name">pool-size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">task:</span>annotation-driven</span> <span class="token attr-name">executor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>executor<span class="token punctuation">"</span></span> <span class="token attr-name">scheduler</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scheduler<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!-- 启用注解 --></span>
&lt;</code></pre>
<p>参数说明：**</p>
<p><code>@Async</code>：spring异步模式支持，<code>@Async</code>的值为执行器<code>executor</code>，内部默认为名为<code>SimpleAsyncTaskExecutor</code>的线程池来执行任务。名字需要与xml中配置的一致。如果不要求异步，该注解可略。<code>@Async</code>使用之后，方法仍然是由一个线程来同步执行的。</p>
<p><code>executor</code>：用于配置线程池。<code>pool-size</code>：线程池数量，可设置范围，也可设置指定值，取值范围[ 1，<code>Integer.MAX_VALUE</code>]。</p>
<p><code>scheduler</code>：用于配置任务调度器。<code>pool-size</code>：调度池数量，可设置范围，也可设置指定值，取值范围[ 1，<code>Integer.MAX_VALUE</code>]。</p>
<p>啰嗦一句，如果没有使用<code>@Component</code>或<code>@Service</code>注解，则y要配置一下执行任务栏的<code>bean</code>，多个执行任务类可以执行扫描包：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xiaocai.job<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> </code></pre>
<p>（B）无XML配置：</p>
<p>如<code>springboot</code>中使用，直接在启动类添加调度注解即可。<code>@EnableScheduling</code>是在Spring 3.1之后可以使用。</p>
<p>如果需要开启并行执行，使用异步注解。在启动类上加入<code>@EnableAsync</code>。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>web<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>EnableScheduling<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>EnableTransactionManagement<span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableAsync</span>
<span class="token annotation punctuation">@EnableScheduling</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TimeTaskApplication</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>TimeTaskApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span></code></pre>
<p>示例：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>web<span class="token punctuation">.</span>job<span class="token punctuation">;</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserTask</span> <span class="token punctuation">{</span>

    <span class="token comment" spellcheck="true">//@Scheduled(cron = "0 0/5 * * * ?")</span>
    <span class="token comment" spellcheck="true">//@Scheduled(fixedDelayString="3000")</span>
    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>fixedRate<span class="token operator">=</span><span class="token number">2000</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doUserHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" --- "</span><span class="token operator">+</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"-- task for Annotation "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>执行结果：</p>
<pre class=" language-txt"><code class="language-txt"> --- 2020-06-25T16:08:18.455-- task for Annotation 
 --- 2020-06-25T16:08:20.458-- task for Annotation
 --- 2020-06-25T16:08:22.460-- task for Annotation
 --- 2020-06-25T16:08:24.463-- task for Annotation
 --- 2020-06-25T16:08:26.455-- task for Annotation </code></pre>
<p>注解中，除了<code>@Scheduled(fixedRate=2000)</code>和<code>@Scheduled(cron = &quot;0 0/5 * * * ?&quot;)</code>还有<code>fixedRateString</code>、<code>fixedDelay</code>、<code>fixedDelayString</code>、<code>initialDelay</code>、<code>initialDelayString</code>等可以自行尝试。</p>
<p><strong>适用场景</strong></p>
<p>与XML使用类似，把XML变成了注解。可以配合spring异步注解，实现任务线程的并行。</p>
<h3 id="3、Java方式"><a href="#3、Java方式" class="headerlink" title="3、Java方式"></a>3、Java方式</h3><p>使用java方法可以实现<code>SchedulingConfigurer</code>接口的<code>configureTasks</code>方法。利用调度任务注册器<code>ScheduledTaskRegistrar</code>来注册需要执行的任务。添加任务的方式有：</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/time-task/spring-task.png" alt="添加任务方式"></p>
<p>示例：</p>
<p>业务执行类：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>job<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>LocalDateTime<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BuzTask</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//当前业务执行参数</span>
    <span class="token keyword">private</span> String jobData <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">BuzTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token function">BuzTask</span><span class="token punctuation">(</span>String jobData<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token keyword">this</span><span class="token punctuation">.</span>jobData <span class="token operator">=</span> jobData<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" jobData : "</span> <span class="token operator">+</span>jobData<span class="token punctuation">)</span><span class="token punctuation">;</span>
           System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" execute buzz code ..."</span> <span class="token operator">+</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> String <span class="token function">getJobData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> jobData<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setJobData</span><span class="token punctuation">(</span>String jobData<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>jobData <span class="token operator">=</span> jobData<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span></code></pre>
<p>自定义的调度管理类：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>job<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>Trigger<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>TriggerContext<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>SchedulingConfigurer<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>config<span class="token punctuation">.</span>ScheduledTaskRegistrar<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>support<span class="token punctuation">.</span>CronTrigger<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomeTaskUtil</span> <span class="token keyword">implements</span> <span class="token class-name">SchedulingConfigurer</span><span class="token punctuation">{</span>

    <span class="token comment" spellcheck="true">//这些参数也可以使用单独的JavaBean,或保存在数据库</span>
    <span class="token keyword">private</span>  String cron <span class="token operator">=</span><span class="token string">"0/10 * * * * ?"</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> String taskName <span class="token operator">=</span> <span class="token string">"Schedule_"</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> String jobData <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//公共执行参数</span>
    <span class="token keyword">private</span> BuzTask buzTask<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureTasks</span><span class="token punctuation">(</span>ScheduledTaskRegistrar taskRegistrar<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        buzTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BuzTask</span><span class="token punctuation">(</span>jobData<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//注册调度任务</span>
        taskRegistrar<span class="token punctuation">.</span><span class="token function">addTriggerTask</span><span class="token punctuation">(</span>buzTask<span class="token punctuation">,</span> <span class="token function">getTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


   <span class="token comment" spellcheck="true">/**（也可以像任务执行类一样写在外面）
    * 业务触发器
    * @return
    */</span>
   <span class="token keyword">private</span> Trigger <span class="token function">getTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Trigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token annotation punctuation">@Override</span>
           <span class="token keyword">public</span> Date <span class="token function">nextExecutionTime</span><span class="token punctuation">(</span>TriggerContext triggerContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
               <span class="token comment" spellcheck="true">// 触发器</span>
               CronTrigger trigger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CronTrigger</span><span class="token punctuation">(</span>cron<span class="token punctuation">)</span><span class="token punctuation">;</span>
               <span class="token keyword">return</span> trigger<span class="token punctuation">.</span><span class="token function">nextExecutionTime</span><span class="token punctuation">(</span>triggerContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token punctuation">}</span>
       <span class="token punctuation">}</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//getter setter   </span>
<span class="token punctuation">}</span></code></pre>
<p>Controller类：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>job<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Controller<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TaskController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> SomeTaskUtil someTaskUtil <span class="token punctuation">;</span>

    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/timeTask"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">timeTask</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//这里跳测试页面，页面就三个文本框用来传，taskName ，cron，jobData</span>
        <span class="token keyword">return</span> <span class="token string">"timeTask"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/timeTask/changeCron"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> <span class="token function">changeCron</span><span class="token punctuation">(</span>String taskName<span class="token punctuation">,</span>String cron<span class="token punctuation">,</span>String jobData<span class="token punctuation">)</span><span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" taskName "</span><span class="token operator">+</span>taskName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" cron "</span><span class="token operator">+</span>taskName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" jobData "</span> <span class="token operator">+</span> taskName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        someTaskUtil<span class="token punctuation">.</span><span class="token function">setTaskName</span><span class="token punctuation">(</span>taskName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        someTaskUtil<span class="token punctuation">.</span><span class="token function">setCron</span><span class="token punctuation">(</span>cron<span class="token punctuation">)</span><span class="token punctuation">;</span>
        someTaskUtil<span class="token punctuation">.</span><span class="token function">getBuzTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setJobData</span><span class="token punctuation">(</span>jobData<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"result"</span><span class="token punctuation">,</span><span class="token string">"change success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> map<span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p>简单的HTML页面 <code>timeTask.html</code>：</p>
<pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE HTML></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>修改定时参数<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://code.jquery.com/jquery-3.1.1.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../static/js/jquery-3.2.1.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bootstrap3.3.7/css/bootstrap.min.css<span class="token punctuation">"</span></span>
          <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>panel-body<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{<span class="token punctuation">'</span>/timeTask/changeCron<span class="token punctuation">'</span>}<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group form-inline<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txttaskName<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-3 control-label<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name">
                   <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">text-align</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>任务名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-9<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-9 form-control<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>taskName<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>taskName<span class="token punctuation">"</span></span>
                       <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入任务名称<span class="token punctuation">"</span></span>
                       <span class="token attr-name">required</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>required<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group form-inline<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">padding-top</span><span class="token punctuation">:</span><span class="token number">45</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txtcron<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-3 control-label<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name">
                   <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">text-align</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>定时表达式<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-9<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-9 form-control<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cron<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cron<span class="token punctuation">"</span></span>
                       <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入定时表达式<span class="token punctuation">"</span></span>  <span class="token punctuation">/></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group form-inline<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">padding-top</span><span class="token punctuation">:</span><span class="token number">45</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txtjobData<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-3 control-label<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name">
                   <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">text-align</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>任务参数<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-9<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-9 form-control<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jobData<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jobData<span class="token punctuation">"</span></span>
                       <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入任务参数<span class="token punctuation">"</span></span>  <span class="token punctuation">/></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-offset-3 col-md-5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-primary btn-block<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>action<span class="token punctuation">"</span></span>
                        <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>login<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>执行<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<p>在浏览器输入：<code>http://localhost:8080/timeTask</code></p>
<p>输入参数：</p>
<pre><code>taskName ：jobName1
cron ：0/20 * * * * ?
jobData ：123</code></pre><p>页面返回了 {“result”:”change success”}</p>
<p>执行结果：</p>
<pre class=" language-txt"><code class="language-txt"> jobData : 
 execute buzz code ...2020-06-25T11:32:50.007
 jobData : 
 execute buzz code ...2020-06-25T11:33:00.001
 jobData : 
 execute buzz code ...2020-06-25T11:33:10.002
 jobData : 
 execute buzz code ...2020-06-25T11:33:20.001
 jobData : 
 execute buzz code ...2020-06-25T11:33:30.002
 taskName ：jobName1
 cron ：0/20 * * * * ?
 jobData ：123
 jobData :
 execute buzz code ...2020-06-25T11:33:40
 jobData ：123
 execute buzz code ...2020-06-25T11:34:00.002
 jobData ：123
 execute buzz code ...2020-06-25T11:34:20.001
 jobData ：123
 execute buzz code ...2020-06-26T11:34:40.001</code></pre>
<p>原来设置的执行频次是10秒执行一次，jobData是空字符串。</p>
<p>页面操作之后执行频次是20秒执行一次，jobData值是<code>123</code>。</p>
<p>由此可见，java方法定时的好处，可以动态修改定时任务执行参数。参数可以从数据库拿，也可以在页面及时输入，总之比较灵活。应该适合大多数场景。</p>
<br/>

<p>本文整理参考以下前辈链接，放个链接，以示感谢：</p>
<ul>
<li>参考文章1：<a href="https://www.jianshu.com/p/2996afb2c224" target="_blank" rel="noopener">https://www.jianshu.com/p/2996afb2c224</a></li>
<li>参考文章2：<a href="https://blog.csdn.net/HXNLYW/article/details/88187802" target="_blank" rel="noopener">https://blog.csdn.net/HXNLYW/article/details/88187802</a></li>
<li>参考文章3：<a href="https://blog.csdn.net/bjmsb/article/details/105997128" target="_blank" rel="noopener">https://blog.csdn.net/bjmsb/article/details/105997128</a></li>
<li>参考文章4：<a href="https://blog.csdn.net/bjmsb/article/details/105997128" target="_blank" rel="noopener">https://blog.csdn.net/bjmsb/article/details/105997128</a></li>
</ul>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>定时任务</category>
      </categories>
      <tags>
        <tag>Spring Task</tag>
      </tags>
  </entry>
  <entry>
    <title>定时任务之Quartz</title>
    <url>/posts/6ddb3c14.html</url>
    <content><![CDATA[<blockquote>
<p>本文主要记录学习Quartz的相关内容。<br>  整理于2020-06-25，最后更新2020-07-18。</p>
</blockquote>
<h3 id="一、Quartz简述"><a href="#一、Quartz简述" class="headerlink" title="一、Quartz简述"></a>一、Quartz简述</h3><p>关于调度的实现方式主要有三种：</p>
<p>（1）Java自带的Api有个Timer类和TimerTask类。</p>
<p>（2）Spring自带的Spring Task调度工具。</p>
<p>（3）Quartz（读阔子）开源框架，功能强大，使用起来稍显复杂。</p>
<blockquote>
<p>Quartz是一个完全由java编写的开源作业调度框架，由OpenSymphony组织开源出来。作业调度其实就是按照程序的设定，根据定义的执行时间频次表达去执行某个作业任务。</p>
</blockquote>
<p>之前说过一个定时任务的基本组件有：执行的任务类、触发任务的触发器、管理任务的任务调度器。</p>
<p>那么Quartz同样有这三个基本的组件，但是除此之外还有更丰富的组件。在<code>Quartz-2.0</code>之后增加了构造器模式创建示例，监听器的集中管理接口等内容，所以有些地方在写法上稍有不同。</p>
<h3 id="二、Quartz的基本组件"><a href="#二、Quartz的基本组件" class="headerlink" title="二、Quartz的基本组件"></a>二、Quartz的基本组件</h3><h4 id="1、Scheduler调度器"><a href="#1、Scheduler调度器" class="headerlink" title="1、Scheduler调度器"></a>1、Scheduler调度器</h4><p><code>Scheduler</code>在使用之前需要实例化。一般通过调度工厂<code>SchedulerFactory</code>来创建一个实例。</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//得到一个默认的调度工厂</span>
SchedulerFactory schedulerFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StdSchedulerFactory</span>
Scheduler sched <span class="token operator">=</span> schedFact<span class="token punctuation">.</span><span class="token function">getScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><code>scheduler</code>实例化后，可以启动(start)、暂停(stand-by)、停止(shutdown)、还可以设置自定义相关监听。</p>
<p>【注意，此处只是列出一些常见方法，实际使用先后顺序】</p>
<pre class=" language-java"><code class="language-java">scheduler<span class="token punctuation">.</span><span class="token function">scheduleJob</span><span class="token punctuation">(</span>jobDetail<span class="token punctuation">,</span> simpleTrigger<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//添加调度任务</span>

scheduler<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//启动</span>
scheduler<span class="token punctuation">.</span><span class="token function">standby</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//暂停</span>
scheduler<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//关闭</span>

scheduler<span class="token punctuation">.</span><span class="token function">addJobListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UpJobListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//添加自定义任务执行监听</span>
scheduler<span class="token punctuation">.</span><span class="token function">addTriggerListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UpTriggerListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//添加自定义触发器监听</span>
scheduler<span class="token punctuation">.</span><span class="token function">addSchedulerListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UpSchedulerListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//添加自定义调度器监听</span></code></pre>
<p>​    需要注意的是：scheduler被停止后，除非重新实例化，否则不能重新启动；只有当scheduler启动后，即使处于暂停状态也不行，trigger才会被触发（job才能被执行）。</p>
<p>​       Quartz-2.0之后的监听器调整为使用监听管理的<code>ListenerManager</code>接口进行集中管理的。使用添加或移除都需要先拿到<code>ListenerManager</code>之后再进行操作，后面会有具体示例。</p>
<h4 id="2、Job作业接口"><a href="#2、Job作业接口" class="headerlink" title="2、Job作业接口"></a>2、Job作业接口</h4><p>Job接口只有一个execute方法，类似线程的run方法，用来执行业务作业逻辑。</p>
<p>业务作业实现了Job接口之后就可以由调度器Schedule进行管理执行。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>smallrose<span class="token punctuation">.</span>web<span class="token punctuation">.</span>app<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>job<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>Job<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>JobDataMap<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>JobExecutionContext<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>JobExecutionException<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestJob</span> <span class="token keyword">implements</span> <span class="token class-name">Job</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>JobExecutionContext context<span class="token punctuation">)</span> <span class="token keyword">throws</span> JobExecutionException <span class="token punctuation">{</span>
        JobDataMap dataMap <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getJobDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getJobDataMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" job executed "</span> <span class="token operator">+</span> dataMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span></code></pre>
<h4 id="3、JobDetail作业实例"><a href="#3、JobDetail作业实例" class="headerlink" title="3、JobDetail作业实例"></a>3、JobDetail作业实例</h4><p><code>JobDetail</code>用于定义作业的实例（Job实例），为Job实例提供属性设置，用来存储特定Job实例的状态信息，调度器Schedule需要借助<code>JobDetail</code>对象来添加Job实例。</p>
<p><code>JobDetail</code>的重要属性有：</p>
<p>​    <code>name</code>—- 任务名称</p>
<p>​    <code>group</code> —- 任务所在组名称</p>
<p>​    <code>jobClass</code> —- 任务执行类，也就是实现了<code>Job</code>接口的业务作业类。</p>
<p>​    <code>jobDataMap</code> —- 任务的状态数据，其实就是一些相关参数，可以动态传入。</p>
<pre class=" language-java"><code class="language-java">Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>Srting<span class="token punctuation">,</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
JobDetail JobDetail <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JobDetail</span><span class="token punctuation">(</span>jobName<span class="token punctuation">,</span> jobGroupName<span class="token punctuation">,</span> jobClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
JobDetail<span class="token punctuation">.</span><span class="token function">getJobDataMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 该数据可以通过Job中的JobDataMap dataMap = context.getJobDetail().getJobDataMap();来进行参数传递值</span></code></pre>
<h4 id="4、Trigger触发器"><a href="#4、Trigger触发器" class="headerlink" title="4、Trigger触发器"></a>4、Trigger触发器</h4><p>Trigger是用来定义执行业务作业的计划组件。</p>
<p>Trigger的类型主要有4种：</p>
<p>​    （1）<code>SimpleTrigger</code>：从某一个时间开始，以一定的时间间隔来执行任务。它主要有两个属性，<code>repeatInterval</code> 重复的时间间隔；<code>repeatCount</code> 重复的次数，实际上执行的次数是n+1,因为在<code>startTime</code>的时候会执行一次。</p>
<p>​    （2） <code>CronTrigger</code>：适合于复杂的任务，使用<code>cron</code>表达式来定义执行规则。</p>
<p>​    （3）<code>CalendarIntervalTrigger</code>：类似于<code>SimpleTrigger</code>，指定从某一个时间开始，以一定的时间间隔执行的任务。但是<code>CalendarIntervalTrigger</code>执行任务的时间间隔比<code>SimpleTrigger</code>要丰富，它支持的间隔单位有秒，分钟，小时，天，月，年，星期。它的主要两个属性，<code>interval</code>执行间隔；<code>intervalUnit</code>执行间隔的单位（秒，分钟，小时，天，月，年，星期）</p>
<p>相较于<code>SimpleTrigger</code>有两个优势：</p>
<p>1、更方便，比如每隔1小时执行，不用自己去计算1小时等于多少毫秒。<br>2、支持不是固定长度的间隔，比如间隔为月和年。但劣势是精度只能到秒。</p>
<p>​    （4）<code>DailyTimeIntervalTrigger</code>：指定每天的某个时间段内，以一定的时间间隔执行任务。并且它可以支持指定星期。</p>
<p>它适合的任务类似于：指定每天9:00 至 18:00，每隔70秒执行一次，并且只要周一至周五执行。</p>
<p>它的属性有<code>startTimeOfDay</code>每天开始时间；<code>endTimeOfDay</code>每天结束时间；<code>daysOfWeek</code>需要执行的星期；<code>interval</code> 执行间隔；<code>intervalUnit</code>执行间隔的单位（秒，分钟，小时，天，月，年，星期）；<code>repeatCount</code>重复次数</p>
<p>Trigger公共属性主要有：</p>
<p><code>jobKey</code>属性，当触发器触发时被执行的job定位；</p>
<p><code>startTime</code>属性：设置Trigger第一次触发的时间；</p>
<p><code>endTime</code>属性：表示Trigger失效的时间点。</p>
<p>优先级(priority)、错过触发(misfire)、日历(calendar)等</p>
<p>​    优先级（priority）</p>
<blockquote>
<p>Quartz线程池的工作线程太少或者触发器较多时，Quartz可能没有足够的资源同时触发所有的trigger；这种情况下，你可能希望控制哪些trigger优先使用Quartz的工作线程，要达到该目的，可以在trigger上设置priority属性。</p>
<p>注意：只有同时触发的trigger之间才会比较优先级。比如：11:59触发的trigger总是在12:00触发的trigger之前执行。</p>
<p>注意：如果trigger是可恢复的，在恢复后再调度时，优先级与原trigger是一样的。</p>
</blockquote>
<pre class=" language-java"><code class="language-java">SimpleTrigger simpleTrigger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleTrigger</span><span class="token punctuation">(</span>triggerName<span class="token punctuation">,</span> triggerGroupName<span class="token punctuation">)</span><span class="token punctuation">;</span>
simpleTrigger<span class="token punctuation">.</span><span class="token function">setStartTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// set the interval, how often the job should run (10 seconds here) </span>
simpleTrigger<span class="token punctuation">.</span><span class="token function">setRepeatInterval</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//执行间隔毫秒</span>

simpleTrigger<span class="token punctuation">.</span><span class="token function">setRepeatCount</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//重复执行次数（不含第一次执行）</span>

<span class="token comment" spellcheck="true">//结束时间</span>
simpleTrigger<span class="token punctuation">.</span><span class="token function">setEndTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>ctime <span class="token operator">+</span> 60000L<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 设置触发器的优先级 默认是 5</span>
simpleTrigger<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>​    错过触发（misfire）</p>
<blockquote>
<p>如果scheduler关闭了（系统崩溃），或者Quartz线程池中没有可用的线程来执行job（任务时间过长），此时持久性的trigger就会错过(miss)其触发时间，即错过触发(misfire)。</p>
<p>不同类型的trigger，有不同的misfire机制。它们默认都使用“智能机制(smart policy)”，即根据trigger的类型和配置动态调整行为。当scheduler启动的时候，查询所有错过触发(misfire)的持久性trigger。然后根据它们各自的misfire机制更新trigger的信息。</p>
</blockquote>
<p>​    日历（Calendar）</p>
<blockquote>
<p>Quartz的<code>org.quartz.Calendar</code>对象(不是<code>java.util.Calendar</code>对象)可以在定义和存储trigger的时候与trigger进行关联。Calendar用于从trigger的调度计划中排除时间段。比如，可以创建一个trigger，每个工作日的上午9:30执行，然后增加一个Calendar，排除掉所有节假日。</p>
<p>任何实现了Calendar接口的可序列化对象都可以作为Calendar对象。一个Trigger可以和多个Calendar关联，以便排除或包含某些时间点。</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>quartz<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Calendar</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">//参数是毫秒单位的时间戳</span>
  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isTimeIncluded</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeStamp<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getNextIncludedTime</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeStamp<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span></code></pre>
<p>Quartz提供的<code>org.quartz.impl.HolidayCalendar</code>类可以很方便地实现排除整个日期。</p>
<pre class=" language-java"><code class="language-java">HolidayCalendar cal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HolidayCalendar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cal<span class="token punctuation">.</span><span class="token function">addExcludedDate</span><span class="token punctuation">(</span> someDate <span class="token punctuation">)</span><span class="token punctuation">;</span>
cal<span class="token punctuation">.</span><span class="token function">addExcludedDate</span><span class="token punctuation">(</span> someOtherDate <span class="token punctuation">)</span><span class="token punctuation">;</span>

scheduler<span class="token punctuation">.</span><span class="token function">addCalendar</span><span class="token punctuation">(</span><span class="token string">"myHolidaysName"</span><span class="token punctuation">,</span> cal<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


Trigger t <span class="token operator">=</span> <span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"myTriggerName"</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">forJob</span><span class="token punctuation">(</span><span class="token string">"myJobName"</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span><span class="token function">dailyAtHourAndMinute</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// execute job daily at 9:30</span>
    <span class="token punctuation">.</span><span class="token function">modifiedByCalendar</span><span class="token punctuation">(</span><span class="token string">"myHolidaysName"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// but not on holidays</span>
    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>只要的日历类有：</p>
<table>
<thead>
<tr>
<th>日历类</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>HolidayCalendar</td>
<td>指定特定的日期，比如20200613。精度到天。</td>
</tr>
<tr>
<td>DailyCalendar</td>
<td>指定每天的时间段（rangeStartingTime, rangeEndingTime)，格式是HH:MM[:SS[:mmm]]。也就是最大精度可以到毫秒。</td>
</tr>
<tr>
<td>WeeklyCalendar</td>
<td>指定每星期的星期几，可选值比如为java.util.Calendar.SUNDAY。精度是天。</td>
</tr>
<tr>
<td>MonthlyCalendar</td>
<td>指定每月的几号。可选值为1-31。精度是天</td>
</tr>
<tr>
<td>AnnualCalendar</td>
<td>指定每年的哪一天。使用方式如上例。精度是天。</td>
</tr>
<tr>
<td>CronCalendar</td>
<td>指定<code>Cron</code>表达式。精度取决于<code>Cron</code>表达式，也就是最大精度可以到秒。</td>
</tr>
</tbody></table>
<h4 id="5、JobBuilder构造器"><a href="#5、JobBuilder构造器" class="headerlink" title="5、JobBuilder构造器"></a>5、JobBuilder构造器</h4><p>[注意：版本较低的可能没有构造器方式，即可能没有<code>JobBuilder</code>、<code>TriggerBuilder</code>等Builder模式]</p>
<p><code>JobBuilder</code>也是用于定义/构建<code>JobDetail</code>实例，定义作业的实例。<code>JobBuilder</code>的属性和<code>JobDetail</code>的属性基本一致，这样得以在build()方法里面，完成对<code>JobDetail</code>进行创建。是一个构造器风格的API。</p>
<pre class=" language-java"><code class="language-java">JobDetail job <span class="token operator">=</span> <span class="token function">newJob</span><span class="token punctuation">(</span>MyJob<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
             <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"myJob"</span><span class="token punctuation">)</span>
             <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Trigger trigger <span class="token operator">=</span> <span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
             <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token function">triggerKey</span><span class="token punctuation">(</span><span class="token string">"myTrigger"</span><span class="token punctuation">,</span> <span class="token string">"myTriggerGroup"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
             <span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span><span class="token function">simpleSchedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
             <span class="token punctuation">.</span><span class="token function">withIntervalInHours</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
             <span class="token punctuation">.</span><span class="token function">repeatForever</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
             <span class="token punctuation">.</span><span class="token function">startAt</span><span class="token punctuation">(</span><span class="token function">futureDate</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> MINUTES<span class="token punctuation">)</span><span class="token punctuation">)</span>
             <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

scheduler<span class="token punctuation">.</span><span class="token function">scheduleJob</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> trigger<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h4 id="6、TriggerBuilder构造器"><a href="#6、TriggerBuilder构造器" class="headerlink" title="6、TriggerBuilder构造器"></a>6、TriggerBuilder构造器</h4><p><code>TriggerBuilder</code>  用于定义/构建触发器实例。是一个构造器风格的API。</p>
<pre class=" language-java"><code class="language-java">JobDetail job <span class="token operator">=</span> <span class="token function">newJob</span><span class="token punctuation">(</span>TestJob<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
             <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"myJob"</span><span class="token punctuation">)</span>
             <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Trigger trigger <span class="token operator">=</span> <span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
             <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token function">triggerKey</span><span class="token punctuation">(</span><span class="token string">"myTrigger"</span><span class="token punctuation">,</span> <span class="token string">"myTriggerGroup"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
             <span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span><span class="token function">simpleSchedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
             <span class="token punctuation">.</span><span class="token function">withIntervalInHours</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
             <span class="token punctuation">.</span><span class="token function">repeatForever</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
             <span class="token punctuation">.</span><span class="token function">startAt</span><span class="token punctuation">(</span><span class="token function">futureDate</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> MINUTES<span class="token punctuation">)</span><span class="token punctuation">)</span>
             <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

scheduler<span class="token punctuation">.</span><span class="token function">scheduleJob</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> trigger<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h3 id="三、触发器使用"><a href="#三、触发器使用" class="headerlink" title="三、触发器使用"></a>三、触发器使用</h3><p>​    前面学习了不同的Trigger，常用2种是：<code>SimpleTrigger</code>和 <code>CronTrigger</code>。</p>
<h4 id="1、SimpleTrigger"><a href="#1、SimpleTrigger" class="headerlink" title="1、SimpleTrigger"></a>1、SimpleTrigger</h4><p>简易触发器的使用场景是：在具体的时间点执行一次，或者在具体的时间点执行并且以指定的间隔重复执行若干次。</p>
<p><code>SimpleTrigger</code>的属性包括：开始时间、结束时间、重复次数以及重复的间隔。</p>
<p>重复次数，可以是0、正整数，以及常量<code>SimpleTrigger.REPEAT_INDEFINITELY</code>。</p>
<p>重复的间隔，必须是0，或者long型的正数，表示毫秒。注意:，如果重复间隔为0，trigger将会以重复次数并发执行(或者以scheduler可以处理的近似并发数)。</p>
<p>endTime属性的值会覆盖设置重复次数的属性值；比如，你可以创建一个trigger，在终止时间之前每隔10秒执行一次，你不需要去计算在开始时间和终止时间之间的重复次数，只需要设置终止时间并将重复次数设置为REPEAT_INDEFINITELY(当然，你也可以将重复次数设置为一个很大的值，并保证该值比trigger在终止时间之前实际触发的次数要大即可)。</p>
<h5 id="构建SimpleTrigger"><a href="#构建SimpleTrigger" class="headerlink" title="构建SimpleTrigger"></a>构建SimpleTrigger</h5><p><code>SimpleTrigger</code>实例通过<code>TriggerBuilder</code>设置主要的属性，通过<code>SimpleScheduleBuilder</code>设置与<code>SimpleTrigger</code>相关的属性。要使用这些builder的静态方法，需要静态导入：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> <span class="token keyword">static</span> org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>TriggerBuilder<span class="token punctuation">.</span>*<span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token keyword">static</span> org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>SimpleScheduleBuilder<span class="token punctuation">.</span>*<span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token keyword">static</span> org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>DateBuilder<span class="token punctuation">.</span>*<span class="token operator">:</span></code></pre>
<h5 id="常见的触发实例："><a href="#常见的触发实例：" class="headerlink" title="常见的触发实例："></a>常见的触发实例：</h5><p>如：指定时间开始触发，不重复：</p>
<pre class=" language-java"><code class="language-java">Scheduler scheduler <span class="token operator">=</span> schedulerFactory<span class="token punctuation">.</span><span class="token function">getScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Date someDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>Instant<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plusSeconds</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

SimpleTrigger simpleTrigger <span class="token operator">=</span>  <span class="token punctuation">(</span>SimpleTrigger<span class="token punctuation">)</span><span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"trigger1"</span><span class="token punctuation">,</span> <span class="token string">"group1"</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">startAt</span><span class="token punctuation">(</span>someDate<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// some Date </span>
        <span class="token punctuation">.</span><span class="token function">forJob</span><span class="token punctuation">(</span><span class="token string">"job1"</span><span class="token punctuation">,</span> <span class="token string">"group1"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// identify job with name, group strings</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>指定时间触发，每隔10秒执行一次，重复10次：</p>
<pre class=" language-java"><code class="language-java">simpleTrigger <span class="token operator">=</span>  <span class="token punctuation">(</span>SimpleTrigger<span class="token punctuation">)</span><span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"trigger2"</span><span class="token punctuation">,</span> <span class="token string">"group1"</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">startAt</span><span class="token punctuation">(</span>myTimeToStartFiring<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// if a start time is not given (if this line were omitted), "now" is implied</span>
        <span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span><span class="token function">simpleSchedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">withIntervalInSeconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
         <span class="token punctuation">.</span><span class="token function">withRepeatCount</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// note that 10 repeats will give a total of 11 firings</span>
        <span class="token punctuation">.</span><span class="token function">forJob</span><span class="token punctuation">(</span>myJob<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// identify job with handle to its JobDetail itself             </span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>5分钟以后开始触发，仅执行一次：</p>
<pre class=" language-java"><code class="language-java">simpleTrigger <span class="token operator">=</span>  <span class="token punctuation">(</span>SimpleTrigger<span class="token punctuation">)</span><span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"trigger3"</span><span class="token punctuation">,</span> <span class="token string">"group1"</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">startAt</span><span class="token punctuation">(</span><span class="token function">futureDate</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> IntervalUnit<span class="token punctuation">.</span>MINUTE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// use DateBuilder to create a date in the future</span>
        <span class="token punctuation">.</span><span class="token function">forJob</span><span class="token punctuation">(</span>myJobKey<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// identify job with its JobKey</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>立即触发，每个5分钟执行一次，直到22:00：</p>
<pre class=" language-java"><code class="language-java">simpleTrigger <span class="token operator">=</span>  <span class="token punctuation">(</span>SimpleTrigger<span class="token punctuation">)</span><span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"trigger4"</span><span class="token punctuation">,</span> <span class="token string">"group1"</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span><span class="token function">simpleSchedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">withIntervalInMinutes</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">repeatForever</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">endAt</span><span class="token punctuation">(</span><span class="token function">dateOf</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>在下一小时整点触发，每个2小时执行一次，一直重复：</p>
<pre class=" language-java"><code class="language-java">simpleTrigger <span class="token operator">=</span>  <span class="token punctuation">(</span>SimpleTrigger<span class="token punctuation">)</span><span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"trigger5"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 没有定义组名，"trigger5"进入默认的group</span>
        <span class="token punctuation">.</span><span class="token function">startAt</span><span class="token punctuation">(</span><span class="token function">evenHourDate</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//整点触发 (minutes and seconds zero ("00:00"))</span>
        <span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span><span class="token function">simpleSchedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">withIntervalInHours</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">repeatForever</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//一直重复</span>
        <span class="token comment" spellcheck="true">// note that in this example, 'forJob(..)' is not called which is valid </span>
        <span class="token comment" spellcheck="true">// if the trigger is passed to the scheduler along with the job  </span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

scheduler<span class="token punctuation">.</span><span class="token function">scheduleJob</span><span class="token punctuation">(</span>trigger<span class="token punctuation">,</span> job<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>还有一些没有列举的方法，在实际使用中可以点开代码看。</p>
<blockquote>
<p>TriggerBuilder(以及Quartz的其它builder)会为那些没有被显式设置的属性选择合理的默认值。比如：如果你没有调用<em>withIdentity(..)</em>方法，TriggerBuilder会为trigger生成一个随机的名称；如果没有调用<em>startAt(..)</em>方法，则默认使用当前时间，即trigger立即生效。</p>
</blockquote>
<p><strong><code>SimpleTrigger</code> Misfire策略：</strong></p>
<p>所有的trigger都有一个Trigger.MISFIRE_INSTRUCTION_SMART_POLICY策略可以使用，该策略也是所有trigger的默认策略。对于<code>SimpleTrigger</code>，这个“智能机制”将根据触发器实例的状态和配置来决定其行为。具体如下：</p>
<p>如果Repeat Count=0：只执行一次　</p>
<p>​     instruction selected = MISFIRE_INSTRUCTION_FIRE_NOW;</p>
<p>如果Repeat Count=REPEAT_INDEFINITELY：无限次执行</p>
<p>​    instruction selected = MISFIRE_INSTRUCTION_RESCHEDULE_NEXT_WITH_REMAINING_COUNT;</p>
<p>如果Repeat Count&gt;0：执行多次（有限）</p>
<p>　　instruction selected = MISFIRE_INSTRUCTION_RESCHEDULE_NOW_WITH_EXISTING_REPEAT_COUNT;</p>
<p><code>SimpleTrigger</code>常见策略：</p>
<table>
<thead>
<tr>
<th>常见策略</th>
<th>策略说明</th>
</tr>
</thead>
<tbody><tr>
<td>MISFIRE_INSTRUCTION_IGNORE_MISFIRE_POLICY</td>
<td>忽略所有的超时状态，按照触发器的策略执行。</td>
</tr>
<tr>
<td>MISFIRE_INSTRUCTION_FIRE_NOW</td>
<td>立刻执行。对于不会重复执行的任务，这是默认的处理策略。</td>
</tr>
<tr>
<td>MISFIRE_INSTRUCTION_RESCHEDULE_NEXT_WITH_REMAINING_COUNT</td>
<td>在下一个激活点执行，且超时期内错过的执行机会作废。</td>
</tr>
<tr>
<td>MISFIRE_INSTRUCTION_RESCHEDULE_NOW_WITH_REMAINING_COUNT</td>
<td>立即执行，且超时期内错过的执行机会作废。</td>
</tr>
<tr>
<td>MISFIRE_INSTRUCTION_RESCHEDULE_NEXT_WITH_EXISTING_COUNT</td>
<td>在下一个激活点执行，并重复到指定的次数。</td>
</tr>
<tr>
<td>MISFIRE_INSTRUCTION_RESCHEDULE_NOW_WITH_EXISTING_COUNT</td>
<td>立即执行，并重复到指定的次数。</td>
</tr>
<tr>
<td>MISFIRE_INSTRUCTION_IGNORE_MISFIRE_POLICY</td>
<td>忽略所有的超时状态，按照触发器的策略执行。</td>
</tr>
</tbody></table>
<h4 id="2、CronTrigger"><a href="#2、CronTrigger" class="headerlink" title="2、CronTrigger"></a>2、CronTrigger</h4><p><code>Cron</code>表达式触发器的使用场景是：</p>
<p>基于时间表，在复杂的时间点，复杂的执行周期执行一次或多次。</p>
<p>例如：“每周一到周五上午8:00”或“每月最后一个星期五凌晨1:30”。 </p>
<p> <code>CronTrigger</code>类似于在给定的时间触发作业，和Linux的“<code>cron-like</code>”调度定义相似。“<code>Cron Expression</code>”字符串的格式记录在<code>CronExpression</code>类中。</p>
<h5 id="Cron-Expressions"><a href="#Cron-Expressions" class="headerlink" title="Cron Expressions"></a>Cron Expressions</h5><p><code>Cron-Expressions</code>用于配置<code>CronTrigger</code>的实例。<code>Cron Expressions</code>是由七个子表达式组成的字符串，用于描述日程表的各个细节。这些子表达式用空格分隔，七个子表达式依次为：<code>秒 分 时 日 月 周 年</code></p>
<table>
<thead>
<tr>
<th>位置</th>
<th>说明</th>
<th>允许值</th>
<th>特殊值</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>Seconds</td>
<td>0-59</td>
<td><code>,</code>  <code>-</code> <code>*</code>  <code>/</code></td>
</tr>
<tr>
<td>2</td>
<td>Minutes</td>
<td>0-59</td>
<td><code>,</code>  <code>-</code> <code>*</code>  <code>/</code></td>
</tr>
<tr>
<td>3</td>
<td>Hours</td>
<td>0-23</td>
<td><code>,</code>  <code>-</code> <code>*</code>  <code>/</code></td>
</tr>
<tr>
<td>4</td>
<td>Day-of-Month</td>
<td>1-31</td>
<td><code>,</code>  <code>-</code> <code>*</code>  <code>/</code> <code>?</code>  <code>L</code> <code>W</code> <code>C</code></td>
</tr>
<tr>
<td>5</td>
<td>Month</td>
<td>1-12</td>
<td><code>,</code>  <code>-</code> <code>*</code>  <code>/</code></td>
</tr>
<tr>
<td>6</td>
<td>Day-of-Week</td>
<td>1-7</td>
<td><code>,</code>  <code>-</code> <code>*</code>  <code>/</code> <code>?</code> <code>L</code> <code>C</code> <code>#</code></td>
</tr>
<tr>
<td>7</td>
<td>Year (可选)</td>
<td></td>
<td><code>,</code>  <code>-</code> <code>*</code>  <code>/</code></td>
</tr>
</tbody></table>
<p><code>Cron</code>表达式对特殊字符的大小写不敏感，对代表星期的缩写英文大小写也不敏感。</p>
<p>特殊符号说明：</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>星号(*)</strong></td>
<td>可用在所有字段中，表示对应时间域的每一个时刻，例如，* 在分钟字段时，表示“每分钟”；</td>
</tr>
<tr>
<td><strong>问号（?）</strong></td>
<td>该字符只在日期和星期字段中使用，它通常指定为“无意义的值”，相当于占位符；</td>
</tr>
<tr>
<td><strong>减号(-)</strong></td>
<td>表达一个范围，如在小时字段中使用“10-12”，则表示从10到12点，即10,11,12；</td>
</tr>
<tr>
<td><strong>逗号(,)</strong></td>
<td>表达一个列表值，如在星期字段中使用“MON,WED,FRI”，则表示星期一，星期三和星期五；</td>
</tr>
<tr>
<td><strong>斜杠(/)</strong></td>
<td>x/y表达一个等步长序列，x为起始值，y为增量步长值。如在分钟字段中使用0/15，则表示为0,15,30和45秒，而5/15在分钟字段中表示5,20,35,50，你也可以使用*/y，它等同于0/y；</td>
</tr>
<tr>
<td><strong>L</strong> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td>该字符只在日期和星期字段中使用，代表“Last”的意思，但它在两个字段中意思不同。<br/>L在日期字段中，表示这个月份的最后一天，如一月的31号，非闰年二月的28号；<br/>如果L用在星期中，则表示星期六，等同于7。<br/>但是，如果L出现在星期字段里，而且在前面有一个数值X，则表示“这个月的最后X天”，例如，6L表示该月的最后星期五；</td>
</tr>
<tr>
<td><strong>W</strong></td>
<td>该字符只能出现在日期字段里，是对前导日期的修饰，表示离该日期最近的工作日。<br/>例如15W表示离该月15号最近的工作日，如果该月15号是星期六，则匹配14号星期五；如果15日是星期日，则匹配16号星期一；如果15号是星期二，那结果就是15号星期二。但必须注意关联的匹配日期不能够跨月，如你指定1W，如果1号是星期六，结果匹配的是3号星期一，而非上个月最后的那天。W字符串只能指定单一日期，而不能指定日期范围；</td>
</tr>
<tr>
<td><strong>LW组合</strong></td>
<td>在日期字段可以组合使用LW，它的意思是当月的最后一个工作日；</td>
</tr>
<tr>
<td>*<em>井号(#) *</em></td>
<td>该字符只能在星期字段中使用，表示当月某个工作日。如6#3表示当月的第三个星期五(6表示星期五，#3表示当前的第三个)，而4#5表示当月的第五个星期三，假设当月没有第五个星期三，忽略不触发；</td>
</tr>
<tr>
<td>*<em>C *</em></td>
<td>该字符只在日期和星期字段中使用，代表“Calendar”的意思。它的意思是计划所关联的日期，如果日期没有被关联，则相当于日历中所有日期。例如5C在日期字段中就相当于日历5日以后的第一天。1C在星期字段中相当于星期日后的第一天。</td>
</tr>
</tbody></table>
<h5 id="常见表达式示例："><a href="#常见表达式示例：" class="headerlink" title="常见表达式示例："></a>常见表达式示例：</h5><table>
<thead>
<tr>
<th>表达式</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><code>&quot;0 0 12 * * ?&quot;</code></td>
<td>每天12点触发执行</td>
</tr>
<tr>
<td><code>&quot;0 15 10 ? * *&quot;</code></td>
<td>每天10点15分触发执行</td>
</tr>
<tr>
<td><code>&quot;0 15 10 * * ?&quot;</code></td>
<td>每天10点15分触发执行</td>
</tr>
<tr>
<td><code>&quot;0 15 10 * * ? *&quot;</code></td>
<td>每天10点15分触发执行</td>
</tr>
<tr>
<td><code>&quot;0 15 10 * * ? 2020&quot;</code></td>
<td>在2020年内，每天10点15分触发执行</td>
</tr>
<tr>
<td><code>&quot;0 * 14 * * ?&quot;</code></td>
<td>每天从下午2点开始到下午2点59分结束，每分钟触发执行一次</td>
</tr>
<tr>
<td><code>&quot;0 0/5 14 * * ?&quot;</code></td>
<td>每天从下午2点到下午2点55分，每5分钟触发一次</td>
</tr>
<tr>
<td><code>&quot;0 0/5 14,18 * * ?&quot;</code></td>
<td>每天从下午2点开始到下午2点55分每5分钟触发一次<br/>从下午6点开始到下午6点55分结束，每5分钟触发一次</td>
</tr>
<tr>
<td><code>&quot;0 0-5 14 * * ?&quot;</code></td>
<td>每天从下午2点开始到下午2点05分结束，每分钟触发一次</td>
</tr>
<tr>
<td><code>&quot;0 10,44 14 ? 3 WED&quot;</code></td>
<td>（每年）三月每周三下午2:10和2:44触发</td>
</tr>
<tr>
<td><code>&quot;0 15 10 ? * MON-FRI&quot;</code></td>
<td>每周一、二、三、四、五上午10:15触发</td>
</tr>
<tr>
<td><code>&quot;0 15 10 15 * ?&quot;</code></td>
<td>每月15日上午10:15触发</td>
</tr>
<tr>
<td><code>&quot;0 15 10 L * ?&quot;</code></td>
<td>每月最后一天上午10:15触发</td>
</tr>
<tr>
<td><code>&quot;0 15 10 * ？ 6L&quot;</code></td>
<td>每月最后一个星期五上午10:15触发</td>
</tr>
<tr>
<td><code>&quot;0 15 10 ? * 6L&quot;</code></td>
<td>每月最后一个星期五上午10:15触发</td>
</tr>
<tr>
<td><code>&quot;0 15 10 ? * 6L 2012-2015&quot;</code></td>
<td>在 2012, 2013, 2014,2015期间，每月最后一个星期五上午10:15触发</td>
</tr>
<tr>
<td><code>&quot;0 15 10 ? * 6#3&quot;</code></td>
<td>每月第三个星期五上午10:15触发执行</td>
</tr>
</tbody></table>
<h5 id="构建CronTriggers"><a href="#构建CronTriggers" class="headerlink" title="构建CronTriggers"></a>构建CronTriggers</h5><p><code>CronTrigger</code>实例使用<code>TriggerBuilder</code>（用于触发器的主要属性）和<code>CronScheduleBuilder</code>（对于<code>CronTrigger</code>特定的属性）构建。要以<code>DSL</code>风格使用这些构建器，请使用静态导入：</p>
<pre><code>import static org.quartz.TriggerBuilder.*;
import static org.quartz.CronScheduleBuilder.*;
import static org.quartz.DateBuilder.*:</code></pre><p>建立一个触发器，每隔一分钟，每天上午8点至下午5点之间：</p>
<pre><code>CronTrigger cronTrigger = newTrigger()
                .withIdentity(&quot;trigger3&quot;, &quot;triggerGroupName&quot;)
                .withSchedule(cronSchedule(&quot;0 0/2 8-17 * * ?&quot;))
                .forJob(&quot;myJobName&quot;, &quot;groupName&quot;).build();</code></pre><p>建立一个触发器，将在上午10:42每天发射：</p>
<pre><code>CronTrigger cronTrigger = newTrigger()
    .withIdentity(&quot;trigger3&quot;, &quot;triggerGroupName&quot;)
    .withSchedule(dailyAtHourAndMinute(10, 42))
    .forJob(myJobKey)
    .build();</code></pre><p>或者：</p>
<pre><code>CronTrigger cronTrigger = newTrigger()
    .withIdentity(&quot;trigger3&quot;, &quot;triggerGroupName&quot;)
    .withSchedule(cronSchedule(&quot;0 42 10 * * ?&quot;))
    .forJob(myJobKey)
    .build();</code></pre><p>建立一个带时区的触发器，将在星期三上午10:42在TimeZone（系统默认值）之外触发：</p>
<pre><code>  trigger = newTrigger()
    .withIdentity(&quot;trigger3&quot;, &quot;triggerGroupName&quot;)
    .withSchedule(weeklyOnDayAndHourAndMinute(DateBuilder.WEDNESDAY, 10, 42))
    .forJob(myJobKey)
    .inTimeZone(TimeZone.getTimeZone(&quot;America/Los_Angeles&quot;))
    .build();</code></pre><p>或者：</p>
<pre><code>  trigger = newTrigger()
    .withIdentity(&quot;trigger3&quot;, &quot;triggerGroupName&quot;)
    .withSchedule(cronSchedule(&quot;0 42 10 ? * WED&quot;))
    .inTimeZone(TimeZone.getTimeZone(&quot;America/Los_Angeles&quot;))
    .forJob(myJobKey)
    .build();</code></pre><h5 id="CronTrigger-Misfire说明"><a href="#CronTrigger-Misfire说明" class="headerlink" title="CronTrigger Misfire说明"></a>CronTrigger Misfire说明</h5><h5 id="CronTrigger常见策略："><a href="#CronTrigger常见策略：" class="headerlink" title="CronTrigger常见策略："></a>CronTrigger常见策略：</h5><table>
<thead>
<tr>
<th>策略名称</th>
<th>策略说明</th>
</tr>
</thead>
<tbody><tr>
<td>MISFIRE_INSTRUCTION_IGNORE_MISFIRE_POLICY</td>
<td>忽略所有的超时状态，按照触发器的策略执行。</td>
</tr>
<tr>
<td>MISFIRE_INSTRUCTION_FIRE_ONCE_NOW</td>
<td>立刻执行一次，然后就按照正常的计划执行。</td>
</tr>
<tr>
<td>MISFIRE_INSTRUCTION_DO_NOTHING</td>
<td>目前不执行，然后就按照正常的计划执行。这意味着如果下次执行时间超过了end time，实际上就没有执行机会了。</td>
</tr>
</tbody></table>
<p>所有的trigger都有一个Trigger.MISFIRE_INSTRUCTION_SMART_POLICY策略可以使用，该策略也是所有trigger的默认策略。对于<code>CronTrigger</code>，该“智能机制”默认选择<code>MISFIRE_INSTRUCTION_FIRE_ONCE_NOW</code>以指导其行为。</p>
<blockquote>
<p>TriggerBuilder(以及Quartz的其它builder)会为那些没有被显式设置的属性选择合理的默认值。比如：如果你没有调用<em>withIdentity(..)</em>方法，TriggerBuilder会为trigger生成一个随机的名称；如果没有调用<em>startAt(..)</em>方法，则默认使用当前时间，即trigger立即生效。</p>
</blockquote>
<h3 id="四、监听器使用"><a href="#四、监听器使用" class="headerlink" title="四、监听器使用"></a>四、监听器使用</h3><p><strong>Listeners</strong>(监听器)是实现监听接口创建的对象，用于根据调度程序中发生的事件执行操作。</p>
<p>比较常用的监听器： </p>
<h4 id="1-触发器监听和任务执行监听"><a href="#1-触发器监听和任务执行监听" class="headerlink" title="1. 触发器监听和任务执行监听"></a>1. 触发器监听和任务执行监听</h4><p>TriggerListeners接收到与触发器（trigger）相关的事件，JobListeners 接收与jobs相关的事件。</p>
<p>与触发相关的事件包括：触发器触发，触发失灵，并触发完成（触发器关闭的作业完成）。</p>
<p><code>org.quartz.TriggerListener</code>接口</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TriggerListener</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">triggerFired</span><span class="token punctuation">(</span>Trigger trigger<span class="token punctuation">,</span> JobExecutionContext context<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">vetoJobExecution</span><span class="token punctuation">(</span>Trigger trigger<span class="token punctuation">,</span> JobExecutionContext context<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">triggerMisfired</span><span class="token punctuation">(</span>Trigger trigger<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">triggerComplete</span><span class="token punctuation">(</span>Trigger trigger<span class="token punctuation">,</span> JobExecutionContext context<span class="token punctuation">,</span>
            <span class="token keyword">int</span> triggerInstructionCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>job相关事件包括：job即将执行的通知，以及job完成执行时的通知。</p>
<p>org.quartz.JobListener接口</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">JobListener</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jobToBeExecuted</span><span class="token punctuation">(</span>JobExecutionContext context<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jobExecutionVetoed</span><span class="token punctuation">(</span>JobExecutionContext context<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jobWasExecuted</span><span class="token punctuation">(</span>JobExecutionContext context<span class="token punctuation">,</span>
            JobExecutionException jobException<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span></code></pre>
<h4 id="2-自定义监听器："><a href="#2-自定义监听器：" class="headerlink" title="2. 自定义监听器："></a>2. 自定义监听器：</h4><p>要创建一个自定义的listener，只需创建一个实现<code>org.quartz.TriggerListener</code>或<code>org.quartz.JobListener</code>接口的对象。</p>
<p>如自定义一个触发相关监听器：</p>
<pre class=" language-ava"><code class="language-ava">package com.smallrose.web.app.quartz.listener;

import org.quartz.JobExecutionContext;
import org.quartz.Trigger;
import org.quartz.Trigger.CompletedExecutionInstruction;
import org.quartz.TriggerListener;

public class TestTriggerListener implements TriggerListener {

    @Override
    public String getName() {
        return null;
    }

    @Override
    public void triggerFired(Trigger trigger, JobExecutionContext context) {

    }

    @Override
    public boolean vetoJobExecution(Trigger trigger, JobExecutionContext context) {
        return false;
    }

    @Override
    public void triggerMisfired(Trigger trigger) {

    }

    @Override
    public void triggerComplete(Trigger trigger, JobExecutionContext context,
            CompletedExecutionInstruction triggerInstructionCode) {

    }
}</code></pre>
<p>如自定义一个任务相关监听器：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>smallrose<span class="token punctuation">.</span>web<span class="token punctuation">.</span>app<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>listener<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>JobExecutionContext<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>JobExecutionException<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>JobListener<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestJobListener</span> <span class="token keyword">implements</span> <span class="token class-name">JobListener</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> null<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jobToBeExecuted</span><span class="token punctuation">(</span>JobExecutionContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jobExecutionVetoed</span><span class="token punctuation">(</span>JobExecutionContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jobWasExecuted</span><span class="token punctuation">(</span>JobExecutionContext context<span class="token punctuation">,</span> JobExecutionException jobException<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="3-监听器的使用"><a href="#3-监听器的使用" class="headerlink" title="3. 监听器的使用"></a>3. 监听器的使用</h4><p>添加监听使用示例：</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//旧版</span>
scheduler<span class="token punctuation">.</span><span class="token function">addJobListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UpJobListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//添加自定义任务执行监听</span>
scheduler<span class="token punctuation">.</span><span class="token function">addTriggerListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UpTriggerListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//添加自定义触发器监听</span>

<span class="token comment" spellcheck="true">//新版 since 2.0</span>
scheduler<span class="token punctuation">.</span><span class="token function">getListenerManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addJobListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UpJobListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//添加任务执行监听</span>
scheduler<span class="token punctuation">.</span><span class="token function">getListenerManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addTriggerListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UpJobListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//添加任务执行触发器监听</span></code></pre>
<p>移除监听使用示例：</p>
<pre class=" language-java"><code class="language-java">scheduler<span class="token punctuation">.</span><span class="token function">removeJobListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UpJobListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//移除自定义任务执行监听</span>
scheduler<span class="token punctuation">.</span><span class="token function">removeTriggerListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UpTriggerListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//移除自定义触发器监听</span></code></pre>
<pre><code>package org.quartz;

import java.util.List;

/**
 * 
 * @author jhouse
 * @since 2.0 - previously listeners were managed directly on the Scheduler interface.
 */
public interface ListenerManager {

    public void addJobListener(JobListener jobListener);

    public void addJobListener(JobListener jobListener, Matcher&lt;JobKey&gt; matcher);

    public void addJobListener(JobListener jobListener, Matcher&lt;JobKey&gt; ... matchers);

    public void addJobListener(JobListener jobListener, List&lt;Matcher&lt;JobKey&gt;&gt; matchers);

    public boolean addJobListenerMatcher(String listenerName, Matcher&lt;JobKey&gt; matcher);

    public boolean removeJobListenerMatcher(String listenerName, Matcher&lt;JobKey&gt; matcher);

    public boolean setJobListenerMatchers(String listenerName, List&lt;Matcher&lt;JobKey&gt;&gt; matchers);

    public List&lt;Matcher&lt;JobKey&gt;&gt; getJobListenerMatchers(String listenerName);

    public boolean removeJobListener(String name);

    public JobListener getJobListener(String name);

    public void addTriggerListener(TriggerListener triggerListener);


    public void addTriggerListener(TriggerListener triggerListener, Matcher&lt;TriggerKey&gt; matcher);


    public void addTriggerListener(TriggerListener triggerListener, Matcher&lt;TriggerKey&gt; ... matchers);


    public void addTriggerListener(TriggerListener triggerListener, List&lt;Matcher&lt;TriggerKey&gt;&gt; matchers);

    public boolean addTriggerListenerMatcher(String listenerName, Matcher&lt;TriggerKey&gt; matcher);


    public boolean removeTriggerListenerMatcher(String listenerName, Matcher&lt;TriggerKey&gt; matcher);


    public boolean setTriggerListenerMatchers(String listenerName, List&lt;Matcher&lt;TriggerKey&gt;&gt; matchers);

    public List&lt;Matcher&lt;TriggerKey&gt;&gt; getTriggerListenerMatchers( String listenerName);


    public boolean removeTriggerListener(String name);


    public List&lt;TriggerListener&gt; getTriggerListeners();

    public TriggerListener getTriggerListener(String name);

    public void addSchedulerListener(SchedulerListener schedulerListener);

    public boolean removeSchedulerListener(SchedulerListener schedulerListener);


    public List&lt;SchedulerListener&gt; getSchedulerListeners();

}</code></pre><h4 id="4-调度监听器"><a href="#4-调度监听器" class="headerlink" title="4. 调度监听器"></a>4. 调度监听器</h4><p>SchedulerListeners非常类似于TriggerListeners和JobListeners，除了它们在Scheduler本身中接收到事件的通知 ，不一定与特定触发器（trigger）或job相关的事件。</p>
<p>与计划程序相关的事件包括：添加job/触发器，删除job/触发器，调度程序中的严重错误，关闭调度程序的通知等。</p>
<p><code>org.quartz.SchedulerListener</code>接口</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SchedulerListener</span> <span class="token punctuation">{</span>  

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jobScheduled</span><span class="token punctuation">(</span>Trigger trigger<span class="token punctuation">)</span><span class="token punctuation">;</span>  

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jobUnscheduled</span><span class="token punctuation">(</span>String triggerName<span class="token punctuation">,</span> String triggerGroup<span class="token punctuation">)</span><span class="token punctuation">;</span>  

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">triggerFinalized</span><span class="token punctuation">(</span>Trigger trigger<span class="token punctuation">)</span><span class="token punctuation">;</span>  

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">triggersPaused</span><span class="token punctuation">(</span>String triggerName<span class="token punctuation">,</span> String triggerGroup<span class="token punctuation">)</span><span class="token punctuation">;</span>  

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">triggersResumed</span><span class="token punctuation">(</span>String triggerName<span class="token punctuation">,</span> String triggerGroup<span class="token punctuation">)</span><span class="token punctuation">;</span>  

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jobsPaused</span><span class="token punctuation">(</span>String jobName<span class="token punctuation">,</span> String jobGroup<span class="token punctuation">)</span><span class="token punctuation">;</span>  

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jobsResumed</span><span class="token punctuation">(</span>String jobName<span class="token punctuation">,</span> String jobGroup<span class="token punctuation">)</span><span class="token punctuation">;</span>  

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">schedulerError</span><span class="token punctuation">(</span>String msg<span class="token punctuation">,</span> SchedulerException cause<span class="token punctuation">)</span><span class="token punctuation">;</span>  

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">schedulerStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">schedulerInStandbyMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">schedulerShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">schedulingDataCleared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>  </code></pre>
<p>调度监听器注册到调度器的监听管理器中，调度监听器实际上可以是实现org.quartz.SchedulerListener接口的任何对象。</p>
<p>添加调度监听器</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//旧版</span>
scheduler<span class="token punctuation">.</span><span class="token function">addSchedulerListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UpSchedulerListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//添加自定义调度器监听</span>
<span class="token comment" spellcheck="true">//新版 since 2.0</span>
scheduler<span class="token punctuation">.</span><span class="token function">getListenerManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addSchedulerListener</span><span class="token punctuation">(</span>mySchedListener<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>移除调度监听器</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//旧版</span>
scheduler<span class="token punctuation">.</span><span class="token function">removeSchedulerListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UpSchedulerListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//移除自定义调度器监听</span>
<span class="token comment" spellcheck="true">//新版 since 2.0</span>
scheduler<span class="token punctuation">.</span><span class="token function">getListenerManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeSchedulerListener</span><span class="token punctuation">(</span>mySchedListener<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h3 id="五、Job-Stores"><a href="#五、Job-Stores" class="headerlink" title="五、Job Stores"></a>五、Job Stores</h3><p>JobStore负责跟踪您提供给调度程序的所有“工作数据”：jobs，triggers，日历等。 </p>
<p><code>JobStore</code>其实就是定时任务的相关数据存储。</p>
<p>支持存储方式有：</p>
<p>（1）RAMJobStore 内存定时数据存储。</p>
<p>（2）JDBC JobStore 通过JDBC将其所有数据保存在数据库中。</p>
<p>（3）TerracottaJobStore TerracottaJobStore用于在集群服务器内存储调度信息（Jobs，Triggers和calendars） </p>
<h4 id="RAMJobStore"><a href="#RAMJobStore" class="headerlink" title="RAMJobStore"></a>RAMJobStore</h4><p>RAMJobStore是使用最简单的JobStore，配置简单，性能最高的（在CPU时间方面）。RAMJobStore以其明显的方式获取其名称，它将其所有数据保存在RAM中。缺点是当您的应用程序结束（或崩溃）时，所有调度信息都将丢失  - 这意味着RAMJobStore无法履行作业和triggers上的“非易失性”设置。</p>
<p>使用RAMJobStore ，只需将类名称org.quartz.simpl.RAMJobStore指定为用于配置石英的JobStore类属性：</p>
<p>配置Quartz以使用RAMJobStore</p>
<pre><code>org.quartz.jobStore.class = org.quartz.simpl.RAMJobStore</code></pre><p>其实在没有JDBC的情况下，默认就是RAMJobStore。</p>
<h4 id="JDBC-JobStore"><a href="#JDBC-JobStore" class="headerlink" title="JDBC JobStore"></a>JDBC JobStore</h4><p>JDBCJobStore几乎支持与任何数据库一起使用，已被广泛应用于Oracle，PostgreSQL，MySQL，MS SQLServer，HSQLDB和DB2。 </p>
<p>数据库中各表的含义：</p>
<table>
<thead>
<tr>
<th>表名</th>
<th>表存储信息说明</th>
</tr>
</thead>
<tbody><tr>
<td>qrtz_blob_triggers</td>
<td>这张表示存储自己定义的trigger，不是quartz自己提供的trigger</td>
</tr>
<tr>
<td>qrtz_calendars</td>
<td>存储Calendar</td>
</tr>
<tr>
<td>qrtz_cron_triggers</td>
<td>存储cronTrigger</td>
</tr>
<tr>
<td>qrtz_fired_triggers</td>
<td>存储触发的Tirgger</td>
</tr>
<tr>
<td>qrtz_job_details</td>
<td>存储JobDetail</td>
</tr>
<tr>
<td>qrtz_locks</td>
<td>存储程序中非悲观锁的信息</td>
</tr>
<tr>
<td>qrtz_paused_trigger_grps</td>
<td>存储已暂停的Trigger组信息</td>
</tr>
<tr>
<td>qrtz_scheduler_state</td>
<td>存储集群中note实例信息，quartz会定时读取该表的信息判断集群中 每个实例的当前状态</td>
</tr>
<tr>
<td>qrtz_simple_triggers</td>
<td>存储simpleTrigger的信息</td>
</tr>
<tr>
<td>qrtz_simprop_triggers</td>
<td>储存CalendarIntervalTrigger和DailyTimeIntervalTrigger的信息</td>
</tr>
<tr>
<td>qrtz_triggers</td>
<td>存储已配置的trigger信息</td>
</tr>
</tbody></table>
<h3 id="六、其他"><a href="#六、其他" class="headerlink" title="六、其他"></a>六、其他</h3><p>后续再补充</p>
<br/>



<br/>

<p><strong>相关文章</strong></p>
<p><a href="a516f8e8.html">定时任务之Java定时API</a><br><a href="5a5ab620.html">定时任务之Spring Task</a><br><a href="6ddb3c14.html">定时任务之quartz</a></p>
<br/>


<p>本文整理参考以下前辈链接，放个链接，以示感谢：</p>
<ul>
<li>参考文章1：<a href="https://blog.csdn.net/chengqiuming/java/article/details/84144534" target="_blank" rel="noopener">https://blog.csdn.net/chengqiuming/java/article/details/84144534</a></li>
<li>参考文章2：<a href="https://www.cnblogs.com/kyleinjava/p/10432168.html" target="_blank" rel="noopener">https://www.cnblogs.com/kyleinjava/p/10432168.html</a></li>
<li>参考文章3：<a href="http://www.quartz-scheduler.org/documentation/quartz-2.3.0/" target="_blank" rel="noopener">http://www.quartz-scheduler.org/documentation/quartz-2.3.0/</a></li>
<li>参考文章4：<a href="https://www.w3cschool.cn/quartz_doc/" target="_blank" rel="noopener">https://www.w3cschool.cn/quartz_doc/</a></li>
</ul>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>定时任务</category>
      </categories>
      <tags>
        <tag>Quartz</tag>
      </tags>
  </entry>
  <entry>
    <title>定时任务之Java定时API</title>
    <url>/posts/a516f8e8.html</url>
    <content><![CDATA[<h2 id="定时任务之Java定时任务API"><a href="#定时任务之Java定时任务API" class="headerlink" title="定时任务之Java定时任务API"></a>定时任务之Java定时任务API</h2><blockquote>
<p>本来老早就准备整理的，后面先去整理Spring Task 和 Quartz 的，然后又去搞其他的了。我也有点犹豫要不要整理这个，毕竟现在基本不怎用这个API了。为了完整性，还是整理一下吧，作为知识面了解一下。而且以前在项目中还使用了。</p>
</blockquote>
<h2 id="一、定时任务简述"><a href="#一、定时任务简述" class="headerlink" title="一、定时任务简述"></a>一、定时任务简述</h2><p>关于调度的实现方式主要有三种：</p>
<p>（1）Java自带的Api有个Timer类和TimerTask类。</p>
<p>（2）Spring自带的Spring Task调度工具。</p>
<p>（3）Quartz（读阔子）开源框架，功能强大，使用起来稍显复杂。</p>
<p>本文主要介绍第二种。</p>
<p>其他两种请参考：《Java定时任务》《Quartz使用》</p>
<p>在开始之前需要说明是一个定时任务的几个组件：</p>
<p>（A）执行的任务类；</p>
<p>（B）触发任务的触发器；</p>
<p>（C）管理任务的任务调度器。</p>
<p>本次整理的是Java自带的任务调度API。</p>
<p>Java中实现定时任务的API，比较古老了，jdk3之后才有的。现在用的非常非常少了。通过<code>Timer</code>类实现任务调度，任务执行则可以继承<code>TimerTask</code>接口或者直接使用匿名内部类。</p>
<p>基本组件</p>
<p>（1）任务调度管理的<code>Timer</code>类，</p>
<p>（2）任务执行接口<code>TimerTask</code>接口。</p>
<p>看到这里发现，不是三个常用的吗？怎么没有触发调度，是的，没有专门的触发调度。都是<code>schedule</code>里面实现的。</p>
<h2 id="二、常见API"><a href="#二、常见API" class="headerlink" title="二、常见API"></a>二、常见API</h2><p><code>Timer</code>调度类的：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>void schedule(TimerTask task , long delay)</code></td>
<td>调度一个task，经过delay(ms)后开始进行调度，仅仅调度一次。</td>
</tr>
<tr>
<td><code>void schedule(TimerTask task, Date firstTime)</code></td>
<td>在指定的时间点<code>firstTime</code>上调度一次。</td>
</tr>
<tr>
<td><code>void schedule(TimerTask task, long delay, long period)</code></td>
<td>调度一个task，在delay（ms）后开始调度，每次调度完后，最少等待period（ms）后才开始调度。</td>
</tr>
<tr>
<td><code>void schedule(TimerTask task, Date firstTime, long period)</code></td>
<td>调度一个task，在firstTime时第一次调度，调度完后，最少等待period（ms）后才开始调度。</td>
</tr>
<tr>
<td><code>void scheduleAtFixedRate(TimerTask task, long delay, long period)</code></td>
<td>调度一个task，在delay(ms)后开始调度，然后每经过period(ms)再次调度 。</td>
</tr>
<tr>
<td><code>void scheduleAtFixedRate(TimerTask task, Date firstTime, long period)</code></td>
<td>调度一个task，在<code>firstTime</code>时第一次调度，调度完后，最少等待period（ms）后才开始调度。</td>
</tr>
</tbody></table>
<p><strong>主要参数</strong></p>
<p><code>task</code>：这是被调度的任务。</p>
<p><code>firstTime</code>：这是首次在该任务将被执行。</p>
<p><code>delay</code>：这是以毫秒为单位的延迟之前的任务执行。</p>
<p><code>period</code>：这是在连续执行任务之间的毫秒的时间。 </p>
<p>关于schedule 和 scheduleAtFixedRate 区别。</p>
<p>（1）schedule方法 和 scheduleAtFixedRate 方法，大部分情况都基本一样的。</p>
<p>（2） 如果指定的计划执行时间scheduledExecutionTime&lt;= systemCurrentTime，则task会被立即执行。scheduledExecutionTime不会因为某一个task的过度执行而改变。 </p>
<p>（2）schedule注重保持间隔时间的稳定， 在计算下一次执行的时间的时候，是通过当前时间（在任务执行前得到） + 时间片，而<strong>scheduleAtFixedRate</strong>方法是通过当前需要执行的时间（也就是计算出现在应该执行的时间）+ 时间片。前者是运行的实际时间，而后者是理论时间点。</p>
<p>例如：schedule时间片是5s，那么理论上会在5、10、15、20这些时间片被调度，但是如果由于某些原因导致第8s才被第一次调度，那么schedule方法计算出来的下一次时间应该是第13s而不是第10s，这样有可能下次就越到20s后而被少调度一次或多次。  <strong>scheduleAtFixedRate</strong>方法就是每次理论计算出下一次需要调度的时间用以排序，若第8s被调度，那么计算出应该是第10s，所以它距离当前时间是2s，那么再调度队列排序中，会被优先调度，那么就<strong>尽量减少漏掉调度</strong>的情况。 </p>
<h2 id="三、运行原理"><a href="#三、运行原理" class="headerlink" title="三、运行原理"></a>三、运行原理</h2><p><code>Timer</code>调度器源码中，主要是一个任务队列，和一个<code>TimerThread</code>线程，<code>TimerThread</code>继承了<code>Thread</code> 类，用来调度我们需要执行的任务。</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
     * The timer task queue.  This data structure is shared with the timer
     * thread.  The timer produces tasks, via its various schedule calls,
     * and the timer thread consumes, executing timer tasks as appropriate,
     * and removing them from the queue when they're obsolete.
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> TaskQueue queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TaskQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * The timer thread.
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> TimerThread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TimerThread</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * This object causes the timer's task execution thread to exit
     * gracefully when there are no live references to the Timer object and no
     * tasks in the timer queue.  It is used in preference to a finalizer on
     * Timer as such a finalizer would be susceptible to a subclass's
     * finalizer forgetting to call it.
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> Object threadReaper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>
            <span class="token keyword">synchronized</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                thread<span class="token punctuation">.</span>newTasksMayBeScheduled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                queue<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// In case queue is empty.</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<p><code>hreadReaper</code>，它是Object类型，只是重写了<code>finalize</code>方法而已，是为了垃圾回收的时候，将相应的信息回收掉，做GC的回补，也就是当<code>timer</code>线程由于某种原因死掉了，而未被<code>cancel</code>，里面的队列中的信息需要清空掉， </p>
<p><code>Timer</code>调度的核心方法是：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">sched</span><span class="token punctuation">(</span>TimerTask task<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">,</span> <span class="token keyword">long</span> period<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal execution time."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// Constrain value of period sufficiently to prevent numeric</span>
        <span class="token comment" spellcheck="true">// overflow while still being effectively infinitely large.</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>period<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token punctuation">(</span>Long<span class="token punctuation">.</span>MAX_VALUE <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            period <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>

        <span class="token keyword">synchronized</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>thread<span class="token punctuation">.</span>newTasksMayBeScheduled<span class="token punctuation">)</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Timer already cancelled."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">synchronized</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>task<span class="token punctuation">.</span>state <span class="token operator">!=</span> TimerTask<span class="token punctuation">.</span>VIRGIN<span class="token punctuation">)</span>
                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>
                        <span class="token string">"Task already scheduled or cancelled"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                task<span class="token punctuation">.</span>nextExecutionTime <span class="token operator">=</span> time<span class="token punctuation">;</span>
                task<span class="token punctuation">.</span>period <span class="token operator">=</span> period<span class="token punctuation">;</span>
                task<span class="token punctuation">.</span>state <span class="token operator">=</span> TimerTask<span class="token punctuation">.</span>SCHEDULED<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">getMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> task<span class="token punctuation">)</span>
                queue<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span></code></pre>
<p><code>queue</code> 在做这个操作的时候，发生了同步，所以在<code>timer</code>级别，这个是线程安全的，最后将<code>task</code>相关的参数赋值，主要包含<code>nextExecutionTime</code>（下一次执行时间），<code>period</code>（时间片），<code>state</code>（状态），然后将它放入<code>queue</code>队列中，做一次<code>notify</code>操作 。</p>
<p><code>TaskQueue</code>任务队列中，则是有一个<code>TimerTask</code>数组用来存放我需要调度执行的任务，及一个 size 。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> TimerTask<span class="token punctuation">[</span><span class="token punctuation">]</span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TimerTask</span><span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></code></pre>
<p>一个<code>Timer</code>只要内部的task个数不超过128是不会造成扩容的；内部  提供了add(TimerTask tt)、size()、getMin()、get(int)、removeMin()、quickRemove(int i)、 rescheduleMin(long  newTime)、isEmpty()、clear()、fixUp()、fixDown()、heapify()； </p>
<h2 id="四、实际使用"><a href="#四、实际使用" class="headerlink" title="四、实际使用"></a>四、实际使用</h2><p>定义一个任务类：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> xiaocai<span class="token punctuation">.</span>cn<span class="token punctuation">.</span>timetask<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>LocalDateTime<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Timer<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>TimerTask<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoTask</span> <span class="token keyword">extends</span> <span class="token class-name">TimerTask</span><span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token keyword">try</span><span class="token punctuation">{</span>
             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" execute time : "</span> <span class="token operator">+</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">6000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>
         <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        Timer timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Date startDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        timer<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DemoTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> startDate <span class="token punctuation">,</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 立即执行，每5s重复一次</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p><code>Thread.sleep(3000);</code> 时执行结果： </p>
<pre class=" language-txt"><code class="language-txt">execute end time - 2020-07-18T20:00:39.836
execute end time - 2020-07-18T20:00:44.817
execute end time - 2020-07-18T20:00:49.817
execute end time - 2020-07-18T20:00:54.816
execute end time - 2020-07-18T20:00:59.817</code></pre>
<p><code>Thread.sleep(10000);</code> 时执行结果：</p>
<pre class=" language-txt"><code class="language-txt"> execute time : 2020-07-18T18:18:47.416
 execute time : 2020-07-18T18:18:57.417
 execute time : 2020-07-18T18:19:07.418
 execute time : 2020-07-18T18:19:17.419
 execute time : 2020-07-18T18:19:27.419
 execute time : 2020-07-18T18:19:37.420</code></pre>
<p>方法模拟的执行时间是3秒， 设置的间隔参数是5秒。调度是每5秒执行一次，按照自己设定的间隔来执行。</p>
<p>方法模拟的执行时间是10秒， 可是我们设置的间隔是5秒。调度是每10秒执行一次。在第一次执行之后，后续间隔仍然是10s，没有在18分52秒、19分02秒时执行。 可见<code>schedule</code>注重调度周期稳定。</p>
<p>也可以配合日历使用</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    Timer timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    DemoTask demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DemoTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    Date startDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 立即执行，每5s重复一次</span>
    timer<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span>demo<span class="token punctuation">,</span> startDate <span class="token punctuation">,</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 配合日历</span>
    Calendar cal <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>MINUTE<span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    timer<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span>demo<span class="token punctuation">,</span> cal<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>再试试<code>scheduleAtFixedRate</code>方法，修改一下<code>main</code>方法:</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> xiaocai<span class="token punctuation">.</span>cn<span class="token punctuation">.</span>timetask<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>LocalDateTime<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Timer<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>TimerTask<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoTask</span> <span class="token keyword">extends</span> <span class="token class-name">TimerTask</span><span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token keyword">try</span><span class="token punctuation">{</span>     
             Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">6000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>
         <span class="token punctuation">}</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" execute time : "</span> <span class="token operator">+</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ParseException <span class="token punctuation">{</span>
        <span class="token keyword">final</span> SimpleDateFormat dateFormatter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        Date startDate <span class="token operator">=</span> dateFormatter<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"2020-07-18 18:30:00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  

        Timer timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        timer<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DemoTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>startDate <span class="token punctuation">,</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 <span class="token punctuation">}</span></code></pre>
<p><code>Thread.sleep(3000);</code> 时执行结果： </p>
<pre class=" language-txt"><code class="language-txt"> execute end time - 2020-07-18T20:06:37.458
 execute end time - 2020-07-18T20:06:40.458
 execute end time - 2020-07-18T20:06:43.459
 execute end time - 2020-07-18T20:06:46.459
 execute end time - 2020-07-18T20:06:49.460
 execute end time - 2020-07-18T20:06:52.460</code></pre>
<p><code>Thread.sleep(10000);</code> 时执行结果： </p>
<pre class=" language-txt"><code class="language-txt"> execute end time - 2020-07-18T20:09:14.068
 execute end time - 2020-07-18T20:09:24.069
 execute end time - 2020-07-18T20:09:34.069
 execute end time - 2020-07-18T20:09:44.070
 execute end time - 2020-07-18T20:09:54.071
 execute end time - 2020-07-18T20:10:04.071</code></pre>
<p>上面的运行结果可以看到，当模拟执行时间10s大于设置间隔时间5s时，按照实际执行间隔立即执行。当模拟执行时间3s小于设置间隔时间5s时，没有等到5s就执行了，没有按照自己设定的间隔执行。难道是我把计划执行时间设置成历史时间的原因？将</p>
<pre class=" language-java"><code class="language-java">Date startDate <span class="token operator">=</span> dateFormatter<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"2020-07-18 18:30:00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>修改成未来时间</p>
<pre class=" language-java"><code class="language-java">Date startDate <span class="token operator">=</span> dateFormatter<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"2020-07-18 20:16:00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>执行结果如下：</p>
<pre class=" language-txt"><code class="language-txt"> execute end time - 2020-07-18T20:16:03.052
 execute end time - 2020-07-18T20:16:08
 execute end time - 2020-07-18T20:16:13.001
 execute end time - 2020-07-18T20:16:18.001
 execute end time - 2020-07-18T20:16:23.001
 execute end time - 2020-07-18T20:16:28
 execute end time - 2020-07-18T20:16:33.001
 execute end time - 2020-07-18T20:16:38.001</code></pre>
<p>果然是，计划执行时间是历史时间时，设定的间隔会失效。计划执行时间是未来时间时，间隔生效了。</p>
<br/>

<p><strong>相关文章</strong></p>
<p><a href="a516f8e8.html">定时任务之Java定时API</a><br><a href="5a5ab620.html">定时任务之Spring Task</a><br><a href="6ddb3c14.html">定时任务之quartz</a></p>
<br/>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>定时任务</category>
      </categories>
      <tags>
        <tag>Java Timer</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud Stream</title>
    <url>/posts/7f3b07b1.html</url>
    <content><![CDATA[<h2 id="SpringCloud-Stream-消息驱动"><a href="#SpringCloud-Stream-消息驱动" class="headerlink" title="SpringCloud Stream 消息驱动"></a>SpringCloud Stream 消息驱动</h2><p>相关链接：</p>
<ul>
<li><a href="bad02d94.html">SpringCloud 微服务学习</a></li>
<li><a href="eeda118.html">RESTful 接口设计规范</a></li>
<li><a href="648d6b26.html">SpringCloud Eureka 服务注册与发现</a></li>
<li><a href="3010739f.html">SpringCloud Consul 服务注册与发现</a></li>
<li><a href="7ecbba09.html">SpringCloud Ribbon 客户端负载均衡与服务调用</a></li>
<li><a href="b27245de.html">SpringCloud OpenFeign 服务接口调用</a></li>
<li><a href="464bb413.html">SpringCloud Hystrix熔断器</a></li>
<li><a href="bc16d093.html">SpringCloud Gateway 服务网关</a></li>
<li><a href="fbbe72e1.html">SpringCloud Zuul 服务网关</a></li>
<li><a href="5b5896d1.html">Spring Cloud Config 分布式配置中心</a></li>
<li><a href="9e02a3e8.html">Spring Cloud Bus 消息总线</a></li>
<li><a href="7f3b07b1.html">SpringCloud Stream 消息驱动</a></li>
<li><a href="b99c053f.html">SpringCloud Sleuth 分布式请求链路追踪</a></li>
<li><a href="461589aa.html">SpringCloud Alibaba</a></li>
<li><a href="a46e46f8.html">SpringCloud Alibaba Nacos服务注册和配置中心</a></li>
<li><a href="5122a811.html">SpringCloud Alibaba Sentinel 实现熔断与限流</a></li>
<li><a href="fb7c74c4.html">SpringCloud Alibaba Seata 分布式事务</a></li>
</ul>
<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p><strong>Spring Cloud Stream</strong>  是一个构建消息驱动微服务应用的框架。它基于  <strong>Spring Boot</strong>  构建独立的、生产级的  <strong>Spring</strong>  应用，并使用  <strong>Spring Integration</strong>  为消息代理提供链接。 </p>
<p>通俗理解是屏蔽底层消息中间件的插件，降低切换版本，统一消息的编程模型。</p>
<p>Spring Cloud Stream 官网：<a href="https://spring.io/projects/spring-cloud-stream#overview" target="_blank" rel="noopener">https://spring.io/projects/spring-cloud-stream#overview</a></p>
<p>官放文档：<a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-stream/3.0.1.RELEASE/reference/html/" target="_blank" rel="noopener">https://cloud.spring.io/spring-cloud-static/spring-cloud-stream/3.0.1.RELEASE/reference/html/</a></p>
<p><strong>Spring Cloud Stream中文指导手册</strong>：<a href="https://m.wang1314.com/doc/webapp/topic/20971999.html" target="_blank" rel="noopener">https://m.wang1314.com/doc/webapp/topic/20971999.html</a></p>
<h2 id="二、Stream"><a href="#二、Stream" class="headerlink" title="二、Stream"></a>二、Stream</h2><h3 id="1、设计思想"><a href="#1、设计思想" class="headerlink" title="1、设计思想"></a>1、设计思想</h3><p>标准MQ模型</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/stream-mq-general.jpg" alt="标准MQ模型"></p>
<blockquote>
<p>MQ（Message Queue）消息队列，是基础数据结构中“先进先出”的一种数据结构。一般用来解决应用解耦，异步消息，流量削锋等问题，实现高性能，高可用，可伸缩和最终一致性架构。 </p>
</blockquote>
<p><strong>MQ 作用：</strong></p>
<blockquote>
<p><strong>解耦</strong>：一个业务需要多个模块共同实现，或者一条消息有多个系统需要对应处理，只需要主业务完成以后，发送一条MQ，其余模块消费MQ消息，即可实现业务，降低模块之间的耦合。</p>
<p><strong>异步</strong>：主业务执行结束后从属业务通过MQ，异步执行，减低业务的响应时间，提高用户体验。</p>
<p><strong>削峰</strong>：高并发情况下，业务异步处理，提供高峰期业务处理能力，避免系统瘫痪。</p>
</blockquote>
<p><strong>MQ的缺点</strong>  </p>
<blockquote>
<p>1、系统可用性降低。依赖服务也多，服务越容易挂掉。需要考虑MQ瘫痪的情况</p>
<p>2、系统复杂性提高。需要考虑消息丢失、消息重复消费、消息传递的顺序性</p>
<p>3、业务一致性。主业务和从属业务一致性的处理</p>
</blockquote>
<p>MQ 是生产者和消费者之间靠消息媒介传递信息内容的中间件。</p>
<p>MQ 的消息必须走特定的消息通道MessageChannel。</p>
<p>MQ 里的消息通道MessageChannel的子接口SubscribableChannel，由MessageHandler消息处理器订阅，完成消息的收发处理。</p>
<p>常见的MQ 中间件：</p>
<ul>
<li><strong>RabbitMQ</strong>   <a href="http://rabbitmq.mr-ping.com/" target="_blank" rel="noopener">http://rabbitmq.mr-ping.com/</a> </li>
<li><strong>Kafka</strong> </li>
<li><strong>RocketMQ</strong> </li>
<li><strong>ActiveMQ</strong> </li>
</ul>
<p>为什么用Spring  Cloud Stream </p>
<p>如果同时使用了 RabbitMQ 和 Kafka，由于两个消息中间件的架构不同，像Rabbit 有exchange，kafka有Topic和Partitions分区，这些中间件的差异会导致，项目中如果要进行消息列队迁移是很麻烦了，因为和系统耦合紧密这时Spring  Cloud Stream 的出现就提供了一种解耦合的方式。</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/stream-destination.png" alt="Stream 设计目的"></p>
<h3 id="2、Stream-原理"><a href="#2、Stream-原理" class="headerlink" title="2、Stream 原理"></a>2、Stream 原理</h3><p>在没有绑定器的概念的时，springboot 应用要直接与消息中间件进行信息交互时，由于各个消息中间件构建的初衷不同，在实现细节上会有较大差异，使用时会有不便。</p>
<p><strong>Spring  Cloud Stream</strong> <strong>通过定义绑定器Binder作为中间层，完美地实现了应用程序与消息中间件细节之间的隔离。</strong>通过向应用程序暴露统一的channel 通道，使得应用程序不需要再考虑各种不同消息中间件的实现。</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/stream-work.jpg" alt="Stream 模型"></p>
<p>Spring  Cloud Stream 对消息中间件的进一步封装，做到代码层面对中间件的无感知，甚至于动态切换中间件（RqbbitMQ 切换为 Kafka），使微服务开发高度解耦，每个服务可以更好的关注自己的业务实现。</p>
<p>Stream中的消息通信方式遵循了<strong>发布-订阅模式</strong>。使用Topic 主题进行广播，类似RabbitMQ里的exchange，Kafka中的Topic。</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/stream-work-02.png" alt="Stream 模型2"></p>
<p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/stream-work-04.png" alt="Stream 流程示意图"></p>
<p>找了一张实际使用时的流程示意图：</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/springcloud/stream-work-03.jpg" alt="Stream 流程示意图"></p>
<h3 id="3、Stream-组件"><a href="#3、Stream-组件" class="headerlink" title="3、Stream 组件"></a>3、Stream 组件</h3><p>从图可以看到Stream 几个重要组件：</p>
<ul>
<li><p>Binder 绑定器组件，用于连接中间件，屏蔽差异；</p>
</li>
<li><p>Channel 消息通道，是队列Queue的一种抽象，在消息通讯系统中就是实现存储和转发的媒介，通过对Channel对队列进行配置。</p>
</li>
<li><p>Source 消息生产口，其实就是消息输入端Output，stream组件自身；</p>
</li>
<li><p>Sink 消息消费口，其实就是消息输出端Input，stream组件自身；</p>
</li>
</ul>
<h3 id="4、编码API和常用注解"><a href="#4、编码API和常用注解" class="headerlink" title="4、编码API和常用注解"></a>4、编码API和常用注解</h3><table>
<thead>
<tr>
<th>组成</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Middleware</td>
<td>中间件，目前只支持RabbitMQ和Kafka</td>
</tr>
<tr>
<td>Binder</td>
<td>Binder是应用于消息中间件之间的封装，目前实行了Kafka和RabbitMQ的Binder，通过Binder可以很方便的连接中间件，可以动态的改变消息类型（对应于Kafka的topic，RabbitMQ的exchange），这些都可以通过配置文件来实现</td>
</tr>
<tr>
<td><code>@Input</code></td>
<td>注解标识输入通道，通过该输入通道接收到的消息进入应用程序</td>
</tr>
<tr>
<td><code>@Output</code></td>
<td>注解标识输出通道，发布的消息将通过该通道离开应用程序</td>
</tr>
<tr>
<td><code>@StreamListener</code></td>
<td>监听队列，用于消费者的队列的消息接收</td>
</tr>
<tr>
<td><code>@EnableBinding</code></td>
<td>指信道channel和exchange绑定在一起</td>
</tr>
</tbody></table>
<h3 id="5、Stream-应用场景"><a href="#5、Stream-应用场景" class="headerlink" title="5、Stream 应用场景"></a>5、Stream 应用场景</h3><p>1、异步处理</p>
<p>比如用户在电商网站下单，下单完成后会给用户推送短信或邮件，发短信和邮件的过程就可以异步完成。因为下单付款是核心业务，发邮件和短信并不属于核心功能，并且可能耗时较长，所以针对这种业务场景可以选择先放到消息队列中，有其他服务来异步处理。</p>
<p>2、应用解耦：</p>
<p>假设公司有几个不同的系统，各系统在某些业务有联动关系，比如 A 系统完成了某些操作，需要触发 B 系统及 C 系统。如果 A  系统完成操作，主动调用 B 系统的接口或 C 系统的接口，可以完成功能，但是各个系统之间就产生了耦合。用消息中间件就可以完成解耦，当 A  系统完成操作将数据放进消息队列，B 和 C 系统去订阅消息就可以了。这样各系统只要约定好消息的格式就好了。</p>
<p>3、流量削峰</p>
<p>比如秒杀活动，一下子进来好多请求，有的服务可能承受不住瞬时高并发而崩溃，所以针对这种瞬时高并发的场景，在中间加一层消息队列，把请求先入队列，然后再把队列中的请求平滑的推送给服务，或者让服务去队列拉取。</p>
<p>4、日志处理</p>
<p>kafka 最开始就是专门为了处理日志产生的。</p>
<p>当碰到上面的几种情况的时候，就要考虑用消息队列了。如果你碰巧使用的是 RabbitMQ 或者 kafka ，而且同样也是在使用 Spring Cloud ，那可以考虑下用 Spring Cloud Stream。</p>
<h2 id="三、使用案例"><a href="#三、使用案例" class="headerlink" title="三、使用案例"></a>三、使用案例</h2><h3 id="1、RabbitMQ-安装"><a href="#1、RabbitMQ-安装" class="headerlink" title="1、RabbitMQ 安装"></a>1、RabbitMQ 安装</h3><p>RabbitMQ 的环境依赖 Erlang：</p>
<p>下载地址：<a href="http://erlang.org/download/" target="_blank" rel="noopener">http://erlang.org/download/</a></p>
<p>RabbitMQ 下载地址：<a href="https://dl.bintray.com/rabbitmq/all/rabbitmq-server/" target="_blank" rel="noopener">https://dl.bintray.com/rabbitmq/all/rabbitmq-server/</a></p>
<p>安装完成后进入RabbitMQ安装目录下的sbin目录，打开CMD窗口，运行</p>
<pre class=" language-bash"><code class="language-bash">rabbitmq-plugins <span class="token function">enable</span> rabbitmq_management</code></pre>
<p>该命令是为RabbitMQ 添加可视化插件。</p>
<p>启动RabbitMQ，可以在浏览器访问：<a href="http://172.0.0.1:15672/" target="_blank" rel="noopener">http://172.0.0.1:15672/</a></p>
<p>登录账户和密码：guest/guest</p>
<h3 id="2、三个微服务"><a href="#2、三个微服务" class="headerlink" title="2、三个微服务"></a>2、三个微服务</h3><p>作为生产者发送消息服务：stream-rabbitmq-provider-8001</p>
<p>作为消费者接收消息服务：stream-rabbitmq-consumer-8002</p>
<p>作为消费者接收消息服务：stream-rabbitmq-provider-8003</p>
<h4 id="2-1-消息生产-发送端"><a href="#2-1-消息生产-发送端" class="headerlink" title="2.1 消息生产/发送端"></a>2.1 消息生产/发送端</h4><h5 id="（1）引入pom依赖"><a href="#（1）引入pom依赖" class="headerlink" title="（1）引入pom依赖"></a>（1）引入pom依赖</h5><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>
         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cloud2020<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.xiaocai.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>stream-rabbitmq-provider8001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-stream-rabbit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

        <span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-eureka-server --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

        <span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>


        <span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-devtools --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

        <span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

        <span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-test --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre>
<h5 id="（2）YML配置"><a href="#（2）YML配置" class="headerlink" title="（2）YML配置"></a>（2）YML配置</h5><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8001</span>

<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> stream<span class="token punctuation">-</span>provider<span class="token punctuation">-</span><span class="token number">8001</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">stream</span><span class="token punctuation">:</span>
      <span class="token key atrule">binders</span><span class="token punctuation">:</span>         <span class="token comment" spellcheck="true"># 在此处配置要绑定的rabbitmq的服务信息；</span>
        <span class="token key atrule">defaultRabbit</span><span class="token punctuation">:</span>         <span class="token comment" spellcheck="true"># 表示定义的名称，用于于binding整合</span>
          <span class="token key atrule">type</span><span class="token punctuation">:</span> rabbit         <span class="token comment" spellcheck="true"># 消息组件类型</span>
          <span class="token key atrule">environment</span><span class="token punctuation">:</span>         <span class="token comment" spellcheck="true"># 设置rabbitmq的相关的环境配置</span>
            <span class="token key atrule">spring</span><span class="token punctuation">:</span>
              <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>
                <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost
                <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>
                <span class="token key atrule">username</span><span class="token punctuation">:</span> guest
                <span class="token key atrule">password</span><span class="token punctuation">:</span> guest
      <span class="token key atrule">bindings</span><span class="token punctuation">:</span>         <span class="token comment" spellcheck="true"># 服务的整合处理</span>
        <span class="token key atrule">output</span><span class="token punctuation">:</span>         <span class="token comment" spellcheck="true"># 这个名字是一个通道的名称</span>
          <span class="token key atrule">destination</span><span class="token punctuation">:</span> studyExchange     <span class="token comment" spellcheck="true"># 表示要使用的Exchange名称定义</span>
          <span class="token key atrule">content-type</span><span class="token punctuation">:</span> application/json <span class="token comment" spellcheck="true"># 设置消息类型，本次为json，文本则设置“text/plain”</span>
          <span class="token key atrule">binder</span><span class="token punctuation">:</span> defaultRabbit  <span class="token comment" spellcheck="true"># 设置要绑定的消息服务的具体设置</span>

<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 客户端进行Eureka注册的配置</span>
    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>
      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>7001/eureka
  <span class="token key atrule">instance</span><span class="token punctuation">:</span>
    <span class="token key atrule">lease-renewal-interval-in-seconds</span><span class="token punctuation">:</span> <span class="token number">2 </span><span class="token comment" spellcheck="true"># 设置心跳的时间间隔（默认是30秒）</span>
    <span class="token key atrule">lease-expiration-duration-in-seconds</span><span class="token punctuation">:</span> <span class="token number">5 </span><span class="token comment" spellcheck="true"># 如果现在超过了5秒的间隔（默认是90秒）</span>
    <span class="token key atrule">instance-id</span><span class="token punctuation">:</span> send<span class="token punctuation">-</span>8001.com  <span class="token comment" spellcheck="true"># 在信息列表时显示主机名称</span>
    <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true     </span><span class="token comment" spellcheck="true"># 访问的路径变为IP地址</span>
</code></pre>
<h5 id="（3）主启动类"><a href="#（3）主启动类" class="headerlink" title="（3）主启动类"></a>（3）主启动类</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableEurekaClient</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StreamMQApp_8001</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>StreamMQApp_8001<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h5 id="（4）发送消息功能"><a href="#（4）发送消息功能" class="headerlink" title="（4）发送消息功能"></a>（4）发送消息功能</h5><p>消息发送接口：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>service<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IMessageProvider</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> String <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>消息发送实现类：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>service<span class="token punctuation">.</span>IMessageProvider<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>EnableBinding<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>integration<span class="token punctuation">.</span>support<span class="token punctuation">.</span>MessageBuilderFactory<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>messaging<span class="token punctuation">.</span>MessageChannel<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>integration<span class="token punctuation">.</span>support<span class="token punctuation">.</span>MessageBuilder<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Resource<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>messaging<span class="token punctuation">.</span>Source<span class="token punctuation">;</span>

<span class="token keyword">import</span> javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Resource<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>UUID<span class="token punctuation">;</span>


<span class="token annotation punctuation">@EnableBinding</span><span class="token punctuation">(</span>Source<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//定义消息的推送管道</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageProviderImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IMessageProvider</span>
<span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> MessageChannel output<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 消息发送管道</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> String <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        String serial <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        output<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>MessageBuilder<span class="token punctuation">.</span><span class="token function">withPayload</span><span class="token punctuation">(</span>serial<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 生成 UUID 序列号: "</span><span class="token operator">+</span>serial<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>controller 类</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>controller<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>service<span class="token punctuation">.</span>IMessageProvider<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span>

<span class="token keyword">import</span> javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Resource<span class="token punctuation">;</span>


<span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SendMessageController</span>
<span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> IMessageProvider messageProvider<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/sendMessage"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> messageProvider<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span></code></pre>
<h5 id="（5）测试"><a href="#（5）测试" class="headerlink" title="（5）测试"></a>（5）测试</h5><p>启动Eureka 服务注册中心，</p>
<p>启动RabbitMQ 服务，<code>rabbitmq-plugins enable rabbitmq_management</code> 访问地址：<a href="http://localhost:15672/" target="_blank" rel="noopener">http://localhost:15672/</a></p>
<p>启动<code>stream-rabbitmq-provider-8001</code>，访问：<a href="http://localhost:8001/sendMessage" target="_blank" rel="noopener">http://localhost:8001/sendMessage</a></p>
<h4 id="2-2-消息消费-接收端"><a href="#2-2-消息消费-接收端" class="headerlink" title="2.2  消息消费/接收端"></a>2.2  消息消费/接收端</h4><h5 id="（1）引入pom依赖-1"><a href="#（1）引入pom依赖-1" class="headerlink" title="（1）引入pom依赖"></a>（1）引入pom依赖</h5><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>
         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cloud2020<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.xiaocai.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>stream-rabbitmq-consumer-8002<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-stream-rabbit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

        <span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-eureka-server --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

        <span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

        <span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>


        <span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-devtools --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

        <span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

        <span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-test --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre>
<h5 id="（2）YML配置-1"><a href="#（2）YML配置-1" class="headerlink" title="（2）YML配置"></a>（2）YML配置</h5><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8002</span>

<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> stream<span class="token punctuation">-</span>consumer<span class="token punctuation">-</span><span class="token number">8002</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">stream</span><span class="token punctuation">:</span>
      <span class="token key atrule">binders</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 在此处配置要绑定的rabbitmq的服务信息；</span>
        <span class="token key atrule">defaultRabbit</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 表示定义的名称，用于于binding整合</span>
          <span class="token key atrule">type</span><span class="token punctuation">:</span> rabbit <span class="token comment" spellcheck="true"># 消息组件类型</span>
          <span class="token key atrule">environment</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 设置rabbitmq的相关的环境配置</span>
            <span class="token key atrule">spring</span><span class="token punctuation">:</span>
              <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>
                <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost
                <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>
                <span class="token key atrule">username</span><span class="token punctuation">:</span> guest
                <span class="token key atrule">password</span><span class="token punctuation">:</span> guest
      <span class="token key atrule">bindings</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 服务的整合处理</span>
        <span class="token key atrule">input</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 这个名字是一个通道的名称</span>
          <span class="token key atrule">destination</span><span class="token punctuation">:</span> studyExchange <span class="token comment" spellcheck="true"># 表示要使用的Exchange名称定义</span>
          <span class="token key atrule">content-type</span><span class="token punctuation">:</span> application/json <span class="token comment" spellcheck="true"># 设置消息类型，本次为json，文本则设置“text/plain”</span>
          <span class="token key atrule">binder</span><span class="token punctuation">:</span> defaultRabbit  <span class="token comment" spellcheck="true"># 设置要绑定的消息服务的具体设置</span>

<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 客户端进行Eureka注册的配置</span>
    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>
      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>7001/eureka
  <span class="token key atrule">instance</span><span class="token punctuation">:</span>
    <span class="token key atrule">lease-renewal-interval-in-seconds</span><span class="token punctuation">:</span> <span class="token number">2 </span><span class="token comment" spellcheck="true"># 设置心跳的时间间隔（默认是30秒）</span>
    <span class="token key atrule">lease-expiration-duration-in-seconds</span><span class="token punctuation">:</span> <span class="token number">5 </span><span class="token comment" spellcheck="true"># 如果现在超过了5秒的间隔（默认是90秒）</span>
    <span class="token key atrule">instance-id</span><span class="token punctuation">:</span> receive<span class="token punctuation">-</span>8002.com  <span class="token comment" spellcheck="true"># 在信息列表时显示主机名称</span>
    <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true     </span><span class="token comment" spellcheck="true"># 访问的路径变为IP地址</span>
</code></pre>
<p>注意端口是8002。</p>
<h5 id="（3）主启动类-1"><a href="#（3）主启动类-1" class="headerlink" title="（3）主启动类"></a>（3）主启动类</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableEurekaClient</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StreamMQApp_8002</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>StreamMQApp_8002<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h5 id="（4）接收消息"><a href="#（4）接收消息" class="headerlink" title="（4）接收消息"></a>（4）接收消息</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>controller<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>StreamListener<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>messaging<span class="token punctuation">.</span>Message<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Value<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>EnableBinding<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>messaging<span class="token punctuation">.</span>Sink<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@EnableBinding</span><span class="token punctuation">(</span>Sink<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//定义消息的接收管道</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReceiveMessageListenerController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${server.port}"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> String serverPort<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@StreamListener</span><span class="token punctuation">(</span>Sink<span class="token punctuation">.</span>INPUT<span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">input</span><span class="token punctuation">(</span>Message<span class="token operator">&lt;</span>String<span class="token operator">></span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第一个消费者，接受消息："</span><span class="token operator">+</span>message<span class="token punctuation">.</span><span class="token function">getPayload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t port:"</span><span class="token operator">+</span>serverPort<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span></code></pre>
<h5 id="（5）测试接收消息"><a href="#（5）测试接收消息" class="headerlink" title="（5）测试接收消息"></a>（5）测试接收消息</h5><p>启动8001，启动8002，</p>
<p>访问测试发生消息：<a href="http://localhost:8001/sendMessage" target="_blank" rel="noopener">http://localhost:8001/sendMessage</a></p>
<p>此时如果一切顺利，8002的控制台会打印相关消费的消息。</p>
<h4 id="2-3-消息消费-接收端"><a href="#2-3-消息消费-接收端" class="headerlink" title="2.3  消息消费/接收端"></a>2.3  消息消费/接收端</h4><p>此时建第二个消费端。</p>
<h5 id="（1）引入pom依赖-2"><a href="#（1）引入pom依赖-2" class="headerlink" title="（1）引入pom依赖"></a>（1）引入pom依赖</h5><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>
         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cloud2020<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.xiaocai.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>stream-rabbitmq-consumer-8002<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-stream-rabbit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

        <span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-eureka-server --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

        <span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

        <span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>


        <span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-devtools --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

        <span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

        <span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-test --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre>
<h5 id="（2）YML配置-2"><a href="#（2）YML配置-2" class="headerlink" title="（2）YML配置"></a>（2）YML配置</h5><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8003</span>

<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> stream<span class="token punctuation">-</span>consumer<span class="token punctuation">-</span><span class="token number">8003</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">stream</span><span class="token punctuation">:</span>
      <span class="token key atrule">binders</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 在此处配置要绑定的rabbitmq的服务信息；</span>
        <span class="token key atrule">defaultRabbit</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 表示定义的名称，用于于binding整合</span>
          <span class="token key atrule">type</span><span class="token punctuation">:</span> rabbit <span class="token comment" spellcheck="true"># 消息组件类型</span>
          <span class="token key atrule">environment</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 设置rabbitmq的相关的环境配置</span>
            <span class="token key atrule">spring</span><span class="token punctuation">:</span>
              <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>
                <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost
                <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>
                <span class="token key atrule">username</span><span class="token punctuation">:</span> guest
                <span class="token key atrule">password</span><span class="token punctuation">:</span> guest
      <span class="token key atrule">bindings</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 服务的整合处理</span>
        <span class="token key atrule">input</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 这个名字是一个通道的名称</span>
          <span class="token key atrule">destination</span><span class="token punctuation">:</span> studyExchange <span class="token comment" spellcheck="true"># 表示要使用的Exchange名称定义</span>
          <span class="token key atrule">content-type</span><span class="token punctuation">:</span> application/json <span class="token comment" spellcheck="true"># 设置消息类型，本次为json，文本则设置“text/plain”</span>
          <span class="token key atrule">binder</span><span class="token punctuation">:</span> defaultRabbit  <span class="token comment" spellcheck="true"># 设置要绑定的消息服务的具体设置</span>


<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 客户端进行Eureka注册的配置</span>
    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>
      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>7001/eureka
  <span class="token key atrule">instance</span><span class="token punctuation">:</span>
    <span class="token key atrule">lease-renewal-interval-in-seconds</span><span class="token punctuation">:</span> <span class="token number">2 </span><span class="token comment" spellcheck="true"># 设置心跳的时间间隔（默认是30秒）</span>
    <span class="token key atrule">lease-expiration-duration-in-seconds</span><span class="token punctuation">:</span> <span class="token number">5 </span><span class="token comment" spellcheck="true"># 如果现在超过了5秒的间隔（默认是90秒）</span>
    <span class="token key atrule">instance-id</span><span class="token punctuation">:</span> receive<span class="token punctuation">-</span>8003.com  <span class="token comment" spellcheck="true"># 在信息列表时显示主机名称</span>
    <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true     </span><span class="token comment" spellcheck="true"># 访问的路径变为IP地址</span>
</code></pre>
<p>注意端口是8002。</p>
<h5 id="（3）主启动类-2"><a href="#（3）主启动类-2" class="headerlink" title="（3）主启动类"></a>（3）主启动类</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableEurekaClient</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StreamMQApp_8003</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>StreamMQApp_8003<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h5 id="（4）接收消息-1"><a href="#（4）接收消息-1" class="headerlink" title="（4）接收消息"></a>（4）接收消息</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaocai<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>controller<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>StreamListener<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>messaging<span class="token punctuation">.</span>Message<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Value<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>EnableBinding<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>messaging<span class="token punctuation">.</span>Sink<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@EnableBinding</span><span class="token punctuation">(</span>Sink<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//定义消息的接收管道</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReceiveMessageListenerController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${server.port}"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> String serverPort<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@StreamListener</span><span class="token punctuation">(</span>Sink<span class="token punctuation">.</span>INPUT<span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">input</span><span class="token punctuation">(</span>Message<span class="token operator">&lt;</span>String<span class="token operator">></span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第二个消费者，接受消息："</span><span class="token operator">+</span>message<span class="token punctuation">.</span><span class="token function">getPayload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t port:"</span><span class="token operator">+</span>serverPort<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span></code></pre>
<h5 id="（5）测试接收消息-1"><a href="#（5）测试接收消息-1" class="headerlink" title="（5）测试接收消息"></a>（5）测试接收消息</h5><p>启动RabbitMQ，启动Eureka 7001注册中心，启动8001，启动8002，启动8003，</p>
<p>访问测试发送消息：<a href="http://localhost:8001/sendMessage" target="_blank" rel="noopener">http://localhost:8001/sendMessage</a> （访问一次发送一次消息）</p>
<p>应该会发现8002和8003的控制台都收到了相同的消息，此时出现重复消费问题。</p>
<h4 id="2-4-分组消费"><a href="#2-4-分组消费" class="headerlink" title="2.4 分组消费"></a>2.4 分组消费</h4><p>微服务应用放置于同一个消息group中，就能够保证消息只会被其中一个应用消费一次。不同的组是可以消费相同的消息，同一个组内会发生竞争关系，只有其中一个应用可以消费，即不允许多个应用共同消费一个消息。</p>
<p>此时将8002和8003 都添加分组，并且要让两个消费端在一个相同的组内，实现<strong>分组消费</strong>。</p>
<p>同时修改8002和8003 的YML配置，添加 <code>group</code> 分组设置。</p>
<p>此为8002的部分配置：</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">·spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> stream<span class="token punctuation">-</span>consumer<span class="token punctuation">-</span><span class="token number">8002</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">stream</span><span class="token punctuation">:</span>
      <span class="token key atrule">binders</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 在此处配置要绑定的rabbitmq的服务信息；</span>
        <span class="token key atrule">defaultRabbit</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 表示定义的名称，用于于binding整合</span>
          <span class="token key atrule">type</span><span class="token punctuation">:</span> rabbit <span class="token comment" spellcheck="true"># 消息组件类型</span>
          <span class="token key atrule">environment</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 设置rabbitmq的相关的环境配置</span>
            <span class="token key atrule">spring</span><span class="token punctuation">:</span>
              <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>
                <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost
                <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>
                <span class="token key atrule">username</span><span class="token punctuation">:</span> guest
                <span class="token key atrule">password</span><span class="token punctuation">:</span> guest
      <span class="token key atrule">bindings</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 服务的整合处理</span>
        <span class="token key atrule">input</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 这个名字是一个通道的名称</span>
          <span class="token key atrule">destination</span><span class="token punctuation">:</span> studyExchange <span class="token comment" spellcheck="true"># 表示要使用的Exchange名称定义</span>
          <span class="token key atrule">content-type</span><span class="token punctuation">:</span> application/json <span class="token comment" spellcheck="true"># 设置消息类型，本次为json，文本则设置“text/plain”</span>
          <span class="token key atrule">binder</span><span class="token punctuation">:</span> defaultRabbit  <span class="token comment" spellcheck="true"># 设置要绑定的消息服务的具体设置</span>
          <span class="token key atrule">group</span><span class="token punctuation">:</span> xiaocai_01 <span class="token comment" spellcheck="true"># 将8002分组到xiaocai_01</span></code></pre>
<p>8003的配置修改同理，group的组名也是<code>xiaocai_01</code></p>
<p>注意：此时如果 group 的组名不一致，因为不同的组是可以消费相同的消息，组名不一致时是允许重复消费。</p>
<p>结论：如果要防止微服务重复消费，必须将多个消费端放在同一个group组内，组名必须完全一致。</p>
<h4 id="2-5-消息持久化"><a href="#2-5-消息持久化" class="headerlink" title="2.5 消息持久化"></a>2.5 消息持久化</h4><p>消息持久化也是通过group 来实现。</p>
<p>停止8002和8003两个消费端，将其中一个的group 属性删除，另一个属性保留，比如：8002的group 属性删除，8003的group 属性保留；</p>
<p>访问发送消息地址：<a href="http://localhost:8001/sendMessage" target="_blank" rel="noopener">http://localhost:8001/sendMessage</a> （刷新几次）</p>
<p>只启动8802，无分组属性配置，后台不会打印出消费的消息；</p>
<p>启动8803，有分组属性配置，后台打出来了MQ上的消息；在8003服务没有启动的时候发送了消息，8003服务启动之后依旧可以消费之前发送的消息。</p>
<h3 id="四、其他"><a href="#四、其他" class="headerlink" title="四、其他"></a>四、其他</h3><p>后续学习再补充。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
</search>
